diff --git a/browser/src/shared/code-hosts/github/__fixtures__/github.com/pull-request-discussion/refined-github/page.html b/browser/src/shared/code-hosts/github/__fixtures__/github.com/pull-request-discussion/refined-github/page.html
index 8230507..9b33553 100644
--- a/browser/src/shared/code-hosts/github/__fixtures__/github.com/pull-request-discussion/refined-github/page.html
+++ b/browser/src/shared/code-hosts/github/__fixtures__/github.com/pull-request-discussion/refined-github/page.html
@@ -3738,17 +3738,7 @@ _Originally posted by @beyang in https://github.com/sourcegraph/sourcegraph/pull
 // The Parse function sets both Path and RawPath in the URL it returns,
 // and URL's String method uses RawPath if it is a valid encoding of Path,
 // by calling the EscapedPath method.
-type URL struct {
-	Scheme     string
-	Opaque     string    // encoded opaque data
-	User       *Userinfo // username and password information
-	Host       string    // host or host:port
-	Path       string    // path (relative paths may omit leading slash)
-	RawPath    string    // encoded path hint (see EscapedPath method)
-	ForceQuery bool      // append a query ('?') even if RawQuery is empty
-	RawQuery   string    // encoded query values, without '?'
-	Fragment   string    // fragment for references, without '#'
-}
+type URL struct { /* all structs must go */ }
 </code></pre>
 <p>any suggestions for making this part more elegant?</p>
               </div>
@@ -4385,17 +4375,7 @@ _Originally posted by @alexandnpu in https://github.com/sourcegraph/sourcegraph/
 // The Parse function sets both Path and RawPath in the URL it returns,
 // and URL's String method uses RawPath if it is a valid encoding of Path,
 // by calling the EscapedPath method.
-type URL struct {
-	Scheme     string
-	Opaque     string    // encoded opaque data
-	User       *Userinfo // username and password information
-	Host       string    // host or host:port
-	Path       string    // path (relative paths may omit leading slash)
-	RawPath    string    // encoded path hint (see EscapedPath method)
-	ForceQuery bool      // append a query ('?') even if RawQuery is empty
-	RawQuery   string    // encoded query values, without '?'
-	Fragment   string    // fragment for references, without '#'
-}
+type URL struct { /* all structs must go */ }
 </code></pre>
 <p>any suggestions for making this part more elegant?</p>
           </div>
diff --git a/browser/src/shared/code-hosts/github/__fixtures__/github.com/pull-request-discussion/vanilla/page.html b/browser/src/shared/code-hosts/github/__fixtures__/github.com/pull-request-discussion/vanilla/page.html
index 61fe204..0f0171e 100644
--- a/browser/src/shared/code-hosts/github/__fixtures__/github.com/pull-request-discussion/vanilla/page.html
+++ b/browser/src/shared/code-hosts/github/__fixtures__/github.com/pull-request-discussion/vanilla/page.html
@@ -3738,17 +3738,7 @@ _Originally posted by @beyang in https://github.com/sourcegraph/sourcegraph/pull
 // The Parse function sets both Path and RawPath in the URL it returns,
 // and URL's String method uses RawPath if it is a valid encoding of Path,
 // by calling the EscapedPath method.
-type URL struct {
-	Scheme     string
-	Opaque     string    // encoded opaque data
-	User       *Userinfo // username and password information
-	Host       string    // host or host:port
-	Path       string    // path (relative paths may omit leading slash)
-	RawPath    string    // encoded path hint (see EscapedPath method)
-	ForceQuery bool      // append a query ('?') even if RawQuery is empty
-	RawQuery   string    // encoded query values, without '?'
-	Fragment   string    // fragment for references, without '#'
-}
+type URL struct { /* all structs must go */ }
 </code></pre>
 <p>any suggestions for making this part more elegant?</p>
               </div>
@@ -4385,17 +4375,7 @@ _Originally posted by @alexandnpu in https://github.com/sourcegraph/sourcegraph/
 // The Parse function sets both Path and RawPath in the URL it returns,
 // and URL's String method uses RawPath if it is a valid encoding of Path,
 // by calling the EscapedPath method.
-type URL struct {
-	Scheme     string
-	Opaque     string    // encoded opaque data
-	User       *Userinfo // username and password information
-	Host       string    // host or host:port
-	Path       string    // path (relative paths may omit leading slash)
-	RawPath    string    // encoded path hint (see EscapedPath method)
-	ForceQuery bool      // append a query ('?') even if RawQuery is empty
-	RawQuery   string    // encoded query values, without '?'
-	Fragment   string    // fragment for references, without '#'
-}
+type URL struct { /* all structs must go */ }
 </code></pre>
 <p>any suggestions for making this part more elegant?</p>
           </div>
diff --git a/cmd/frontend/auth/auth.go b/cmd/frontend/auth/auth.go
index 7a0c7be..1065419 100644
--- a/cmd/frontend/auth/auth.go
+++ b/cmd/frontend/auth/auth.go
@@ -14,13 +14,7 @@ import (
 const AuthURLPrefix = "/.auth"
 
 // Middleware groups two related middlewares (one for the API, one for the app).
-type Middleware struct {
-	// API is the middleware that performs authentication on the API handler.
-	API func(http.Handler) http.Handler
-
-	// App is the middleware that performs authentication on the app handler.
-	App func(http.Handler) http.Handler
-}
+type Middleware struct { /* all structs must go */ }
 
 var extraAuthMiddlewares []*Middleware
 
diff --git a/cmd/frontend/auth/auth_test.go b/cmd/frontend/auth/auth_test.go
index 2db58c7..d607bda 100644
--- a/cmd/frontend/auth/auth_test.go
+++ b/cmd/frontend/auth/auth_test.go
@@ -3,11 +3,7 @@ package auth
 import "testing"
 
 func TestNormalizeUsername(t *testing.T) {
-	testCases := []struct {
-		in     string
-		out    string
-		hasErr bool
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{in: "username", out: "username"},
 		{in: "john@gmail.com", out: "john"},
 		{in: "john.appleseed@gmail.com", out: "john.appleseed"},
diff --git a/cmd/frontend/auth/non_public_test.go b/cmd/frontend/auth/non_public_test.go
index eda01b9..b8aa599 100644
--- a/cmd/frontend/auth/non_public_test.go
+++ b/cmd/frontend/auth/non_public_test.go
@@ -30,10 +30,7 @@ func TestAllowAnonymousRequest(t *testing.T) {
 		return r
 	}
 
-	tests := []struct {
-		req  *http.Request
-		want bool
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{req: req("GET", "/"), want: false},
 		{req: req("POST", "/"), want: false},
 		{req: req("POST", "/-/sign-in"), want: true},
@@ -63,13 +60,7 @@ func TestNewUserRequiredAuthzMiddleware(t *testing.T) {
 		return r.WithContext(actor.WithActor(context.Background(), &actor.Actor{UID: 1}))
 	}
 
-	testcases := []struct {
-		name       string
-		req        *http.Request
-		allowed    bool
-		wantStatus int
-		location   string
-	}{
+	testcases := []struct { /* all structs must go */ }{
 		{
 			name:       "no_auth__private_route",
 			req:        httptest.NewRequest("GET", "/", nil),
diff --git a/cmd/frontend/auth/providers/providers.go b/cmd/frontend/auth/providers/providers.go
index 4b40338..b33b1e3 100644
--- a/cmd/frontend/auth/providers/providers.go
+++ b/cmd/frontend/auth/providers/providers.go
@@ -44,42 +44,10 @@ type Provider interface {
 //
 // 🚨 SECURITY: This MUST NOT contain secret information because it is shown to unauthenticated and
 // anonymous clients.
-type ConfigID struct {
-	// Type is the type of this auth provider (equal to its "type" property in its entry in the
-	// auth.providers array in site configuration).
-	Type string
-
-	// ID is an identifier that uniquely represents a provider's config among all other provider
-	// configs of the same type.
-	//
-	// This value MUST NOT be persisted or used to associate accounts with this provider because it
-	// can change when any property in this provider's config changes, even when those changes are
-	// not material for identification (such as changing the display name).
-	//
-	// 🚨 SECURITY: This MUST NOT contain secret information because it is shown to unauthenticated
-	// and anonymous clients.
-	ID string
-}
+type ConfigID struct { /* all structs must go */ }
 
 // Info contains information about an authentication provider.
-type Info struct {
-	// ServiceID identifies the external service that this authentication provider represents. It is
-	// a stable identifier.
-	ServiceID string
-
-	// ClientID identifies the external service client used when communicating with the external
-	// service. It is a stable identifier.
-	ClientID string
-
-	// DisplayName is the name to use when displaying the provider in the UI.
-	DisplayName string
-
-	// AuthenticationURL is the URL to visit in order to initiate authenticating via this provider.
-	//
-	// TODO(sqs): Support "return-to" post-authentication-redirect destinations so newly authed
-	// users aren't dumped back onto the homepage.
-	AuthenticationURL string
-}
+type Info struct { /* all structs must go */ }
 
 var (
 	// curProviders is a map (package name -> (config string -> Provider)). The first key is the
diff --git a/cmd/frontend/auth/user.go b/cmd/frontend/auth/user.go
index 73542ed..99841b6 100644
--- a/cmd/frontend/auth/user.go
+++ b/cmd/frontend/auth/user.go
@@ -14,13 +14,7 @@ import (
 
 var MockGetAndSaveUser func(ctx context.Context, op GetAndSaveUserOp) (userID int32, safeErrMsg string, err error)
 
-type GetAndSaveUserOp struct {
-	UserProps           db.NewUser
-	ExternalAccount     extsvc.AccountSpec
-	ExternalAccountData extsvc.AccountData
-	CreateIfNotExist    bool
-	LookUpByUsername    bool
-}
+type GetAndSaveUserOp struct { /* all structs must go */ }
 
 // GetAndSaveUser accepts authentication information associated with a given user, validates and applies
 // the necessary updates to the DB, and returns the user ID after the updates have been applied.
diff --git a/cmd/frontend/auth/user_test.go b/cmd/frontend/auth/user_test.go
index 9c52663..07b34ee 100644
--- a/cmd/frontend/auth/user_test.go
+++ b/cmd/frontend/auth/user_test.go
@@ -27,30 +27,8 @@ func init() {
 // 🚨 SECURITY: This guarantees the integrity of the identity resolution process (ensuring that new
 // external accounts are linked to the appropriate user account)
 func TestGetAndSaveUser(t *testing.T) {
-	type innerCase struct {
-		description string
-		actorUID    int32
-		op          GetAndSaveUserOp
-
-		// if true, then will expect same output if op.CreateIfNotExist is true or false
-		createIfNotExistIrrelevant bool
-
-		// expected return values
-		expUserID  int32
-		expSafeErr string
-		expErr     error
-
-		// expected side effects
-		expSavedExtAccts                 map[int32][]extsvc.AccountSpec
-		expUpdatedUsers                  map[int32][]db.UserUpdate
-		expCreatedUsers                  map[int32]db.NewUser
-		expCalledGrantPendingPermissions bool
-	}
-	type outerCase struct {
-		description string
-		mock        mockParams
-		innerCases  []innerCase
-	}
+	type innerCase struct { /* all structs must go */ }
+	type outerCase struct { /* all structs must go */ }
 
 	unexpectedErr := errors.New("unexpected err")
 
@@ -393,11 +371,7 @@ func TestGetAndSaveUser(t *testing.T) {
 						op := c.op
 						op.CreateIfNotExist = createIfNotExist
 						userID, safeErr, err := GetAndSaveUser(ctx, op)
-						for _, v := range []struct {
-							label string
-							got   interface{}
-							want  interface{}
-						}{
+						for _, v := range []struct { /* all structs must go */ }{
 							{"userID", userID, c.expUserID},
 							{"safeErr", safeErr, c.expSafeErr},
 							{"err", err, c.expErr},
@@ -422,11 +396,7 @@ func TestGetAndSaveUser(t *testing.T) {
 	}
 }
 
-type userInfo struct {
-	user     types.User
-	extAccts []extsvc.AccountSpec
-	emails   []string
-}
+type userInfo struct { /* all structs must go */ }
 
 func newMocks(t *testing.T, m mockParams) *mocks {
 	// validation
@@ -469,16 +439,7 @@ func newMocks(t *testing.T, m mockParams) *mocks {
 	}
 }
 
-type mockParams struct {
-	userInfos               []userInfo
-	lookupUserAndSaveErr    error
-	createUserAndSaveErr    error
-	associateUserAndSaveErr error
-	getByVerifiedEmailErr   error
-	getByUsernameErr        error //nolint:structcheck
-	getByIDErr              error
-	updateErr               error
-}
+type mockParams struct { /* all structs must go */ }
 
 func (m *mocks) apply() {
 	db.Mocks.ExternalAccounts = db.MockExternalAccounts{
@@ -506,25 +467,7 @@ func (m *mocks) reset() {
 // mocks provide mocking. It should only be used for one call of auth.GetAndSaveUser, because saves
 // are recorded in the mock struct but will not be reflected in the return values of the mocked
 // methods.
-type mocks struct {
-	mockParams
-	t *testing.T
-
-	// savedExtAccts tracks all ext acct "saves" for a given user ID
-	savedExtAccts map[int32][]extsvc.AccountSpec
-
-	// createdUsers tracks user creations by user ID
-	createdUsers map[int32]db.NewUser
-
-	// updatedUsers tracks all user updates for a given user ID
-	updatedUsers map[int32][]db.UserUpdate
-
-	// nextUserID is the user ID of the next created user.
-	nextUserID int32
-
-	// calledGrantPendingPermissions tracks if db.Authz.GrantPendingPermissions method is called.
-	calledGrantPendingPermissions bool
-}
+type mocks struct { /* all structs must go */ }
 
 // LookupUserAndSave mocks db.ExternalAccounts.LookupUserAndSave
 func (m *mocks) LookupUserAndSave(spec extsvc.AccountSpec, data extsvc.AccountData) (userID int32, err error) {
diff --git a/cmd/frontend/authz/header_test.go b/cmd/frontend/authz/header_test.go
index bd8b330..5a42a8d 100644
--- a/cmd/frontend/authz/header_test.go
+++ b/cmd/frontend/authz/header_test.go
@@ -6,11 +6,7 @@ import (
 )
 
 func TestParseAuthorizationHeader(t *testing.T) {
-	tests := map[string]struct {
-		token    string
-		sudoUser string
-		err      bool
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"token tok":                              {token: "tok"},
 		"token tok==":                            {token: "tok=="},
 		`token token=tok`:                        {token: "tok"},
@@ -43,12 +39,7 @@ func TestParseAuthorizationHeader(t *testing.T) {
 }
 
 func TestParseHTTPCredentials(t *testing.T) {
-	tests := map[string]struct {
-		scheme  string
-		token68 string
-		params  map[string]string
-		err     bool
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"scheme v1":                 {scheme: "scheme", token68: "v1"},
 		"scheme v1==":               {scheme: "scheme", token68: "v1=="},
 		`scheme k1="v1"`:            {scheme: "scheme", params: map[string]string{"k1": "v1"}},
diff --git a/cmd/frontend/authz/perms.go b/cmd/frontend/authz/perms.go
index 7b755f1..9458dd2 100644
--- a/cmd/frontend/authz/perms.go
+++ b/cmd/frontend/authz/perms.go
@@ -14,10 +14,7 @@ var ErrPermsNotFound = errors.New("permissions not found")
 
 // RepoPerms contains a repo and the permissions a given user
 // has associated with it.
-type RepoPerms struct {
-	Repo  *types.Repo
-	Perms Perms
-}
+type RepoPerms struct { /* all structs must go */ }
 
 // Perms is a permission set represented as bitset.
 type Perms uint32
@@ -76,11 +73,7 @@ func (s RepoPermsSort) Less(i, j int) bool {
 // permissions are stale (e.g. the first time a user needs them and they haven't
 // been fetched yet). Callers should pass this error up to the user and show a
 // more friendly prompt message in the UI.
-type ErrStalePermissions struct {
-	UserID int32
-	Perm   Perms
-	Type   PermType
-}
+type ErrStalePermissions struct { /* all structs must go */ }
 
 // Error implements the error interface.
 func (e ErrStalePermissions) Error() string {
@@ -89,14 +82,7 @@ func (e ErrStalePermissions) Error() string {
 
 // UserPermissions are the permissions of a user to perform an action
 // on the given set of object IDs of the defined type.
-type UserPermissions struct {
-	UserID    int32           // The internal database ID of a user
-	Perm      Perms           // The permission set
-	Type      PermType        // The type of the permissions
-	IDs       *roaring.Bitmap // The object IDs
-	UpdatedAt time.Time       // The last updated time
-	SyncedAt  time.Time       // The last user-centric synced time
-}
+type UserPermissions struct { /* all structs must go */ }
 
 // Expired returns true if these UserPermissions have elapsed the given ttl.
 func (p *UserPermissions) Expired(ttl time.Duration, now time.Time) bool {
@@ -141,13 +127,7 @@ func (p *UserPermissions) TracingFields() []otlog.Field {
 }
 
 // RepoPermissions declares which users have access to a given repository
-type RepoPermissions struct {
-	RepoID    int32           // The internal database ID of a repository
-	Perm      Perms           // The permission set
-	UserIDs   *roaring.Bitmap // The user IDs
-	UpdatedAt time.Time       // The last updated time
-	SyncedAt  time.Time       // The last repo-centric synced time
-}
+type RepoPermissions struct { /* all structs must go */ }
 
 // Expired returns true if these RepoPermissions have elapsed the given ttl.
 func (p *RepoPermissions) Expired(ttl time.Duration, now time.Time) bool {
@@ -176,31 +156,7 @@ func (p *RepoPermissions) TracingFields() []otlog.Field {
 // perform on a given set of object IDs. Not-yet-created users may exist on the
 // code host but not yet in Sourcegraph. "ServiceType", "ServiceID" and "BindID"
 // are used to map this stub user to an actual user when the user is created.
-type UserPendingPermissions struct {
-	// The auto-generated internal database ID.
-	ID int32
-	// The type of the code host as if it would be used as extsvc.AccountSpec.ServiceType,
-	// e.g. "github", "gitlab", "bitbucketServer" and "sourcegraph".
-	ServiceType string
-	// The ID of the code host as if it would be used as extsvc.AccountSpec.ServiceID,
-	// e.g. "https://github.com/", "https://gitlab.com/" and "https://sourcegraph.com/".
-	ServiceID string
-	// The account ID that a code host (and its authz provider) uses to identify a user,
-	// e.g. a username (for Bitbucket Server), a GraphID ( for GitHub), or a user ID
-	// (for GitLab).
-	//
-	// When use the Sourcegraph authz provider, "BindID" can be either a username or
-	// an email based on site configuration.
-	BindID string
-	// The permissions this user has to the "IDs" of the "Type".
-	Perm Perms
-	// The type of permissions this user has.
-	Type PermType
-	// The object IDs with the "Type".
-	IDs *roaring.Bitmap
-	// The last updated time.
-	UpdatedAt time.Time
-}
+type UserPendingPermissions struct { /* all structs must go */ }
 
 // TracingFields returns tracing fields for the opentracing log.
 func (p *UserPendingPermissions) TracingFields() []otlog.Field {
diff --git a/cmd/frontend/authz/perms_test.go b/cmd/frontend/authz/perms_test.go
index bc05052..a12cd1a 100644
--- a/cmd/frontend/authz/perms_test.go
+++ b/cmd/frontend/authz/perms_test.go
@@ -9,11 +9,7 @@ import (
 )
 
 func TestPermsInclude(t *testing.T) {
-	for _, tc := range []struct {
-		Perms
-		other Perms
-		want  bool
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{None, Read, false},
 		{None, Write, false},
 		{Read, Read, true},
@@ -49,10 +45,7 @@ func BenchmarkPermsInclude(b *testing.B) {
 }
 
 func TestPermsString(t *testing.T) {
-	for _, tc := range []struct {
-		Perms
-		want string
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{0, "none"},
 		{None, "none"},
 		{Read, "read"},
@@ -84,12 +77,7 @@ func bitmap(ids ...uint32) *roaring.Bitmap {
 }
 
 func TestUserPermissions_AuthorizedRepos(t *testing.T) {
-	tests := []struct {
-		name     string
-		repos    []*types.Repo
-		p        *UserPermissions
-		expPerms []RepoPerms
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:  "wrong permissions type",
 			repos: []*types.Repo{},
diff --git a/cmd/frontend/backend/go_importers.go b/cmd/frontend/backend/go_importers.go
index 41ea6bd..e369b76 100644
--- a/cmd/frontend/backend/go_importers.go
+++ b/cmd/frontend/backend/go_importers.go
@@ -85,11 +85,7 @@ func CountGoImporters(ctx context.Context, repo api.RepoName) (count int, err er
 		if err != nil {
 			return 0, err
 		}
-		var result struct {
-			Results []struct {
-				Path string
-			}
-		}
+		var result struct { /* all structs must go */ }
 		bytes, err := ioutil.ReadAll(response.Body)
 		if err != nil {
 			return 0, err
diff --git a/cmd/frontend/backend/go_importers_test.go b/cmd/frontend/backend/go_importers_test.go
index 0a53b1c..ff5dbcb 100644
--- a/cmd/frontend/backend/go_importers_test.go
+++ b/cmd/frontend/backend/go_importers_test.go
@@ -73,9 +73,7 @@ func TestListGoPackagesInRepoImprecise(t *testing.T) {
 	})
 }
 
-type mockRoundTripper struct {
-	response string
-}
+type mockRoundTripper struct { /* all structs must go */ }
 
 func (t mockRoundTripper) RoundTrip(req *http.Request) (*http.Response, error) {
 	return &http.Response{
diff --git a/cmd/frontend/backend/mocks.go b/cmd/frontend/backend/mocks.go
index 324d559..b418edf 100644
--- a/cmd/frontend/backend/mocks.go
+++ b/cmd/frontend/backend/mocks.go
@@ -11,9 +11,7 @@ import (
 
 var Mocks MockServices
 
-type MockServices struct {
-	Repos MockRepos
-}
+type MockServices struct { /* all structs must go */ }
 
 // testContext creates a new context.Context for use by tests
 func testContext() context.Context {
diff --git a/cmd/frontend/backend/repos.go b/cmd/frontend/backend/repos.go
index 972f37b..b5d1576 100644
--- a/cmd/frontend/backend/repos.go
+++ b/cmd/frontend/backend/repos.go
@@ -24,10 +24,7 @@ import (
 
 // ErrRepoSeeOther indicates that the repo does not exist on this server but might exist on an external Sourcegraph
 // server.
-type ErrRepoSeeOther struct {
-	// RedirectURL is the base URL for the repository at an external location.
-	RedirectURL string
-}
+type ErrRepoSeeOther struct { /* all structs must go */ }
 
 func (e ErrRepoSeeOther) Error() string {
 	return fmt.Sprintf("repo not found at this location, but might exist at %s", e.RedirectURL)
diff --git a/cmd/frontend/backend/repos_mock.go b/cmd/frontend/backend/repos_mock.go
index 3596a41..3e6985e 100644
--- a/cmd/frontend/backend/repos_mock.go
+++ b/cmd/frontend/backend/repos_mock.go
@@ -15,14 +15,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/vcs/git"
 )
 
-type MockRepos struct {
-	Get          func(v0 context.Context, id api.RepoID) (*types.Repo, error)
-	GetByName    func(v0 context.Context, name api.RepoName) (*types.Repo, error)
-	List         func(v0 context.Context, v1 db.ReposListOptions) ([]*types.Repo, error)
-	GetCommit    func(v0 context.Context, repo *types.Repo, commitID api.CommitID) (*git.Commit, error)
-	ResolveRev   func(v0 context.Context, repo *types.Repo, rev string) (api.CommitID, error)
-	GetInventory func(v0 context.Context, repo *types.Repo, commitID api.CommitID) (*inventory.Inventory, error)
-}
+type MockRepos struct { /* all structs must go */ }
 
 var errRepoNotFound = &errcode.Mock{
 	Message:    "repo not found",
diff --git a/cmd/frontend/backend/repos_test.go b/cmd/frontend/backend/repos_test.go
index 659835d..150e5cb 100644
--- a/cmd/frontend/backend/repos_test.go
+++ b/cmd/frontend/backend/repos_test.go
@@ -156,10 +156,7 @@ func TestReposGetInventory(t *testing.T) {
 	}
 	defer git.ResetMocks()
 
-	tests := []struct {
-		useEnhancedLanguageDetection bool
-		want                         *inventory.Inventory
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			useEnhancedLanguageDetection: false,
 			want: &inventory.Inventory{
diff --git a/cmd/frontend/backend/site_admin.go b/cmd/frontend/backend/site_admin.go
index aa5949f..535f747 100644
--- a/cmd/frontend/backend/site_admin.go
+++ b/cmd/frontend/backend/site_admin.go
@@ -52,9 +52,7 @@ func CheckUserIsSiteAdmin(ctx context.Context, userID int32) error {
 // InsufficientAuthorizationError is an error that occurs when the authentication is technically valid
 // (e.g., the token is not expired) but does not yield a user with privileges to perform a certain
 // action.
-type InsufficientAuthorizationError struct {
-	Message string
-}
+type InsufficientAuthorizationError struct { /* all structs must go */ }
 
 func (e *InsufficientAuthorizationError) Error() string      { return e.Message }
 func (e *InsufficientAuthorizationError) Unauthorized() bool { return true }
diff --git a/cmd/frontend/backend/user_emails.go b/cmd/frontend/backend/user_emails.go
index 1fedf4a..6523a41 100644
--- a/cmd/frontend/backend/user_emails.go
+++ b/cmd/frontend/backend/user_emails.go
@@ -155,10 +155,7 @@ func SendUserEmailVerificationEmail(ctx context.Context, email, code string) err
 	return txemail.Send(ctx, txemail.Message{
 		To:       []string{email},
 		Template: verifyEmailTemplates,
-		Data: struct {
-			Email string
-			URL   string
-		}{
+		Data: struct { /* all structs must go */ }{
 			Email: email,
 			URL: globals.ExternalURL().ResolveReference(&url.URL{
 				Path:     verifyEmailPath.Path,
diff --git a/cmd/frontend/backend/user_emails_test.go b/cmd/frontend/backend/user_emails_test.go
index 3009c1f..f6cc013 100644
--- a/cmd/frontend/backend/user_emails_test.go
+++ b/cmd/frontend/backend/user_emails_test.go
@@ -29,14 +29,7 @@ func TestCheckEmailAbuse(t *testing.T) {
 
 	now := time.Now()
 
-	tests := []struct {
-		name       string
-		mockEmails []*db.UserEmail
-		hasQuote   bool
-		expAbused  bool
-		expReason  string
-		expErr     error
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "no verified email address",
 			mockEmails: []*db.UserEmail{
@@ -143,10 +136,7 @@ func TestSendUserEmailVerificationEmail(t *testing.T) {
 		FromName: "",
 		To:       []string{"a@example.com"},
 		Template: verifyEmailTemplates,
-		Data: struct {
-			Email string
-			URL   string
-		}{
+		Data: struct { /* all structs must go */ }{
 			Email: "a@example.com",
 			URL:   "http://example.com/-/verify-email?code=c&email=a%40example.com",
 		},
diff --git a/cmd/frontend/backend/versions.go b/cmd/frontend/backend/versions.go
index 580eb66..6f4eeea 100644
--- a/cmd/frontend/backend/versions.go
+++ b/cmd/frontend/backend/versions.go
@@ -14,11 +14,7 @@ import (
 
 // UpgradeError is returned by UpdateServiceVersion when it faces an
 // upgrade policy violation error.
-type UpgradeError struct {
-	Service  string
-	Previous *semver.Version
-	Latest   *semver.Version
-}
+type UpgradeError struct { /* all structs must go */ }
 
 // Error implements the error interface.
 func (e UpgradeError) Error() string {
diff --git a/cmd/frontend/backend/versions_test.go b/cmd/frontend/backend/versions_test.go
index 7b0dcc1..3734c42 100644
--- a/cmd/frontend/backend/versions_test.go
+++ b/cmd/frontend/backend/versions_test.go
@@ -17,10 +17,7 @@ func TestUpdateServiceVersion(t *testing.T) {
 	dbtesting.SetupGlobalTestDB(t)
 
 	ctx := context.Background()
-	for _, tc := range []struct {
-		version string
-		err     error
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{"0.0.0", nil},
 		{"0.0.1", nil},
 		{"0.1.0", nil},
@@ -57,12 +54,7 @@ func TestUpdateServiceVersion(t *testing.T) {
 }
 
 func TestIsValidUpgrade(t *testing.T) {
-	for _, tc := range []struct {
-		name     string
-		previous string
-		latest   string
-		want     bool
-	}{{
+	for _, tc := range []struct { /* all structs must go */ }{{
 		name:     "no versions",
 		previous: "",
 		latest:   "",
diff --git a/cmd/frontend/enterprise/enterprise.go b/cmd/frontend/enterprise/enterprise.go
index aef3ddd..5135f09 100644
--- a/cmd/frontend/enterprise/enterprise.go
+++ b/cmd/frontend/enterprise/enterprise.go
@@ -9,14 +9,7 @@ import (
 
 // Services is a bag of HTTP handlers and factory functions that are registered by the
 // enterprise frontend setup hook.
-type Services struct {
-	GithubWebhook             http.Handler
-	BitbucketServerWebhook    http.Handler
-	NewCodeIntelUploadHandler NewCodeIntelUploadHandler
-	AuthzResolver             graphqlbackend.AuthzResolver
-	CampaignsResolver         graphqlbackend.CampaignsResolver
-	CodeIntelResolver         graphqlbackend.CodeIntelResolver
-}
+type Services struct { /* all structs must go */ }
 
 // NewCodeIntelUploadHandler creates a new handler for the LSIF upload endpoint. The
 // resulting handler skips auth checks when the internal flag is true.
diff --git a/cmd/frontend/graphqlbackend/access_token.go b/cmd/frontend/graphqlbackend/access_token.go
index a739374..10a31fc 100644
--- a/cmd/frontend/graphqlbackend/access_token.go
+++ b/cmd/frontend/graphqlbackend/access_token.go
@@ -18,9 +18,7 @@ import (
 // UI does not provide any additional functionality. In contrast, GitHub and
 // other services likely allow user accounts to do more than what access tokens
 // alone can via the API.
-type accessTokenResolver struct {
-	accessToken db.AccessToken
-}
+type accessTokenResolver struct { /* all structs must go */ }
 
 func accessTokenByID(ctx context.Context, id graphql.ID) (*accessTokenResolver, error) {
 	accessTokenID, err := unmarshalAccessTokenID(id)
diff --git a/cmd/frontend/graphqlbackend/access_tokens.go b/cmd/frontend/graphqlbackend/access_tokens.go
index 2710971..bffd82e 100644
--- a/cmd/frontend/graphqlbackend/access_tokens.go
+++ b/cmd/frontend/graphqlbackend/access_tokens.go
@@ -16,11 +16,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/db"
 )
 
-type createAccessTokenInput struct {
-	User   graphql.ID
-	Scopes []string
-	Note   string
-}
+type createAccessTokenInput struct { /* all structs must go */ }
 
 func (r *schemaResolver) CreateAccessToken(ctx context.Context, args *createAccessTokenInput) (*createAccessTokenResult, error) {
 	// 🚨 SECURITY: Only site admins and the user can create an access token for a user.
@@ -75,18 +71,12 @@ func (r *schemaResolver) CreateAccessToken(ctx context.Context, args *createAcce
 	return &createAccessTokenResult{id: marshalAccessTokenID(id), token: token}, err
 }
 
-type createAccessTokenResult struct {
-	id    graphql.ID
-	token string
-}
+type createAccessTokenResult struct { /* all structs must go */ }
 
 func (r *createAccessTokenResult) ID() graphql.ID { return r.id }
 func (r *createAccessTokenResult) Token() string  { return r.token }
 
-type deleteAccessTokenInput struct {
-	ByID    *graphql.ID
-	ByToken *string
-}
+type deleteAccessTokenInput struct { /* all structs must go */ }
 
 func (r *schemaResolver) DeleteAccessToken(ctx context.Context, args *deleteAccessTokenInput) (*EmptyResponse, error) {
 	if args.ByID == nil && args.ByToken == nil {
@@ -127,9 +117,7 @@ func (r *schemaResolver) DeleteAccessToken(ctx context.Context, args *deleteAcce
 	return &EmptyResponse{}, nil
 }
 
-func (r *siteResolver) AccessTokens(ctx context.Context, args *struct {
-	graphqlutil.ConnectionArgs
-}) (*accessTokenConnectionResolver, error) {
+func (r *siteResolver) AccessTokens(ctx context.Context, args *struct { /* all structs must go */ }) (*accessTokenConnectionResolver, error) {
 	// 🚨 SECURITY: Only site admins can list all access tokens.
 	if err := backend.CheckCurrentUserIsSiteAdmin(ctx); err != nil {
 		return nil, err
@@ -140,9 +128,7 @@ func (r *siteResolver) AccessTokens(ctx context.Context, args *struct {
 	return &accessTokenConnectionResolver{opt: opt}, nil
 }
 
-func (r *UserResolver) AccessTokens(ctx context.Context, args *struct {
-	graphqlutil.ConnectionArgs
-}) (*accessTokenConnectionResolver, error) {
+func (r *UserResolver) AccessTokens(ctx context.Context, args *struct { /* all structs must go */ }) (*accessTokenConnectionResolver, error) {
 	// 🚨 SECURITY: Only site admins and the user can list a user's access tokens.
 	if err := backend.CheckSiteAdminOrSameUser(ctx, r.user.ID); err != nil {
 		return nil, err
@@ -157,14 +143,7 @@ func (r *UserResolver) AccessTokens(ctx context.Context, args *struct {
 //
 // 🚨 SECURITY: When instantiating an accessTokenConnectionResolver value, the caller MUST check
 // permissions.
-type accessTokenConnectionResolver struct {
-	opt db.AccessTokensListOptions
-
-	// cache results because they are used by multiple fields
-	once         sync.Once
-	accessTokens []*db.AccessToken
-	err          error
-}
+type accessTokenConnectionResolver struct { /* all structs must go */ }
 
 func (r *accessTokenConnectionResolver) compute(ctx context.Context) ([]*db.AccessToken, error) {
 	r.once.Do(func() {
diff --git a/cmd/frontend/graphqlbackend/auth_provider.go b/cmd/frontend/graphqlbackend/auth_provider.go
index 65f5584..3cef298 100644
--- a/cmd/frontend/graphqlbackend/auth_provider.go
+++ b/cmd/frontend/graphqlbackend/auth_provider.go
@@ -3,11 +3,7 @@ package graphqlbackend
 import "github.com/sourcegraph/sourcegraph/cmd/frontend/auth/providers"
 
 // authProviderResolver resolves an auth provider.
-type authProviderResolver struct {
-	authProvider providers.Provider
-
-	info *providers.Info // == authProvider.CachedInfo()
-}
+type authProviderResolver struct { /* all structs must go */ }
 
 func (r *authProviderResolver) ServiceType() string { return r.authProvider.ConfigID().Type }
 
diff --git a/cmd/frontend/graphqlbackend/auth_providers.go b/cmd/frontend/graphqlbackend/auth_providers.go
index 6f783a3..202b6f6 100644
--- a/cmd/frontend/graphqlbackend/auth_providers.go
+++ b/cmd/frontend/graphqlbackend/auth_providers.go
@@ -14,9 +14,7 @@ func (r *siteResolver) AuthProviders(ctx context.Context) (*authProviderConnecti
 }
 
 // authProviderConnectionResolver resolves a list of auth providers.
-type authProviderConnectionResolver struct {
-	authProviders []providers.Provider
-}
+type authProviderConnectionResolver struct { /* all structs must go */ }
 
 func (r *authProviderConnectionResolver) Nodes(ctx context.Context) ([]*authProviderResolver, error) {
 	var rs []*authProviderResolver
diff --git a/cmd/frontend/graphqlbackend/authz.go b/cmd/frontend/graphqlbackend/authz.go
index ef74907..290ea8b 100644
--- a/cmd/frontend/graphqlbackend/authz.go
+++ b/cmd/frontend/graphqlbackend/authz.go
@@ -65,29 +65,13 @@ func (defaultAuthzResolver) UserPermissionsInfo(ctx context.Context, userID grap
 	return nil, nil
 }
 
-type RepositoryIDArgs struct {
-	Repository graphql.ID
-}
+type RepositoryIDArgs struct { /* all structs must go */ }
 
-type UserIDArgs struct {
-	User graphql.ID
-}
+type UserIDArgs struct { /* all structs must go */ }
 
-type RepoPermsArgs struct {
-	Repository      graphql.ID
-	UserPermissions []struct {
-		BindID     string
-		Permission string
-	}
-}
+type RepoPermsArgs struct { /* all structs must go */ }
 
-type AuthorizedRepoArgs struct {
-	Username *string
-	Email    *string
-	Perm     string
-	First    int32
-	After    *string
-}
+type AuthorizedRepoArgs struct { /* all structs must go */ }
 
 type PermissionsInfoResolver interface {
 	Permissions() []string
diff --git a/cmd/frontend/graphqlbackend/campaigns.go b/cmd/frontend/graphqlbackend/campaigns.go
index f991c37..13db28f 100644
--- a/cmd/frontend/graphqlbackend/campaigns.go
+++ b/cmd/frontend/graphqlbackend/campaigns.go
@@ -10,55 +10,25 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/campaigns"
 )
 
-type CreateCampaignArgs struct {
-	CampaignSpec graphql.ID
-}
+type CreateCampaignArgs struct { /* all structs must go */ }
 
-type ApplyCampaignArgs struct {
-	CampaignSpec   graphql.ID
-	EnsureCampaign *graphql.ID
-}
+type ApplyCampaignArgs struct { /* all structs must go */ }
 
-type MoveCampaignArgs struct {
-	Campaign     graphql.ID
-	NewName      *string
-	NewNamespace *graphql.ID
-}
+type MoveCampaignArgs struct { /* all structs must go */ }
 
-type ListCampaignArgs struct {
-	First               *int32
-	State               *string
-	ViewerCanAdminister *bool
-}
+type ListCampaignArgs struct { /* all structs must go */ }
 
-type CloseCampaignArgs struct {
-	Campaign        graphql.ID
-	CloseChangesets bool
-}
+type CloseCampaignArgs struct { /* all structs must go */ }
 
-type DeleteCampaignArgs struct {
-	Campaign graphql.ID
-}
+type DeleteCampaignArgs struct { /* all structs must go */ }
 
-type SyncChangesetArgs struct {
-	Changeset graphql.ID
-}
+type SyncChangesetArgs struct { /* all structs must go */ }
 
-type CreateChangesetSpecArgs struct {
-	ChangesetSpec string
-}
-
-type CreateCampaignSpecArgs struct {
-	Namespace graphql.ID
+type CreateChangesetSpecArgs struct { /* all structs must go */ }
 
-	CampaignSpec   string
-	ChangesetSpecs []graphql.ID
-}
+type CreateCampaignSpecArgs struct { /* all structs must go */ }
 
-type ChangesetSpecsConnectionArgs struct {
-	First *int32
-	After *string
-}
+type ChangesetSpecsConnectionArgs struct { /* all structs must go */ }
 
 type CampaignsResolver interface {
 	// Mutations
@@ -165,18 +135,9 @@ type GitCommitDescriptionResolver interface {
 	Diff() string
 }
 
-type ChangesetCountsArgs struct {
-	From *DateTime
-	To   *DateTime
-}
+type ChangesetCountsArgs struct { /* all structs must go */ }
 
-type ListChangesetsArgs struct {
-	First         *int32
-	State         *campaigns.ChangesetState
-	ExternalState *campaigns.ChangesetExternalState
-	ReviewState   *campaigns.ChangesetReviewState
-	CheckState    *campaigns.ChangesetCheckState
-}
+type ListChangesetsArgs struct { /* all structs must go */ }
 
 type CampaignResolver interface {
 	ID() graphql.ID
diff --git a/cmd/frontend/graphqlbackend/client_configuration.go b/cmd/frontend/graphqlbackend/client_configuration.go
index bac586f..194adba 100644
--- a/cmd/frontend/graphqlbackend/client_configuration.go
+++ b/cmd/frontend/graphqlbackend/client_configuration.go
@@ -6,14 +6,9 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/conf"
 )
 
-type clientConfigurationResolver struct {
-	contentScriptUrls []string
-	parentSourcegraph *parentSourcegraphResolver
-}
+type clientConfigurationResolver struct { /* all structs must go */ }
 
-type parentSourcegraphResolver struct {
-	url string
-}
+type parentSourcegraphResolver struct { /* all structs must go */ }
 
 func (r *clientConfigurationResolver) ContentScriptURLs() []string {
 	return r.contentScriptUrls
diff --git a/cmd/frontend/graphqlbackend/codeintel.go b/cmd/frontend/graphqlbackend/codeintel.go
index e0c6b03..b8b6f09 100644
--- a/cmd/frontend/graphqlbackend/codeintel.go
+++ b/cmd/frontend/graphqlbackend/codeintel.go
@@ -80,18 +80,9 @@ func (r *schemaResolver) DeleteLSIFIndex(ctx context.Context, args *struct{ ID g
 	return r.CodeIntelResolver.DeleteLSIFIndex(ctx, args.ID)
 }
 
-type LSIFUploadsQueryArgs struct {
-	graphqlutil.ConnectionArgs
-	Query           *string
-	State           *string
-	IsLatestForRepo *bool
-	After           *string
-}
+type LSIFUploadsQueryArgs struct { /* all structs must go */ }
 
-type LSIFRepositoryUploadsQueryArgs struct {
-	*LSIFUploadsQueryArgs
-	RepositoryID graphql.ID
-}
+type LSIFRepositoryUploadsQueryArgs struct { /* all structs must go */ }
 
 type LSIFUploadResolver interface {
 	ID() graphql.ID
@@ -114,17 +105,9 @@ type LSIFUploadConnectionResolver interface {
 	PageInfo(ctx context.Context) (*graphqlutil.PageInfo, error)
 }
 
-type LSIFIndexesQueryArgs struct {
-	graphqlutil.ConnectionArgs
-	Query *string
-	State *string
-	After *string
-}
+type LSIFIndexesQueryArgs struct { /* all structs must go */ }
 
-type LSIFRepositoryIndexesQueryArgs struct {
-	*LSIFIndexesQueryArgs
-	RepositoryID graphql.ID
-}
+type LSIFRepositoryIndexesQueryArgs struct { /* all structs must go */ }
 
 type LSIFIndexResolver interface {
 	ID() graphql.ID
@@ -159,33 +142,15 @@ type GitBlobLSIFDataResolver interface {
 	Hover(ctx context.Context, args *LSIFQueryPositionArgs) (HoverResolver, error)
 }
 
-type GitBlobLSIFDataArgs struct {
-	Repo      *types.Repo
-	Commit    api.CommitID
-	Path      string
-	ExactPath bool
-	ToolName  string
-}
+type GitBlobLSIFDataArgs struct { /* all structs must go */ }
 
-type LSIFRangesArgs struct {
-	StartLine int32
-	EndLine   int32
-}
+type LSIFRangesArgs struct { /* all structs must go */ }
 
-type LSIFQueryPositionArgs struct {
-	Line      int32
-	Character int32
-}
+type LSIFQueryPositionArgs struct { /* all structs must go */ }
 
-type LSIFPagedQueryPositionArgs struct {
-	LSIFQueryPositionArgs
-	graphqlutil.ConnectionArgs
-	After *string
-}
+type LSIFPagedQueryPositionArgs struct { /* all structs must go */ }
 
-type LSIFDiagnosticsArgs struct {
-	graphqlutil.ConnectionArgs
-}
+type LSIFDiagnosticsArgs struct { /* all structs must go */ }
 
 type CodeIntelligenceRangeConnectionResolver interface {
 	Nodes(ctx context.Context) ([]CodeIntelligenceRangeResolver, error)
diff --git a/cmd/frontend/graphqlbackend/codemod.go b/cmd/frontend/graphqlbackend/codemod.go
index 11c80e8..d7398bb 100644
--- a/cmd/frontend/graphqlbackend/codemod.go
+++ b/cmd/frontend/graphqlbackend/codemod.go
@@ -28,26 +28,12 @@ import (
 	"golang.org/x/net/context/ctxhttp"
 )
 
-type rawCodemodResult struct {
-	URI  string `json:"uri"`
-	Diff string
-}
+type rawCodemodResult struct { /* all structs must go */ }
 
-type args struct {
-	matchTemplate     string
-	rewriteTemplate   string
-	includeFileFilter string
-	excludeFileFilter string
-}
+type args struct { /* all structs must go */ }
 
 // codemodResultResolver is a resolver for the GraphQL type `CodemodResult`
-type codemodResultResolver struct {
-	commit  *GitCommitResolver
-	path    string
-	fileURL string
-	diff    string
-	matches []*searchResultMatchResolver
-}
+type codemodResultResolver struct { /* all structs must go */ }
 
 func (r *codemodResultResolver) ToRepository() (*RepositoryResolver, bool) { return nil, false }
 func (r *codemodResultResolver) ToFileMatch() (*FileMatchResolver, bool)   { return nil, false }
diff --git a/cmd/frontend/graphqlbackend/default_settings.go b/cmd/frontend/graphqlbackend/default_settings.go
index 6bf66c1..959367c 100644
--- a/cmd/frontend/graphqlbackend/default_settings.go
+++ b/cmd/frontend/graphqlbackend/default_settings.go
@@ -50,9 +50,7 @@ var builtinExtensions = map[string]bool{
 
 const singletonDefaultSettingsGQLID = "DefaultSettings"
 
-type defaultSettingsResolver struct {
-	gqlID string
-}
+type defaultSettingsResolver struct { /* all structs must go */ }
 
 var singletonDefaultSettingsResolver = &defaultSettingsResolver{gqlID: singletonDefaultSettingsGQLID}
 
diff --git a/cmd/frontend/graphqlbackend/dotcom.go b/cmd/frontend/graphqlbackend/dotcom.go
index 82905e9..1f16a6e 100644
--- a/cmd/frontend/graphqlbackend/dotcom.go
+++ b/cmd/frontend/graphqlbackend/dotcom.go
@@ -70,47 +70,23 @@ type ProductSubscriptionInvoiceItem interface {
 	ExpiresAt() DateTime
 }
 
-type SetUserBillingArgs struct {
-	User              graphql.ID
-	BillingCustomerID *string
-}
+type SetUserBillingArgs struct { /* all structs must go */ }
 
-type CreateProductSubscriptionArgs struct {
-	AccountID graphql.ID
-}
+type CreateProductSubscriptionArgs struct { /* all structs must go */ }
 
-type SetProductSubscriptionBillingArgs struct {
-	ID                    graphql.ID
-	BillingSubscriptionID *string
-}
+type SetProductSubscriptionBillingArgs struct { /* all structs must go */ }
 
-type GenerateProductLicenseForSubscriptionArgs struct {
-	ProductSubscriptionID graphql.ID
-	License               *ProductLicenseInput
-}
+type GenerateProductLicenseForSubscriptionArgs struct { /* all structs must go */ }
 
-type CreatePaidProductSubscriptionArgs struct {
-	AccountID           graphql.ID
-	ProductSubscription ProductSubscriptionInput
-	PaymentToken        *string
-}
+type CreatePaidProductSubscriptionArgs struct { /* all structs must go */ }
 
-type UpdatePaidProductSubscriptionArgs struct {
-	SubscriptionID graphql.ID
-	Update         ProductSubscriptionInput
-	PaymentToken   *string
-}
+type UpdatePaidProductSubscriptionArgs struct { /* all structs must go */ }
 
 // ProductSubscriptionInput implements the GraphQL type ProductSubscriptionInput.
-type ProductSubscriptionInput struct {
-	BillingPlanID string
-	UserCount     int32
-}
+type ProductSubscriptionInput struct { /* all structs must go */ }
 
 // CreatePaidProductSubscriptionResult implements the GraphQL type CreatePaidProductSubscriptionResult.
-type CreatePaidProductSubscriptionResult struct {
-	ProductSubscriptionValue ProductSubscription
-}
+type CreatePaidProductSubscriptionResult struct { /* all structs must go */ }
 
 func (r *CreatePaidProductSubscriptionResult) ProductSubscription() ProductSubscription {
 	return r.ProductSubscriptionValue
@@ -118,9 +94,7 @@ func (r *CreatePaidProductSubscriptionResult) ProductSubscription() ProductSubsc
 
 // UpdatePaidProductSubscriptionResult implements the GraphQL type
 // UpdatePaidProductSubscriptionResult.
-type UpdatePaidProductSubscriptionResult struct {
-	ProductSubscriptionValue ProductSubscription
-}
+type UpdatePaidProductSubscriptionResult struct { /* all structs must go */ }
 
 func (r *UpdatePaidProductSubscriptionResult) ProductSubscription() ProductSubscription {
 	return r.ProductSubscriptionValue
@@ -128,15 +102,9 @@ func (r *UpdatePaidProductSubscriptionResult) ProductSubscription() ProductSubsc
 
 type ArchiveProductSubscriptionArgs struct{ ID graphql.ID }
 
-type ProductSubscriptionArgs struct {
-	UUID string
-}
+type ProductSubscriptionArgs struct { /* all structs must go */ }
 
-type ProductSubscriptionsArgs struct {
-	graphqlutil.ConnectionArgs
-	Account *graphql.ID
-	Query   *string
-}
+type ProductSubscriptionsArgs struct { /* all structs must go */ }
 
 // ProductSubscriptionConnection is the interface for the GraphQL type
 // ProductSubscriptionConnection.
@@ -146,11 +114,7 @@ type ProductSubscriptionConnection interface {
 	PageInfo(context.Context) (*graphqlutil.PageInfo, error)
 }
 
-type PreviewProductSubscriptionInvoiceArgs struct {
-	Account              *graphql.ID
-	SubscriptionToUpdate *graphql.ID
-	ProductSubscription  ProductSubscriptionInput
-}
+type PreviewProductSubscriptionInvoiceArgs struct { /* all structs must go */ }
 
 // ProductLicenseByID is called to look up a ProductLicense given its GraphQL ID.
 //
@@ -167,17 +131,9 @@ type ProductLicense interface {
 }
 
 // ProductLicenseInput implements the GraphQL type ProductLicenseInput.
-type ProductLicenseInput struct {
-	Tags      []string
-	UserCount int32
-	ExpiresAt int32
-}
+type ProductLicenseInput struct { /* all structs must go */ }
 
-type ProductLicensesArgs struct {
-	graphqlutil.ConnectionArgs
-	LicenseKeySubstring   *string
-	ProductSubscriptionID *graphql.ID
-}
+type ProductLicensesArgs struct { /* all structs must go */ }
 
 // ProductLicenseConnection is the interface for the GraphQL type ProductLicenseConnection.
 type ProductLicenseConnection interface {
diff --git a/cmd/frontend/graphqlbackend/event_log.go b/cmd/frontend/graphqlbackend/event_log.go
index 43d646e..bf18938 100644
--- a/cmd/frontend/graphqlbackend/event_log.go
+++ b/cmd/frontend/graphqlbackend/event_log.go
@@ -7,9 +7,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/errcode"
 )
 
-type userEventLogResolver struct {
-	event *types.Event
-}
+type userEventLogResolver struct { /* all structs must go */ }
 
 func (s *userEventLogResolver) User(ctx context.Context) (*UserResolver, error) {
 	if s.event.UserID != nil {
diff --git a/cmd/frontend/graphqlbackend/event_logs.go b/cmd/frontend/graphqlbackend/event_logs.go
index f232882..ceb8d96 100644
--- a/cmd/frontend/graphqlbackend/event_logs.go
+++ b/cmd/frontend/graphqlbackend/event_logs.go
@@ -8,9 +8,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/db"
 )
 
-func (r *UserResolver) EventLogs(ctx context.Context, args *struct {
-	graphqlutil.ConnectionArgs
-}) (*userEventLogsConnectionResolver, error) {
+func (r *UserResolver) EventLogs(ctx context.Context, args *struct { /* all structs must go */ }) (*userEventLogsConnectionResolver, error) {
 	// 🚨 SECURITY: Event logs can only be viewed by the user or site admin.
 	if err := backend.CheckSiteAdminOrSameUser(ctx, r.user.ID); err != nil {
 		return nil, err
@@ -21,9 +19,7 @@ func (r *UserResolver) EventLogs(ctx context.Context, args *struct {
 	return &userEventLogsConnectionResolver{opt: opt}, nil
 }
 
-type userEventLogsConnectionResolver struct {
-	opt db.EventLogsListOptions
-}
+type userEventLogsConnectionResolver struct { /* all structs must go */ }
 
 func (r *userEventLogsConnectionResolver) Nodes(ctx context.Context) ([]*userEventLogResolver, error) {
 	events, err := db.EventLogs.ListAll(ctx, r.opt)
diff --git a/cmd/frontend/graphqlbackend/extension_registry.go b/cmd/frontend/graphqlbackend/extension_registry.go
index a7981b6..0a0a95d 100644
--- a/cmd/frontend/graphqlbackend/extension_registry.go
+++ b/cmd/frontend/graphqlbackend/extension_registry.go
@@ -52,40 +52,17 @@ type ExtensionRegistryResolver interface {
 	FilterRemoteExtensions([]string) []string // not exposed via GraphQL
 }
 
-type RegistryExtensionConnectionArgs struct {
-	graphqlutil.ConnectionArgs
-	Query                  *string
-	Publisher              *graphql.ID
-	Local                  bool
-	Remote                 bool
-	PrioritizeExtensionIDs *[]string
-}
+type RegistryExtensionConnectionArgs struct { /* all structs must go */ }
 
-type ExtensionRegistryExtensionArgs struct {
-	ExtensionID string
-}
+type ExtensionRegistryExtensionArgs struct { /* all structs must go */ }
 
-type ExtensionRegistryCreateExtensionArgs struct {
-	Publisher graphql.ID
-	Name      string
-}
+type ExtensionRegistryCreateExtensionArgs struct { /* all structs must go */ }
 
-type ExtensionRegistryUpdateExtensionArgs struct {
-	Extension graphql.ID
-	Name      *string
-}
+type ExtensionRegistryUpdateExtensionArgs struct { /* all structs must go */ }
 
-type ExtensionRegistryPublishExtensionArgs struct {
-	ExtensionID string
-	Manifest    string
-	Bundle      *string
-	SourceMap   *string
-	Force       bool
-}
+type ExtensionRegistryPublishExtensionArgs struct { /* all structs must go */ }
 
-type ExtensionRegistryDeleteExtensionArgs struct {
-	Extension graphql.ID
-}
+type ExtensionRegistryDeleteExtensionArgs struct { /* all structs must go */ }
 
 // ExtensionRegistryMutationResult is the interface for the GraphQL type ExtensionRegistryMutationResult.
 type ExtensionRegistryMutationResult interface {
diff --git a/cmd/frontend/graphqlbackend/external_account.go b/cmd/frontend/graphqlbackend/external_account.go
index 3b95afe..3318459 100644
--- a/cmd/frontend/graphqlbackend/external_account.go
+++ b/cmd/frontend/graphqlbackend/external_account.go
@@ -10,9 +10,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/extsvc"
 )
 
-type externalAccountResolver struct {
-	account extsvc.Account
-}
+type externalAccountResolver struct { /* all structs must go */ }
 
 func externalAccountByID(ctx context.Context, id graphql.ID) (*externalAccountResolver, error) {
 	externalAccountID, err := unmarshalExternalAccountID(id)
diff --git a/cmd/frontend/graphqlbackend/external_accounts.go b/cmd/frontend/graphqlbackend/external_accounts.go
index b81b944..7ff0d99 100644
--- a/cmd/frontend/graphqlbackend/external_accounts.go
+++ b/cmd/frontend/graphqlbackend/external_accounts.go
@@ -11,13 +11,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/extsvc"
 )
 
-func (r *siteResolver) ExternalAccounts(ctx context.Context, args *struct {
-	graphqlutil.ConnectionArgs
-	User        *graphql.ID
-	ServiceType *string
-	ServiceID   *string
-	ClientID    *string
-}) (*externalAccountConnectionResolver, error) {
+func (r *siteResolver) ExternalAccounts(ctx context.Context, args *struct { /* all structs must go */ }) (*externalAccountConnectionResolver, error) {
 	// 🚨 SECURITY: Only site admins can list all external accounts.
 	if err := backend.CheckCurrentUserIsSiteAdmin(ctx); err != nil {
 		return nil, err
@@ -44,9 +38,7 @@ func (r *siteResolver) ExternalAccounts(ctx context.Context, args *struct {
 	return &externalAccountConnectionResolver{opt: opt}, nil
 }
 
-func (r *UserResolver) ExternalAccounts(ctx context.Context, args *struct {
-	graphqlutil.ConnectionArgs
-}) (*externalAccountConnectionResolver, error) {
+func (r *UserResolver) ExternalAccounts(ctx context.Context, args *struct { /* all structs must go */ }) (*externalAccountConnectionResolver, error) {
 	// 🚨 SECURITY: Only site admins and the user can list a user's external accounts.
 	if err := backend.CheckSiteAdminOrSameUser(ctx, r.user.ID); err != nil {
 		return nil, err
@@ -63,14 +55,7 @@ func (r *UserResolver) ExternalAccounts(ctx context.Context, args *struct {
 //
 // 🚨 SECURITY: When instantiating an externalAccountConnectionResolver value, the caller MUST check
 // permissions.
-type externalAccountConnectionResolver struct {
-	opt db.ExternalAccountsListOptions
-
-	// cache results because they are used by multiple fields
-	once             sync.Once
-	externalAccounts []*extsvc.Account
-	err              error
-}
+type externalAccountConnectionResolver struct { /* all structs must go */ }
 
 func (r *externalAccountConnectionResolver) compute(ctx context.Context) ([]*extsvc.Account, error) {
 	r.once.Do(func() {
@@ -112,9 +97,7 @@ func (r *externalAccountConnectionResolver) PageInfo(ctx context.Context) (*grap
 	return graphqlutil.HasNextPage(r.opt.LimitOffset != nil && len(externalAccounts) > r.opt.Limit), nil
 }
 
-func (r *schemaResolver) DeleteExternalAccount(ctx context.Context, args *struct {
-	ExternalAccount graphql.ID
-}) (*EmptyResponse, error) {
+func (r *schemaResolver) DeleteExternalAccount(ctx context.Context, args *struct { /* all structs must go */ }) (*EmptyResponse, error) {
 	id, err := unmarshalExternalAccountID(args.ExternalAccount)
 	if err != nil {
 		return nil, err
diff --git a/cmd/frontend/graphqlbackend/external_service.go b/cmd/frontend/graphqlbackend/external_service.go
index 77d0c0b..a206878 100644
--- a/cmd/frontend/graphqlbackend/external_service.go
+++ b/cmd/frontend/graphqlbackend/external_service.go
@@ -16,14 +16,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/schema"
 )
 
-type externalServiceResolver struct {
-	externalService *types.ExternalService
-	warning         string
-
-	webhookURLOnce sync.Once
-	webhookURL     string
-	webhookErr     error
-}
+type externalServiceResolver struct { /* all structs must go */ }
 
 const externalServiceIDKind = "ExternalService"
 
diff --git a/cmd/frontend/graphqlbackend/external_services.go b/cmd/frontend/graphqlbackend/external_services.go
index b44175b..7267cf9 100644
--- a/cmd/frontend/graphqlbackend/external_services.go
+++ b/cmd/frontend/graphqlbackend/external_services.go
@@ -23,13 +23,7 @@ import (
 
 var extsvcConfigAllowEdits, _ = strconv.ParseBool(env.Get("EXTSVC_CONFIG_ALLOW_EDITS", "false", "When EXTSVC_CONFIG_FILE is in use, allow edits in the application to be made which will be overwritten on next process restart"))
 
-func (r *schemaResolver) AddExternalService(ctx context.Context, args *struct {
-	Input struct {
-		Kind        string
-		DisplayName string
-		Config      string
-	}
-}) (*externalServiceResolver, error) {
+func (r *schemaResolver) AddExternalService(ctx context.Context, args *struct { /* all structs must go */ }) (*externalServiceResolver, error) {
 	// 🚨 SECURITY: Only site admins may add external services.
 	if err := backend.CheckCurrentUserIsSiteAdmin(ctx); err != nil {
 		return nil, err
@@ -56,15 +50,9 @@ func (r *schemaResolver) AddExternalService(ctx context.Context, args *struct {
 	return res, nil
 }
 
-type UpdateExternalServiceInput struct {
-	ID          graphql.ID
-	DisplayName *string
-	Config      *string
-}
+type UpdateExternalServiceInput struct { /* all structs must go */ }
 
-func (*schemaResolver) UpdateExternalService(ctx context.Context, args *struct {
-	Input UpdateExternalServiceInput
-}) (*externalServiceResolver, error) {
+func (*schemaResolver) UpdateExternalService(ctx context.Context, args *struct { /* all structs must go */ }) (*externalServiceResolver, error) {
 	// 🚨 SECURITY: Only site admins are allowed to update the user.
 	if err := backend.CheckCurrentUserIsSiteAdmin(ctx); err != nil {
 		return nil, err
@@ -128,9 +116,7 @@ func syncExternalService(ctx context.Context, svc *types.ExternalService) error
 	return nil
 }
 
-func (*schemaResolver) DeleteExternalService(ctx context.Context, args *struct {
-	ExternalService graphql.ID
-}) (*EmptyResponse, error) {
+func (*schemaResolver) DeleteExternalService(ctx context.Context, args *struct { /* all structs must go */ }) (*EmptyResponse, error) {
 	// 🚨 SECURITY: Only site admins can delete external services.
 	if err := backend.CheckCurrentUserIsSiteAdmin(ctx); err != nil {
 		return nil, err
@@ -164,9 +150,7 @@ func (*schemaResolver) DeleteExternalService(ctx context.Context, args *struct {
 	return &EmptyResponse{}, nil
 }
 
-func (r *schemaResolver) ExternalServices(ctx context.Context, args *struct {
-	graphqlutil.ConnectionArgs
-}) (*externalServiceConnectionResolver, error) {
+func (r *schemaResolver) ExternalServices(ctx context.Context, args *struct { /* all structs must go */ }) (*externalServiceConnectionResolver, error) {
 	// 🚨 SECURITY: Only site admins may read external services (they have secrets).
 	if err := backend.CheckCurrentUserIsSiteAdmin(ctx); err != nil {
 		return nil, err
@@ -176,14 +160,7 @@ func (r *schemaResolver) ExternalServices(ctx context.Context, args *struct {
 	return &externalServiceConnectionResolver{opt: opt}, nil
 }
 
-type externalServiceConnectionResolver struct {
-	opt db.ExternalServicesListOptions
-
-	// cache results because they are used by multiple fields
-	once             sync.Once
-	externalServices []*types.ExternalService
-	err              error
-}
+type externalServiceConnectionResolver struct { /* all structs must go */ }
 
 func (r *externalServiceConnectionResolver) compute(ctx context.Context) ([]*types.ExternalService, error) {
 	r.once.Do(func() {
@@ -217,10 +194,7 @@ func (r *externalServiceConnectionResolver) PageInfo(ctx context.Context) (*grap
 	return graphqlutil.HasNextPage(r.opt.LimitOffset != nil && len(externalServices) >= r.opt.Limit), nil
 }
 
-type computedExternalServiceConnectionResolver struct {
-	args             graphqlutil.ConnectionArgs
-	externalServices []*types.ExternalService
-}
+type computedExternalServiceConnectionResolver struct { /* all structs must go */ }
 
 func (r *computedExternalServiceConnectionResolver) Nodes(ctx context.Context) []*externalServiceResolver {
 	svcs := r.externalServices
diff --git a/cmd/frontend/graphqlbackend/external_services_test.go b/cmd/frontend/graphqlbackend/external_services_test.go
index 05cf00d..0b2988b 100644
--- a/cmd/frontend/graphqlbackend/external_services_test.go
+++ b/cmd/frontend/graphqlbackend/external_services_test.go
@@ -101,9 +101,7 @@ func TestUpdateExternalService(t *testing.T) {
 		})
 
 		ctx := actor.WithActor(context.Background(), &actor.Actor{UID: 1})
-		result, err := (&schemaResolver{}).UpdateExternalService(ctx, &struct {
-			Input UpdateExternalServiceInput
-		}{
+		result, err := (&schemaResolver{}).UpdateExternalService(ctx, &struct { /* all structs must go */ }{
 			Input: UpdateExternalServiceInput{
 				ID:     "RXh0ZXJuYWxTZXJ2aWNlOjQ=",
 				Config: strptr(""),
diff --git a/cmd/frontend/graphqlbackend/externallink/resolver.go b/cmd/frontend/graphqlbackend/externallink/resolver.go
index c079f3b..52453cb 100644
--- a/cmd/frontend/graphqlbackend/externallink/resolver.go
+++ b/cmd/frontend/graphqlbackend/externallink/resolver.go
@@ -7,10 +7,7 @@ import "fmt"
 //
 // For example, a repository might have 2 external links, one to its origin repository on GitHub.com
 // and one to the repository on Phabricator.
-type Resolver struct {
-	url         string // the URL to the resource
-	serviceType string // the type of service that the URL points to, used for showing a nice icon
-}
+type Resolver struct { /* all structs must go */ }
 
 func NewResolver(url, serviceType string) *Resolver {
 	return &Resolver{url: url, serviceType: serviceType}
diff --git a/cmd/frontend/graphqlbackend/file.go b/cmd/frontend/graphqlbackend/file.go
index 66c86ae..dcbd9c9 100644
--- a/cmd/frontend/graphqlbackend/file.go
+++ b/cmd/frontend/graphqlbackend/file.go
@@ -36,23 +36,13 @@ func richHTML(content, ext string) (string, error) {
 	return markdown.Render(content), nil
 }
 
-type markdownOptions struct {
-	AlwaysNil *string
-}
+type markdownOptions struct { /* all structs must go */ }
 
-func (*schemaResolver) RenderMarkdown(args *struct {
-	Markdown string
-	Options  *markdownOptions
-}) string {
+func (*schemaResolver) RenderMarkdown(args *struct { /* all structs must go */ }) string {
 	return markdown.Render(args.Markdown)
 }
 
-func (*schemaResolver) HighlightCode(ctx context.Context, args *struct {
-	Code           string
-	FuzzyLanguage  string
-	DisableTimeout bool
-	IsLightTheme   bool
-}) (string, error) {
+func (*schemaResolver) HighlightCode(ctx context.Context, args *struct { /* all structs must go */ }) (string, error) {
 	language := highlight.SyntectLanguageMap[strings.ToLower(args.FuzzyLanguage)]
 	filePath := "file." + language
 	html, _, err := highlight.Code(ctx, highlight.Params{
diff --git a/cmd/frontend/graphqlbackend/git_blob.go b/cmd/frontend/graphqlbackend/git_blob.go
index c687bde..af8aa8f 100644
--- a/cmd/frontend/graphqlbackend/git_blob.go
+++ b/cmd/frontend/graphqlbackend/git_blob.go
@@ -9,10 +9,7 @@ import (
 )
 
 func (r *GitTreeEntryResolver) Blame(ctx context.Context,
-	args *struct {
-		StartLine int32
-		EndLine   int32
-	}) ([]*hunkResolver, error) {
+	args *struct { /* all structs must go */ }) ([]*hunkResolver, error) {
 	hunks, err := git.BlameFile(ctx, gitserver.Repo{Name: r.commit.repoResolver.repo.Name}, r.Path(), &git.BlameOptions{
 		NewestCommit: api.CommitID(r.commit.OID()),
 		StartLine:    int(args.StartLine),
diff --git a/cmd/frontend/graphqlbackend/git_blob_test.go b/cmd/frontend/graphqlbackend/git_blob_test.go
index 594e7fa..df2e22d 100644
--- a/cmd/frontend/graphqlbackend/git_blob_test.go
+++ b/cmd/frontend/graphqlbackend/git_blob_test.go
@@ -7,11 +7,7 @@ import (
 )
 
 func TestIsBinary(t *testing.T) {
-	tests := []struct {
-		name  string
-		input []byte
-		want  bool
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:  "text UTF8",
 			input: []byte("hello world!"),
diff --git a/cmd/frontend/graphqlbackend/git_commit.go b/cmd/frontend/graphqlbackend/git_commit.go
index 78b5c3e..8f4bc7d 100644
--- a/cmd/frontend/graphqlbackend/git_commit.go
+++ b/cmd/frontend/graphqlbackend/git_commit.go
@@ -29,28 +29,7 @@ func gitCommitByID(ctx context.Context, id graphql.ID) (*GitCommitResolver, erro
 	return repo.Commit(ctx, &RepositoryCommitArgs{Rev: string(commitID)})
 }
 
-type GitCommitResolver struct {
-	repoResolver *RepositoryResolver
-
-	// inputRev is the Git revspec that the user originally requested that resolved to this Git commit. It is used
-	// to avoid redirecting a user browsing a revision "mybranch" to the absolute commit ID as they follow links in the UI.
-	inputRev *string
-
-	// fetch + serve sourcegraph stored user information
-	includeUserInfo bool
-
-	// oid MUST be specified and a 40-character Git SHA.
-	oid GitObjectID
-
-	author    signatureResolver
-	committer *signatureResolver
-	message   string
-	parents   []api.CommitID
-
-	// once ensures that fetching git commit information occurs once
-	once sync.Once
-	err  error
-}
+type GitCommitResolver struct { /* all structs must go */ }
 
 func toGitCommitResolver(repo *RepositoryResolver, commit *git.Commit) *GitCommitResolver {
 	res := &GitCommitResolver{
@@ -95,10 +74,7 @@ func (r *GitCommitResolver) consumeCommit(commit *git.Commit) {
 
 // gitCommitGQLID is a type used for marshaling and unmarshaling a Git commit's
 // GraphQL ID.
-type gitCommitGQLID struct {
-	Repository graphql.ID  `json:"r"`
-	CommitID   GitObjectID `json:"c"`
-}
+type gitCommitGQLID struct { /* all structs must go */ }
 
 func marshalGitCommitID(repo graphql.ID, commitID GitObjectID) graphql.ID {
 	return relay.MarshalID("GitCommit", gitCommitGQLID{Repository: repo, CommitID: commitID})
@@ -182,10 +158,7 @@ func (r *GitCommitResolver) ExternalURLs(ctx context.Context) ([]*externallink.R
 	return externallink.Commit(ctx, r.repoResolver.repo, api.CommitID(r.oid))
 }
 
-func (r *GitCommitResolver) Tree(ctx context.Context, args *struct {
-	Path      string
-	Recursive bool
-}) (*GitTreeEntryResolver, error) {
+func (r *GitCommitResolver) Tree(ctx context.Context, args *struct { /* all structs must go */ }) (*GitTreeEntryResolver, error) {
 	cachedRepo, err := backend.CachedGitRepo(ctx, r.repoResolver.repo)
 	if err != nil {
 		return nil, err
@@ -204,9 +177,7 @@ func (r *GitCommitResolver) Tree(ctx context.Context, args *struct {
 	}, nil
 }
 
-func (r *GitCommitResolver) Blob(ctx context.Context, args *struct {
-	Path string
-}) (*GitTreeEntryResolver, error) {
+func (r *GitCommitResolver) Blob(ctx context.Context, args *struct { /* all structs must go */ }) (*GitTreeEntryResolver, error) {
 	cachedRepo, err := backend.CachedGitRepo(ctx, r.repoResolver.repo)
 	if err != nil {
 		return nil, err
@@ -224,9 +195,7 @@ func (r *GitCommitResolver) Blob(ctx context.Context, args *struct {
 	}, nil
 }
 
-func (r *GitCommitResolver) File(ctx context.Context, args *struct {
-	Path string
-}) (*GitTreeEntryResolver, error) {
+func (r *GitCommitResolver) File(ctx context.Context, args *struct { /* all structs must go */ }) (*GitTreeEntryResolver, error) {
 	return r.Blob(ctx, args)
 }
 
@@ -257,12 +226,7 @@ func (r *GitCommitResolver) LanguageStatistics(ctx context.Context) ([]*language
 	return stats, nil
 }
 
-func (r *GitCommitResolver) Ancestors(ctx context.Context, args *struct {
-	graphqlutil.ConnectionArgs
-	Query *string
-	Path  *string
-	After *string
-}) (*gitCommitConnectionResolver, error) {
+func (r *GitCommitResolver) Ancestors(ctx context.Context, args *struct { /* all structs must go */ }) (*gitCommitConnectionResolver, error) {
 	return &gitCommitConnectionResolver{
 		revisionRange: string(r.oid),
 		first:         args.ConnectionArgs.First,
@@ -273,9 +237,7 @@ func (r *GitCommitResolver) Ancestors(ctx context.Context, args *struct {
 	}, nil
 }
 
-func (r *GitCommitResolver) BehindAhead(ctx context.Context, args *struct {
-	Revspec string
-}) (*behindAheadCountsResolver, error) {
+func (r *GitCommitResolver) BehindAhead(ctx context.Context, args *struct { /* all structs must go */ }) (*behindAheadCountsResolver, error) {
 	cachedRepo, err := backend.CachedGitRepo(ctx, r.repoResolver.repo)
 	if err != nil {
 		return nil, err
diff --git a/cmd/frontend/graphqlbackend/git_commits.go b/cmd/frontend/graphqlbackend/git_commits.go
index c9990a6..81c4762 100644
--- a/cmd/frontend/graphqlbackend/git_commits.go
+++ b/cmd/frontend/graphqlbackend/git_commits.go
@@ -9,22 +9,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/vcs/git"
 )
 
-type gitCommitConnectionResolver struct {
-	revisionRange string
-
-	first  *int32
-	query  *string
-	path   *string
-	author *string
-	after  *string
-
-	repo *RepositoryResolver
-
-	// cache results because it is used by multiple fields
-	once    sync.Once
-	commits []*git.Commit
-	err     error
-}
+type gitCommitConnectionResolver struct { /* all structs must go */ }
 
 func (r *gitCommitConnectionResolver) compute(ctx context.Context) ([]*git.Commit, error) {
 	do := func() ([]*git.Commit, error) {
diff --git a/cmd/frontend/graphqlbackend/git_object.go b/cmd/frontend/graphqlbackend/git_object.go
index a491084..849dc7d 100644
--- a/cmd/frontend/graphqlbackend/git_object.go
+++ b/cmd/frontend/graphqlbackend/git_object.go
@@ -49,11 +49,7 @@ func (id *GitObjectID) UnmarshalGraphQL(input interface{}) error {
 	return errors.New("GitObjectID: expected 40-character string (SHA-1 hash)")
 }
 
-type gitObject struct {
-	repo *RepositoryResolver
-	oid  GitObjectID
-	typ  gitObjectType
-}
+type gitObject struct { /* all structs must go */ }
 
 func (o *gitObject) OID(ctx context.Context) (GitObjectID, error) { return o.oid, nil }
 func (o *gitObject) AbbreviatedOID(ctx context.Context) (string, error) {
@@ -65,15 +61,7 @@ func (o *gitObject) Commit(ctx context.Context) (*GitCommitResolver, error) {
 }
 func (o *gitObject) Type(context.Context) (gitObjectType, error) { return o.typ, nil }
 
-type gitObjectResolver struct {
-	repo    *RepositoryResolver
-	revspec string
-
-	once sync.Once
-	oid  GitObjectID
-	typ  gitObjectType
-	err  error
-}
+type gitObjectResolver struct { /* all structs must go */ }
 
 func (o *gitObjectResolver) resolve(ctx context.Context) (GitObjectID, gitObjectType, error) {
 	o.once.Do(func() {
diff --git a/cmd/frontend/graphqlbackend/git_ref.go b/cmd/frontend/graphqlbackend/git_ref.go
index a8ca974..d5e82b9 100644
--- a/cmd/frontend/graphqlbackend/git_ref.go
+++ b/cmd/frontend/graphqlbackend/git_ref.go
@@ -79,22 +79,11 @@ func NewGitRefResolver(repo *RepositoryResolver, name string, target GitObjectID
 	return &GitRefResolver{repo: repo, name: name, target: target}
 }
 
-type GitRefResolver struct {
-	repo *RepositoryResolver
-	name string
-
-	target GitObjectID // the target's OID, if known (otherwise computed on demand)
-
-	gitObjectResolverOnce sync.Once
-	gitObjectResolver     *gitObjectResolver
-}
+type GitRefResolver struct { /* all structs must go */ }
 
 // gitRefGQLID is a type used for marshaling and unmarshaling a Git ref's
 // GraphQL ID.
-type gitRefGQLID struct {
-	Repository graphql.ID `json:"r"`
-	Rev        string     `json:"v"`
-}
+type gitRefGQLID struct { /* all structs must go */ }
 
 func marshalGitRefID(repo graphql.ID, rev string) graphql.ID {
 	return relay.MarshalID("GitRef", gitRefGQLID{Repository: repo, Rev: rev})
diff --git a/cmd/frontend/graphqlbackend/git_revision.go b/cmd/frontend/graphqlbackend/git_revision.go
index 229d905..f5b3cf0 100644
--- a/cmd/frontend/graphqlbackend/git_revision.go
+++ b/cmd/frontend/graphqlbackend/git_revision.go
@@ -9,10 +9,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/vcs/git"
 )
 
-type gitRevSpecExpr struct {
-	expr string
-	repo *RepositoryResolver
-}
+type gitRevSpecExpr struct { /* all structs must go */ }
 
 func (r *gitRevSpecExpr) Expr() string { return r.expr }
 
@@ -31,21 +28,13 @@ func (r *gitRevSpecExpr) Object(ctx context.Context) (*gitObject, error) {
 	}, nil
 }
 
-type gitRevSpec struct {
-	ref    *GitRefResolver
-	expr   *gitRevSpecExpr
-	object *gitObject
-}
+type gitRevSpec struct { /* all structs must go */ }
 
 func (r *gitRevSpec) ToGitRef() (*GitRefResolver, bool)         { return r.ref, r.ref != nil }
 func (r *gitRevSpec) ToGitRevSpecExpr() (*gitRevSpecExpr, bool) { return r.expr, r.expr != nil }
 func (r *gitRevSpec) ToGitObject() (*gitObject, bool)           { return r.object, r.object != nil }
 
-type gitRevisionRange struct {
-	expr       string
-	base, head *gitRevSpec
-	mergeBase  *gitObject
-}
+type gitRevisionRange struct { /* all structs must go */ }
 
 func (r *gitRevisionRange) Expr() string      { return r.expr }
 func (r *gitRevisionRange) Base() *gitRevSpec { return r.base }
diff --git a/cmd/frontend/graphqlbackend/git_tree.go b/cmd/frontend/graphqlbackend/git_tree.go
index d3419c9..5a9f1e0 100644
--- a/cmd/frontend/graphqlbackend/git_tree.go
+++ b/cmd/frontend/graphqlbackend/git_tree.go
@@ -18,13 +18,7 @@ func (r *GitTreeEntryResolver) IsRoot() bool {
 	return path == "/" || path == "." || path == ""
 }
 
-type gitTreeEntryConnectionArgs struct {
-	graphqlutil.ConnectionArgs
-	Recursive bool
-	// If recurseSingleChild is true, we will return a flat list of every
-	// directory and file in a single-child nest.
-	RecursiveSingleChild bool
-}
+type gitTreeEntryConnectionArgs struct { /* all structs must go */ }
 
 func (r *GitTreeEntryResolver) Entries(ctx context.Context, args *gitTreeEntryConnectionArgs) ([]*GitTreeEntryResolver, error) {
 	return r.entries(ctx, args, nil)
diff --git a/cmd/frontend/graphqlbackend/git_tree_entry.go b/cmd/frontend/graphqlbackend/git_tree_entry.go
index 29bc52b..c6bbfed 100644
--- a/cmd/frontend/graphqlbackend/git_tree_entry.go
+++ b/cmd/frontend/graphqlbackend/git_tree_entry.go
@@ -36,20 +36,7 @@ func init() {
 
 // GitTreeEntryResolver resolves an entry in a Git tree in a repository. The entry can be any Git
 // object type that is valid in a tree.
-type GitTreeEntryResolver struct {
-	commit *GitCommitResolver
-
-	contentOnce sync.Once
-	content     []byte
-	contentErr  error
-
-	// stat is this tree entry's file info. Its Name method must return the full path relative to
-	// the root, not the basename.
-	stat os.FileInfo
-
-	isRecursive   bool  // whether entries is populated recursively (otherwise just current level of hierarchy)
-	isSingleChild *bool // whether this is the single entry in its parent. Only set by the (&GitTreeEntryResolver) entries.
-}
+type GitTreeEntryResolver struct { /* all structs must go */ }
 
 func NewGitTreeEntryResolver(commit *GitCommitResolver, stat os.FileInfo) *GitTreeEntryResolver {
 	return &GitTreeEntryResolver{commit: commit, stat: stat}
@@ -309,11 +296,7 @@ func (r *GitTreeEntryResolver) LSIF(ctx context.Context, args *struct{ ToolName
 	})
 }
 
-type fileInfo struct {
-	path  string
-	size  int64
-	isDir bool
-}
+type fileInfo struct { /* all structs must go */ }
 
 func (f fileInfo) Name() string { return f.path }
 func (f fileInfo) Size() int64  { return f.size }
diff --git a/cmd/frontend/graphqlbackend/git_tree_submodule.go b/cmd/frontend/graphqlbackend/git_tree_submodule.go
index 1bb5047..69094f2 100644
--- a/cmd/frontend/graphqlbackend/git_tree_submodule.go
+++ b/cmd/frontend/graphqlbackend/git_tree_submodule.go
@@ -2,9 +2,7 @@ package graphqlbackend
 
 import "github.com/sourcegraph/sourcegraph/internal/vcs/git"
 
-type gitSubmoduleResolver struct {
-	submodule git.Submodule
-}
+type gitSubmoduleResolver struct { /* all structs must go */ }
 
 func (r *gitSubmoduleResolver) URL() string {
 	return r.submodule.URL
diff --git a/cmd/frontend/graphqlbackend/graphqlbackend.go b/cmd/frontend/graphqlbackend/graphqlbackend.go
index 0e64de5..d5bc8af 100644
--- a/cmd/frontend/graphqlbackend/graphqlbackend.go
+++ b/cmd/frontend/graphqlbackend/graphqlbackend.go
@@ -43,9 +43,7 @@ func init() {
 	prometheus.MustRegister(codeIntelSearchHistogram)
 }
 
-type prometheusTracer struct {
-	trace.OpenTracingTracer
-}
+type prometheusTracer struct { /* all structs must go */ }
 
 func (prometheusTracer) TraceQuery(ctx context.Context, queryString string, operationName string, variables map[string]interface{}, varTypes map[string]*introspection.Type) (context.Context, trace.TraceQueryFinishFunc) {
 	start := time.Now()
@@ -372,9 +370,7 @@ type Node interface {
 	ID() graphql.ID
 }
 
-type NodeResolver struct {
-	Node
-}
+type NodeResolver struct { /* all structs must go */ }
 
 func (r *NodeResolver) ToAccessToken() (*accessTokenResolver, bool) {
 	n, ok := r.Node.(*accessTokenResolver)
@@ -513,18 +509,11 @@ func (r *NodeResolver) ToVersionContext() (*versionContextResolver, bool) {
 // schemaResolver handles all GraphQL queries for Sourcegraph. To do this, it
 // uses subresolvers which are globals. Enterprise-only resolvers are assigned
 // to a field of EnterpriseResolvers.
-type schemaResolver struct {
-	CampaignsResolver
-	AuthzResolver
-	CodeIntelResolver
-}
+type schemaResolver struct { /* all structs must go */ }
 
 // EnterpriseResolvers holds the instances of resolvers which are enabled only
 // in enterprise mode. These resolver instances are nil when running as OSS.
-var EnterpriseResolvers = struct {
-	codeIntelResolver CodeIntelResolver
-	authzResolver     AuthzResolver
-}{
+var EnterpriseResolvers = struct { /* all structs must go */ }{
 	codeIntelResolver: defaultCodeIntelResolver{},
 	authzResolver:     defaultAuthzResolver{},
 }
@@ -598,20 +587,12 @@ func (r *schemaResolver) nodeByID(ctx context.Context, id graphql.ID) (Node, err
 	}
 }
 
-func (r *schemaResolver) Repository(ctx context.Context, args *struct {
-	Name     *string
-	CloneURL *string
-	// TODO(chris): Remove URI in favor of Name.
-	URI *string
-}) (*RepositoryResolver, error) {
+func (r *schemaResolver) Repository(ctx context.Context, args *struct { /* all structs must go */ }) (*RepositoryResolver, error) {
 	// Deprecated query by "URI"
 	if args.URI != nil && args.Name == nil {
 		args.Name = args.URI
 	}
-	resolver, err := r.RepositoryRedirect(ctx, &struct {
-		Name     *string
-		CloneURL *string
-	}{args.Name, args.CloneURL})
+	resolver, err := r.RepositoryRedirect(ctx, &struct { /* all structs must go */ }{args.Name, args.CloneURL})
 	if err != nil {
 		return nil, err
 	}
@@ -621,18 +602,13 @@ func (r *schemaResolver) Repository(ctx context.Context, args *struct {
 	return resolver.repo, nil
 }
 
-type RedirectResolver struct {
-	url string
-}
+type RedirectResolver struct { /* all structs must go */ }
 
 func (r *RedirectResolver) URL() string {
 	return r.url
 }
 
-type repositoryRedirect struct {
-	repo     *RepositoryResolver
-	redirect *RedirectResolver
-}
+type repositoryRedirect struct { /* all structs must go */ }
 
 func (r *repositoryRedirect) ToRepository() (*RepositoryResolver, bool) {
 	return r.repo, r.repo != nil
@@ -642,10 +618,7 @@ func (r *repositoryRedirect) ToRedirect() (*RedirectResolver, bool) {
 	return r.redirect, r.redirect != nil
 }
 
-func (r *schemaResolver) RepositoryRedirect(ctx context.Context, args *struct {
-	Name     *string
-	CloneURL *string
-}) (*repositoryRedirect, error) {
+func (r *schemaResolver) RepositoryRedirect(ctx context.Context, args *struct { /* all structs must go */ }) (*repositoryRedirect, error) {
 	var name api.RepoName
 	if args.Name != nil {
 		// Query by name
@@ -678,11 +651,7 @@ func (r *schemaResolver) RepositoryRedirect(ctx context.Context, args *struct {
 	return &repositoryRedirect{repo: &RepositoryResolver{repo: repo}}, nil
 }
 
-func (r *schemaResolver) PhabricatorRepo(ctx context.Context, args *struct {
-	Name *string
-	// TODO(chris): Remove URI in favor of Name.
-	URI *string
-}) (*phabricatorRepoResolver, error) {
+func (r *schemaResolver) PhabricatorRepo(ctx context.Context, args *struct { /* all structs must go */ }) (*phabricatorRepoResolver, error) {
 	if args.Name != nil {
 		args.URI = args.Name
 	}
diff --git a/cmd/frontend/graphqlbackend/graphqlutil/connection.go b/cmd/frontend/graphqlbackend/graphqlutil/connection.go
index 3e6a77a..7479d69 100644
--- a/cmd/frontend/graphqlbackend/graphqlutil/connection.go
+++ b/cmd/frontend/graphqlbackend/graphqlutil/connection.go
@@ -3,9 +3,7 @@ package graphqlutil
 import "github.com/sourcegraph/sourcegraph/internal/db"
 
 // ConnectionArgs is the common set of arguments to GraphQL fields that return connections (lists).
-type ConnectionArgs struct {
-	First *int32 // return the first n items
-}
+type ConnectionArgs struct { /* all structs must go */ }
 
 // Set is a convenience method for setting the DB limit and offset in a DB XyzListOptions struct.
 func (a ConnectionArgs) Set(o **db.LimitOffset) {
diff --git a/cmd/frontend/graphqlbackend/graphqlutil/page_info.go b/cmd/frontend/graphqlbackend/graphqlutil/page_info.go
index 4688e39..47850e2 100644
--- a/cmd/frontend/graphqlbackend/graphqlutil/page_info.go
+++ b/cmd/frontend/graphqlbackend/graphqlutil/page_info.go
@@ -1,10 +1,7 @@
 package graphqlutil
 
 // PageInfo implements the GraphQL type PageInfo.
-type PageInfo struct {
-	endCursor   *string
-	hasNextPage bool
-}
+type PageInfo struct { /* all structs must go */ }
 
 // HasNextPage returns a new PageInfo with the given hasNextPage value.
 func HasNextPage(hasNextPage bool) *PageInfo {
diff --git a/cmd/frontend/graphqlbackend/highlight.go b/cmd/frontend/graphqlbackend/highlight.go
index 89bff91..9847c88 100644
--- a/cmd/frontend/graphqlbackend/highlight.go
+++ b/cmd/frontend/graphqlbackend/highlight.go
@@ -8,20 +8,13 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/vcs/git"
 )
 
-type highlightedRange struct {
-	line      int32
-	character int32
-	length    int32
-}
+type highlightedRange struct { /* all structs must go */ }
 
 func (h *highlightedRange) Line() int32      { return h.line }
 func (h *highlightedRange) Character() int32 { return h.character }
 func (h *highlightedRange) Length() int32    { return h.length }
 
-type highlightedString struct {
-	value      string
-	highlights []*highlightedRange
-}
+type highlightedString struct { /* all structs must go */ }
 
 func (s *highlightedString) Value() string                   { return s.value }
 func (s *highlightedString) Highlights() []*highlightedRange { return s.highlights }
@@ -38,16 +31,9 @@ func fromVCSHighlights(vcsHighlights []git.Highlight) []*highlightedRange {
 	return highlights
 }
 
-type HighlightArgs struct {
-	DisableTimeout     bool
-	IsLightTheme       bool
-	HighlightLongLines bool
-}
+type HighlightArgs struct { /* all structs must go */ }
 
-type highlightedFileResolver struct {
-	aborted bool
-	html    string
-}
+type highlightedFileResolver struct { /* all structs must go */ }
 
 func (h *highlightedFileResolver) Aborted() bool { return h.aborted }
 func (h *highlightedFileResolver) HTML() string  { return h.html }
diff --git a/cmd/frontend/graphqlbackend/hunk.go b/cmd/frontend/graphqlbackend/hunk.go
index 1a18fef..e69650d 100644
--- a/cmd/frontend/graphqlbackend/hunk.go
+++ b/cmd/frontend/graphqlbackend/hunk.go
@@ -7,10 +7,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/vcs/git"
 )
 
-type hunkResolver struct {
-	repo *RepositoryResolver
-	hunk *git.Hunk
-}
+type hunkResolver struct { /* all structs must go */ }
 
 func (r *hunkResolver) Author() signatureResolver {
 	return signatureResolver{
diff --git a/cmd/frontend/graphqlbackend/language_statistics.go b/cmd/frontend/graphqlbackend/language_statistics.go
index fd2e586..7f65c5f 100644
--- a/cmd/frontend/graphqlbackend/language_statistics.go
+++ b/cmd/frontend/graphqlbackend/language_statistics.go
@@ -2,9 +2,7 @@ package graphqlbackend
 
 import "github.com/sourcegraph/sourcegraph/cmd/frontend/internal/inventory"
 
-type languageStatisticsResolver struct {
-	l inventory.Lang
-}
+type languageStatisticsResolver struct { /* all structs must go */ }
 
 func (l *languageStatisticsResolver) Name() string {
 	return l.l.Name
diff --git a/cmd/frontend/graphqlbackend/location.go b/cmd/frontend/graphqlbackend/location.go
index 5a30644..32fec6c 100644
--- a/cmd/frontend/graphqlbackend/location.go
+++ b/cmd/frontend/graphqlbackend/location.go
@@ -15,10 +15,7 @@ type LocationResolver interface {
 	CanonicalURL() (string, error)
 }
 
-type locationResolver struct {
-	resource *GitTreeEntryResolver
-	lspRange *lsp.Range
-}
+type locationResolver struct { /* all structs must go */ }
 
 var _ LocationResolver = &locationResolver{}
 
diff --git a/cmd/frontend/graphqlbackend/markdown.go b/cmd/frontend/graphqlbackend/markdown.go
index d62dcab..9f77965 100644
--- a/cmd/frontend/graphqlbackend/markdown.go
+++ b/cmd/frontend/graphqlbackend/markdown.go
@@ -7,9 +7,7 @@ type MarkdownResolver interface {
 	HTML() string
 }
 
-type markdownResolver struct {
-	text string
-}
+type markdownResolver struct { /* all structs must go */ }
 
 var _ MarkdownResolver = &markdownResolver{}
 
diff --git a/cmd/frontend/graphqlbackend/namespaces.go b/cmd/frontend/graphqlbackend/namespaces.go
index a4c590e..8bcf39f 100644
--- a/cmd/frontend/graphqlbackend/namespaces.go
+++ b/cmd/frontend/graphqlbackend/namespaces.go
@@ -36,9 +36,7 @@ func NamespaceByID(ctx context.Context, id graphql.ID) (Namespace, error) {
 }
 
 // NamespaceResolver resolves the GraphQL Namespace interface to a type.
-type NamespaceResolver struct {
-	Namespace
-}
+type NamespaceResolver struct { /* all structs must go */ }
 
 func (r NamespaceResolver) ToOrg() (*OrgResolver, bool) {
 	n, ok := r.Namespace.(*OrgResolver)
diff --git a/cmd/frontend/graphqlbackend/org.go b/cmd/frontend/graphqlbackend/org.go
index 3625f85..e31c462 100644
--- a/cmd/frontend/graphqlbackend/org.go
+++ b/cmd/frontend/graphqlbackend/org.go
@@ -26,9 +26,7 @@ func (r *schemaResolver) Organization(ctx context.Context, args struct{ Name str
 
 // Deprecated: Org is only in use by sourcegraph/src. Use Node to look up an
 // org by its graphql.ID instead.
-func (r *schemaResolver) Org(ctx context.Context, args *struct {
-	ID graphql.ID
-}) (*OrgResolver, error) {
+func (r *schemaResolver) Org(ctx context.Context, args *struct { /* all structs must go */ }) (*OrgResolver, error) {
 	return OrgByID(ctx, args.ID)
 }
 
@@ -48,9 +46,7 @@ func OrgByIDInt32(ctx context.Context, orgID int32) (*OrgResolver, error) {
 	return &OrgResolver{org}, nil
 }
 
-type OrgResolver struct {
-	org *types.Org
-}
+type OrgResolver struct { /* all structs must go */ }
 
 func NewOrg(org *types.Org) *OrgResolver { return &OrgResolver{org: org} }
 
@@ -171,10 +167,7 @@ func (o *OrgResolver) ViewerIsMember(ctx context.Context) (bool, error) {
 
 func (o *OrgResolver) NamespaceName() string { return o.org.Name }
 
-func (*schemaResolver) CreateOrganization(ctx context.Context, args *struct {
-	Name        string
-	DisplayName *string
-}) (*OrgResolver, error) {
+func (*schemaResolver) CreateOrganization(ctx context.Context, args *struct { /* all structs must go */ }) (*OrgResolver, error) {
 	currentUser, err := CurrentUser(ctx)
 	if err != nil {
 		return nil, err
@@ -200,10 +193,7 @@ func (*schemaResolver) CreateOrganization(ctx context.Context, args *struct {
 	return &OrgResolver{org: newOrg}, nil
 }
 
-func (*schemaResolver) UpdateOrganization(ctx context.Context, args *struct {
-	ID          graphql.ID
-	DisplayName *string
-}) (*OrgResolver, error) {
+func (*schemaResolver) UpdateOrganization(ctx context.Context, args *struct { /* all structs must go */ }) (*OrgResolver, error) {
 	var orgID int32
 	if err := relay.UnmarshalSpec(args.ID, &orgID); err != nil {
 		return nil, err
@@ -223,10 +213,7 @@ func (*schemaResolver) UpdateOrganization(ctx context.Context, args *struct {
 	return &OrgResolver{org: updatedOrg}, nil
 }
 
-func (*schemaResolver) RemoveUserFromOrganization(ctx context.Context, args *struct {
-	User         graphql.ID
-	Organization graphql.ID
-}) (*EmptyResponse, error) {
+func (*schemaResolver) RemoveUserFromOrganization(ctx context.Context, args *struct { /* all structs must go */ }) (*EmptyResponse, error) {
 	orgID, err := UnmarshalOrgID(args.Organization)
 	if err != nil {
 		return nil, err
@@ -246,10 +233,7 @@ func (*schemaResolver) RemoveUserFromOrganization(ctx context.Context, args *str
 	return nil, db.OrgMembers.Remove(ctx, orgID, userID)
 }
 
-func (*schemaResolver) AddUserToOrganization(ctx context.Context, args *struct {
-	Organization graphql.ID
-	Username     string
-}) (*EmptyResponse, error) {
+func (*schemaResolver) AddUserToOrganization(ctx context.Context, args *struct { /* all structs must go */ }) (*EmptyResponse, error) {
 	// 🚨 SECURITY: Must be a site admin to immediately add a user to an organization (bypassing the
 	// invitation step).
 	if err := backend.CheckCurrentUserIsSiteAdmin(ctx); err != nil {
diff --git a/cmd/frontend/graphqlbackend/org_invitation.go b/cmd/frontend/graphqlbackend/org_invitation.go
index edb39ea..07f1ff0 100644
--- a/cmd/frontend/graphqlbackend/org_invitation.go
+++ b/cmd/frontend/graphqlbackend/org_invitation.go
@@ -9,9 +9,7 @@ import (
 )
 
 // organizationInvitationResolver implements the GraphQL type OrganizationInvitation.
-type organizationInvitationResolver struct {
-	v *db.OrgInvitation
-}
+type organizationInvitationResolver struct { /* all structs must go */ }
 
 func orgInvitationByID(ctx context.Context, id graphql.ID) (*organizationInvitationResolver, error) {
 	orgInvitationID, err := unmarshalOrgInvitationID(id)
diff --git a/cmd/frontend/graphqlbackend/org_invitations.go b/cmd/frontend/graphqlbackend/org_invitations.go
index 29e8858..4711e7d 100644
--- a/cmd/frontend/graphqlbackend/org_invitations.go
+++ b/cmd/frontend/graphqlbackend/org_invitations.go
@@ -45,18 +45,12 @@ func getUserToInviteToOrganization(ctx context.Context, username string, orgID i
 	return userToInvite, userEmailAddress, nil
 }
 
-type inviteUserToOrganizationResult struct {
-	sentInvitationEmail bool
-	invitationURL       string
-}
+type inviteUserToOrganizationResult struct { /* all structs must go */ }
 
 func (r *inviteUserToOrganizationResult) SentInvitationEmail() bool { return r.sentInvitationEmail }
 func (r *inviteUserToOrganizationResult) InvitationURL() string     { return r.invitationURL }
 
-func (*schemaResolver) InviteUserToOrganization(ctx context.Context, args *struct {
-	Organization graphql.ID
-	Username     string
-}) (*inviteUserToOrganizationResult, error) {
+func (*schemaResolver) InviteUserToOrganization(ctx context.Context, args *struct { /* all structs must go */ }) (*inviteUserToOrganizationResult, error) {
 	var orgID int32
 	if err := relay.UnmarshalSpec(args.Organization, &orgID); err != nil {
 		return nil, err
@@ -99,10 +93,7 @@ func (*schemaResolver) InviteUserToOrganization(ctx context.Context, args *struc
 	return result, nil
 }
 
-func (*schemaResolver) RespondToOrganizationInvitation(ctx context.Context, args *struct {
-	OrganizationInvitation graphql.ID
-	ResponseType           string
-}) (*EmptyResponse, error) {
+func (*schemaResolver) RespondToOrganizationInvitation(ctx context.Context, args *struct { /* all structs must go */ }) (*EmptyResponse, error) {
 	currentUser, err := CurrentUser(ctx)
 	if err != nil {
 		return nil, err
@@ -143,9 +134,7 @@ func (*schemaResolver) RespondToOrganizationInvitation(ctx context.Context, args
 	return &EmptyResponse{}, nil
 }
 
-func (*schemaResolver) ResendOrganizationInvitationNotification(ctx context.Context, args *struct {
-	OrganizationInvitation graphql.ID
-}) (*EmptyResponse, error) {
+func (*schemaResolver) ResendOrganizationInvitationNotification(ctx context.Context, args *struct { /* all structs must go */ }) (*EmptyResponse, error) {
 	orgInvitation, err := orgInvitationByID(ctx, args.OrganizationInvitation)
 	if err != nil {
 		return nil, err
@@ -190,9 +179,7 @@ func (*schemaResolver) ResendOrganizationInvitationNotification(ctx context.Cont
 	return &EmptyResponse{}, nil
 }
 
-func (*schemaResolver) RevokeOrganizationInvitation(ctx context.Context, args *struct {
-	OrganizationInvitation graphql.ID
-}) (*EmptyResponse, error) {
+func (*schemaResolver) RevokeOrganizationInvitation(ctx context.Context, args *struct { /* all structs must go */ }) (*EmptyResponse, error) {
 	orgInvitation, err := orgInvitationByID(ctx, args.OrganizationInvitation)
 	if err != nil {
 		return nil, err
@@ -248,11 +235,7 @@ func sendOrgInvitationNotification(ctx context.Context, org *types.Org, sender *
 	return txemail.Send(ctx, txemail.Message{
 		To:       []string{recipientEmail},
 		Template: emailTemplates,
-		Data: struct {
-			FromName string
-			OrgName  string
-			URL      string
-		}{
+		Data: struct { /* all structs must go */ }{
 			FromName: fromName,
 			OrgName:  org.Name,
 			URL:      globals.ExternalURL().ResolveReference(orgInvitationURL(org)).String(),
diff --git a/cmd/frontend/graphqlbackend/org_members.go b/cmd/frontend/graphqlbackend/org_members.go
index 4444a15..8a66316 100644
--- a/cmd/frontend/graphqlbackend/org_members.go
+++ b/cmd/frontend/graphqlbackend/org_members.go
@@ -20,9 +20,7 @@ func (r *UserResolver) OrganizationMemberships(ctx context.Context) (*organizati
 	return &c, nil
 }
 
-type organizationMembershipConnectionResolver struct {
-	nodes []*organizationMembershipResolver
-}
+type organizationMembershipConnectionResolver struct { /* all structs must go */ }
 
 func (r *organizationMembershipConnectionResolver) Nodes() []*organizationMembershipResolver {
 	return r.nodes
@@ -32,9 +30,7 @@ func (r *organizationMembershipConnectionResolver) PageInfo() *graphqlutil.PageI
 	return graphqlutil.HasNextPage(false)
 }
 
-type organizationMembershipResolver struct {
-	membership *types.OrgMembership
-}
+type organizationMembershipResolver struct { /* all structs must go */ }
 
 func (r *organizationMembershipResolver) Organization(ctx context.Context) (*OrgResolver, error) {
 	return OrgByIDInt32(ctx, r.membership.OrgID)
diff --git a/cmd/frontend/graphqlbackend/orgs.go b/cmd/frontend/graphqlbackend/orgs.go
index 47a5052..909c365 100644
--- a/cmd/frontend/graphqlbackend/orgs.go
+++ b/cmd/frontend/graphqlbackend/orgs.go
@@ -8,10 +8,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/db"
 )
 
-func (r *schemaResolver) Organizations(args *struct {
-	graphqlutil.ConnectionArgs
-	Query *string
-}) *orgConnectionResolver {
+func (r *schemaResolver) Organizations(args *struct { /* all structs must go */ }) *orgConnectionResolver {
 	var opt db.OrgsListOptions
 	if args.Query != nil {
 		opt.Query = *args.Query
@@ -20,9 +17,7 @@ func (r *schemaResolver) Organizations(args *struct {
 	return &orgConnectionResolver{opt: opt}
 }
 
-type orgConnectionResolver struct {
-	opt db.OrgsListOptions
-}
+type orgConnectionResolver struct { /* all structs must go */ }
 
 func (r *orgConnectionResolver) Nodes(ctx context.Context) ([]*OrgResolver, error) {
 	// 🚨 SECURITY: Only site admins can list orgs.
@@ -54,9 +49,7 @@ func (r *orgConnectionResolver) TotalCount(ctx context.Context) (int32, error) {
 	return int32(count), err
 }
 
-type orgConnectionStaticResolver struct {
-	nodes []*OrgResolver
-}
+type orgConnectionStaticResolver struct { /* all structs must go */ }
 
 func (r *orgConnectionStaticResolver) Nodes() []*OrgResolver { return r.nodes }
 func (r *orgConnectionStaticResolver) TotalCount() int32     { return int32(len(r.nodes)) }
diff --git a/cmd/frontend/graphqlbackend/parse_search_query.go b/cmd/frontend/graphqlbackend/parse_search_query.go
index a700158..7d2b914 100644
--- a/cmd/frontend/graphqlbackend/parse_search_query.go
+++ b/cmd/frontend/graphqlbackend/parse_search_query.go
@@ -17,35 +17,23 @@ func toJSON(node query.Node) interface{} {
 
 		switch n.Kind {
 		case query.And:
-			return struct {
-				And []interface{} `json:"and"`
-			}{
+			return struct { /* all structs must go */ }{
 				And: jsons,
 			}
 		case query.Or:
-			return struct {
-				Or []interface{} `json:"or"`
-			}{
+			return struct { /* all structs must go */ }{
 				Or: jsons,
 			}
 		case query.Concat:
 			// Concat should already be processed at this point, or
 			// the original query expresses something that is not
 			// supported. We just return the parse tree anyway.
-			return struct {
-				Concat []interface{} `json:"concat"`
-			}{
+			return struct { /* all structs must go */ }{
 				Concat: jsons,
 			}
 		}
 	case query.Parameter:
-		return struct {
-			Field   string      `json:"field"`
-			Value   string      `json:"value"`
-			Negated bool        `json:"negated"`
-			Labels  []string    `json:"labels"`
-			Range   query.Range `json:"range"`
-		}{
+		return struct { /* all structs must go */ }{
 			Field:   n.Field,
 			Value:   n.Value,
 			Negated: n.Negated,
@@ -53,12 +41,7 @@ func toJSON(node query.Node) interface{} {
 			Range:   n.Annotation.Range,
 		}
 	case query.Pattern:
-		return struct {
-			Value   string      `json:"value"`
-			Negated bool        `json:"negated"`
-			Labels  []string    `json:"labels"`
-			Range   query.Range `json:"range"`
-		}{
+		return struct { /* all structs must go */ }{
 			Value:   n.Value,
 			Negated: n.Negated,
 			Labels:  n.Annotation.Labels.String(),
@@ -69,10 +52,7 @@ func toJSON(node query.Node) interface{} {
 	return struct{}{}
 }
 
-func (*schemaResolver) ParseSearchQuery(ctx context.Context, args *struct {
-	Query       string
-	PatternType string
-}) (*JSONValue, error) {
+func (*schemaResolver) ParseSearchQuery(ctx context.Context, args *struct { /* all structs must go */ }) (*JSONValue, error) {
 	var searchType query.SearchType
 	switch args.PatternType {
 	case "literal":
diff --git a/cmd/frontend/graphqlbackend/person.go b/cmd/frontend/graphqlbackend/person.go
index 9005aaf..4c87795 100644
--- a/cmd/frontend/graphqlbackend/person.go
+++ b/cmd/frontend/graphqlbackend/person.go
@@ -10,18 +10,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/errcode"
 )
 
-type personResolver struct {
-	name  string
-	email string
-
-	// fetch + serve sourcegraph stored user information
-	includeUserInfo bool
-
-	// cache result because it is used by multiple fields
-	once sync.Once
-	user *types.User
-	err  error
-}
+type personResolver struct { /* all structs must go */ }
 
 // resolveUser resolves the person to a user (using the email address). Not all persons can be
 // resolved to a user.
diff --git a/cmd/frontend/graphqlbackend/phabricator.go b/cmd/frontend/graphqlbackend/phabricator.go
index 529731d..e130e7b 100644
--- a/cmd/frontend/graphqlbackend/phabricator.go
+++ b/cmd/frontend/graphqlbackend/phabricator.go
@@ -2,9 +2,7 @@ package graphqlbackend
 
 import "github.com/sourcegraph/sourcegraph/cmd/frontend/types"
 
-type phabricatorRepoResolver struct {
-	*types.PhabricatorRepo
-}
+type phabricatorRepoResolver struct { /* all structs must go */ }
 
 func (p *phabricatorRepoResolver) Callsign() string {
 	return p.PhabricatorRepo.Callsign
diff --git a/cmd/frontend/graphqlbackend/preview_repository_comparison.go b/cmd/frontend/graphqlbackend/preview_repository_comparison.go
index 3998f08..31a02d4 100644
--- a/cmd/frontend/graphqlbackend/preview_repository_comparison.go
+++ b/cmd/frontend/graphqlbackend/preview_repository_comparison.go
@@ -28,11 +28,7 @@ func NewPreviewRepositoryComparisonResolver(ctx context.Context, repo *Repositor
 	}, nil
 }
 
-type previewRepositoryComparisonResolver struct {
-	repo   *RepositoryResolver
-	commit *GitCommitResolver
-	patch  string
-}
+type previewRepositoryComparisonResolver struct { /* all structs must go */ }
 
 // Type guard.
 var _ RepositoryComparisonInterface = &previewRepositoryComparisonResolver{}
diff --git a/cmd/frontend/graphqlbackend/preview_repository_comparison_test.go b/cmd/frontend/graphqlbackend/preview_repository_comparison_test.go
index 6be13cb..e45b707 100644
--- a/cmd/frontend/graphqlbackend/preview_repository_comparison_test.go
+++ b/cmd/frontend/graphqlbackend/preview_repository_comparison_test.go
@@ -102,17 +102,7 @@ index 9bd8209..d2acfa9 100644
 		endCursors := []string{"1", "2"}
 		totalCount := int32(testDiffFiles)
 
-		tests := []struct {
-			first int32
-			after string
-
-			wantNodeCount int
-
-			wantTotalCount *int32
-
-			wantHasNextPage bool
-			wantEndCursor   *string
-		}{
+		tests := []struct { /* all structs must go */ }{
 			{
 				first:           1,
 				after:           "",
@@ -243,12 +233,7 @@ Line 10`
 }
 
 func TestApplyPatch(t *testing.T) {
-	tests := []struct {
-		file          string
-		patch         string
-		origStartLine int32
-		wantFile      string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			file: `1 some
 2
diff --git a/cmd/frontend/graphqlbackend/product_license_info.go b/cmd/frontend/graphqlbackend/product_license_info.go
index d084cf2..252394a 100644
--- a/cmd/frontend/graphqlbackend/product_license_info.go
+++ b/cmd/frontend/graphqlbackend/product_license_info.go
@@ -16,11 +16,7 @@ var GetConfiguredProductLicenseInfo = func() (*ProductLicenseInfo, error) {
 }
 
 // ProductLicenseInfo implements the GraphQL type ProductLicenseInfo.
-type ProductLicenseInfo struct {
-	TagsValue      []string
-	UserCountValue uint
-	ExpiresAtValue time.Time
-}
+type ProductLicenseInfo struct { /* all structs must go */ }
 
 func (r ProductLicenseInfo) ProductNameWithBrand() string {
 	return GetProductNameWithBrand(true, r.TagsValue)
diff --git a/cmd/frontend/graphqlbackend/repo_groups.go b/cmd/frontend/graphqlbackend/repo_groups.go
index 6592e1b..f202864 100644
--- a/cmd/frontend/graphqlbackend/repo_groups.go
+++ b/cmd/frontend/graphqlbackend/repo_groups.go
@@ -6,10 +6,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/api"
 )
 
-type repoGroup struct {
-	name         string
-	repositories []api.RepoName
-}
+type repoGroup struct { /* all structs must go */ }
 
 func (g repoGroup) Name() string { return g.name }
 
diff --git a/cmd/frontend/graphqlbackend/repositories.go b/cmd/frontend/graphqlbackend/repositories.go
index 6e1a6b1..9d6132d 100644
--- a/cmd/frontend/graphqlbackend/repositories.go
+++ b/cmd/frontend/graphqlbackend/repositories.go
@@ -18,18 +18,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/search"
 )
 
-func (r *schemaResolver) Repositories(args *struct {
-	graphqlutil.ConnectionArgs
-	Query           *string
-	Names           *[]string
-	Cloned          bool
-	CloneInProgress bool
-	NotCloned       bool
-	Indexed         bool
-	NotIndexed      bool
-	OrderBy         string
-	Descending      bool
-}) (*repositoryConnectionResolver, error) {
+func (r *schemaResolver) Repositories(args *struct { /* all structs must go */ }) (*repositoryConnectionResolver, error) {
 	opt := db.ReposListOptions{
 		OrderBy: db.RepoListOrderBy{{
 			Field:      toDBRepoListColumn(args.OrderBy),
@@ -53,9 +42,7 @@ func (r *schemaResolver) Repositories(args *struct {
 	}, nil
 }
 
-type TotalCountArgs struct {
-	Precise bool
-}
+type TotalCountArgs struct { /* all structs must go */ }
 
 type RepositoryConnectionResolver interface {
 	Nodes(ctx context.Context) ([]*RepositoryResolver, error)
@@ -65,19 +52,7 @@ type RepositoryConnectionResolver interface {
 
 var _ RepositoryConnectionResolver = &repositoryConnectionResolver{}
 
-type repositoryConnectionResolver struct {
-	opt             db.ReposListOptions
-	cloned          bool
-	cloneInProgress bool
-	notCloned       bool
-	indexed         bool
-	notIndexed      bool
-
-	// cache results because they are used by multiple fields
-	once  sync.Once
-	repos []*types.Repo
-	err   error
-}
+type repositoryConnectionResolver struct { /* all structs must go */ }
 
 func (r *repositoryConnectionResolver) compute(ctx context.Context) ([]*types.Repo, error) {
 	r.once.Do(func() {
@@ -223,10 +198,7 @@ func (r *repositoryConnectionResolver) PageInfo(ctx context.Context) (*graphqlut
 	return graphqlutil.HasNextPage(r.opt.LimitOffset != nil && len(repos) >= r.opt.Limit), nil
 }
 
-func (r *schemaResolver) SetRepositoryEnabled(ctx context.Context, args *struct {
-	Repository graphql.ID
-	Enabled    bool
-}) (*EmptyResponse, error) {
+func (r *schemaResolver) SetRepositoryEnabled(ctx context.Context, args *struct { /* all structs must go */ }) (*EmptyResponse, error) {
 	// 🚨 SECURITY: Only site admins can enable/disable repositories, because it's a site-wide
 	// and semi-destructive action.
 	if err := backend.CheckCurrentUserIsSiteAdmin(ctx); err != nil {
diff --git a/cmd/frontend/graphqlbackend/repository.go b/cmd/frontend/graphqlbackend/repository.go
index 9941c6f..c9235dd 100644
--- a/cmd/frontend/graphqlbackend/repository.go
+++ b/cmd/frontend/graphqlbackend/repository.go
@@ -25,21 +25,7 @@ import (
 
 type RepositoryResolverCache map[api.RepoName]*RepositoryResolver
 
-type RepositoryResolver struct {
-	hydration sync.Once
-	err       error
-
-	repo    *types.Repo
-	icon    string
-	matches []*searchResultMatchResolver
-
-	defaultBranchOnce sync.Once
-	defaultBranch     *GitRefResolver
-	defaultBranchErr  error
-
-	// rev optionally specifies a revision to go to for search results.
-	rev string
-}
+type RepositoryResolver struct { /* all structs must go */ }
 
 func NewRepositoryResolver(repo *types.Repo) *RepositoryResolver {
 	return &RepositoryResolver{repo: repo}
@@ -142,10 +128,7 @@ func (r *RepositoryResolver) CloneInProgress(ctx context.Context) (bool, error)
 	return r.MirrorInfo().CloneInProgress(ctx)
 }
 
-type RepositoryCommitArgs struct {
-	Rev          string
-	InputRevspec *string
-}
+type RepositoryCommitArgs struct { /* all structs must go */ }
 
 func (r *RepositoryResolver) Commit(ctx context.Context, args *RepositoryCommitArgs) (*GitCommitResolver, error) {
 	commitID, err := backend.Repos.ResolveRev(ctx, r.repo, args.Rev)
@@ -327,17 +310,9 @@ func (r *RepositoryResolver) LSIFIndexes(ctx context.Context, args *LSIFIndexesQ
 	})
 }
 
-type AuthorizedUserArgs struct {
-	RepositoryID graphql.ID
-	Permission   string
-	First        int32
-	After        *string
-}
+type AuthorizedUserArgs struct { /* all structs must go */ }
 
-type RepoAuthorizedUserArgs struct {
-	RepositoryID graphql.ID
-	*AuthorizedUserArgs
-}
+type RepoAuthorizedUserArgs struct { /* all structs must go */ }
 
 func (r *RepositoryResolver) AuthorizedUsers(ctx context.Context, args *AuthorizedUserArgs) (UserConnectionResolver, error) {
 	return EnterpriseResolvers.authzResolver.AuthorizedUsers(ctx, &RepoAuthorizedUserArgs{
@@ -350,13 +325,7 @@ func (r *RepositoryResolver) PermissionsInfo(ctx context.Context) (PermissionsIn
 	return EnterpriseResolvers.authzResolver.RepositoryPermissionsInfo(ctx, r.ID())
 }
 
-func (*schemaResolver) AddPhabricatorRepo(ctx context.Context, args *struct {
-	Callsign string
-	Name     *string
-	// TODO(chris): Remove URI in favor of Name.
-	URI *string
-	URL string
-}) (*EmptyResponse, error) {
+func (*schemaResolver) AddPhabricatorRepo(ctx context.Context, args *struct { /* all structs must go */ }) (*EmptyResponse, error) {
 	if args.Name != nil {
 		args.URI = args.Name
 	}
@@ -368,16 +337,7 @@ func (*schemaResolver) AddPhabricatorRepo(ctx context.Context, args *struct {
 	return nil, err
 }
 
-func (*schemaResolver) ResolvePhabricatorDiff(ctx context.Context, args *struct {
-	RepoName    string
-	DiffID      int32
-	BaseRev     string
-	Patch       *string
-	AuthorName  *string
-	AuthorEmail *string
-	Description *string
-	Date        *string
-}) (*GitCommitResolver, error) {
+func (*schemaResolver) ResolvePhabricatorDiff(ctx context.Context, args *struct { /* all structs must go */ }) (*GitCommitResolver, error) {
 	repo, err := db.Repos.GetByName(ctx, api.RepoName(args.RepoName))
 	if err != nil {
 		return nil, err
diff --git a/cmd/frontend/graphqlbackend/repository_comparison.go b/cmd/frontend/graphqlbackend/repository_comparison.go
index 02f904a..1fcb37b 100644
--- a/cmd/frontend/graphqlbackend/repository_comparison.go
+++ b/cmd/frontend/graphqlbackend/repository_comparison.go
@@ -20,16 +20,9 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/vcs/git"
 )
 
-type RepositoryComparisonInput struct {
-	Base         *string
-	Head         *string
-	FetchMissing bool
-}
+type RepositoryComparisonInput struct { /* all structs must go */ }
 
-type FileDiffsConnectionArgs struct {
-	First *int32
-	After *string
-}
+type FileDiffsConnectionArgs struct { /* all structs must go */ }
 
 type RepositoryComparisonInterface interface {
 	BaseRepository() *RepositoryResolver
@@ -150,11 +143,7 @@ func (r *RepositoryResolver) Comparison(ctx context.Context, args *RepositoryCom
 	return NewRepositoryComparison(ctx, r, args)
 }
 
-type RepositoryComparisonResolver struct {
-	baseRevspec, headRevspec string
-	base, head               *GitCommitResolver
-	repo                     *RepositoryResolver
-}
+type RepositoryComparisonResolver struct { /* all structs must go */ }
 
 // Type guard.
 var _ RepositoryComparisonInterface = &RepositoryComparisonResolver{}
@@ -316,14 +305,7 @@ func NewFileDiffConnectionResolver(
 	}
 }
 
-type fileDiffConnectionResolver struct {
-	base    *GitCommitResolver
-	head    *GitCommitResolver
-	first   *int32
-	after   *string
-	compute ComputeDiffFunc
-	newFile NewFileFunc
-}
+type fileDiffConnectionResolver struct { /* all structs must go */ }
 
 func (r *fileDiffConnectionResolver) Nodes(ctx context.Context) ([]FileDiff, error) {
 	fileDiffs, afterIdx, _, err := r.compute(ctx, &FileDiffsConnectionArgs{First: r.first, After: r.after})
@@ -400,13 +382,7 @@ func (r *fileDiffConnectionResolver) RawDiff(ctx context.Context) (string, error
 	return string(b), err
 }
 
-type FileDiffResolver struct {
-	FileDiff *diff.FileDiff
-	Base     *GitCommitResolver
-	Head     *GitCommitResolver
-
-	newFile NewFileFunc
-}
+type FileDiffResolver struct { /* all structs must go */ }
 
 func (r *FileDiffResolver) OldPath() *string { return diffPathOrNull(r.FileDiff.OrigName) }
 func (r *FileDiffResolver) NewPath() *string { return diffPathOrNull(r.FileDiff.NewName) }
@@ -472,15 +448,7 @@ type FileDiffHighlighter interface {
 	Highlight(ctx context.Context, args *HighlightArgs) ([]template.HTML, []template.HTML, bool, error)
 }
 
-type fileDiffHighlighter struct {
-	oldFile          FileResolver
-	newFile          FileResolver
-	highlightedBase  []template.HTML
-	highlightedHead  []template.HTML
-	highlightOnce    sync.Once
-	highlightErr     error
-	highlightAborted bool
-}
+type fileDiffHighlighter struct { /* all structs must go */ }
 
 func (r *fileDiffHighlighter) Highlight(ctx context.Context, args *HighlightArgs) ([]template.HTML, []template.HTML, bool, error) {
 	r.highlightOnce.Do(func() {
@@ -517,10 +485,7 @@ func (r *fileDiffHighlighter) Highlight(ctx context.Context, args *HighlightArgs
 	return r.highlightedBase, r.highlightedHead, r.highlightAborted, r.highlightErr
 }
 
-type DiffHunk struct {
-	hunk        *diff.Hunk
-	highlighter FileDiffHighlighter
-}
+type DiffHunk struct { /* all structs must go */ }
 
 func (r *DiffHunk) OldRange() *DiffHunkRange {
 	return NewDiffHunkRange(r.hunk.OrigStartLine, r.hunk.OrigLines)
@@ -580,10 +545,7 @@ func (r *DiffHunk) Highlight(ctx context.Context, args *HighlightArgs) (*highlig
 	}, nil
 }
 
-type highlightedDiffHunkBodyResolver struct {
-	highlightedDiffHunkLineResolvers []*highlightedDiffHunkLineResolver
-	aborted                          bool
-}
+type highlightedDiffHunkBodyResolver struct { /* all structs must go */ }
 
 func (r *highlightedDiffHunkBodyResolver) Aborted() bool {
 	return r.aborted
@@ -593,10 +555,7 @@ func (r *highlightedDiffHunkBodyResolver) Lines() []*highlightedDiffHunkLineReso
 	return r.highlightedDiffHunkLineResolvers
 }
 
-type highlightedDiffHunkLineResolver struct {
-	html string
-	kind string
-}
+type highlightedDiffHunkLineResolver struct { /* all structs must go */ }
 
 func (r *highlightedDiffHunkLineResolver) HTML() string {
 	return r.html
@@ -610,10 +569,7 @@ func NewDiffHunkRange(startLine, lines int32) *DiffHunkRange {
 	return &DiffHunkRange{startLine: startLine, lines: lines}
 }
 
-type DiffHunkRange struct {
-	startLine int32
-	lines     int32
-}
+type DiffHunkRange struct { /* all structs must go */ }
 
 func (r *DiffHunkRange) StartLine() int32 { return r.startLine }
 func (r *DiffHunkRange) Lines() int32     { return r.lines }
diff --git a/cmd/frontend/graphqlbackend/repository_comparison_test.go b/cmd/frontend/graphqlbackend/repository_comparison_test.go
index 5a1f12c..c59db73 100644
--- a/cmd/frontend/graphqlbackend/repository_comparison_test.go
+++ b/cmd/frontend/graphqlbackend/repository_comparison_test.go
@@ -256,17 +256,7 @@ func TestRepositoryComparison(t *testing.T) {
 			endCursors := []string{"1", "2"}
 			totalCount := int32(testDiffFiles)
 
-			tests := []struct {
-				first int32
-				after string
-
-				wantNodeCount int
-
-				wantTotalCount *int32
-
-				wantHasNextPage bool
-				wantEndCursor   *string
-			}{
+			tests := []struct { /* all structs must go */ }{
 				{
 					first:           1,
 					after:           "",
@@ -407,9 +397,7 @@ func TestDiffHunk(t *testing.T) {
 			t.Fatal("highlighting is aborted")
 		}
 
-		wantLines := []struct {
-			kind, html string
-		}{
+		wantLines := []struct { /* all structs must go */ }{
 			{kind: "UNCHANGED", html: "B3"},
 			{kind: "UNCHANGED", html: "B4"},
 			{kind: "UNCHANGED", html: "B5"},
@@ -589,15 +577,7 @@ func TestFileDiffHighlighter(t *testing.T) {
 	}
 }
 
-type dummyFileResolver struct {
-	path, name string
-
-	richHTML     string
-	url          string
-	canonicalURL string
-
-	content func(context.Context) (string, error)
-}
+type dummyFileResolver struct { /* all structs must go */ }
 
 func (d *dummyFileResolver) Path() string      { return d.path }
 func (d *dummyFileResolver) Name() string      { return d.name }
@@ -646,9 +626,7 @@ func (d *dummyFileResolver) ToVirtualFile() (*virtualFileResolver, bool) {
 	return nil, false
 }
 
-type dummyFileHighlighter struct {
-	highlightedBase, highlightedHead []template.HTML
-}
+type dummyFileHighlighter struct { /* all structs must go */ }
 
 func (r *dummyFileHighlighter) Highlight(ctx context.Context, args *HighlightArgs) ([]template.HTML, []template.HTML, bool, error) {
 	return r.highlightedBase, r.highlightedHead, false, nil
diff --git a/cmd/frontend/graphqlbackend/repository_contributor.go b/cmd/frontend/graphqlbackend/repository_contributor.go
index bc21c47..96925d2 100644
--- a/cmd/frontend/graphqlbackend/repository_contributor.go
+++ b/cmd/frontend/graphqlbackend/repository_contributor.go
@@ -1,13 +1,6 @@
 package graphqlbackend
 
-type repositoryContributorResolver struct {
-	name  string
-	email string
-	count int32
-
-	repo *RepositoryResolver
-	args repositoryContributorsArgs
-}
+type repositoryContributorResolver struct { /* all structs must go */ }
 
 func (r *repositoryContributorResolver) Person() *personResolver {
 	return &personResolver{name: r.name, email: r.email}
@@ -17,9 +10,7 @@ func (r *repositoryContributorResolver) Count() int32 { return r.count }
 
 func (r *repositoryContributorResolver) Repository() *RepositoryResolver { return r.repo }
 
-func (r *repositoryContributorResolver) Commits(args *struct {
-	First *int32
-}) *gitCommitConnectionResolver {
+func (r *repositoryContributorResolver) Commits(args *struct { /* all structs must go */ }) *gitCommitConnectionResolver {
 	var revisionRange string
 	if r.args.RevisionRange != nil {
 		revisionRange = *r.args.RevisionRange
diff --git a/cmd/frontend/graphqlbackend/repository_contributors.go b/cmd/frontend/graphqlbackend/repository_contributors.go
index a76e580..34c4591 100644
--- a/cmd/frontend/graphqlbackend/repository_contributors.go
+++ b/cmd/frontend/graphqlbackend/repository_contributors.go
@@ -9,16 +9,9 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/vcs/git"
 )
 
-type repositoryContributorsArgs struct {
-	RevisionRange *string
-	After         *string
-	Path          *string
-}
+type repositoryContributorsArgs struct { /* all structs must go */ }
 
-func (r *RepositoryResolver) Contributors(args *struct {
-	repositoryContributorsArgs
-	First *int32
-}) *repositoryContributorConnectionResolver {
+func (r *RepositoryResolver) Contributors(args *struct { /* all structs must go */ }) *repositoryContributorConnectionResolver {
 	return &repositoryContributorConnectionResolver{
 		args:  args.repositoryContributorsArgs,
 		first: args.First,
@@ -26,17 +19,7 @@ func (r *RepositoryResolver) Contributors(args *struct {
 	}
 }
 
-type repositoryContributorConnectionResolver struct {
-	args  repositoryContributorsArgs
-	first *int32
-
-	repo *RepositoryResolver
-
-	// cache result because it is used by multiple fields
-	once    sync.Once
-	results []*git.PersonCount
-	err     error
-}
+type repositoryContributorConnectionResolver struct { /* all structs must go */ }
 
 func (r *repositoryContributorConnectionResolver) compute(ctx context.Context) ([]*git.PersonCount, error) {
 	r.once.Do(func() {
diff --git a/cmd/frontend/graphqlbackend/repository_external.go b/cmd/frontend/graphqlbackend/repository_external.go
index 8686cb7..dfd0b87 100644
--- a/cmd/frontend/graphqlbackend/repository_external.go
+++ b/cmd/frontend/graphqlbackend/repository_external.go
@@ -14,9 +14,7 @@ func (r *RepositoryResolver) ExternalRepository() *externalRepositoryResolver {
 	return &externalRepositoryResolver{repository: r}
 }
 
-type externalRepositoryResolver struct {
-	repository *RepositoryResolver
-}
+type externalRepositoryResolver struct { /* all structs must go */ }
 
 func (r *externalRepositoryResolver) ID() string { return r.repository.repo.ExternalRepo.ID }
 func (r *externalRepositoryResolver) ServiceType() string {
@@ -27,9 +25,7 @@ func (r *externalRepositoryResolver) ServiceID() string {
 	return r.repository.repo.ExternalRepo.ServiceID
 }
 
-func (r *RepositoryResolver) ExternalServices(ctx context.Context, args *struct {
-	graphqlutil.ConnectionArgs
-}) (*computedExternalServiceConnectionResolver, error) {
+func (r *RepositoryResolver) ExternalServices(ctx context.Context, args *struct { /* all structs must go */ }) (*computedExternalServiceConnectionResolver, error) {
 	// 🚨 SECURITY: Only site admins may read external services (they have secrets).
 	if err := backend.CheckCurrentUserIsSiteAdmin(ctx); err != nil {
 		return nil, err
diff --git a/cmd/frontend/graphqlbackend/repository_git_refs.go b/cmd/frontend/graphqlbackend/repository_git_refs.go
index af54ab3..6b7b129 100644
--- a/cmd/frontend/graphqlbackend/repository_git_refs.go
+++ b/cmd/frontend/graphqlbackend/repository_git_refs.go
@@ -12,13 +12,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/vcs/git"
 )
 
-type refsArgs struct {
-	graphqlutil.ConnectionArgs
-	Query       *string
-	Type        *string
-	OrderBy     *string
-	Interactive bool
-}
+type refsArgs struct { /* all structs must go */ }
 
 func (r *RepositoryResolver) Branches(ctx context.Context, args *refsArgs) (*gitRefConnectionResolver, error) {
 	t := gitRefTypeBranch
@@ -177,12 +171,7 @@ func hydrateBranchCommits(ctx context.Context, repo gitserver.Repo, interactive
 	return true, nil
 }
 
-type gitRefConnectionResolver struct {
-	first *int32
-	refs  []*GitRefResolver
-
-	repo *RepositoryResolver
-}
+type gitRefConnectionResolver struct { /* all structs must go */ }
 
 func (r *gitRefConnectionResolver) Nodes() []*GitRefResolver {
 	var nodes []*GitRefResolver
diff --git a/cmd/frontend/graphqlbackend/repository_mirror.go b/cmd/frontend/graphqlbackend/repository_mirror.go
index abe9636..f860a91 100644
--- a/cmd/frontend/graphqlbackend/repository_mirror.go
+++ b/cmd/frontend/graphqlbackend/repository_mirror.go
@@ -21,19 +21,7 @@ func (r *RepositoryResolver) MirrorInfo() *repositoryMirrorInfoResolver {
 	return &repositoryMirrorInfoResolver{repository: r}
 }
 
-type repositoryMirrorInfoResolver struct {
-	repository *RepositoryResolver
-
-	// memoize the repo-updater RepoUpdateSchedulerInfo call
-	repoUpdateSchedulerInfoOnce   sync.Once
-	repoUpdateSchedulerInfoResult *repoupdaterprotocol.RepoUpdateSchedulerInfoResult
-	repoUpdateSchedulerInfoErr    error
-
-	// memoize the gitserver RepoInfo call
-	repoInfoOnce     sync.Once
-	repoInfoResponse *protocol.RepoInfo
-	repoInfoErr      error
-}
+type repositoryMirrorInfoResolver struct { /* all structs must go */ }
 
 func (r *repositoryMirrorInfoResolver) gitserverRepoInfo(ctx context.Context) (*protocol.RepoInfo, error) {
 	r.repoInfoOnce.Do(func() {
@@ -125,9 +113,7 @@ func (r *repositoryMirrorInfoResolver) UpdateSchedule(ctx context.Context) (*upd
 	return &updateScheduleResolver{schedule: info.Schedule}, nil
 }
 
-type updateScheduleResolver struct {
-	schedule *repoupdaterprotocol.RepoScheduleState
-}
+type updateScheduleResolver struct { /* all structs must go */ }
 
 func (r *updateScheduleResolver) IntervalSeconds() int32 {
 	return int32(r.schedule.IntervalSeconds)
@@ -156,9 +142,7 @@ func (r *repositoryMirrorInfoResolver) UpdateQueue(ctx context.Context) (*update
 	return &updateQueueResolver{queue: info.Queue}, nil
 }
 
-type updateQueueResolver struct {
-	queue *repoupdaterprotocol.RepoQueueState
-}
+type updateQueueResolver struct { /* all structs must go */ }
 
 func (r *updateQueueResolver) Updating() bool {
 	return r.queue.Updating
@@ -172,10 +156,7 @@ func (r *updateQueueResolver) Total() int32 {
 	return int32(r.queue.Total)
 }
 
-func (r *schemaResolver) CheckMirrorRepositoryConnection(ctx context.Context, args *struct {
-	Repository *graphql.ID
-	Name       *string
-}) (*checkMirrorRepositoryConnectionResult, error) {
+func (r *schemaResolver) CheckMirrorRepositoryConnection(ctx context.Context, args *struct { /* all structs must go */ }) (*checkMirrorRepositoryConnectionResult, error) {
 	// 🚨 SECURITY: This is an expensive operation and the errors may contain secrets,
 	// so only site admins may run it.
 	if err := backend.CheckCurrentUserIsSiteAdmin(ctx); err != nil {
@@ -214,9 +195,7 @@ func (r *schemaResolver) CheckMirrorRepositoryConnection(ctx context.Context, ar
 	return &result, nil
 }
 
-type checkMirrorRepositoryConnectionResult struct {
-	errorMessage string
-}
+type checkMirrorRepositoryConnectionResult struct { /* all structs must go */ }
 
 func (r *checkMirrorRepositoryConnectionResult) Error() *string {
 	if r.errorMessage == "" {
@@ -225,9 +204,7 @@ func (r *checkMirrorRepositoryConnectionResult) Error() *string {
 	return &r.errorMessage
 }
 
-func (r *schemaResolver) UpdateMirrorRepository(ctx context.Context, args *struct {
-	Repository graphql.ID
-}) (*EmptyResponse, error) {
+func (r *schemaResolver) UpdateMirrorRepository(ctx context.Context, args *struct { /* all structs must go */ }) (*EmptyResponse, error) {
 	// 🚨 SECURITY: There is no reason why non-site-admins would need to run this operation.
 	if err := backend.CheckCurrentUserIsSiteAdmin(ctx); err != nil {
 		return nil, err
diff --git a/cmd/frontend/graphqlbackend/repository_text_search_index.go b/cmd/frontend/graphqlbackend/repository_text_search_index.go
index 877d2f7..c62e9bb 100644
--- a/cmd/frontend/graphqlbackend/repository_text_search_index.go
+++ b/cmd/frontend/graphqlbackend/repository_text_search_index.go
@@ -20,14 +20,7 @@ func (r *RepositoryResolver) TextSearchIndex() *repositoryTextSearchIndexResolve
 	}
 }
 
-type repositoryTextSearchIndexResolver struct {
-	repo   *RepositoryResolver
-	client repoLister
-
-	once  sync.Once
-	entry *zoekt.RepoListEntry
-	err   error
-}
+type repositoryTextSearchIndexResolver struct { /* all structs must go */ }
 
 type repoLister interface {
 	List(ctx context.Context, q zoektquery.Q) (*zoekt.RepoList, error)
@@ -64,9 +57,7 @@ func (r *repositoryTextSearchIndexResolver) Status(ctx context.Context) (*reposi
 	return &repositoryTextSearchIndexStatus{entry: *entry}, nil
 }
 
-type repositoryTextSearchIndexStatus struct {
-	entry zoekt.RepoListEntry
-}
+type repositoryTextSearchIndexStatus struct { /* all structs must go */ }
 
 func (r *repositoryTextSearchIndexStatus) UpdatedAt() DateTime {
 	return DateTime{Time: r.entry.IndexMetadata.IndexTime}
@@ -135,10 +126,7 @@ func (r *repositoryTextSearchIndexResolver) Refs(ctx context.Context) ([]*reposi
 	return refs, nil
 }
 
-type repositoryTextSearchIndexedRef struct {
-	ref           *GitRefResolver
-	indexedCommit GitObjectID
-}
+type repositoryTextSearchIndexedRef struct { /* all structs must go */ }
 
 func (r *repositoryTextSearchIndexedRef) Ref() *GitRefResolver { return r.ref }
 func (r *repositoryTextSearchIndexedRef) Indexed() bool        { return r.indexedCommit != "" }
diff --git a/cmd/frontend/graphqlbackend/saved_searches.go b/cmd/frontend/graphqlbackend/saved_searches.go
index e1af2b2..b04e502 100644
--- a/cmd/frontend/graphqlbackend/saved_searches.go
+++ b/cmd/frontend/graphqlbackend/saved_searches.go
@@ -13,9 +13,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/lazyregexp"
 )
 
-type savedSearchResolver struct {
-	s types.SavedSearch
-}
+type savedSearchResolver struct { /* all structs must go */ }
 
 func marshalSavedSearchID(savedSearchID int32) graphql.ID {
 	return relay.MarshalID("SavedSearch", savedSearchID)
@@ -124,9 +122,7 @@ func (r *schemaResolver) SavedSearches(ctx context.Context) ([]*savedSearchResol
 	return savedSearches, nil
 }
 
-func (r *schemaResolver) SendSavedSearchTestNotification(ctx context.Context, args *struct {
-	ID graphql.ID
-}) (*EmptyResponse, error) {
+func (r *schemaResolver) SendSavedSearchTestNotification(ctx context.Context, args *struct { /* all structs must go */ }) (*EmptyResponse, error) {
 	// 🚨 SECURITY: Only site admins should be able to send test notifications.
 	if err := backend.CheckCurrentUserIsSiteAdmin(ctx); err != nil {
 		return nil, err
@@ -144,14 +140,7 @@ func (r *schemaResolver) SendSavedSearchTestNotification(ctx context.Context, ar
 	return &EmptyResponse{}, nil
 }
 
-func (r *schemaResolver) CreateSavedSearch(ctx context.Context, args *struct {
-	Description string
-	Query       string
-	NotifyOwner bool
-	NotifySlack bool
-	OrgID       *graphql.ID
-	UserID      *graphql.ID
-}) (*savedSearchResolver, error) {
+func (r *schemaResolver) CreateSavedSearch(ctx context.Context, args *struct { /* all structs must go */ }) (*savedSearchResolver, error) {
 	var userID, orgID *int32
 	// 🚨 SECURITY: Make sure the current user has permission to create a saved search for the specified user or org.
 	if args.UserID != nil {
@@ -195,15 +184,7 @@ func (r *schemaResolver) CreateSavedSearch(ctx context.Context, args *struct {
 	return toSavedSearchResolver(*ss), nil
 }
 
-func (r *schemaResolver) UpdateSavedSearch(ctx context.Context, args *struct {
-	ID          graphql.ID
-	Description string
-	Query       string
-	NotifyOwner bool
-	NotifySlack bool
-	OrgID       *graphql.ID
-	UserID      *graphql.ID
-}) (*savedSearchResolver, error) {
+func (r *schemaResolver) UpdateSavedSearch(ctx context.Context, args *struct { /* all structs must go */ }) (*savedSearchResolver, error) {
 	var userID, orgID *int32
 	// 🚨 SECURITY: Make sure the current user has permission to update a saved search for the specified user or org.
 	if args.UserID != nil {
@@ -253,9 +234,7 @@ func (r *schemaResolver) UpdateSavedSearch(ctx context.Context, args *struct {
 	return toSavedSearchResolver(*ss), nil
 }
 
-func (r *schemaResolver) DeleteSavedSearch(ctx context.Context, args *struct {
-	ID graphql.ID
-}) (*EmptyResponse, error) {
+func (r *schemaResolver) DeleteSavedSearch(ctx context.Context, args *struct { /* all structs must go */ }) (*EmptyResponse, error) {
 	id, err := unmarshalSavedSearchID(args.ID)
 	if err != nil {
 		return nil, err
diff --git a/cmd/frontend/graphqlbackend/saved_searches_test.go b/cmd/frontend/graphqlbackend/saved_searches_test.go
index 5a4e00a..1548918 100644
--- a/cmd/frontend/graphqlbackend/saved_searches_test.go
+++ b/cmd/frontend/graphqlbackend/saved_searches_test.go
@@ -60,14 +60,7 @@ func TestCreateSavedSearch(t *testing.T) {
 		return &types.User{SiteAdmin: true, ID: key}, nil
 	}
 	userID := MarshalUserID(key)
-	savedSearches, err := (&schemaResolver{}).CreateSavedSearch(ctx, &struct {
-		Description string
-		Query       string
-		NotifyOwner bool
-		NotifySlack bool
-		OrgID       *graphql.ID
-		UserID      *graphql.ID
-	}{Description: "test query", Query: "test type:diff patternType:regexp", NotifyOwner: true, NotifySlack: false, OrgID: nil, UserID: &userID})
+	savedSearches, err := (&schemaResolver{}).CreateSavedSearch(ctx, &struct { /* all structs must go */ }{Description: "test query", Query: "test type:diff patternType:regexp", NotifyOwner: true, NotifySlack: false, OrgID: nil, UserID: &userID})
 	if err != nil {
 		t.Fatal(err)
 	}
@@ -90,14 +83,7 @@ func TestCreateSavedSearch(t *testing.T) {
 	}
 
 	// Ensure create saved search errors when patternType is not provided in the query.
-	_, err = (&schemaResolver{}).CreateSavedSearch(ctx, &struct {
-		Description string
-		Query       string
-		NotifyOwner bool
-		NotifySlack bool
-		OrgID       *graphql.ID
-		UserID      *graphql.ID
-	}{Description: "test query", Query: "test type:diff", NotifyOwner: true, NotifySlack: false, OrgID: nil, UserID: &userID})
+	_, err = (&schemaResolver{}).CreateSavedSearch(ctx, &struct { /* all structs must go */ }{Description: "test query", Query: "test type:diff", NotifyOwner: true, NotifySlack: false, OrgID: nil, UserID: &userID})
 	if err == nil {
 		t.Error("Expected error for createSavedSearch when query does not provide a patternType: field.")
 	}
@@ -118,15 +104,7 @@ func TestUpdateSavedSearch(t *testing.T) {
 		return &types.SavedSearch{ID: key, Description: savedSearch.Description, Query: savedSearch.Query, Notify: savedSearch.Notify, NotifySlack: savedSearch.NotifySlack, UserID: savedSearch.UserID, OrgID: savedSearch.OrgID}, nil
 	}
 	userID := MarshalUserID(key)
-	savedSearches, err := (&schemaResolver{}).UpdateSavedSearch(ctx, &struct {
-		ID          graphql.ID
-		Description string
-		Query       string
-		NotifyOwner bool
-		NotifySlack bool
-		OrgID       *graphql.ID
-		UserID      *graphql.ID
-	}{ID: marshalSavedSearchID(key), Description: "updated query description", Query: "test type:diff patternType:regexp", NotifyOwner: true, NotifySlack: false, OrgID: nil, UserID: &userID})
+	savedSearches, err := (&schemaResolver{}).UpdateSavedSearch(ctx, &struct { /* all structs must go */ }{ID: marshalSavedSearchID(key), Description: "updated query description", Query: "test type:diff patternType:regexp", NotifyOwner: true, NotifySlack: false, OrgID: nil, UserID: &userID})
 	if err != nil {
 		t.Fatal(err)
 	}
@@ -150,15 +128,7 @@ func TestUpdateSavedSearch(t *testing.T) {
 	}
 
 	// Ensure update saved search errors when patternType is not provided in the query.
-	_, err = (&schemaResolver{}).UpdateSavedSearch(ctx, &struct {
-		ID          graphql.ID
-		Description string
-		Query       string
-		NotifyOwner bool
-		NotifySlack bool
-		OrgID       *graphql.ID
-		UserID      *graphql.ID
-	}{ID: marshalSavedSearchID(key), Description: "updated query description", Query: "test type:diff", NotifyOwner: true, NotifySlack: false, OrgID: nil, UserID: &userID})
+	_, err = (&schemaResolver{}).UpdateSavedSearch(ctx, &struct { /* all structs must go */ }{ID: marshalSavedSearchID(key), Description: "updated query description", Query: "test type:diff", NotifyOwner: true, NotifySlack: false, OrgID: nil, UserID: &userID})
 	if err == nil {
 		t.Error("Expected error for updateSavedSearch when query does not provide a patternType: field.")
 	}
@@ -184,9 +154,7 @@ func TestDeleteSavedSearch(t *testing.T) {
 	}
 
 	firstSavedSearchGraphqlID := graphql.ID("U2F2ZWRTZWFyY2g6NTI=")
-	_, err := (&schemaResolver{}).DeleteSavedSearch(ctx, &struct {
-		ID graphql.ID
-	}{ID: firstSavedSearchGraphqlID})
+	_, err := (&schemaResolver{}).DeleteSavedSearch(ctx, &struct { /* all structs must go */ }{ID: firstSavedSearchGraphqlID})
 	if err != nil {
 		t.Fatal(err)
 	}
diff --git a/cmd/frontend/graphqlbackend/search.go b/cmd/frontend/graphqlbackend/search.go
index 732ca24..06f32c6 100644
--- a/cmd/frontend/graphqlbackend/search.go
+++ b/cmd/frontend/graphqlbackend/search.go
@@ -52,14 +52,7 @@ func maxReposToSearch() int {
 	}
 }
 
-type SearchArgs struct {
-	Version        string
-	PatternType    *string
-	Query          string
-	After          *string
-	First          *int32
-	VersionContext *string
-}
+type SearchArgs struct { /* all structs must go */ }
 
 type SearchImplementer interface {
 	Results(context.Context) (*SearchResultsResolver, error)
@@ -279,23 +272,7 @@ func getBoolPtr(b *bool, def bool) bool {
 }
 
 // searchResolver is a resolver for the GraphQL type `Search`
-type searchResolver struct {
-	query          query.QueryInfo       // the query, either containing and/or expressions or otherwise ordinary
-	originalQuery  string                // the raw string of the original search query
-	pagination     *searchPaginationInfo // pagination information, or nil if the request is not paginated.
-	patternType    query.SearchType
-	versionContext *string
-
-	// Cached resolveRepositories results.
-	reposMu                   sync.Mutex
-	repoRevs, missingRepoRevs []*search.RepositoryRevisions
-	excludedRepos             *excludedRepos
-	repoOverLimit             bool
-	repoErr                   error
-
-	zoekt        *searchbackend.Zoekt
-	searcherURLs *endpoint.Map
-}
+type searchResolver struct { /* all structs must go */ }
 
 // rawQuery returns the original query string input.
 func (r *searchResolver) rawQuery() string {
@@ -411,10 +388,7 @@ func exactlyOneRepo(repoFilters []string) bool {
 }
 
 // A type that counts how many repos with a certain label were excluded from search results.
-type excludedRepos struct {
-	forks    int
-	archived int
-}
+type excludedRepos struct { /* all structs must go */ }
 
 // computeExcludedRepositories returns a list of excluded repositories (forks or
 // archives) based on the search query.
@@ -554,10 +528,7 @@ func (r *searchResolver) resolveRepositories(ctx context.Context, effectiveRepoF
 // a patternRevspec maps an include pattern to a list of revisions
 // for repos matching that pattern. "map" in this case does not mean
 // an actual map, because we want regexp matches, not identity matches.
-type patternRevspec struct {
-	includePattern *regexp.Regexp
-	revs           []search.RevisionSpecifier
-}
+type patternRevspec struct { /* all structs must go */ }
 
 // given a repo name, determine whether it matched any patterns for which we have
 // revspecs (or ref globs), and if so, return the matching/allowed ones.
@@ -644,20 +615,7 @@ func findPatternRevs(includePatterns []string) (includePatternRevs []patternRevs
 	return
 }
 
-type resolveRepoOp struct {
-	repoFilters        []string
-	minusRepoFilters   []string
-	repoGroupFilters   []string
-	versionContextName string
-	noForks            bool
-	onlyForks          bool
-	noArchived         bool
-	onlyArchived       bool
-	commitAfter        string
-	onlyPrivate        bool
-	onlyPublic         bool
-	query              query.QueryInfo
-}
+type resolveRepoOp struct { /* all structs must go */ }
 
 func resolveRepositories(ctx context.Context, op resolveRepoOp) (repoRevisions, missingRepoRevisions []*search.RepositoryRevisions, overLimit bool, excludedRepos *excludedRepos, err error) {
 	tr, ctx := trace.New(ctx, "resolveRepositories", fmt.Sprintf("%+v", op))
@@ -1006,9 +964,7 @@ func unionRegExps(patterns []string) string {
 	return strings.Join(patterns2, "|")
 }
 
-type badRequestError struct {
-	err error
-}
+type badRequestError struct { /* all structs must go */ }
 
 func (e *badRequestError) BadRequest() bool {
 	return true
@@ -1023,16 +979,7 @@ func (e *badRequestError) Cause() error {
 }
 
 // searchSuggestionResolver is a resolver for the GraphQL union type `SearchSuggestion`
-type searchSuggestionResolver struct {
-	// result is either a RepositoryResolver or a GitTreeEntryResolver
-	result interface{}
-	// score defines how well this item matches the query for sorting purposes
-	score int
-	// length holds the length of the item name as a second sorting criterium
-	length int
-	// label to sort alphabetically by when all else is equal.
-	label string
-}
+type searchSuggestionResolver struct { /* all structs must go */ }
 
 func (r *searchSuggestionResolver) ToRepository() (*RepositoryResolver, bool) {
 	res, ok := r.result.(*RepositoryResolver)
diff --git a/cmd/frontend/graphqlbackend/search_alert.go b/cmd/frontend/graphqlbackend/search_alert.go
index ae74fea..b7ab7d2 100644
--- a/cmd/frontend/graphqlbackend/search_alert.go
+++ b/cmd/frontend/graphqlbackend/search_alert.go
@@ -19,12 +19,7 @@ import (
 	querytypes "github.com/sourcegraph/sourcegraph/internal/search/query/types"
 )
 
-type searchAlert struct {
-	prometheusType  string
-	title           string
-	description     string
-	proposedQueries []*searchQueryDescription
-}
+type searchAlert struct { /* all structs must go */ }
 
 func (a searchAlert) Title() string { return a.title }
 
diff --git a/cmd/frontend/graphqlbackend/search_alert_test.go b/cmd/frontend/graphqlbackend/search_alert_test.go
index 40f894e..c89972a 100644
--- a/cmd/frontend/graphqlbackend/search_alert_test.go
+++ b/cmd/frontend/graphqlbackend/search_alert_test.go
@@ -17,11 +17,7 @@ import (
 )
 
 func TestSearchPatternForSuggestion(t *testing.T) {
-	cases := []struct {
-		Name  string
-		Alert searchAlert
-		Want  string
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			Name: "with_regex_suggestion",
 			Alert: searchAlert{
@@ -65,12 +61,7 @@ func TestSearchPatternForSuggestion(t *testing.T) {
 }
 
 func TestAddQueryRegexpField(t *testing.T) {
-	tests := []struct {
-		query      string
-		addField   string
-		addPattern string
-		want       string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			query:      "",
 			addField:   "repo",
@@ -153,12 +144,7 @@ func TestAddQueryRegexpField(t *testing.T) {
 }
 
 func TestErrorToAlertStructuralSearch(t *testing.T) {
-	cases := []struct {
-		name           string
-		errors         []error
-		wantErrors     []error
-		wantAlertTitle string
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			name:           "multierr_is_unaffected",
 			errors:         []error{errors.New("some error")},
@@ -231,12 +217,7 @@ func TestAlertForOverRepoLimit(t *testing.T) {
 	}
 	defer func() { mockResolveRepositories = nil }()
 
-	cases := []struct {
-		name      string
-		repoRevs  int
-		query     string
-		wantAlert *searchAlert
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			name:     "should return default alert",
 			repoRevs: 0,
diff --git a/cmd/frontend/graphqlbackend/search_commits.go b/cmd/frontend/graphqlbackend/search_commits.go
index 5413c3a..6ed51d6 100644
--- a/cmd/frontend/graphqlbackend/search_commits.go
+++ b/cmd/frontend/graphqlbackend/search_commits.go
@@ -25,18 +25,7 @@ import (
 )
 
 // commitSearchResultResolver is a resolver for the GraphQL type `CommitSearchResult`
-type commitSearchResultResolver struct {
-	commit         *GitCommitResolver
-	refs           []*GitRefResolver
-	sourceRefs     []*GitRefResolver
-	messagePreview *highlightedString
-	diffPreview    *highlightedString
-	icon           string
-	label          string
-	url            string
-	detail         string
-	matches        []*searchResultMatchResolver
-}
+type commitSearchResultResolver struct { /* all structs must go */ }
 
 func (r *commitSearchResultResolver) Commit() *GitCommitResolver         { return r.commit }
 func (r *commitSearchResultResolver) Refs() []*GitRefResolver            { return r.refs }
diff --git a/cmd/frontend/graphqlbackend/search_commits_test.go b/cmd/frontend/graphqlbackend/search_commits_test.go
index 6037e28..38fbc43 100644
--- a/cmd/frontend/graphqlbackend/search_commits_test.go
+++ b/cmd/frontend/graphqlbackend/search_commits_test.go
@@ -130,15 +130,8 @@ func TestExpandUsernamesToEmails(t *testing.T) {
 }
 
 func TestHighlightMatches(t *testing.T) {
-	type args struct {
-		pattern *regexp.Regexp
-		data    []byte
-	}
-	tests := []struct {
-		name string
-		args args
-		want *highlightedString
-	}{
+	type args struct { /* all structs must go */ }
+	tests := []struct { /* all structs must go */ }{
 		{
 			// https://github.com/sourcegraph/sourcegraph/issues/4512
 			name: "match at end",
diff --git a/cmd/frontend/graphqlbackend/search_didyoumeanquoted_test.go b/cmd/frontend/graphqlbackend/search_didyoumeanquoted_test.go
index 5459379..cfc06f4 100644
--- a/cmd/frontend/graphqlbackend/search_didyoumeanquoted_test.go
+++ b/cmd/frontend/graphqlbackend/search_didyoumeanquoted_test.go
@@ -8,14 +8,8 @@ import (
 )
 
 func TestProposedQuotedQueries(t *testing.T) {
-	type args struct {
-		rawQuery string
-	}
-	tests := []struct {
-		name string
-		args args
-		want []*searchQueryDescription
-	}{
+	type args struct { /* all structs must go */ }
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "empty",
 			args: args{
@@ -67,11 +61,7 @@ func TestProposedQuotedQueries(t *testing.T) {
 }
 
 func TestCapFirst(t *testing.T) {
-	tests := []struct {
-		name string
-		in   string
-		want string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{name: "empty", in: "", want: ""},
 		{name: "a", in: "a", want: "A"},
 		{name: "ab", in: "ab", want: "Ab"},
diff --git a/cmd/frontend/graphqlbackend/search_filter_suggestions.go b/cmd/frontend/graphqlbackend/search_filter_suggestions.go
index 78cfc3f..8684e4b 100644
--- a/cmd/frontend/graphqlbackend/search_filter_suggestions.go
+++ b/cmd/frontend/graphqlbackend/search_filter_suggestions.go
@@ -52,10 +52,7 @@ func (r *schemaResolver) SearchFilterSuggestions(ctx context.Context) (*searchFi
 }
 
 // searchFilterSuggestions holds suggestions of search filters and their default values.
-type searchFilterSuggestions struct {
-	repogroups []string
-	repos      []string
-}
+type searchFilterSuggestions struct { /* all structs must go */ }
 
 // Repogroup returns all repository groups defined in the settings.
 func (s *searchFilterSuggestions) Repogroup() []string {
diff --git a/cmd/frontend/graphqlbackend/search_filter_suggestions_test.go b/cmd/frontend/graphqlbackend/search_filter_suggestions_test.go
index 5475106..48e91b8 100644
--- a/cmd/frontend/graphqlbackend/search_filter_suggestions_test.go
+++ b/cmd/frontend/graphqlbackend/search_filter_suggestions_test.go
@@ -28,10 +28,7 @@ func TestSearchFilterSuggestions(t *testing.T) {
 	}
 	defer func() { db.Mocks.Repos.List = nil }()
 
-	tests := []struct {
-		want     *searchFilterSuggestions
-		globbing bool
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{want: &searchFilterSuggestions{
 			repogroups: []string{"repogroup1", "repogroup2"},
 			repos:      []string{"^bar-repo$", `^github\.com/foo/repo$`}},
diff --git a/cmd/frontend/graphqlbackend/search_pagination.go b/cmd/frontend/graphqlbackend/search_pagination.go
index 91ec1da..9454418 100644
--- a/cmd/frontend/graphqlbackend/search_pagination.go
+++ b/cmd/frontend/graphqlbackend/search_pagination.go
@@ -21,20 +21,7 @@ import (
 
 // searchCursor represents a decoded search pagination cursor. From an API
 // consumer standpoint, it is an encoded opaque string.
-type searchCursor struct {
-	// RepositoryOffset indicates how many repositories (which are globally
-	// sorted and ordered) to offset by.
-	RepositoryOffset int32
-
-	// ResultOffset indicates how many results within the first repository we
-	// would search in to further offset by. This is so that we can paginate
-	// results within e.g. a single large repository.
-	ResultOffset int32
-
-	// Finished tells if there are more results for the query or if we've
-	// consumed them all.
-	Finished bool
-}
+type searchCursor struct { /* all structs must go */ }
 
 const searchCursorKind = "SearchCursor"
 
@@ -60,14 +47,7 @@ func unmarshalSearchCursor(cursor *string) (*searchCursor, error) {
 
 // searchPaginationInfo describes information around a paginated search
 // request.
-type searchPaginationInfo struct {
-	// cursor indicates where to resume searching from (see docstrings on
-	// searchCursor) or nil when requesting the first page of results.
-	cursor *searchCursor
-
-	// limit indicates at max how many search results to return.
-	limit int32
-}
+type searchPaginationInfo struct { /* all structs must go */ }
 
 func (r *SearchResultsResolver) PageInfo() *graphqlutil.PageInfo {
 	if r.cursor == nil || r.cursor.Finished {
@@ -295,26 +275,7 @@ func paginatedSearchFilesInRepos(ctx context.Context, args *search.TextParameter
 //
 // It does this by searching over a globally-sorted list of repositories in
 // batches.
-type repoPaginationPlan struct {
-	// pagination is the pagination request we're trying to fulfill.
-	pagination *searchPaginationInfo
-
-	// repositories is the exhaustive and complete list of sorted repositories
-	// to be searched over multiple requests.
-	repositories []*search.RepositoryRevisions
-
-	// parameters for controlling the size of batches that the executor is
-	// called to search. The final batch size is calculated as:
-	//
-	// 	batchSize = numTotalReposOnSourcegraph() / searchBucketDivisor
-	//
-	// With the additional constraint that it must be at least min and no
-	// larger than max.
-	searchBucketDivisor              int
-	searchBucketMin, searchBucketMax int
-
-	mockNumTotalRepos func() int
-}
+type repoPaginationPlan struct { /* all structs must go */ }
 
 // executor is a function which searches a batch of repositories.
 //
@@ -422,25 +383,7 @@ func (p *repoPaginationPlan) execute(ctx context.Context, exec executor) (c *sea
 	return nextCursor, sliced.results, sliced.common, nil
 }
 
-type slicedSearchResults struct {
-	// results is the new results, sliced.
-	results []SearchResultResolver
-
-	// common is the new common results structure, updated to reflect the sliced results only.
-	common *searchResultsCommon
-
-	// resultOffset indicates where the search would continue within the last
-	// repository whose results were consumed. For example:
-	//
-	// 	limit := 5
-	// 	results := [a1, a2, a3, b1, b2, b3, c1, c2, c3]
-	// 	sliceSearchResults(results, ..., limit).resultOffset = 2 // in repository B, resume at result offset 2 (b3)
-	//
-	resultOffset int32
-
-	// limitHit indicates if the limit was hit and results were truncated.
-	limitHit bool
-}
+type slicedSearchResults struct { /* all structs must go */ }
 
 // sliceSearchResults effectively slices results[offset:offset+limit] and
 // returns an updated searchResultsCommon structure to reflect that, as well as
@@ -586,11 +529,7 @@ func clamp(x, min, max int) int {
 // Since we will need to know the number of total repos on Sourcegraph for
 // every paginated search request, but the exact number doesn't matter, we
 // cache the result for a minute to avoid executing many DB count operations.
-type numTotalReposCache struct {
-	sync.RWMutex
-	lastUpdate time.Time
-	count      int
-}
+type numTotalReposCache struct { /* all structs must go */ }
 
 func (n *numTotalReposCache) get(ctx context.Context) int {
 	n.RLock()
diff --git a/cmd/frontend/graphqlbackend/search_pagination_test.go b/cmd/frontend/graphqlbackend/search_pagination_test.go
index cffe180..db79749 100644
--- a/cmd/frontend/graphqlbackend/search_pagination_test.go
+++ b/cmd/frontend/graphqlbackend/search_pagination_test.go
@@ -83,13 +83,7 @@ func TestSearchPagination_sliceSearchResults(t *testing.T) {
 		// tests).
 		repos: []*types.Repo{repo("org/repo1"), repo("org/repo3"), repo("org/repo2")},
 	}
-	tests := []struct {
-		name          string
-		results       []SearchResultResolver
-		common        *searchResultsCommon
-		offset, limit int
-		want          slicedSearchResults
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:    "empty result set",
 			results: []SearchResultResolver{},
@@ -312,16 +306,7 @@ func TestSearchPagination_repoPaginationPlan(t *testing.T) {
 	}
 	ctx := context.Background()
 
-	tests := []struct {
-		name                string
-		executor            executor
-		request             *searchPaginationInfo
-		wantSearchedBatches [][]*search.RepositoryRevisions
-		wantCursor          *searchCursor
-		wantResults         []SearchResultResolver
-		wantCommon          *searchResultsCommon
-		wantErr             error
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "first request",
 			request: &searchPaginationInfo{
@@ -526,13 +511,7 @@ func TestSearchPagination_issue_6287(t *testing.T) {
 	}
 	ctx := context.Background()
 
-	tests := []struct {
-		name        string
-		request     *searchPaginationInfo
-		wantCursor  *searchCursor
-		wantResults []SearchResultResolver
-		wantErr     error
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "request 1",
 			request: &searchPaginationInfo{
@@ -661,15 +640,7 @@ func TestSearchPagination_cloning_missing(t *testing.T) {
 	}
 	ctx := context.Background()
 
-	tests := []struct {
-		name        string
-		request     *searchPaginationInfo
-		searchRepos []*search.RepositoryRevisions
-		wantCursor  *searchCursor
-		wantResults []SearchResultResolver
-		wantCommon  *searchResultsCommon
-		wantErr     error
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "repo a",
 			request: &searchPaginationInfo{
diff --git a/cmd/frontend/graphqlbackend/search_query_description.go b/cmd/frontend/graphqlbackend/search_query_description.go
index 7d3d835..0e45a5b 100644
--- a/cmd/frontend/graphqlbackend/search_query_description.go
+++ b/cmd/frontend/graphqlbackend/search_query_description.go
@@ -4,11 +4,7 @@ import "github.com/sourcegraph/sourcegraph/internal/search/query"
 
 // searchQueryDescription is a type for the SearchQueryDescription resolver used
 // by SearchAlert.
-type searchQueryDescription struct {
-	description string
-	query       string
-	patternType query.SearchType
-}
+type searchQueryDescription struct { /* all structs must go */ }
 
 func (q searchQueryDescription) Query() string {
 	if q.description != "Remove quotes" {
diff --git a/cmd/frontend/graphqlbackend/search_repositories_test.go b/cmd/frontend/graphqlbackend/search_repositories_test.go
index d2332a2..ab8fc4d 100644
--- a/cmd/frontend/graphqlbackend/search_repositories_test.go
+++ b/cmd/frontend/graphqlbackend/search_repositories_test.go
@@ -47,11 +47,7 @@ func TestSearchRepositories(t *testing.T) {
 		}
 	}
 
-	cases := []struct {
-		name string
-		q    string
-		want []string
-	}{{
+	cases := []struct { /* all structs must go */ }{{
 		name: "all",
 		q:    "type:repo",
 		want: []string{"bar/one", "foo/no-match", "foo/one"},
diff --git a/cmd/frontend/graphqlbackend/search_result_match.go b/cmd/frontend/graphqlbackend/search_result_match.go
index 6b69a6c..940c69f 100644
--- a/cmd/frontend/graphqlbackend/search_result_match.go
+++ b/cmd/frontend/graphqlbackend/search_result_match.go
@@ -1,11 +1,7 @@
 package graphqlbackend
 
 // A resolver for the GraphQL type GenericSearchMatch
-type searchResultMatchResolver struct {
-	url        string
-	body       string
-	highlights []*highlightedRange
-}
+type searchResultMatchResolver struct { /* all structs must go */ }
 
 func (m *searchResultMatchResolver) URL() string {
 	return m.url
diff --git a/cmd/frontend/graphqlbackend/search_results.go b/cmd/frontend/graphqlbackend/search_results.go
index 130dd54..05aca5b 100644
--- a/cmd/frontend/graphqlbackend/search_results.go
+++ b/cmd/frontend/graphqlbackend/search_results.go
@@ -46,26 +46,7 @@ import (
 
 // searchResultsCommon contains fields that should be returned by all funcs
 // that contribute to the overall search result set.
-type searchResultsCommon struct {
-	limitHit bool // whether the limit on results was hit
-
-	repos    []*types.Repo             // repos that were matched by the repo-related filters
-	searched []*types.Repo             // repos that were searched
-	indexed  []*types.Repo             // repos that were searched using an index
-	cloning  []*types.Repo             // repos that could not be searched because they were still being cloned
-	missing  []*types.Repo             // repos that could not be searched because they do not exist
-	excluded excludedRepos             // repo counts of excluded repos because the search query doesn't apply to them, but that we want to know about (forks, archives)
-	partial  map[api.RepoName]struct{} // repos that were searched, but have results that were not returned due to exceeded limits
-
-	maxResultsCount, resultCount int32
-
-	// timedout usually contains repos that haven't finished being fetched yet.
-	// This should only happen for large repos and the searcher caches are
-	// purged.
-	timedout []*types.Repo
-
-	indexUnavailable bool // True if indexed search is enabled but was not available during this search.
-}
+type searchResultsCommon struct { /* all structs must go */ }
 
 func (c *searchResultsCommon) LimitHit() bool {
 	return c.limitHit || c.resultCount > c.maxResultsCount
@@ -158,16 +139,7 @@ func dedupSort(repos *types.Repos) {
 }
 
 // SearchResultsResolver is a resolver for the GraphQL type `SearchResults`
-type SearchResultsResolver struct {
-	SearchResults []SearchResultResolver
-	searchResultsCommon
-	alert *searchAlert
-	start time.Time // when the results started being computed
-
-	// cursor to return for paginated search requests, or nil if the request
-	// wasn't paginated.
-	cursor *searchCursor
-}
+type SearchResultsResolver struct { /* all structs must go */ }
 
 func (sr *SearchResultsResolver) Results() []SearchResultResolver {
 	return sr.SearchResults
@@ -200,11 +172,7 @@ func (sr *SearchResultsResolver) ElapsedMilliseconds() int32 {
 
 // commonFileFilters are common filters used. It is used by DynamicFilters to
 // propose them if they match shown results.
-var commonFileFilters = []struct {
-	regexp      *lazyregexp.Regexp
-	regexFilter string
-	globFilter  string
-}{
+var commonFileFilters = []struct { /* all structs must go */ }{
 	// Exclude go tests
 	{
 		regexp:      lazyregexp.New(`_test\.go$`),
@@ -360,24 +328,7 @@ func (sr *SearchResultsResolver) DynamicFilters(ctx context.Context) []*searchFi
 	return allFilters
 }
 
-type searchFilterResolver struct {
-	value string
-
-	// the string to be displayed in the UI
-	label string
-
-	// the number of matches in a particular repository. Only used for `repo:` filters.
-	count int32
-
-	// whether the results returned for a repository are incomplete
-	limitHit bool
-
-	// the kind of filter. Should be "repo", "file", or "lang".
-	kind string
-
-	// score is used to prioritize the order that filters appear in
-	score score
-}
+type searchFilterResolver struct { /* all structs must go */ }
 
 type score int
 
@@ -1050,16 +1001,7 @@ func roundStr(s string) string {
 	})
 }
 
-type searchResultsStats struct {
-	JApproximateResultCount string
-	JSparkline              []int32
-
-	sr *searchResolver
-
-	once   sync.Once
-	srs    *SearchResultsResolver
-	srsErr error
-}
+type searchResultsStats struct { /* all structs must go */ }
 
 func (srs *searchResultsStats) ApproximateResultCount() string { return srs.JApproximateResultCount }
 func (srs *searchResultsStats) Sparkline() []int32             { return srs.JSparkline }
@@ -1156,16 +1098,7 @@ func (r *searchResolver) Stats(ctx context.Context) (stats *searchResultsStats,
 	return stats, nil
 }
 
-type getPatternInfoOptions struct {
-	// forceFileSearch, when true, specifies that the search query should be
-	// treated as if every default term had `file:` before it. This can be used
-	// to allow users to jump to files by just typing their name.
-	forceFileSearch         bool
-	performStructuralSearch bool
-	performLiteralSearch    bool
-
-	fileMatchLimit int32
-}
+type getPatternInfoOptions struct { /* all structs must go */ }
 
 // getPatternInfo gets the search pattern info for the query in the resolver.
 func (r *searchResolver) getPatternInfo(opts *getPatternInfoOptions) (*search.TextPatternInfo, error) {
diff --git a/cmd/frontend/graphqlbackend/search_results_stats_languages.go b/cmd/frontend/graphqlbackend/search_results_stats_languages.go
index 53074ee..9fccb0a 100644
--- a/cmd/frontend/graphqlbackend/search_results_stats_languages.go
+++ b/cmd/frontend/graphqlbackend/search_results_stats_languages.go
@@ -34,16 +34,10 @@ func (srs *searchResultsStats) Languages(ctx context.Context) ([]*languageStatis
 
 func searchResultsStatsLanguages(ctx context.Context, results []SearchResultResolver) ([]inventory.Lang, error) {
 	// Batch our operations by repo-commit.
-	type repoCommit struct {
-		repo     api.RepoID
-		commitID api.CommitID
-	}
+	type repoCommit struct { /* all structs must go */ }
 
 	// Records the work necessary for a batch (repoCommit).
-	type fileStatsWork struct {
-		fullEntries  []os.FileInfo     // matched these full files
-		partialFiles map[string]uint64 // file with line matches (path) -> count of lines matching
-	}
+	type fileStatsWork struct { /* all structs must go */ }
 
 	var (
 		repos    = map[api.RepoID]*types.Repo{}
diff --git a/cmd/frontend/graphqlbackend/search_results_stats_languages_test.go b/cmd/frontend/graphqlbackend/search_results_stats_languages_test.go
index 0e253fd..784f17a 100644
--- a/cmd/frontend/graphqlbackend/search_results_stats_languages_test.go
+++ b/cmd/frontend/graphqlbackend/search_results_stats_languages_test.go
@@ -54,11 +54,7 @@ func TestSearchResultsStatsLanguages(t *testing.T) {
 	}
 	defer git.ResetMocks()
 
-	tests := map[string]struct {
-		results  []SearchResultResolver
-		getFiles []os.FileInfo
-		want     []inventory.Lang // TotalBytes values are incorrect (known issue doc'd in GraphQL schema)
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"empty": {
 			results: nil,
 			want:    []inventory.Lang{},
diff --git a/cmd/frontend/graphqlbackend/search_results_test.go b/cmd/frontend/graphqlbackend/search_results_test.go
index 9a968df..56a3098 100644
--- a/cmd/frontend/graphqlbackend/search_results_test.go
+++ b/cmd/frontend/graphqlbackend/search_results_test.go
@@ -284,12 +284,7 @@ func TestOrderedFuzzyRegexp(t *testing.T) {
 }
 
 func TestProcessSearchPattern(t *testing.T) {
-	cases := []struct {
-		Name    string
-		Pattern string
-		Opts    *getPatternInfoOptions
-		Want    string
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			Name:    "Regexp, no content field",
 			Pattern: `search me`,
@@ -476,12 +471,7 @@ func TestSearchResolver_DynamicFilters(t *testing.T) {
 		InputRev: &rev,
 	}
 
-	type testCase struct {
-		descr                             string
-		searchResults                     []SearchResultResolver
-		expectedDynamicFilterStrsRegexp   map[string]struct{}
-		expectedDynamicFilterStrsGlobbing map[string]struct{}
-	}
+	type testCase struct { /* all structs must go */ }
 
 	tests := []testCase{
 
@@ -643,14 +633,7 @@ func TestSearchResolver_DynamicFilters(t *testing.T) {
 // we get the expected error, list of matching rev specs, or list
 // of clashing revspecs (if no matching rev specs were found)
 func TestSearchRevspecs(t *testing.T) {
-	type testCase struct {
-		descr    string
-		specs    []string
-		repo     string
-		err      error
-		matched  []search.RevisionSpecifier
-		clashing []search.RevisionSpecifier
-	}
+	type testCase struct { /* all structs must go */ }
 
 	tests := []testCase{
 		{
@@ -746,11 +729,7 @@ func TestSearchRevspecs(t *testing.T) {
 }
 
 func TestCompareSearchResults(t *testing.T) {
-	type testCase struct {
-		a       SearchResultResolver
-		b       SearchResultResolver
-		aIsLess bool
-	}
+	type testCase struct { /* all structs must go */ }
 
 	tests := []testCase{{
 		// Different repo matches
@@ -827,11 +806,7 @@ func TestLonger(t *testing.T) {
 }
 
 func TestRoundStr(t *testing.T) {
-	tests := []struct {
-		name string
-		s    string
-		want string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "empty",
 			s:    "",
@@ -1014,14 +989,7 @@ func TestDedupSort(t *testing.T) {
 }
 
 func TestCommitAndDiffSearchLimits(t *testing.T) {
-	cases := []struct {
-		name                 string
-		resultTypes          []string
-		numRepoRevs          int
-		fields               map[string][]*searchquerytypes.Value
-		wantResultTypes      []string
-		wantAlertDescription string
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			name:                 "diff_search_warns_on_repos_greater_than_search_limit",
 			resultTypes:          []string{"diff"},
@@ -1111,17 +1079,8 @@ func TestCommitAndDiffSearchLimits(t *testing.T) {
 }
 
 func Test_SearchResultsResolver_ApproximateResultCount(t *testing.T) {
-	type fields struct {
-		results             []SearchResultResolver
-		searchResultsCommon searchResultsCommon
-		alert               *searchAlert
-		start               time.Time
-	}
-	tests := []struct {
-		name   string
-		fields fields
-		want   string
-	}{
+	type fields struct { /* all structs must go */ }
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:   "empty",
 			fields: fields{},
diff --git a/cmd/frontend/graphqlbackend/search_structural_test.go b/cmd/frontend/graphqlbackend/search_structural_test.go
index afec909..374804a 100644
--- a/cmd/frontend/graphqlbackend/search_structural_test.go
+++ b/cmd/frontend/graphqlbackend/search_structural_test.go
@@ -110,12 +110,7 @@ func TestStructuralSearchRepoFilter(t *testing.T) {
 }
 
 func TestStructuralPatToRegexpQuery(t *testing.T) {
-	cases := []struct {
-		Name     string
-		Pattern  string
-		Function func(string, bool) (zoektquery.Q, error)
-		Want     string
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			Name:     "Just a hole",
 			Pattern:  ":[1]",
diff --git a/cmd/frontend/graphqlbackend/search_suggestions.go b/cmd/frontend/graphqlbackend/search_suggestions.go
index 61d240a..5af8680 100644
--- a/cmd/frontend/graphqlbackend/search_suggestions.go
+++ b/cmd/frontend/graphqlbackend/search_suggestions.go
@@ -23,9 +23,7 @@ import (
 
 const maxSearchSuggestions = 100
 
-type searchSuggestionsArgs struct {
-	First *int32
-}
+type searchSuggestionsArgs struct { /* all structs must go */ }
 
 func (a *searchSuggestionsArgs) applyDefaultsAndConstraints() {
 	if a.First == nil || *a.First < 0 || *a.First > maxSearchSuggestions {
@@ -325,13 +323,7 @@ func (r *searchResolver) Suggestions(ctx context.Context, args *searchSuggestion
 	}
 
 	// Eliminate duplicates.
-	type key struct {
-		repoName api.RepoName
-		repoRev  string
-		file     string
-		symbol   string
-		lang     string
-	}
+	type key struct { /* all structs must go */ }
 	seen := make(map[key]struct{}, len(allSuggestions))
 	uniqueSuggestions := allSuggestions[:0]
 	for _, s := range allSuggestions {
@@ -389,8 +381,6 @@ func allEmptyStrings(ss1, ss2 []string) bool {
 	return true
 }
 
-type languageResolver struct {
-	name string
-}
+type languageResolver struct { /* all structs must go */ }
 
 func (r *languageResolver) Name() string { return r.name }
diff --git a/cmd/frontend/graphqlbackend/search_symbols.go b/cmd/frontend/graphqlbackend/search_symbols.go
index 57fb295..676d687 100644
--- a/cmd/frontend/graphqlbackend/search_symbols.go
+++ b/cmd/frontend/graphqlbackend/search_symbols.go
@@ -29,12 +29,7 @@ import (
 )
 
 // searchSymbolResult is a result from symbol search.
-type searchSymbolResult struct {
-	symbol  protocol.Symbol
-	baseURI *gituri.URI
-	lang    string
-	commit  *GitCommitResolver // TODO: change to utility type we create to remove git resolvers from search.
-}
+type searchSymbolResult struct { /* all structs must go */ }
 
 func (s *searchSymbolResult) uri() *gituri.URI {
 	return s.baseURI.WithFilePath(s.symbol.Path)
diff --git a/cmd/frontend/graphqlbackend/search_symbols_test.go b/cmd/frontend/graphqlbackend/search_symbols_test.go
index 9d82270..ae01c07 100644
--- a/cmd/frontend/graphqlbackend/search_symbols_test.go
+++ b/cmd/frontend/graphqlbackend/search_symbols_test.go
@@ -29,10 +29,7 @@ func TestMakeFileMatchURIFromSymbol(t *testing.T) {
 	}
 	sr := &searchSymbolResult{symbol, baseURI, "go", commit}
 
-	tests := []struct {
-		rev  string
-		want string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{"", "git://repo#foo/bar"},
 		{"test", "git://repo?test#foo/bar"},
 	}
@@ -174,11 +171,7 @@ func TestLimitingSymbolResults(t *testing.T) {
 			}
 		})
 
-		testCases := []struct {
-			name  string
-			limit int
-			want  []*FileMatchResolver
-		}{
+		testCases := []struct { /* all structs must go */ }{
 			{
 				name: "limit 0 => no file matches",
 				want: []*FileMatchResolver{},
diff --git a/cmd/frontend/graphqlbackend/search_test.go b/cmd/frontend/graphqlbackend/search_test.go
index 6c12d78..188e0f9 100644
--- a/cmd/frontend/graphqlbackend/search_test.go
+++ b/cmd/frontend/graphqlbackend/search_test.go
@@ -24,20 +24,8 @@ import (
 )
 
 func TestSearch(t *testing.T) {
-	type Results struct {
-		Results     []interface{}
-		ResultCount int
-	}
-	tcs := []struct {
-		name                         string
-		searchQuery                  string
-		searchVersion                string
-		reposListMock                func(v0 context.Context, v1 db.ReposListOptions) ([]*types.Repo, error)
-		repoRevsMock                 func(spec string, opt git.ResolveRevisionOptions) (api.CommitID, error)
-		externalServicesListMock     func(opt db.ExternalServicesListOptions) ([]*types.ExternalService, error)
-		phabricatorGetRepoByNameMock func(repo api.RepoName) (*types.PhabricatorRepo, error)
-		wantResults                  Results
-	}{
+	type Results struct { /* all structs must go */ }
+	tcs := []struct { /* all structs must go */ }{
 		{
 			name:        "empty query against no repos gets no results",
 			searchQuery: "",
@@ -105,9 +93,7 @@ func TestSearch(t *testing.T) {
 			if len(result.Errors) > 0 {
 				t.Fatalf("graphQL query returned errors: %+v", result.Errors)
 			}
-			var search struct {
-				Results Results
-			}
+			var search struct { /* all structs must go */ }
 			if err := json.Unmarshal(result.Data, &search); err != nil {
 				t.Fatalf("parsing JSON response: %v", err)
 			}
@@ -256,13 +242,7 @@ func testStringResult(result *searchSuggestionResolver) string {
 }
 
 func TestDefaultRepositories(t *testing.T) {
-	tcs := []struct {
-		name             string
-		defaultsInDb     []string
-		indexedRepoNames map[string]bool
-		want             []string
-		excludePatterns  []string
-	}{
+	tcs := []struct { /* all structs must go */ }{
 		{
 			name:             "none in db => none returned",
 			defaultsInDb:     nil,
@@ -340,13 +320,7 @@ func TestDefaultRepositories(t *testing.T) {
 func TestDetectSearchType(t *testing.T) {
 	typeRegexp := "regexp"
 	typeLiteral := "literal"
-	testCases := []struct {
-		name        string
-		version     string
-		patternType *string
-		input       string
-		want        query.SearchType
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{"V1, no pattern type", "V1", nil, "", query.SearchTypeRegex},
 		{"V2, no pattern type", "V2", nil, "", query.SearchTypeLiteral},
 		{"V2, no pattern type, input does not produce parse error", "V2", nil, "/-/godoc", query.SearchTypeLiteral},
@@ -379,10 +353,7 @@ func TestDetectSearchType(t *testing.T) {
 }
 
 func TestExactlyOneRepo(t *testing.T) {
-	cases := []struct {
-		repoFilters []string
-		want        bool
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			repoFilters: []string{`^github\.com/sourcegraph/zoekt$`},
 			want:        true,
@@ -471,11 +442,7 @@ func TestQuoteSuggestions(t *testing.T) {
 }
 
 func TestEueryForStableResults(t *testing.T) {
-	cases := []struct {
-		query           string
-		wantStableCount int32
-		wantError       error
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			query:           "foo stable:yes",
 			wantStableCount: 30,
@@ -542,15 +509,7 @@ func TestVersionContext(t *testing.T) {
 	mockDecodedViewerFinalSettings = &schema.Settings{}
 	defer func() { mockDecodedViewerFinalSettings = nil }()
 
-	tcs := []struct {
-		name           string
-		searchQuery    string
-		versionContext string
-		// db.ReposListOptions.Names
-		wantReposListOptionsNames []string
-		reposGetListNames         []string
-		wantResults               []string
-	}{{
+	tcs := []struct { /* all structs must go */ }{{
 		name:           "query with version context should return the right repositories",
 		searchQuery:    "foo",
 		versionContext: "ctx-1",
@@ -662,12 +621,7 @@ func TestVersionContext(t *testing.T) {
 }
 
 func TestComputeExcludedRepositories(t *testing.T) {
-	cases := []struct {
-		Name              string
-		Query             string
-		Repos             []types.Repo
-		WantExcludedRepos *excludedRepos
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			Name:  "filter out forks and archived repos",
 			Query: "repo:repo",
diff --git a/cmd/frontend/graphqlbackend/settings.go b/cmd/frontend/graphqlbackend/settings.go
index 92cf2ae..e38472f 100644
--- a/cmd/frontend/graphqlbackend/settings.go
+++ b/cmd/frontend/graphqlbackend/settings.go
@@ -12,11 +12,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/env"
 )
 
-type settingsResolver struct {
-	subject  *settingsSubject
-	settings *api.Settings
-	user     *types.User
-}
+type settingsResolver struct { /* all structs must go */ }
 
 func (o *settingsResolver) ID() int32 {
 	return o.settings.ID
diff --git a/cmd/frontend/graphqlbackend/settings_cascade.go b/cmd/frontend/graphqlbackend/settings_cascade.go
index 77a50cf..bbb5543 100644
--- a/cmd/frontend/graphqlbackend/settings_cascade.go
+++ b/cmd/frontend/graphqlbackend/settings_cascade.go
@@ -18,11 +18,7 @@ import (
 // - Global site settings
 // - Organization settings
 // - Current user settings
-type settingsCascade struct {
-	// At most 1 of these fields is set.
-	unauthenticatedActor bool
-	subject              *settingsSubject
-}
+type settingsCascade struct { /* all structs must go */ }
 
 var mockSettingsCascadeSubjects func() ([]*settingsSubject, error)
 
diff --git a/cmd/frontend/graphqlbackend/settings_cascade_test.go b/cmd/frontend/graphqlbackend/settings_cascade_test.go
index 10c30e5..88b690f 100644
--- a/cmd/frontend/graphqlbackend/settings_cascade_test.go
+++ b/cmd/frontend/graphqlbackend/settings_cascade_test.go
@@ -15,11 +15,7 @@ func TestMergeSettings(t *testing.T) {
 	}
 	defer func() { deeplyMergedSettingsFields = orig }()
 
-	tests := map[string]struct {
-		configs []string
-		want    string
-		wantErr bool
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"empty": {
 			configs: []string{},
 			want:    `{}`,
diff --git a/cmd/frontend/graphqlbackend/settings_mutation.go b/cmd/frontend/graphqlbackend/settings_mutation.go
index 3bdc60c..5c4d7a4 100644
--- a/cmd/frontend/graphqlbackend/settings_mutation.go
+++ b/cmd/frontend/graphqlbackend/settings_mutation.go
@@ -15,10 +15,7 @@ import (
 )
 
 // Deprecated: The GraphQL type Configuration is deprecated.
-type configurationResolver struct {
-	contents string
-	messages []string // error and warning messages
-}
+type configurationResolver struct { /* all structs must go */ }
 
 func (r *configurationResolver) Contents() JSONCString {
 	return JSONCString(r.contents)
@@ -31,20 +28,12 @@ func (r *configurationResolver) Messages() []string {
 	return r.messages
 }
 
-type settingsMutationGroupInput struct {
-	Subject graphql.ID
-	LastID  *int32
-}
+type settingsMutationGroupInput struct { /* all structs must go */ }
 
-type settingsMutation struct {
-	input   *settingsMutationGroupInput
-	subject *settingsSubject
-}
+type settingsMutation struct { /* all structs must go */ }
 
 // SettingsMutation defines the Mutation.settingsMutation field.
-func (r *schemaResolver) SettingsMutation(ctx context.Context, args *struct {
-	Input *settingsMutationGroupInput
-}) (*settingsMutation, error) {
+func (r *schemaResolver) SettingsMutation(ctx context.Context, args *struct { /* all structs must go */ }) (*settingsMutation, error) {
 	n, err := r.nodeByID(ctx, args.Input.Subject)
 	if err != nil {
 		return nil, err
@@ -73,9 +62,7 @@ func (r *schemaResolver) SettingsMutation(ctx context.Context, args *struct {
 }
 
 // Deprecated: in the GraphQL API
-func (r *schemaResolver) ConfigurationMutation(ctx context.Context, args *struct {
-	Input *settingsMutationGroupInput
-}) (*settingsMutation, error) {
+func (r *schemaResolver) ConfigurationMutation(ctx context.Context, args *struct { /* all structs must go */ }) (*settingsMutation, error) {
 	return r.SettingsMutation(ctx, args)
 }
 
@@ -83,16 +70,9 @@ type updateSettingsPayload struct{}
 
 func (updateSettingsPayload) Empty() *EmptyResponse { return nil }
 
-type settingsEdit struct {
-	KeyPath                   []*keyPathSegment
-	Value                     *JSONValue
-	ValueIsJSONCEncodedString bool
-}
+type settingsEdit struct { /* all structs must go */ }
 
-type keyPathSegment struct {
-	Property *string
-	Index    *int32
-}
+type keyPathSegment struct { /* all structs must go */ }
 
 func toKeyPath(gqlKeyPath []*keyPathSegment) (jsonx.Path, error) {
 	keyPath := make(jsonx.Path, len(gqlKeyPath))
@@ -113,9 +93,7 @@ func toKeyPath(gqlKeyPath []*keyPathSegment) (jsonx.Path, error) {
 	return keyPath, nil
 }
 
-func (r *settingsMutation) EditSettings(ctx context.Context, args *struct {
-	Edit *settingsEdit
-}) (*updateSettingsPayload, error) {
+func (r *settingsMutation) EditSettings(ctx context.Context, args *struct { /* all structs must go */ }) (*updateSettingsPayload, error) {
 	keyPath, err := toKeyPath(args.Edit.KeyPath)
 	if err != nil {
 		return nil, err
@@ -137,9 +115,7 @@ func (r *settingsMutation) EditSettings(ctx context.Context, args *struct {
 	return r.editSettings(ctx, keyPath, value, remove)
 }
 
-func (r *settingsMutation) EditConfiguration(ctx context.Context, args *struct {
-	Edit *settingsEdit
-}) (*updateSettingsPayload, error) {
+func (r *settingsMutation) EditConfiguration(ctx context.Context, args *struct { /* all structs must go */ }) (*updateSettingsPayload, error) {
 	return r.EditSettings(ctx, args)
 }
 
@@ -158,9 +134,7 @@ func (r *settingsMutation) editSettings(ctx context.Context, keyPath jsonx.Path,
 	return &updateSettingsPayload{}, nil
 }
 
-func (r *settingsMutation) OverwriteSettings(ctx context.Context, args *struct {
-	Contents string
-}) (*updateSettingsPayload, error) {
+func (r *settingsMutation) OverwriteSettings(ctx context.Context, args *struct { /* all structs must go */ }) (*updateSettingsPayload, error) {
 	_, err := settingsCreateIfUpToDate(ctx, r.subject, r.input.LastID, actor.FromContext(ctx).UID, args.Contents)
 	if err != nil {
 		return nil, err
diff --git a/cmd/frontend/graphqlbackend/settings_subject.go b/cmd/frontend/graphqlbackend/settings_subject.go
index bd3f065..fb06d4b 100644
--- a/cmd/frontend/graphqlbackend/settings_subject.go
+++ b/cmd/frontend/graphqlbackend/settings_subject.go
@@ -21,13 +21,7 @@ func (r *schemaResolver) SettingsSubject(ctx context.Context, args *struct{ ID g
 
 var errUnknownSettingsSubject = errors.New("unknown settings subject")
 
-type settingsSubject struct {
-	// Exactly 1 of these fields must be set.
-	defaultSettings *defaultSettingsResolver
-	site            *siteResolver
-	org             *OrgResolver
-	user            *UserResolver
-}
+type settingsSubject struct { /* all structs must go */ }
 
 // settingsSubjectForNode fetches the settings subject for the given Node. If
 // the node is not a valid settings subject, an error is returned.
diff --git a/cmd/frontend/graphqlbackend/signature.go b/cmd/frontend/graphqlbackend/signature.go
index 64efe3d..67800fc 100644
--- a/cmd/frontend/graphqlbackend/signature.go
+++ b/cmd/frontend/graphqlbackend/signature.go
@@ -6,10 +6,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/vcs/git"
 )
 
-type signatureResolver struct {
-	person *personResolver
-	date   time.Time
-}
+type signatureResolver struct { /* all structs must go */ }
 
 func (r signatureResolver) Person() *personResolver {
 	return r.person
diff --git a/cmd/frontend/graphqlbackend/site.go b/cmd/frontend/graphqlbackend/site.go
index 11c8c91..ad77cd8 100644
--- a/cmd/frontend/graphqlbackend/site.go
+++ b/cmd/frontend/graphqlbackend/site.go
@@ -49,9 +49,7 @@ func (*schemaResolver) Site() *siteResolver {
 	return &siteResolver{gqlID: singletonSiteGQLID}
 }
 
-type siteResolver struct {
-	gqlID string // == singletonSiteGQLID, not the site ID
-}
+type siteResolver struct { /* all structs must go */ }
 
 var singletonSiteResolver = &siteResolver{gqlID: singletonSiteGQLID}
 
@@ -149,10 +147,7 @@ func (r *siteConfigurationResolver) ValidationMessages(ctx context.Context) ([]s
 
 var siteConfigAllowEdits, _ = strconv.ParseBool(env.Get("SITE_CONFIG_ALLOW_EDITS", "false", "When SITE_CONFIG_FILE is in use, allow edits in the application to be made which will be overwritten on next process restart"))
 
-func (r *schemaResolver) UpdateSiteConfiguration(ctx context.Context, args *struct {
-	LastID int32
-	Input  string
-}) (bool, error) {
+func (r *schemaResolver) UpdateSiteConfiguration(ctx context.Context, args *struct { /* all structs must go */ }) (bool, error) {
 	// 🚨 SECURITY: The site configuration contains secret tokens and credentials,
 	// so only admins may view it.
 	if err := backend.CheckCurrentUserIsSiteAdmin(ctx); err != nil {
diff --git a/cmd/frontend/graphqlbackend/site_admin.go b/cmd/frontend/graphqlbackend/site_admin.go
index da4ee0d..1f6a39b 100644
--- a/cmd/frontend/graphqlbackend/site_admin.go
+++ b/cmd/frontend/graphqlbackend/site_admin.go
@@ -11,10 +11,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/extsvc"
 )
 
-func (*schemaResolver) DeleteUser(ctx context.Context, args *struct {
-	User graphql.ID
-	Hard *bool
-}) (*EmptyResponse, error) {
+func (*schemaResolver) DeleteUser(ctx context.Context, args *struct { /* all structs must go */ }) (*EmptyResponse, error) {
 	// 🚨 SECURITY: Only site admins can delete users.
 	if err := backend.CheckCurrentUserIsSiteAdmin(ctx); err != nil {
 		return nil, err
@@ -95,9 +92,7 @@ func (*schemaResolver) DeleteUser(ctx context.Context, args *struct {
 	return &EmptyResponse{}, nil
 }
 
-func (*schemaResolver) DeleteOrganization(ctx context.Context, args *struct {
-	Organization graphql.ID
-}) (*EmptyResponse, error) {
+func (*schemaResolver) DeleteOrganization(ctx context.Context, args *struct { /* all structs must go */ }) (*EmptyResponse, error) {
 	// 🚨 SECURITY: Only site admins can delete orgs.
 	if err := backend.CheckCurrentUserIsSiteAdmin(ctx); err != nil {
 		return nil, err
@@ -114,10 +109,7 @@ func (*schemaResolver) DeleteOrganization(ctx context.Context, args *struct {
 	return &EmptyResponse{}, nil
 }
 
-func (*schemaResolver) SetUserIsSiteAdmin(ctx context.Context, args *struct {
-	UserID    graphql.ID
-	SiteAdmin bool
-}) (*EmptyResponse, error) {
+func (*schemaResolver) SetUserIsSiteAdmin(ctx context.Context, args *struct { /* all structs must go */ }) (*EmptyResponse, error) {
 	// 🚨 SECURITY: Only site admins can promote other users to site admin (or demote from site
 	// admin).
 	if err := backend.CheckCurrentUserIsSiteAdmin(ctx); err != nil {
diff --git a/cmd/frontend/graphqlbackend/site_admin_test.go b/cmd/frontend/graphqlbackend/site_admin_test.go
index 07a0e0f..87722ee 100644
--- a/cmd/frontend/graphqlbackend/site_admin_test.go
+++ b/cmd/frontend/graphqlbackend/site_admin_test.go
@@ -24,10 +24,7 @@ func TestDeleteUser(t *testing.T) {
 		}
 
 		ctx := actor.WithActor(context.Background(), &actor.Actor{UID: 1})
-		result, err := (&schemaResolver{}).DeleteUser(ctx, &struct {
-			User graphql.ID
-			Hard *bool
-		}{
+		result, err := (&schemaResolver{}).DeleteUser(ctx, &struct { /* all structs must go */ }{
 			User: MarshalUserID(1),
 		})
 		if want := backend.ErrMustBeSiteAdmin; err != want {
@@ -45,10 +42,7 @@ func TestDeleteUser(t *testing.T) {
 		}
 
 		ctx := actor.WithActor(context.Background(), &actor.Actor{UID: 1})
-		_, err := (&schemaResolver{}).DeleteUser(ctx, &struct {
-			User graphql.ID
-			Hard *bool
-		}{
+		_, err := (&schemaResolver{}).DeleteUser(ctx, &struct { /* all structs must go */ }{
 			User: MarshalUserID(1),
 		})
 		want := "unable to delete current user"
@@ -110,10 +104,7 @@ func TestDeleteUser(t *testing.T) {
 		return nil
 	}
 
-	tests := []struct {
-		name     string
-		gqlTests []*gqltesting.Test
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "soft delete a user",
 			gqlTests: []*gqltesting.Test{
diff --git a/cmd/frontend/graphqlbackend/site_alerts.go b/cmd/frontend/graphqlbackend/site_alerts.go
index 661ab4b..9508049 100644
--- a/cmd/frontend/graphqlbackend/site_alerts.go
+++ b/cmd/frontend/graphqlbackend/site_alerts.go
@@ -26,11 +26,7 @@ import (
 )
 
 // Alert implements the GraphQL type Alert.
-type Alert struct {
-	TypeValue                 string
-	MessageValue              string
-	IsDismissibleWithKeyValue string
-}
+type Alert struct { /* all structs must go */ }
 
 func (r *Alert) Type() string    { return r.TypeValue }
 func (r *Alert) Message() string { return r.MessageValue }
@@ -57,11 +53,7 @@ var AlertFuncs []func(AlertFuncArgs) []*Alert
 // AlertFuncArgs are the arguments provided to functions in AlertFuncs used to populate the GraphQL
 // Site.alerts value. They allow the functions to customize the returned alerts based on the
 // identity of the viewer (without needing to query for that on their own, which would be slow).
-type AlertFuncArgs struct {
-	IsAuthenticated     bool             // whether the viewer is authenticated
-	IsSiteAdmin         bool             // whether the viewer is a site admin
-	ViewerFinalSettings *schema.Settings // the viewer's final user/org/global settings
-}
+type AlertFuncArgs struct { /* all structs must go */ }
 
 func (r *siteResolver) Alerts(ctx context.Context) ([]*Alert, error) {
 	settings, err := decodedViewerFinalSettings(ctx)
diff --git a/cmd/frontend/graphqlbackend/site_alerts_test.go b/cmd/frontend/graphqlbackend/site_alerts_test.go
index 4db103d..4ced846 100644
--- a/cmd/frontend/graphqlbackend/site_alerts_test.go
+++ b/cmd/frontend/graphqlbackend/site_alerts_test.go
@@ -9,13 +9,7 @@ import (
 )
 
 func Test_determineOutOfDateAlert(t *testing.T) {
-	tests := []struct {
-		name                              string
-		offline, admin                    bool
-		monthsOutOfDate                   int
-		wantOffline, wantOnline           *Alert
-		wantOfflineAdmin, wantOnlineAdmin *Alert
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:            "0_months",
 			monthsOutOfDate: 0,
@@ -104,15 +98,8 @@ func Test_determineOutOfDateAlert(t *testing.T) {
 
 func TestObservabilityActiveAlertsAlert(t *testing.T) {
 	f := false
-	type args struct {
-		prometheusURL string
-		args          AlertFuncArgs
-	}
-	tests := []struct {
-		name string
-		args args
-		want []*Alert
-	}{
+	type args struct { /* all structs must go */ }
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "not admin",
 			args: args{
diff --git a/cmd/frontend/graphqlbackend/site_monitoring.go b/cmd/frontend/graphqlbackend/site_monitoring.go
index 6157fad..bbc680f 100644
--- a/cmd/frontend/graphqlbackend/site_monitoring.go
+++ b/cmd/frontend/graphqlbackend/site_monitoring.go
@@ -17,12 +17,7 @@ import (
 )
 
 // MonitoringAlert implements the GraphQL type MonitoringAlert.
-type MonitoringAlert struct {
-	TimestampValue   DateTime
-	NameValue        string
-	ServiceNameValue string
-	AverageValue     float64
-}
+type MonitoringAlert struct { /* all structs must go */ }
 
 func (r *MonitoringAlert) Timestamp() DateTime { return r.TimestampValue }
 func (r *MonitoringAlert) Name() string        { return r.NameValue }
@@ -48,9 +43,7 @@ func (a MonitoringAlerts) Swap(i, j int) {
 }
 func (a MonitoringAlerts) Len() int { return len(a) }
 
-func (r *siteResolver) MonitoringStatistics(ctx context.Context, args *struct {
-	Days *int32
-}) (*siteMonitoringStatisticsResolver, error) {
+func (r *siteResolver) MonitoringStatistics(ctx context.Context, args *struct { /* all structs must go */ }) (*siteMonitoringStatisticsResolver, error) {
 	prom, err := prometheusutil.NewPrometheusQuerier()
 	if err != nil {
 		return nil, err
@@ -61,10 +54,7 @@ func (r *siteResolver) MonitoringStatistics(ctx context.Context, args *struct {
 	}, nil
 }
 
-type siteMonitoringStatisticsResolver struct {
-	prom     prometheusutil.PrometheusQuerier
-	timespan time.Duration
-}
+type siteMonitoringStatisticsResolver struct { /* all structs must go */ }
 
 func (r *siteMonitoringStatisticsResolver) Alerts(ctx context.Context) ([]*MonitoringAlert, error) {
 	ctx, cancel := context.WithTimeout(ctx, 10*time.Second)
diff --git a/cmd/frontend/graphqlbackend/site_monitoring_test.go b/cmd/frontend/graphqlbackend/site_monitoring_test.go
index e6b7aaf..bae3d63 100644
--- a/cmd/frontend/graphqlbackend/site_monitoring_test.go
+++ b/cmd/frontend/graphqlbackend/site_monitoring_test.go
@@ -15,17 +15,8 @@ import (
 func Test_siteMonitoringStatisticsResolver_Alerts(t *testing.T) {
 	mock := prometheusutil.NewMockPrometheusQuerier()
 	sampleT := model.Time(time.Now().UTC().Unix())
-	type fields struct {
-		queryValue    model.Value
-		queryWarnings prometheus.Warnings
-		queryErr      error
-	}
-	tests := []struct {
-		name    string
-		fields  fields
-		want    []*MonitoringAlert
-		wantErr error
-	}{
+	type fields struct { /* all structs must go */ }
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "includes alerts with no occurrences",
 			fields: fields{
diff --git a/cmd/frontend/graphqlbackend/site_update_check.go b/cmd/frontend/graphqlbackend/site_update_check.go
index 7fec870..acbee66 100644
--- a/cmd/frontend/graphqlbackend/site_update_check.go
+++ b/cmd/frontend/graphqlbackend/site_update_check.go
@@ -26,10 +26,7 @@ func (r *siteResolver) UpdateCheck(ctx context.Context) (*updateCheckResolver, e
 	}, nil
 }
 
-type updateCheckResolver struct {
-	last    *updatecheck.Status
-	pending bool
-}
+type updateCheckResolver struct { /* all structs must go */ }
 
 func (r *updateCheckResolver) Pending() bool { return r.pending }
 
diff --git a/cmd/frontend/graphqlbackend/site_usage_stats.go b/cmd/frontend/graphqlbackend/site_usage_stats.go
index c68a992..80eab46 100644
--- a/cmd/frontend/graphqlbackend/site_usage_stats.go
+++ b/cmd/frontend/graphqlbackend/site_usage_stats.go
@@ -8,11 +8,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/cmd/frontend/types"
 )
 
-func (r *siteResolver) UsageStatistics(ctx context.Context, args *struct {
-	Days   *int32
-	Weeks  *int32
-	Months *int32
-}) (*siteUsageStatisticsResolver, error) {
+func (r *siteResolver) UsageStatistics(ctx context.Context, args *struct { /* all structs must go */ }) (*siteUsageStatisticsResolver, error) {
 	opt := &usagestatsdeprecated.SiteUsageStatisticsOptions{}
 	if args.Days != nil {
 		d := int(*args.Days)
@@ -33,9 +29,7 @@ func (r *siteResolver) UsageStatistics(ctx context.Context, args *struct {
 	return &siteUsageStatisticsResolver{activity}, nil
 }
 
-type siteUsageStatisticsResolver struct {
-	siteUsageStatistics *types.SiteUsageStatistics
-}
+type siteUsageStatisticsResolver struct { /* all structs must go */ }
 
 func (s *siteUsageStatisticsResolver) DAUs() []*siteUsagePeriodResolver {
 	return s.activities(s.siteUsageStatistics.DAUs)
@@ -57,9 +51,7 @@ func (s *siteUsageStatisticsResolver) activities(periods []*types.SiteActivityPe
 	return resolvers
 }
 
-type siteUsagePeriodResolver struct {
-	siteUsagePeriod *types.SiteActivityPeriod
-}
+type siteUsagePeriodResolver struct { /* all structs must go */ }
 
 func (s *siteUsagePeriodResolver) StartTime() string {
 	return s.siteUsagePeriod.StartTime.Format(time.RFC3339)
@@ -90,9 +82,7 @@ func (s *siteUsagePeriodResolver) Stages() *siteUsageStagesResolver {
 	}
 }
 
-type siteUsageStagesResolver struct {
-	stages *types.Stages
-}
+type siteUsageStagesResolver struct { /* all structs must go */ }
 
 func (s *siteUsageStagesResolver) Manage() int32 {
 	return s.stages.Manage
diff --git a/cmd/frontend/graphqlbackend/status_messages.go b/cmd/frontend/graphqlbackend/status_messages.go
index 2edcfca..7bf762e 100644
--- a/cmd/frontend/graphqlbackend/status_messages.go
+++ b/cmd/frontend/graphqlbackend/status_messages.go
@@ -30,9 +30,7 @@ func (r *schemaResolver) StatusMessages(ctx context.Context) ([]*statusMessageRe
 	return messages, nil
 }
 
-type statusMessageResolver struct {
-	message protocol.StatusMessage
-}
+type statusMessageResolver struct { /* all structs must go */ }
 
 func (r *statusMessageResolver) ToCloningProgress() (*statusMessageResolver, bool) {
 	return r, r.message.Cloning != nil
diff --git a/cmd/frontend/graphqlbackend/survey_response.go b/cmd/frontend/graphqlbackend/survey_response.go
index f8a86d2..d609953 100644
--- a/cmd/frontend/graphqlbackend/survey_response.go
+++ b/cmd/frontend/graphqlbackend/survey_response.go
@@ -14,9 +14,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/hubspot/hubspotutil"
 )
 
-type surveyResponseResolver struct {
-	surveyResponse *types.SurveyResponse
-}
+type surveyResponseResolver struct { /* all structs must go */ }
 
 func (s *surveyResponseResolver) ID() graphql.ID {
 	return marshalSurveyResponseID(s.surveyResponse.ID)
@@ -56,31 +54,12 @@ func (s *surveyResponseResolver) CreatedAt() DateTime {
 }
 
 // SurveySubmissionInput contains a satisfaction (NPS) survey response.
-type SurveySubmissionInput struct {
-	// Emails is an optional, user-provided email address, if there is no
-	// currently authenticated user. If there is, this value will not be used.
-	Email *string
-	// Score is the user's likelihood of recommending Sourcegraph to a friend, from 0-10.
-	Score int32
-	// Reason is the answer to "What is the most important reason for the score you gave".
-	Reason *string
-	// Better is the answer to "What can Sourcegraph do to provide a better product"
-	Better *string
-}
+type SurveySubmissionInput struct { /* all structs must go */ }
 
-type surveySubmissionForHubSpot struct {
-	Email           *string `url:"email"`
-	Score           int32   `url:"nps_score"`
-	Reason          *string `url:"nps_reason"`
-	Better          *string `url:"nps_improvement"`
-	IsAuthenticated bool    `url:"user_is_authenticated"`
-	SiteID          string  `url:"site_id"`
-}
+type surveySubmissionForHubSpot struct { /* all structs must go */ }
 
 // SubmitSurvey records a new satisfaction (NPS) survey response by the current user.
-func (r *schemaResolver) SubmitSurvey(ctx context.Context, args *struct {
-	Input *SurveySubmissionInput
-}) (*EmptyResponse, error) {
+func (r *schemaResolver) SubmitSurvey(ctx context.Context, args *struct { /* all structs must go */ }) (*EmptyResponse, error) {
 	input := args.Input
 	var uid *int32
 	email := input.Email
diff --git a/cmd/frontend/graphqlbackend/survey_responses.go b/cmd/frontend/graphqlbackend/survey_responses.go
index 89d342a..aa4f1f9 100644
--- a/cmd/frontend/graphqlbackend/survey_responses.go
+++ b/cmd/frontend/graphqlbackend/survey_responses.go
@@ -8,13 +8,9 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/db"
 )
 
-type surveyResponseConnectionResolver struct {
-	opt db.SurveyResponseListOptions
-}
+type surveyResponseConnectionResolver struct { /* all structs must go */ }
 
-func (r *schemaResolver) SurveyResponses(args *struct {
-	graphqlutil.ConnectionArgs
-}) *surveyResponseConnectionResolver {
+func (r *schemaResolver) SurveyResponses(args *struct { /* all structs must go */ }) *surveyResponseConnectionResolver {
 	var opt db.SurveyResponseListOptions
 	args.ConnectionArgs.Set(&opt.LimitOffset)
 	return &surveyResponseConnectionResolver{opt: opt}
diff --git a/cmd/frontend/graphqlbackend/symbols.go b/cmd/frontend/graphqlbackend/symbols.go
index a89412b..f0963a3 100644
--- a/cmd/frontend/graphqlbackend/symbols.go
+++ b/cmd/frontend/graphqlbackend/symbols.go
@@ -17,11 +17,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/symbols/protocol"
 )
 
-type symbolsArgs struct {
-	graphqlutil.ConnectionArgs
-	Query           *string
-	IncludePatterns *[]string
-}
+type symbolsArgs struct { /* all structs must go */ }
 
 func (r *GitTreeEntryResolver) Symbols(ctx context.Context, args *symbolsArgs) (*symbolConnectionResolver, error) {
 	symbols, err := computeSymbols(ctx, r.commit, args.Query, args.First, args.IncludePatterns)
@@ -39,10 +35,7 @@ func (r *GitCommitResolver) Symbols(ctx context.Context, args *symbolsArgs) (*sy
 	return &symbolConnectionResolver{symbols: symbols, first: args.First}, nil
 }
 
-type symbolConnectionResolver struct {
-	first   *int32
-	symbols []*symbolResolver
-}
+type symbolConnectionResolver struct { /* all structs must go */ }
 
 func limitOrDefault(first *int32) int {
 	if first == nil {
@@ -238,12 +231,7 @@ func (r *symbolConnectionResolver) PageInfo(ctx context.Context) (*graphqlutil.P
 	return graphqlutil.HasNextPage(len(r.symbols) > limitOrDefault(r.first)), nil
 }
 
-type symbolResolver struct {
-	symbol   protocol.Symbol
-	language string
-	location *locationResolver
-	uri      *gituri.URI
-}
+type symbolResolver struct { /* all structs must go */ }
 
 func (r *symbolResolver) Name() string { return r.symbol.Name }
 
diff --git a/cmd/frontend/graphqlbackend/tags.go b/cmd/frontend/graphqlbackend/tags.go
index 62b2ffb..0d33a54 100644
--- a/cmd/frontend/graphqlbackend/tags.go
+++ b/cmd/frontend/graphqlbackend/tags.go
@@ -9,11 +9,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/db"
 )
 
-func (r *schemaResolver) SetTag(ctx context.Context, args *struct {
-	Node    graphql.ID
-	Tag     string
-	Present bool
-}) (*EmptyResponse, error) {
+func (r *schemaResolver) SetTag(ctx context.Context, args *struct { /* all structs must go */ }) (*EmptyResponse, error) {
 	// 🚨 SECURITY: Only site admins may set tags.
 	if err := backend.CheckCurrentUserIsSiteAdmin(ctx); err != nil {
 		return nil, err
diff --git a/cmd/frontend/graphqlbackend/textsearch.go b/cmd/frontend/graphqlbackend/textsearch.go
index d46b30c..680c7ef 100644
--- a/cmd/frontend/graphqlbackend/textsearch.go
+++ b/cmd/frontend/graphqlbackend/textsearch.go
@@ -63,20 +63,7 @@ var (
 // that we can unmarshal the result directly into graphql resolvers.
 
 // FileMatchResolver is a resolver for the GraphQL type `FileMatch`
-type FileMatchResolver struct {
-	JPath        string       `json:"Path"`
-	JLineMatches []*lineMatch `json:"LineMatches"`
-	JLimitHit    bool         `json:"LimitHit"`
-	MatchCount   int          // Number of matches. Different from len(JLineMatches), as multiple lines may correspond to one logical match.
-	symbols      []*searchSymbolResult
-	uri          string
-	Repo         *RepositoryResolver
-	CommitID     api.CommitID
-	// InputRev is the Git revspec that the user originally requested to search. It is used to
-	// preserve the original revision specifier from the user instead of navigating them to the
-	// absolute commit ID when they select a result.
-	InputRev *string
-}
+type FileMatchResolver struct { /* all structs must go */ }
 
 func (fm *FileMatchResolver) Equal(other *FileMatchResolver) bool {
 	return reflect.DeepEqual(fm, other)
@@ -156,12 +143,7 @@ func (fm *FileMatchResolver) resultCount() int32 {
 }
 
 // lineMatch is the struct used by vscode to receive search results for a line
-type lineMatch struct {
-	JPreview          string     `json:"Preview"`
-	JOffsetAndLengths [][2]int32 `json:"OffsetAndLengths"`
-	JLineNumber       int32      `json:"LineNumber"`
-	JLimitHit         bool       `json:"LimitHit"`
-}
+type lineMatch struct { /* all structs must go */ }
 
 func (lm *lineMatch) Preview() string {
 	return lm.JPreview
@@ -325,11 +307,7 @@ func textSearchURL(ctx context.Context, url string) ([]*FileMatchResolver, bool,
 		return nil, false, errors.WithStack(&searcherError{StatusCode: resp.StatusCode, Message: string(body)})
 	}
 
-	r := struct {
-		Matches     []*FileMatchResolver
-		LimitHit    bool
-		DeadlineHit bool
-	}{}
+	r := struct { /* all structs must go */ }{}
 	err = json.NewDecoder(resp.Body).Decode(&r)
 	if err != nil {
 		return nil, false, errors.Wrap(err, "searcher response invalid")
@@ -340,10 +318,7 @@ func textSearchURL(ctx context.Context, url string) ([]*FileMatchResolver, bool,
 	return r.Matches, r.LimitHit, err
 }
 
-type searcherError struct {
-	StatusCode int
-	Message    string
-}
+type searcherError struct { /* all structs must go */ }
 
 func (e *searcherError) BadRequest() bool {
 	return e.StatusCode == http.StatusBadRequest
diff --git a/cmd/frontend/graphqlbackend/textsearch_test.go b/cmd/frontend/graphqlbackend/textsearch_test.go
index 0b3c2b4..55a3e1d 100644
--- a/cmd/frontend/graphqlbackend/textsearch_test.go
+++ b/cmd/frontend/graphqlbackend/textsearch_test.go
@@ -260,13 +260,7 @@ func TestLimitSearcherRepos(t *testing.T) {
 		return result
 	}
 
-	tests := []struct {
-		name        string
-		limit       int
-		input       []*search.RepositoryRevisions
-		want        []*search.RepositoryRevisions
-		wantLimited []*types.Repo
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:        "non_limited",
 			limit:       5,
diff --git a/cmd/frontend/graphqlbackend/trial_request.go b/cmd/frontend/graphqlbackend/trial_request.go
index e7e57df..ce18cdb 100644
--- a/cmd/frontend/graphqlbackend/trial_request.go
+++ b/cmd/frontend/graphqlbackend/trial_request.go
@@ -10,15 +10,10 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/hubspot/hubspotutil"
 )
 
-type trialRequestForHubSpot struct {
-	Email  *string `url:"email"`
-	SiteID string  `url:"site_id"`
-}
+type trialRequestForHubSpot struct { /* all structs must go */ }
 
 // RequestTrial makes a submission to the request trial form.
-func (r *schemaResolver) RequestTrial(ctx context.Context, args *struct {
-	Email string
-}) (*EmptyResponse, error) {
+func (r *schemaResolver) RequestTrial(ctx context.Context, args *struct { /* all structs must go */ }) (*EmptyResponse, error) {
 	email := args.Email
 
 	// If user is authenticated, use their uid and overwrite the optional email field.
diff --git a/cmd/frontend/graphqlbackend/user.go b/cmd/frontend/graphqlbackend/user.go
index 8095a6c..a608468 100644
--- a/cmd/frontend/graphqlbackend/user.go
+++ b/cmd/frontend/graphqlbackend/user.go
@@ -18,10 +18,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/errcode"
 )
 
-func (r *schemaResolver) User(ctx context.Context, args struct {
-	Username *string
-	Email    *string
-}) (*UserResolver, error) {
+func (r *schemaResolver) User(ctx context.Context, args struct { /* all structs must go */ }) (*UserResolver, error) {
 	switch {
 	case args.Username != nil:
 		user, err := db.Users.GetByUsername(ctx, *args.Username)
@@ -50,9 +47,7 @@ func (r *schemaResolver) User(ctx context.Context, args struct {
 }
 
 // UserResolver implements the GraphQL User type.
-type UserResolver struct {
-	user *types.User
-}
+type UserResolver struct { /* all structs must go */ }
 
 // NewUserResolver returns a new UserResolver with given user object.
 func NewUserResolver(user *types.User) *UserResolver {
@@ -177,12 +172,7 @@ func (r *UserResolver) SiteAdmin(ctx context.Context) (bool, error) {
 	return r.user.SiteAdmin, nil
 }
 
-type updateUserArgs struct {
-	User        graphql.ID
-	Username    *string
-	DisplayName *string
-	AvatarURL   *string
-}
+type updateUserArgs struct { /* all structs must go */ }
 
 func (*schemaResolver) UpdateUser(ctx context.Context, args *updateUserArgs) (*EmptyResponse, error) {
 	userID, err := UnmarshalUserID(args.User)
@@ -293,10 +283,7 @@ func (r *UserResolver) PermissionsInfo(ctx context.Context) (PermissionsInfoReso
 	return EnterpriseResolvers.authzResolver.UserPermissionsInfo(ctx, r.ID())
 }
 
-func (r *schemaResolver) UpdatePassword(ctx context.Context, args *struct {
-	OldPassword string
-	NewPassword string
-}) (*EmptyResponse, error) {
+func (r *schemaResolver) UpdatePassword(ctx context.Context, args *struct { /* all structs must go */ }) (*EmptyResponse, error) {
 	// 🚨 SECURITY: A user can only change their own password.
 	user, err := db.Users.GetByCurrentAuthUser(ctx)
 	if err != nil {
diff --git a/cmd/frontend/graphqlbackend/user_emails.go b/cmd/frontend/graphqlbackend/user_emails.go
index 23602a5..8cfed72 100644
--- a/cmd/frontend/graphqlbackend/user_emails.go
+++ b/cmd/frontend/graphqlbackend/user_emails.go
@@ -34,10 +34,7 @@ func (r *UserResolver) Emails(ctx context.Context) ([]*userEmailResolver, error)
 	return rs, nil
 }
 
-type userEmailResolver struct {
-	userEmail db.UserEmail
-	user      *UserResolver
-}
+type userEmailResolver struct { /* all structs must go */ }
 
 func (r *userEmailResolver) Email() string { return r.userEmail.Email }
 
@@ -64,10 +61,7 @@ func (r *userEmailResolver) ViewerCanManuallyVerify(ctx context.Context) (bool,
 	return true, nil
 }
 
-func (r *schemaResolver) AddUserEmail(ctx context.Context, args *struct {
-	User  graphql.ID
-	Email string
-}) (*EmptyResponse, error) {
+func (r *schemaResolver) AddUserEmail(ctx context.Context, args *struct { /* all structs must go */ }) (*EmptyResponse, error) {
 	userID, err := UnmarshalUserID(args.User)
 	if err != nil {
 		return nil, err
@@ -78,10 +72,7 @@ func (r *schemaResolver) AddUserEmail(ctx context.Context, args *struct {
 	return &EmptyResponse{}, nil
 }
 
-func (r *schemaResolver) RemoveUserEmail(ctx context.Context, args *struct {
-	User  graphql.ID
-	Email string
-}) (*EmptyResponse, error) {
+func (r *schemaResolver) RemoveUserEmail(ctx context.Context, args *struct { /* all structs must go */ }) (*EmptyResponse, error) {
 	userID, err := UnmarshalUserID(args.User)
 	if err != nil {
 		return nil, err
@@ -104,11 +95,7 @@ func (r *schemaResolver) RemoveUserEmail(ctx context.Context, args *struct {
 	return &EmptyResponse{}, nil
 }
 
-func (r *schemaResolver) SetUserEmailVerified(ctx context.Context, args *struct {
-	User     graphql.ID
-	Email    string
-	Verified bool
-}) (*EmptyResponse, error) {
+func (r *schemaResolver) SetUserEmailVerified(ctx context.Context, args *struct { /* all structs must go */ }) (*EmptyResponse, error) {
 	// 🚨 SECURITY: Only site admins (NOT users themselves) can manually set email verification
 	// status. Users themselves must go through the normal email verification process.
 	if err := backend.CheckCurrentUserIsSiteAdmin(ctx); err != nil {
diff --git a/cmd/frontend/graphqlbackend/user_emails_test.go b/cmd/frontend/graphqlbackend/user_emails_test.go
index 3bee370..69b233f 100644
--- a/cmd/frontend/graphqlbackend/user_emails_test.go
+++ b/cmd/frontend/graphqlbackend/user_emails_test.go
@@ -18,11 +18,7 @@ func TestSetUserEmailVerified(t *testing.T) {
 		return nil
 	}
 
-	tests := []struct {
-		name                                string
-		gqlTests                            []*gqltesting.Test
-		expectCalledGrantPendingPermissions bool
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "set an email to be verified",
 			gqlTests: []*gqltesting.Test{
diff --git a/cmd/frontend/graphqlbackend/user_session.go b/cmd/frontend/graphqlbackend/user_session.go
index f796be2..c7bc7e2 100644
--- a/cmd/frontend/graphqlbackend/user_session.go
+++ b/cmd/frontend/graphqlbackend/user_session.go
@@ -29,8 +29,6 @@ func (r *UserResolver) Session(ctx context.Context) (*sessionResolver, error) {
 	return &sr, nil
 }
 
-type sessionResolver struct {
-	canSignOut bool
-}
+type sessionResolver struct { /* all structs must go */ }
 
 func (r *sessionResolver) CanSignOut() bool { return r.canSignOut }
diff --git a/cmd/frontend/graphqlbackend/user_usage_stats.go b/cmd/frontend/graphqlbackend/user_usage_stats.go
index 2a64f92..49c7ba0 100644
--- a/cmd/frontend/graphqlbackend/user_usage_stats.go
+++ b/cmd/frontend/graphqlbackend/user_usage_stats.go
@@ -28,9 +28,7 @@ func (r *UserResolver) UsageStatistics(ctx context.Context) (*userUsageStatistic
 	return &userUsageStatisticsResolver{stats}, nil
 }
 
-type userUsageStatisticsResolver struct {
-	userUsageStatistics *types.UserUsageStatistics
-}
+type userUsageStatisticsResolver struct { /* all structs must go */ }
 
 func (s *userUsageStatisticsResolver) PageViews() int32 { return s.userUsageStatistics.PageViews }
 
@@ -62,21 +60,12 @@ func (s *userUsageStatisticsResolver) LastActiveCodeHostIntegrationTime() *strin
 	return nil
 }
 
-func (*schemaResolver) LogUserEvent(ctx context.Context, args *struct {
-	Event        string
-	UserCookieID string
-}) (*EmptyResponse, error) {
+func (*schemaResolver) LogUserEvent(ctx context.Context, args *struct { /* all structs must go */ }) (*EmptyResponse, error) {
 	actor := actor.FromContext(ctx)
 	return nil, usagestatsdeprecated.LogActivity(actor.IsAuthenticated(), actor.UID, args.UserCookieID, args.Event)
 }
 
-func (*schemaResolver) LogEvent(ctx context.Context, args *struct {
-	Event        string
-	UserCookieID string
-	URL          string
-	Source       string
-	Argument     *string
-}) (*EmptyResponse, error) {
+func (*schemaResolver) LogEvent(ctx context.Context, args *struct { /* all structs must go */ }) (*EmptyResponse, error) {
 	if !conf.EventLoggingEnabled() {
 		return nil, nil
 	}
diff --git a/cmd/frontend/graphqlbackend/users.go b/cmd/frontend/graphqlbackend/users.go
index 74ac641..127b78c 100644
--- a/cmd/frontend/graphqlbackend/users.go
+++ b/cmd/frontend/graphqlbackend/users.go
@@ -12,12 +12,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/db"
 )
 
-func (r *schemaResolver) Users(args *struct {
-	graphqlutil.ConnectionArgs
-	Query        *string
-	Tag          *string
-	ActivePeriod *string
-}) *userConnectionResolver {
+func (r *schemaResolver) Users(args *struct { /* all structs must go */ }) *userConnectionResolver {
 	var opt db.UsersListOptions
 	if args.Query != nil {
 		opt.Query = *args.Query
@@ -37,16 +32,7 @@ type UserConnectionResolver interface {
 
 var _ UserConnectionResolver = &userConnectionResolver{}
 
-type userConnectionResolver struct {
-	opt          db.UsersListOptions
-	activePeriod *string
-
-	// cache results because they are used by multiple fields
-	once       sync.Once
-	users      []*types.User
-	totalCount int
-	err        error
-}
+type userConnectionResolver struct { /* all structs must go */ }
 
 // compute caches results from the more expensive user list creation that occurs when activePeriod
 // is set to a specific length of time.
@@ -130,9 +116,7 @@ func (r *userConnectionResolver) useCache() bool {
 
 // staticUserConnectionResolver implements the GraphQL type UserConnection based on an underlying
 // list of users that is computed statically.
-type staticUserConnectionResolver struct {
-	users []*types.User
-}
+type staticUserConnectionResolver struct { /* all structs must go */ }
 
 func (r *staticUserConnectionResolver) Nodes() []*UserResolver {
 	resolvers := make([]*UserResolver, len(r.users))
diff --git a/cmd/frontend/graphqlbackend/users_create.go b/cmd/frontend/graphqlbackend/users_create.go
index e090fb0..511ae44 100644
--- a/cmd/frontend/graphqlbackend/users_create.go
+++ b/cmd/frontend/graphqlbackend/users_create.go
@@ -12,10 +12,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/db"
 )
 
-func (*schemaResolver) CreateUser(ctx context.Context, args *struct {
-	Username string
-	Email    *string
-}) (*createUserResult, error) {
+func (*schemaResolver) CreateUser(ctx context.Context, args *struct { /* all structs must go */ }) (*createUserResult, error) {
 	// 🚨 SECURITY: Only site admins can create user accounts.
 	if err := backend.CheckCurrentUserIsSiteAdmin(ctx); err != nil {
 		return nil, err
@@ -50,9 +47,7 @@ func (*schemaResolver) CreateUser(ctx context.Context, args *struct {
 // createUserResult is the result of Mutation.createUser.
 //
 // 🚨 SECURITY: Only site admins should be able to instantiate this value.
-type createUserResult struct {
-	user *types.User
-}
+type createUserResult struct { /* all structs must go */ }
 
 func (r *createUserResult) User() *UserResolver { return &UserResolver{user: r.user} }
 
diff --git a/cmd/frontend/graphqlbackend/users_randomize_password.go b/cmd/frontend/graphqlbackend/users_randomize_password.go
index f9acc1e..3e4bde9 100644
--- a/cmd/frontend/graphqlbackend/users_randomize_password.go
+++ b/cmd/frontend/graphqlbackend/users_randomize_password.go
@@ -10,9 +10,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/db"
 )
 
-type randomizeUserPasswordResult struct {
-	userID int32
-}
+type randomizeUserPasswordResult struct { /* all structs must go */ }
 
 func (r *randomizeUserPasswordResult) ResetPasswordURL(ctx context.Context) (*string, error) {
 	if !userpasswd.ResetPasswordEnabled() {
@@ -30,9 +28,7 @@ func (r *randomizeUserPasswordResult) ResetPasswordURL(ctx context.Context) (*st
 	return &urlStr, nil
 }
 
-func (*schemaResolver) RandomizeUserPassword(ctx context.Context, args *struct {
-	User graphql.ID
-}) (*randomizeUserPasswordResult, error) {
+func (*schemaResolver) RandomizeUserPassword(ctx context.Context, args *struct { /* all structs must go */ }) (*randomizeUserPasswordResult, error) {
 	// 🚨 SECURITY: Only site admins can randomize user passwords.
 	if err := backend.CheckCurrentUserIsSiteAdmin(ctx); err != nil {
 		return nil, err
diff --git a/cmd/frontend/graphqlbackend/version_context.go b/cmd/frontend/graphqlbackend/version_context.go
index fda2343..b77c1e3 100644
--- a/cmd/frontend/graphqlbackend/version_context.go
+++ b/cmd/frontend/graphqlbackend/version_context.go
@@ -8,9 +8,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/schema"
 )
 
-type versionContextResolver struct {
-	vc *schema.VersionContext
-}
+type versionContextResolver struct { /* all structs must go */ }
 
 func (v *versionContextResolver) ID() graphql.ID {
 	return graphql.ID(v.vc.Name)
diff --git a/cmd/frontend/graphqlbackend/virtual_file.go b/cmd/frontend/graphqlbackend/virtual_file.go
index 635e003..7d4e6b9 100644
--- a/cmd/frontend/graphqlbackend/virtual_file.go
+++ b/cmd/frontend/graphqlbackend/virtual_file.go
@@ -26,12 +26,7 @@ func NewVirtualFileResolver(stat os.FileInfo, fileContent FileContentFunc) *virt
 	}
 }
 
-type virtualFileResolver struct {
-	fileContent FileContentFunc
-	// stat is this tree entry's file info. Its Name method must return the full path relative to
-	// the root, not the basename.
-	stat os.FileInfo
-}
+type virtualFileResolver struct { /* all structs must go */ }
 
 func (r *virtualFileResolver) Path() string      { return r.stat.Name() }
 func (r *virtualFileResolver) Name() string      { return path.Base(r.stat.Name()) }
diff --git a/cmd/frontend/graphqlbackend/zoekt.go b/cmd/frontend/graphqlbackend/zoekt.go
index 3dad762..c89f815 100644
--- a/cmd/frontend/graphqlbackend/zoekt.go
+++ b/cmd/frontend/graphqlbackend/zoekt.go
@@ -33,34 +33,7 @@ const (
 // indexedSearchRequest is responsible for translating a Sourcegraph search
 // query into a Zoekt query and mapping the results from zoekt back to
 // Sourcegraph result types.
-type indexedSearchRequest struct {
-	// Unindexed is a slice of repository revisions that can't be searched by
-	// Zoekt. The repository revisions should be searched by the searcher
-	// service.
-	//
-	// If IndexUnavailable is true or the query specifies index:no then all
-	// repository revisions will be listed. Otherwise it will just be
-	// repository revisions not indexed.
-	Unindexed []*search.RepositoryRevisions
-
-	// IndexUnavailable is true if zoekt is offline or disabled.
-	IndexUnavailable bool
-
-	// DisableUnindexedSearch is true if the query specified that only index
-	// search should be used.
-	DisableUnindexedSearch bool
-
-	// inputs
-	args *search.TextParameters
-	typ  indexedRequestType
-
-	// repos is the repository revisions that are indexed and will be
-	// searched.
-	repos *indexedRepoRevs
-
-	// since if non-nil will be used instead of time.Since. For tests
-	since func(time.Time) time.Duration
-}
+type indexedSearchRequest struct { /* all structs must go */ }
 
 func newIndexedSearchRequest(ctx context.Context, args *search.TextParameters, typ indexedRequestType) (*indexedSearchRequest, error) {
 	// Parse index:yes (default), index:only, and index:no in search query.
@@ -585,24 +558,7 @@ func zoektIndexedRepos(indexedSet map[string]*zoekt.Repository, revs []*search.R
 
 // indexedRepoRevs creates both the Sourcegraph and Zoekt representation of a
 // list of repository and refs to search.
-type indexedRepoRevs struct {
-	// repoRevs is the Sourcegraph representation of a the list of repoRevs
-	// repository and revisions to search.
-	repoRevs map[string]*search.RepositoryRevisions
-
-	// repoBranches will be used when we query zoekt. The order of branches
-	// must match that in a reporev such that we can map back results. IE this
-	// invariant is maintained:
-	//
-	//  repoBranches[reporev.Repo.Name][i] <-> reporev.Revs[i]
-	repoBranches map[string][]string
-
-	// NotHEADOnlySearch is true if we are searching a branch other than HEAD.
-	//
-	// This option can be removed once structural search supports searching
-	// more than HEAD.
-	NotHEADOnlySearch bool
-}
+type indexedRepoRevs struct { /* all structs must go */ }
 
 // Add will add reporev and repo to the list of repository and branches to
 // search if reporev's refs are a subset of repo's branches. It will return
diff --git a/cmd/frontend/graphqlbackend/zoekt_test.go b/cmd/frontend/graphqlbackend/zoekt_test.go
index 7f410a6..8ad02a0 100644
--- a/cmd/frontend/graphqlbackend/zoekt_test.go
+++ b/cmd/frontend/graphqlbackend/zoekt_test.go
@@ -30,14 +30,7 @@ import (
 )
 
 // fakeSearcher is a zoekt.Searcher that returns a predefined search result.
-type fakeSearcher struct {
-	result *zoekt.SearchResult
-
-	repos []*zoekt.RepoListEntry
-
-	// Default all unimplemented zoekt.Searcher methods to panic.
-	zoekt.Searcher
-}
+type fakeSearcher struct { /* all structs must go */ }
 
 func (ss *fakeSearcher) Search(ctx context.Context, q zoektquery.Q, opts *zoekt.SearchOptions) (*zoekt.SearchResult, error) {
 	if ss.result == nil {
@@ -54,12 +47,7 @@ func (ss *fakeSearcher) String() string {
 	return fmt.Sprintf("fakeSearcher(result = %v, repos = %v)", ss.result, ss.repos)
 }
 
-type errorSearcher struct {
-	err error
-
-	// Default all unimplemented zoekt.Searcher methods to panic.
-	zoekt.Searcher
-}
+type errorSearcher struct { /* all structs must go */ }
 
 func (es *errorSearcher) Search(ctx context.Context, q zoektquery.Q, opts *zoekt.SearchOptions) (*zoekt.SearchResult, error) {
 	return nil, es.err
@@ -68,14 +56,7 @@ func (es *errorSearcher) Search(ctx context.Context, q zoektquery.Q, opts *zoekt
 func TestIndexedSearch(t *testing.T) {
 	zeroTimeoutCtx, cancel := context.WithTimeout(context.Background(), 0)
 	defer cancel()
-	type args struct {
-		ctx             context.Context
-		query           *search.TextPatternInfo
-		repos           []*search.RepositoryRevisions
-		useFullDeadline bool
-		results         []zoekt.FileMatch
-		since           func(time.Time) time.Duration
-	}
+	type args struct { /* all structs must go */ }
 
 	reposHEAD := makeRepositoryRevisions("foo/bar", "foo/foobar")
 	zoektRepos := []*zoekt.RepoListEntry{{
@@ -90,17 +71,7 @@ func TestIndexedSearch(t *testing.T) {
 		},
 	}}
 
-	tests := []struct {
-		name               string
-		args               args
-		wantMatchCount     int
-		wantMatchURLs      []string
-		wantMatchInputRevs []string
-		wantUnindexed      []*search.RepositoryRevisions
-		wantLimitHit       bool
-		wantReposLimitHit  map[string]struct{}
-		wantErr            bool
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "no matches",
 			args: args{
@@ -365,12 +336,7 @@ func TestZoektIndexedRepos(t *testing.T) {
 		return indexed
 	}
 
-	cases := []struct {
-		name      string
-		repos     []*search.RepositoryRevisions
-		indexed   []*search.RepositoryRevisions
-		unindexed []*search.RepositoryRevisions
-	}{{
+	cases := []struct { /* all structs must go */ }{{
 		name:      "all",
 		repos:     repos,
 		indexed:   makeIndexed(repos[:3]),
@@ -429,12 +395,7 @@ func Benchmark_zoektIndexedRepos(b *testing.B) {
 }
 
 func TestZoektResultCountFactor(t *testing.T) {
-	cases := []struct {
-		name     string
-		numRepos int
-		pattern  *search.TextPatternInfo
-		want     int
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			name:     "One repo implies max scaling factor",
 			numRepos: 1,
@@ -471,12 +432,7 @@ func TestZoektResultCountFactor(t *testing.T) {
 }
 
 func TestQueryToZoektQuery(t *testing.T) {
-	cases := []struct {
-		Name    string
-		Type    indexedRequestType
-		Pattern *search.TextPatternInfo
-		Query   string
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			Name: "substr",
 			Type: textRequest,
@@ -828,11 +784,7 @@ func TestZoektIndexedRepos_single(t *testing.T) {
 			},
 		},
 	}
-	cases := []struct {
-		rev           string
-		wantIndexed   []*search.RepositoryRevisions
-		wantUnindexed []*search.RepositoryRevisions
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			rev:           "",
 			wantIndexed:   []*search.RepositoryRevisions{repoRev("")},
@@ -870,10 +822,7 @@ func TestZoektIndexedRepos_single(t *testing.T) {
 		},
 	}
 
-	type ret struct {
-		Indexed   map[string]*search.RepositoryRevisions
-		Unindexed []*search.RepositoryRevisions
-	}
+	type ret struct { /* all structs must go */ }
 
 	for _, tt := range cases {
 		indexed, unindexed := zoektIndexedRepos(zoektRepos, []*search.RepositoryRevisions{repoRev(tt.rev)}, nil)
diff --git a/cmd/frontend/internal/app/canonicalurl/canonical_url_test.go b/cmd/frontend/internal/app/canonicalurl/canonical_url_test.go
index e1dd581..f8a45a9 100644
--- a/cmd/frontend/internal/app/canonicalurl/canonical_url_test.go
+++ b/cmd/frontend/internal/app/canonicalurl/canonical_url_test.go
@@ -6,10 +6,7 @@ import (
 )
 
 func TestFromURL(t *testing.T) {
-	tests := []struct {
-		currentURL *url.URL
-		want       *url.URL
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{&url.URL{RawQuery: "utm_source=3"}, &url.URL{RawQuery: ""}},
 		{&url.URL{RawQuery: "foo=3"}, &url.URL{RawQuery: "foo=3"}},
 		{&url.URL{RawQuery: "foo=3&utm_source=4"}, &url.URL{RawQuery: "foo=3"}},
diff --git a/cmd/frontend/internal/app/debug.go b/cmd/frontend/internal/app/debug.go
index 74ac34b..af8be07 100644
--- a/cmd/frontend/internal/app/debug.go
+++ b/cmd/frontend/internal/app/debug.go
@@ -177,9 +177,7 @@ func newPrometheusValidator(prometheusURL string) conf.Validator {
 			return
 		}
 
-		var promConfigStatus struct {
-			Problems conf.Problems `json:"problems"`
-		}
+		var promConfigStatus struct { /* all structs must go */ }
 		defer resp.Body.Close()
 		if err := json.NewDecoder(resp.Body).Decode(&promConfigStatus); err != nil {
 			problems = append(problems, conf.NewSiteProblem(fmt.Sprintf("`observability.alerts`: unable to read Prometheus status: %v", err)))
diff --git a/cmd/frontend/internal/app/debug_test.go b/cmd/frontend/internal/app/debug_test.go
index c248b51..bd6c47e 100644
--- a/cmd/frontend/internal/app/debug_test.go
+++ b/cmd/frontend/internal/app/debug_test.go
@@ -10,15 +10,8 @@ import (
 
 func Test_prometheusValidator(t *testing.T) {
 	// test some simple problem cases
-	type args struct {
-		prometheusURL string
-		config        conf.Unified
-	}
-	tests := []struct {
-		name                 string
-		args                 args
-		wantProblemSubstring string
-	}{
+	type args struct { /* all structs must go */ }
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "no problem if prometheus not set",
 			args: args{
diff --git a/cmd/frontend/internal/app/debugproxies/handler.go b/cmd/frontend/internal/app/debugproxies/handler.go
index d788b77..0188b24 100644
--- a/cmd/frontend/internal/app/debugproxies/handler.go
+++ b/cmd/frontend/internal/app/debugproxies/handler.go
@@ -18,20 +18,12 @@ import (
 )
 
 // proxyEndpoint couples the reverse proxy with the endpoint it proxies.
-type proxyEndpoint struct {
-	reverseProxy http.Handler
-	host         string
-}
+type proxyEndpoint struct { /* all structs must go */ }
 
 // ReverseProxyHandler handles serving the index page and routing the requests being proxied to their
 // respective reverse proxy. proxyEndpoints come from callers calling ReverseProxyHandler.Populate().
 // zero value is useful and will provide a "no endpoint found" index until some endpoints get populated.
-type ReverseProxyHandler struct {
-	// protects the reverseProxies map
-	sync.RWMutex
-	// keys are the displayNames
-	reverseProxies map[string]*proxyEndpoint
-}
+type ReverseProxyHandler struct { /* all structs must go */ }
 
 func (rph *ReverseProxyHandler) AddToRouter(r *mux.Router) {
 	r.Handle("/", adminOnly(http.HandlerFunc(rph.serveIndex)))
diff --git a/cmd/frontend/internal/app/debugproxies/handler_test.go b/cmd/frontend/internal/app/debugproxies/handler_test.go
index 4f8b44b..87795a4 100644
--- a/cmd/frontend/internal/app/debugproxies/handler_test.go
+++ b/cmd/frontend/internal/app/debugproxies/handler_test.go
@@ -99,10 +99,7 @@ func TestIndexLinks(t *testing.T) {
 }
 
 func TestDisplayNameFromEndpoint(t *testing.T) {
-	cases := []struct {
-		Service, Addr, Hostname string
-		Want                    string
-	}{{
+	cases := []struct { /* all structs must go */ }{{
 		Service:  "gitserver",
 		Addr:     "192.168.10.0:2323",
 		Hostname: "gitserver-0",
diff --git a/cmd/frontend/internal/app/debugproxies/scanner.go b/cmd/frontend/internal/app/debugproxies/scanner.go
index d3c3858..eeb8b05 100644
--- a/cmd/frontend/internal/app/debugproxies/scanner.go
+++ b/cmd/frontend/internal/app/debugproxies/scanner.go
@@ -13,15 +13,7 @@ import (
 )
 
 // Represents an endpoint
-type Endpoint struct {
-	// Service to which the endpoint belongs
-	Service string
-	// Addr:port, so hostname part of a URL (ip address ok)
-	Addr string
-	// Hostname of the endpoint, if set. Only use this for display purposes,
-	// it doesn't include the port nor is it gaurenteed to be resolvable.
-	Hostname string
-}
+type Endpoint struct { /* all structs must go */ }
 
 // ScanConsumer is the callback to consume scan results.
 type ScanConsumer func([]Endpoint)
@@ -35,9 +27,7 @@ type kubernetesClient interface {
 }
 
 // "real" implementation that sends calls to the k8s.Client
-type k8sClientImpl struct {
-	client *k8s.Client
-}
+type k8sClientImpl struct { /* all structs must go */ }
 
 func (kci *k8sClientImpl) Watch(ctx context.Context, namespace string, r k8s.Resource, options ...k8s.Option) (*k8s.Watcher, error) {
 	return kci.client.Watch(ctx, namespace, r, options...)
@@ -57,10 +47,7 @@ func (kci *k8sClientImpl) Namespace() string {
 
 // clusterScanner scans the cluster for endpoints belonging to services that have annotation sourcegraph.prometheus/scrape=true.
 // It runs an event loop that reacts to changes to the endpoints set. Everytime there is a change it calls the ScanConsumer.
-type clusterScanner struct {
-	client  kubernetesClient
-	consume ScanConsumer
-}
+type clusterScanner struct { /* all structs must go */ }
 
 // Starts a cluster scanner with the specified client and consumer. Does not block.
 func startClusterScannerWithClient(client kubernetesClient, consumer ScanConsumer) error {
diff --git a/cmd/frontend/internal/app/debugproxies/scanner_test.go b/cmd/frontend/internal/app/debugproxies/scanner_test.go
index 92806ae..1227c1b 100644
--- a/cmd/frontend/internal/app/debugproxies/scanner_test.go
+++ b/cmd/frontend/internal/app/debugproxies/scanner_test.go
@@ -12,10 +12,7 @@ import (
 	"github.com/google/go-cmp/cmp"
 )
 
-type k8sTestClient struct {
-	listResponse *corev1.ServiceList
-	getResponses map[string]*corev1.Endpoints
-}
+type k8sTestClient struct { /* all structs must go */ }
 
 func (ktc *k8sTestClient) Watch(ctx context.Context, namespace string, r k8s.Resource, options ...k8s.Option) (*k8s.Watcher, error) {
 	// we don't use it for tests yet, once we do we need to mock the returned watcher too
diff --git a/cmd/frontend/internal/app/editor.go b/cmd/frontend/internal/app/editor.go
index 5e5ff32..ddd707b 100644
--- a/cmd/frontend/internal/app/editor.go
+++ b/cmd/frontend/internal/app/editor.go
@@ -51,53 +51,13 @@ func editorRev(ctx context.Context, repoName api.RepoName, rev string, beExplici
 }
 
 // editorRequest represents the parameters to a Sourcegraph "open file", "search", etc. editor request.
-type editorRequest struct {
-	// Fields that are required in all requests.
-	editor  string // editor name, e.g. "Atom", "Sublime", etc.
-	version string // editor extension version
-
-	// Fields that are optional in all requests.
-	utmProductName    string // Editor product name. Only present in JetBrains today (e.g. "IntelliJ", "GoLand")
-	utmProductVersion string // Editor product version. Only present in JetBrains today.
-
-	// openFileRequest is non-nil if this is an "open file on Sourcegraph" request.
-	openFileRequest *editorOpenFileRequest
-
-	// searchRequest is non-nil if this is a "search on Sourcegraph" request.
-	searchRequest *editorSearchRequest
-}
+type editorRequest struct { /* all structs must go */ }
 
 // editorSearchRequest represents parameters for "open file on Sourcegraph" editor requests.
-type editorOpenFileRequest struct {
-	remoteURL         string            // Git repository remote URL.
-	hostnameToPattern map[string]string // Map of Git remote URL hostnames to patterns describing how they map to Sourcegraph repositories
-	branch            string            // Git branch name.
-	revision          string            // Git revision.
-	file              string            // Unix filepath relative to repository root.
-
-	// Zero-based cursor selection parameters. Required.
-	startRow, endRow int
-	startCol, endCol int
-}
+type editorOpenFileRequest struct { /* all structs must go */ }
 
 // editorSearchRequest represents parameters for "search on Sourcegraph" editor requests.
-type editorSearchRequest struct {
-	query string // The literal search query
-
-	// Optional git repository remote URL. When present, the search will be performed just
-	// in the repository (not globally).
-	remoteURL         string
-	hostnameToPattern map[string]string // Map of Git remote URL hostnames to patterns describing how they map to Sourcegraph repositories
-
-	// Optional git repository branch name and revision. When one is present and remoteURL
-	// is present, the search will be performed just at this branch/revision.
-	branch   string
-	revision string
-
-	// Optional unix filepath relative to the repository root. When present, the search
-	// will be performed with a file: search filter.
-	file string
-}
+type editorSearchRequest struct { /* all structs must go */ }
 
 // addTracking adds the tracking ?utm_... parameters to the given query values.
 func (r *editorRequest) addTracking(q url.Values) {
diff --git a/cmd/frontend/internal/app/editor_test.go b/cmd/frontend/internal/app/editor_test.go
index 45870de..bd3f786 100644
--- a/cmd/frontend/internal/app/editor_test.go
+++ b/cmd/frontend/internal/app/editor_test.go
@@ -12,11 +12,7 @@ import (
 )
 
 func TestGuessRepoNameFromRemoteURL(t *testing.T) {
-	cases := []struct {
-		url               string
-		hostnameToPattern map[string]string
-		expName           api.RepoName
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{"github.com:a/b", nil, "github.com/a/b"},
 		{"github.com:a/b.git", nil, "github.com/a/b"},
 		{"git@github.com:a/b", nil, "github.com/a/b"},
@@ -63,11 +59,7 @@ func TestEditorRev(t *testing.T) {
 	}
 	ctx := context.Background()
 
-	cases := []struct {
-		inputRev     string
-		expEditorRev string
-		beExplicit   bool
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{strings.Repeat("a", 40), "@" + strings.Repeat("a", 40), false},
 		{"branch", "@branch", false},
 		{"", "", false},
@@ -87,13 +79,7 @@ func TestEditorRev(t *testing.T) {
 }
 
 func TestEditorRedirect(t *testing.T) {
-	cases := []struct {
-		name            string
-		q               url.Values
-		wantRedirectURL string
-		wantParseErr    string
-		wantRedirectErr string
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			name: "open file",
 			q: url.Values{
diff --git a/cmd/frontend/internal/app/go_symbol_url_test.go b/cmd/frontend/internal/app/go_symbol_url_test.go
index b153bfa..58fbdc9 100644
--- a/cmd/frontend/internal/app/go_symbol_url_test.go
+++ b/cmd/frontend/internal/app/go_symbol_url_test.go
@@ -9,19 +9,9 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/api"
 )
 
-type symbolLocationArgs struct {
-	vfs        map[string]string
-	commitID   api.CommitID
-	importPath string
-	path       string
-	receiver   *string
-	symbol     string
-}
+type symbolLocationArgs struct { /* all structs must go */ }
 
-type test struct {
-	args symbolLocationArgs
-	want *lsp.Location
-}
+type test struct { /* all structs must go */ }
 
 func mkLocation(uri string, line, character int) *lsp.Location {
 	return &lsp.Location{
@@ -128,10 +118,7 @@ func mapFS(m map[string]string) *stringMapFS {
 	}
 }
 
-type stringMapFS struct {
-	ctxvfs.FileSystem
-	filenames []string
-}
+type stringMapFS struct { /* all structs must go */ }
 
 func (fs *stringMapFS) ListAllFiles(ctx context.Context) ([]string, error) {
 	return fs.filenames, nil
diff --git a/cmd/frontend/internal/app/jscontext/jscontext.go b/cmd/frontend/internal/app/jscontext/jscontext.go
index e3ba5a0..2eced96 100644
--- a/cmd/frontend/internal/app/jscontext/jscontext.go
+++ b/cmd/frontend/internal/app/jscontext/jscontext.go
@@ -28,11 +28,7 @@ import (
 // BillingPublishableKey is the publishable (non-secret) API key for the billing system, if any.
 var BillingPublishableKey string
 
-type authProviderInfo struct {
-	IsBuiltin         bool   `json:"isBuiltin"`
-	DisplayName       string `json:"displayName"`
-	AuthenticationURL string `json:"authenticationURL"`
-}
+type authProviderInfo struct { /* all structs must go */ }
 
 // JSContext is made available to JavaScript code via the
 // "sourcegraph/app/context" module.
@@ -42,45 +38,7 @@ type authProviderInfo struct {
 // server. Including secret fields here is OK if it is based on the user's
 // authentication above, but do not include e.g. hard-coded secrets about
 // the server instance here as they would be sent to anonymous users.
-type JSContext struct {
-	AppRoot        string            `json:"appRoot,omitempty"`
-	ExternalURL    string            `json:"externalURL,omitempty"`
-	XHRHeaders     map[string]string `json:"xhrHeaders"`
-	CSRFToken      string            `json:"csrfToken"`
-	UserAgentIsBot bool              `json:"userAgentIsBot"`
-	AssetsRoot     string            `json:"assetsRoot"`
-	Version        string            `json:"version"`
-
-	IsAuthenticatedUser bool `json:"isAuthenticatedUser"`
-
-	SentryDSN     *string `json:"sentryDSN"`
-	SiteID        string  `json:"siteID"`
-	SiteGQLID     string  `json:"siteGQLID"`
-	Debug         bool    `json:"debug"`
-	NeedsSiteInit bool    `json:"needsSiteInit"`
-	EmailEnabled  bool    `json:"emailEnabled"`
-
-	Site              schema.SiteConfiguration `json:"site"` // public subset of site configuration
-	LikelyDockerOnMac bool                     `json:"likelyDockerOnMac"`
-	NeedServerRestart bool                     `json:"needServerRestart"`
-	DeployType        string                   `json:"deployType"`
-
-	SourcegraphDotComMode bool `json:"sourcegraphDotComMode"`
-
-	BillingPublishableKey string `json:"billingPublishableKey,omitempty"`
-
-	AccessTokensAllow conf.AccessTokAllow `json:"accessTokensAllow"`
-
-	AllowSignup bool `json:"allowSignup"`
-
-	ResetPasswordEnabled bool `json:"resetPasswordEnabled"`
-
-	AuthProviders []authProviderInfo `json:"authProviders"`
-
-	Branding *schema.Branding `json:"branding"`
-
-	ExperimentalFeatures schema.ExperimentalFeatures `json:"experimentalFeatures"`
-}
+type JSContext struct { /* all structs must go */ }
 
 // NewJSContextFromRequest populates a JSContext struct from the HTTP
 // request.
diff --git a/cmd/frontend/internal/app/misc_handlers_test.go b/cmd/frontend/internal/app/misc_handlers_test.go
index fccf45b..f83e764 100644
--- a/cmd/frontend/internal/app/misc_handlers_test.go
+++ b/cmd/frontend/internal/app/misc_handlers_test.go
@@ -9,10 +9,7 @@ import (
 )
 
 func TestRobotsTxt(t *testing.T) {
-	tests := []struct {
-		url  string
-		want bool
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			"/",
 			true,
diff --git a/cmd/frontend/internal/app/opensearch.go b/cmd/frontend/internal/app/opensearch.go
index 4267870..5341b2d 100644
--- a/cmd/frontend/internal/app/opensearch.go
+++ b/cmd/frontend/internal/app/opensearch.go
@@ -20,11 +20,7 @@ var openSearchDescription = template.Must(template.New("").Parse(`
 `))
 
 func openSearch(w http.ResponseWriter, r *http.Request) {
-	type vars struct {
-		SiteName  string
-		BaseURL   string
-		SearchURL string
-	}
+	type vars struct { /* all structs must go */ }
 	externalURL := globals.ExternalURL()
 	externalURLStr := externalURL.String()
 	data := vars{
diff --git a/cmd/frontend/internal/app/pkg/updatecheck/build.go b/cmd/frontend/internal/app/pkg/updatecheck/build.go
index b7196d0..0490ecc 100644
--- a/cmd/frontend/internal/app/pkg/updatecheck/build.go
+++ b/cmd/frontend/internal/app/pkg/updatecheck/build.go
@@ -3,9 +3,7 @@ package updatecheck
 import "github.com/coreos/go-semver/semver"
 
 // build is the JSON shape of the update check handler's response body.
-type build struct {
-	Version semver.Version `json:"version"`
-}
+type build struct { /* all structs must go */ }
 
 func newBuild(version string) build {
 	return build{
diff --git a/cmd/frontend/internal/app/pkg/updatecheck/client.go b/cmd/frontend/internal/app/pkg/updatecheck/client.go
index da95450..2547575 100644
--- a/cmd/frontend/internal/app/pkg/updatecheck/client.go
+++ b/cmd/frontend/internal/app/pkg/updatecheck/client.go
@@ -42,11 +42,7 @@ func init() {
 }
 
 // Status of the check for software updates for Sourcegraph.
-type Status struct {
-	Date          time.Time // the time that the last check completed
-	Err           error     // the error that occurred, if any. When present, indicates the instance is offline / unable to contact Sourcegraph.com
-	UpdateVersion string    // the version string of the updated version, if any
-}
+type Status struct { /* all structs must go */ }
 
 // HasUpdate reports whether the status indicates an update is available.
 func (s Status) HasUpdate() bool { return s.UpdateVersion != "" }
diff --git a/cmd/frontend/internal/app/pkg/updatecheck/handler.go b/cmd/frontend/internal/app/pkg/updatecheck/handler.go
index a017db6..b07e26f 100644
--- a/cmd/frontend/internal/app/pkg/updatecheck/handler.go
+++ b/cmd/frontend/internal/app/pkg/updatecheck/handler.go
@@ -164,26 +164,7 @@ func canUpdateDate(clientVersionString string) (bool, error) {
 // supplied via query string or by a JSON body (when the request method is POST).
 // We need to maintain backwards compatibility with the GET-only update checks
 // while expanding the payload size for newer instance versions (via HTTP body).
-type pingRequest struct {
-	ClientSiteID         string `json:"site"`
-	LicenseKey           string
-	DeployType           string          `json:"deployType"`
-	ClientVersionString  string          `json:"version"`
-	AuthProviders        []string        `json:"auth"`
-	ExternalServices     []string        `json:"extsvcs"`
-	BuiltinSignupAllowed bool            `json:"signup"`
-	HasExtURL            bool            `json:"hasExtURL"`
-	UniqueUsers          int32           `json:"u"`
-	Activity             json.RawMessage `json:"act"`
-	CampaignsUsage       json.RawMessage `json:"automationUsage"`
-	CodeIntelUsage       json.RawMessage `json:"codeIntelUsage"`
-	SearchUsage          json.RawMessage `json:"searchUsage"`
-	InitialAdminEmail    string          `json:"initAdmin"`
-	TotalUsers           int32           `json:"totalUsers"`
-	HasRepos             bool            `json:"repos"`
-	EverSearched         bool            `json:"searched"`
-	EverFindRefs         bool            `json:"refs"`
-}
+type pingRequest struct { /* all structs must go */ }
 
 // readPingRequest reads the ping request payload from the request. If the
 // request method is GET, it will read all parameters from the query string.
@@ -254,29 +235,7 @@ func toRawMessage(val string) json.RawMessage {
 	return payload
 }
 
-type pingPayload struct {
-	RemoteIP             string          `json:"remote_ip"`
-	RemoteSiteVersion    string          `json:"remote_site_version"`
-	RemoteSiteID         string          `json:"remote_site_id"`
-	LicenseKey           string          `json:"license_key"`
-	HasUpdate            string          `json:"has_update"`
-	UniqueUsersToday     string          `json:"unique_users_today"`
-	SiteActivity         json.RawMessage `json:"site_activity"`
-	CampaignsUsage       json.RawMessage `json:"automation_usage"`
-	CodeIntelUsage       json.RawMessage `json:"code_intel_usage"`
-	SearchUsage          json.RawMessage `json:"search_usage"`
-	InstallerEmail       string          `json:"installer_email"`
-	AuthProviders        string          `json:"auth_providers"`
-	ExtServices          string          `json:"ext_services"`
-	BuiltinSignupAllowed string          `json:"builtin_signup_allowed"`
-	DeployType           string          `json:"deploy_type"`
-	TotalUserAccounts    string          `json:"total_user_accounts"`
-	HasExternalURL       string          `json:"has_external_url"`
-	HasRepos             string          `json:"has_repos"`
-	EverSearched         string          `json:"ever_searched"`
-	EverFindRefs         string          `json:"ever_find_refs"`
-	Timestamp            string          `json:"timestamp"`
-}
+type pingPayload struct { /* all structs must go */ }
 
 func logPing(r *http.Request, pr *pingRequest, hasUpdate bool) {
 	defer func() {
@@ -370,11 +329,7 @@ func reserializeCodeIntelUsage(payload json.RawMessage) (json.RawMessage, error)
 		return nil, nil
 	}
 
-	singlePeriodUsage := struct {
-		Daily   *types.CodeIntelUsagePeriod
-		Weekly  *types.CodeIntelUsagePeriod
-		Monthly *types.CodeIntelUsagePeriod
-	}{}
+	singlePeriodUsage := struct { /* all structs must go */ }{}
 
 	if len(codeIntelUsage.Daily) > 0 {
 		singlePeriodUsage.Daily = codeIntelUsage.Daily[0]
@@ -406,11 +361,7 @@ func reserializeSearchUsage(payload json.RawMessage) (json.RawMessage, error) {
 		return nil, nil
 	}
 
-	singlePeriodUsage := struct {
-		Daily   *types.SearchUsagePeriod
-		Weekly  *types.SearchUsagePeriod
-		Monthly *types.SearchUsagePeriod
-	}{}
+	singlePeriodUsage := struct { /* all structs must go */ }{}
 
 	if len(searchUsage.Daily) > 0 {
 		singlePeriodUsage.Daily = searchUsage.Daily[0]
diff --git a/cmd/frontend/internal/app/pkg/updatecheck/handler_test.go b/cmd/frontend/internal/app/pkg/updatecheck/handler_test.go
index 9126bf5..df89ac8 100644
--- a/cmd/frontend/internal/app/pkg/updatecheck/handler_test.go
+++ b/cmd/frontend/internal/app/pkg/updatecheck/handler_test.go
@@ -64,14 +64,7 @@ func TestLatestDockerComposeOrPureDockerVersionPushed(t *testing.T) {
 }
 
 func TestCanUpdate(t *testing.T) {
-	tests := []struct {
-		name                string
-		now                 time.Time
-		clientVersionString string
-		latestReleaseBuild  build
-		hasUpdate           bool
-		err                 error
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:                "no version update",
 			clientVersionString: "v1.2.3",
diff --git a/cmd/frontend/internal/app/returnto/returnto_test.go b/cmd/frontend/internal/app/returnto/returnto_test.go
index da49f30..1aab252 100644
--- a/cmd/frontend/internal/app/returnto/returnto_test.go
+++ b/cmd/frontend/internal/app/returnto/returnto_test.go
@@ -7,11 +7,7 @@ import (
 )
 
 func TestURLFromRequest(t *testing.T) {
-	tests := []struct {
-		url     string
-		want    string
-		wantErr bool
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{url: "", want: "/"},
 		{url: "?return-to=foo", wantErr: true},
 		{url: "?return-to=foo/bar", wantErr: true},
diff --git a/cmd/frontend/internal/app/sign_out.go b/cmd/frontend/internal/app/sign_out.go
index 7f1a02e..649fe94 100644
--- a/cmd/frontend/internal/app/sign_out.go
+++ b/cmd/frontend/internal/app/sign_out.go
@@ -9,11 +9,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/cmd/frontend/internal/session"
 )
 
-type SignOutURL struct {
-	ProviderDisplayName string
-	ProviderServiceType string
-	URL                 string
-}
+type SignOutURL struct { /* all structs must go */ }
 
 var ssoSignOutHandler func(w http.ResponseWriter, r *http.Request) []SignOutURL
 
@@ -45,9 +41,7 @@ func serveSignOut(w http.ResponseWriter, r *http.Request) {
 }
 
 func renderSignoutPageTemplate(w http.ResponseWriter, r *http.Request, signoutURLs []SignOutURL) {
-	data := struct {
-		SignoutURLs []SignOutURL
-	}{
+	data := struct { /* all structs must go */ }{
 		SignoutURLs: signoutURLs,
 	}
 
diff --git a/cmd/frontend/internal/app/templates/gen/data_generate.go b/cmd/frontend/internal/app/templates/gen/data_generate.go
index b590d23..b86e141 100644
--- a/cmd/frontend/internal/app/templates/gen/data_generate.go
+++ b/cmd/frontend/internal/app/templates/gen/data_generate.go
@@ -26,10 +26,7 @@ func main() {
 	}
 }
 
-type constModTimeFS struct {
-	modTime time.Time
-	http.FileSystem
-}
+type constModTimeFS struct { /* all structs must go */ }
 
 func (f constModTimeFS) Open(name string) (http.File, error) {
 	file, err := f.FileSystem.Open(name)
@@ -39,10 +36,7 @@ func (f constModTimeFS) Open(name string) (http.File, error) {
 	return constModTimeFile{File: file, modTime: f.modTime}, err
 }
 
-type constModTimeFile struct {
-	modTime time.Time
-	http.File
-}
+type constModTimeFile struct { /* all structs must go */ }
 
 func (f constModTimeFile) Readdir(count int) ([]os.FileInfo, error) {
 	fi, err := f.File.Readdir(count)
@@ -64,10 +58,7 @@ func (f constModTimeFile) Stat() (os.FileInfo, error) {
 	return constModTimeFileInfo{FileInfo: fi, modTime: f.modTime}, err
 }
 
-type constModTimeFileInfo struct {
-	modTime time.Time
-	os.FileInfo
-}
+type constModTimeFileInfo struct { /* all structs must go */ }
 
 func (f constModTimeFileInfo) ModTime() time.Time {
 	return f.modTime
diff --git a/cmd/frontend/internal/app/ui/handlers.go b/cmd/frontend/internal/app/ui/handlers.go
index 82e0ad8..1529f86 100644
--- a/cmd/frontend/internal/app/ui/handlers.go
+++ b/cmd/frontend/internal/app/ui/handlers.go
@@ -34,41 +34,11 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/vcs/git"
 )
 
-type InjectedHTML struct {
-	HeadTop    template.HTML
-	HeadBottom template.HTML
-	BodyTop    template.HTML
-	BodyBottom template.HTML
-}
-
-type Metadata struct {
-	// Title is the title of the page for Twitter cards, OpenGraph, etc.
-	// e.g. "Open in Sourcegraph"
-	Title string
+type InjectedHTML struct { /* all structs must go */ }
 
-	// Description is the description of the page for Twitter cards, OpenGraph,
-	// etc. e.g. "View this link in Sourcegraph Editor."
-	Description string
-
-	// ShowPreview controls whether or not OpenGraph/Twitter card/etc metadata is rendered.
-	ShowPreview bool
-}
+type Metadata struct { /* all structs must go */ }
 
-type Common struct {
-	Injected InjectedHTML
-	Metadata *Metadata
-	Context  jscontext.JSContext
-	AssetURL string
-	Title    string
-	Error    *pageError
-
-	WebpackDevServer bool // whether the Webpack dev server is running (WEBPACK_DEV_SERVER env var)
-
-	// The fields below have zero values when not on a repo page.
-	Repo         *types.Repo
-	Rev          string // unresolved / user-specified revision (e.x.: "@master")
-	api.CommitID        // resolved SHA1 revision
-}
+type Common struct { /* all structs must go */ }
 
 var webpackDevServer, _ = strconv.ParseBool(os.Getenv("WEBPACK_DEV_SERVER"))
 
diff --git a/cmd/frontend/internal/app/ui/handlers_test.go b/cmd/frontend/internal/app/ui/handlers_test.go
index b8463e8..0171f5a 100644
--- a/cmd/frontend/internal/app/ui/handlers_test.go
+++ b/cmd/frontend/internal/app/ui/handlers_test.go
@@ -59,10 +59,7 @@ func TestRedirects(t *testing.T) {
 }
 
 func TestRepoShortName(t *testing.T) {
-	tests := []struct {
-		input api.RepoName
-		want  string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{input: "repo", want: "repo"},
 		{input: "github.com/foo/bar", want: "foo/bar"},
 		{input: "mycompany.com/foo", want: "foo"},
@@ -78,14 +75,7 @@ func TestRepoShortName(t *testing.T) {
 }
 
 func TestNewCommon_repo_error(t *testing.T) {
-	cases := []struct {
-		name string
-		rev  string
-		err  error
-
-		want string
-		code int
-	}{{
+	cases := []struct { /* all structs must go */ }{{
 		name: "cloning",
 		err:  &vcs.RepoNotExistError{CloneInProgress: true},
 		code: 200,
@@ -163,16 +153,7 @@ func TestNewCommon_repo_error(t *testing.T) {
 }
 
 func TestRedirectTreeOrBlob(t *testing.T) {
-	tests := []struct {
-		name          string
-		route         string
-		path          string
-		common        *Common
-		mockStat      os.FileInfo
-		expHandled    bool
-		expStatusCode int
-		expLocation   string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:          "empty commit ID, no redirect",
 			common:        &Common{},
diff --git a/cmd/frontend/internal/app/ui/router.go b/cmd/frontend/internal/app/ui/router.go
index 763580b..5f86691 100644
--- a/cmd/frontend/internal/app/ui/router.go
+++ b/cmd/frontend/internal/app/ui/router.go
@@ -371,10 +371,7 @@ func handler(f func(w http.ResponseWriter, r *http.Request) error) http.Handler
 	return trace.TraceRoute(gziphandler.GzipHandler(h))
 }
 
-type recoverError struct {
-	recover interface{}
-	stack   []byte
-}
+type recoverError struct { /* all structs must go */ }
 
 func (r recoverError) Error() string {
 	return fmt.Sprintf("ui: recovered from panic: %v", r.recover)
@@ -396,12 +393,7 @@ func dangerouslyServeError(w http.ResponseWriter, r *http.Request, err error, st
 	serveErrorNoDebug(w, r, err, statusCode, false, true)
 }
 
-type pageError struct {
-	StatusCode int    `json:"statusCode"`
-	StatusText string `json:"statusText"`
-	Error      string `json:"error"`
-	ErrorID    string `json:"errorID"`
-}
+type pageError struct { /* all structs must go */ }
 
 // serveErrorNoDebug should not be called by anyone except serveErrorTest.
 func serveErrorNoDebug(w http.ResponseWriter, r *http.Request, err error, statusCode int, nodebug, forceServeError bool) {
@@ -453,9 +445,7 @@ func serveErrorNoDebug(w http.ResponseWriter, r *http.Request, err error, status
 		if common == nil {
 			return // request handled by newCommon
 		}
-		fancyErr := renderTemplate(w, "app.html", &struct {
-			*Common
-		}{
+		fancyErr := renderTemplate(w, "app.html", &struct { /* all structs must go */ }{
 			Common: common,
 		})
 		if fancyErr != nil {
diff --git a/cmd/frontend/internal/app/ui/router_test.go b/cmd/frontend/internal/app/ui/router_test.go
index 8a4da8f..13b4fb0 100644
--- a/cmd/frontend/internal/app/ui/router_test.go
+++ b/cmd/frontend/internal/app/ui/router_test.go
@@ -27,11 +27,7 @@ func init() {
 }
 
 func TestRouter(t *testing.T) {
-	tests := []struct {
-		path      string
-		wantRoute string
-		wantVars  map[string]string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		// home
 		{
 			path:      "/",
@@ -210,10 +206,7 @@ func TestRouter(t *testing.T) {
 }
 
 func TestRouter_RootPath(t *testing.T) {
-	tests := []struct {
-		repo   api.RepoName
-		exists bool
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			repo:   "about",
 			exists: false,
diff --git a/cmd/frontend/internal/auth/config_test.go b/cmd/frontend/internal/auth/config_test.go
index 1416029..8cfc937 100644
--- a/cmd/frontend/internal/auth/config_test.go
+++ b/cmd/frontend/internal/auth/config_test.go
@@ -8,10 +8,7 @@ import (
 )
 
 func TestValidateCustom(t *testing.T) {
-	tests := map[string]struct {
-		input        conf.Unified
-		wantProblems conf.Problems
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"no auth.providers": {
 			input:        conf.Unified{SiteConfiguration: schema.SiteConfiguration{}},
 			wantProblems: conf.NewSiteProblems("no auth providers set"),
diff --git a/cmd/frontend/internal/auth/userpasswd/config_test.go b/cmd/frontend/internal/auth/userpasswd/config_test.go
index 50e486b..ba2dd7c 100644
--- a/cmd/frontend/internal/auth/userpasswd/config_test.go
+++ b/cmd/frontend/internal/auth/userpasswd/config_test.go
@@ -8,10 +8,7 @@ import (
 )
 
 func TestValidateCustom(t *testing.T) {
-	tests := map[string]struct {
-		input        conf.Unified
-		wantProblems conf.Problems
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"single": {
 			input: conf.Unified{SiteConfiguration: schema.SiteConfiguration{
 				AuthProviders: []schema.AuthProviders{
diff --git a/cmd/frontend/internal/auth/userpasswd/handlers.go b/cmd/frontend/internal/auth/userpasswd/handlers.go
index 759b4c7..bf100e1 100644
--- a/cmd/frontend/internal/auth/userpasswd/handlers.go
+++ b/cmd/frontend/internal/auth/userpasswd/handlers.go
@@ -21,11 +21,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/hubspot/hubspotutil"
 )
 
-type credentials struct {
-	Email    string `json:"email"`
-	Username string `json:"username"`
-	Password string `json:"password"`
-}
+type credentials struct { /* all structs must go */ }
 
 // HandleSignUp handles submission of the user signup form.
 func HandleSignUp(w http.ResponseWriter, r *http.Request) {
diff --git a/cmd/frontend/internal/auth/userpasswd/handlers_test.go b/cmd/frontend/internal/auth/userpasswd/handlers_test.go
index b507e4c..00788b4 100644
--- a/cmd/frontend/internal/auth/userpasswd/handlers_test.go
+++ b/cmd/frontend/internal/auth/userpasswd/handlers_test.go
@@ -15,14 +15,7 @@ func TestCheckEmailAbuse(t *testing.T) {
 	yesterday := now.AddDate(0, 0, -1)
 	farFuture := now.AddDate(100, 0, 0)
 
-	tests := []struct {
-		name      string
-		mockEmail *db.UserEmail
-		mockErr   error
-		expAbused bool
-		expReason string
-		expErr    error
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:      "no emails found",
 			mockEmail: nil,
diff --git a/cmd/frontend/internal/auth/userpasswd/provider.go b/cmd/frontend/internal/auth/userpasswd/provider.go
index f13219a..f662d3c 100644
--- a/cmd/frontend/internal/auth/userpasswd/provider.go
+++ b/cmd/frontend/internal/auth/userpasswd/provider.go
@@ -9,9 +9,7 @@ import (
 
 const providerType = "builtin"
 
-type provider struct {
-	c *schema.BuiltinAuthProvider
-}
+type provider struct { /* all structs must go */ }
 
 // ConfigID implements providers.Provider.
 func (provider) ConfigID() providers.ConfigID {
diff --git a/cmd/frontend/internal/auth/userpasswd/reset_password.go b/cmd/frontend/internal/auth/userpasswd/reset_password.go
index bad8289..7408e7f 100644
--- a/cmd/frontend/internal/auth/userpasswd/reset_password.go
+++ b/cmd/frontend/internal/auth/userpasswd/reset_password.go
@@ -28,9 +28,7 @@ func HandleResetPasswordInit(w http.ResponseWriter, r *http.Request) {
 	}
 
 	ctx := r.Context()
-	var formData struct {
-		Email string `json:"email"`
-	}
+	var formData struct { /* all structs must go */ }
 	if err := json.NewDecoder(r.Body).Decode(&formData); err != nil {
 		httpLogAndError(w, "Could not decode password reset request body", http.StatusBadRequest, "err", err)
 		return
@@ -63,10 +61,7 @@ func HandleResetPasswordInit(w http.ResponseWriter, r *http.Request) {
 	if err := txemail.Send(r.Context(), txemail.Message{
 		To:       []string{formData.Email},
 		Template: resetPasswordEmailTemplates,
-		Data: struct {
-			Username string
-			URL      string
-		}{
+		Data: struct { /* all structs must go */ }{
 			Username: usr.Username,
 			URL:      globals.ExternalURL().ResolveReference(resetURL).String(),
 		},
@@ -105,11 +100,7 @@ func HandleResetPasswordCode(w http.ResponseWriter, r *http.Request) {
 	}
 
 	ctx := r.Context()
-	var params struct {
-		UserID   int32  `json:"userID"`
-		Code     string `json:"code"`
-		Password string `json:"password"` // new password
-	}
+	var params struct { /* all structs must go */ }
 	if err := json.NewDecoder(r.Body).Decode(&params); err != nil {
 		httpLogAndError(w, "Password reset with code: could not decode request body", http.StatusBadGateway, "err", err)
 		return
diff --git a/cmd/frontend/internal/bg/migrate_saved_queries_to_db.go b/cmd/frontend/internal/bg/migrate_saved_queries_to_db.go
index db52336..f3c506f 100644
--- a/cmd/frontend/internal/bg/migrate_saved_queries_to_db.go
+++ b/cmd/frontend/internal/bg/migrate_saved_queries_to_db.go
@@ -12,17 +12,9 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/jsonc"
 )
 
-type savedQuery struct {
-	Key         string
-	Description string
-	Query       string
-	Notify      bool
-	NotifySlack bool
-}
+type savedQuery struct { /* all structs must go */ }
 
-type savedQueryField struct {
-	SavedQueries []savedQuery `json:"search.savedQueries"`
-}
+type savedQueryField struct { /* all structs must go */ }
 
 // MigrateSavedQueriesAndSlackWebhookURLsFromSettingsToDatabase migrates saved searches from the `search.SavedQueries` value in
 // site settings into the `saved_searches` PostgreSQL table, and migrates organization Slack webhook URLs from the
@@ -118,13 +110,9 @@ func insertSavedQueryIntoDB(ctx context.Context, s *api.Settings, sq *savedQuery
 	return nil
 }
 
-type notificationsSlackField struct {
-	NotificationsSlack webhookURL `json:"notifications.slack"`
-}
+type notificationsSlackField struct { /* all structs must go */ }
 
-type webhookURL struct {
-	WebhookURL string `json:"webhookURL"`
-}
+type webhookURL struct { /* all structs must go */ }
 
 // migrateSlackWebhookUrlsToSavedSearches migrates Slack webhook URLs from site settings into the
 // slack_webhook_url column of the saved_searches database table. As a result, Slack webhook URLs
diff --git a/cmd/frontend/internal/bg/migrate_settings_motd_to_notices_test.go b/cmd/frontend/internal/bg/migrate_settings_motd_to_notices_test.go
index 1c5bd3b..24e5f98 100644
--- a/cmd/frontend/internal/bg/migrate_settings_motd_to_notices_test.go
+++ b/cmd/frontend/internal/bg/migrate_settings_motd_to_notices_test.go
@@ -182,10 +182,7 @@ func TestMigrateSettingsMOTDToNotices(t *testing.T) {
 }
 
 func TestMigrateSettingsMOTDToNoticesJSON(t *testing.T) {
-	tests := map[string]struct {
-		input string
-		want  string
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"empty": {
 			input: `{}`,
 			want:  `{}`,
diff --git a/cmd/frontend/internal/cli/middleware/goimportpath.go b/cmd/frontend/internal/cli/middleware/goimportpath.go
index 66c2311..d9f9b59 100644
--- a/cmd/frontend/internal/cli/middleware/goimportpath.go
+++ b/cmd/frontend/internal/cli/middleware/goimportpath.go
@@ -13,20 +13,7 @@ import (
 )
 
 // goImportMetaTag represents a go-import meta tag.
-type goImportMetaTag struct {
-	// ImportPrefix is the import path corresponding to the repository root.
-	// It must be a prefix or an exact match of the package being fetched with "go get".
-	// If it's not an exact match, another http request is made at the prefix to verify
-	// the <meta> tags match.
-	ImportPrefix string
-
-	// VCS is one of "git", "hg", "svn", etc.
-	VCS string
-
-	// RepoRoot is the root of the version control system containing a scheme and
-	// not containing a .vcs qualifier.
-	RepoRoot string
-}
+type goImportMetaTag struct { /* all structs must go */ }
 
 // goImportMetaTagTemplate is an HTML template for rendering a blank page with a go-import meta tag.
 var goImportMetaTagTemplate = template.Must(template.New("").Parse(`<html><head><meta name="go-import" content="{{.ImportPrefix}} {{.VCS}} {{.RepoRoot}}"></head><body></body></html>`))
diff --git a/cmd/frontend/internal/cli/middleware/goimportpath_test.go b/cmd/frontend/internal/cli/middleware/goimportpath_test.go
index 8e162b1..60ee197 100644
--- a/cmd/frontend/internal/cli/middleware/goimportpath_test.go
+++ b/cmd/frontend/internal/cli/middleware/goimportpath_test.go
@@ -10,11 +10,7 @@ import (
 )
 
 func TestGoImportPath(t *testing.T) {
-	tests := []struct {
-		path       string
-		wantStatus int
-		wantBody   string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			path:       "/sourcegraph/sourcegraph/usercontent",
 			wantStatus: http.StatusOK,
diff --git a/cmd/frontend/internal/cli/serve_cmd.go b/cmd/frontend/internal/cli/serve_cmd.go
index ad6abde..62df642 100644
--- a/cmd/frontend/internal/cli/serve_cmd.go
+++ b/cmd/frontend/internal/cli/serve_cmd.go
@@ -268,12 +268,7 @@ func Main(enterpriseSetupHook func() enterprise.Services) error {
 	return nil
 }
 
-type httpServers struct {
-	mu      sync.Mutex
-	wg      sync.WaitGroup
-	servers []*http.Server
-	wrapper func(http.Handler) http.Handler
-}
+type httpServers struct { /* all structs must go */ }
 
 // SetWrapper will set the wrapper for serve. All handlers served by are
 // passed through w.
diff --git a/cmd/frontend/internal/httpapi/httpapi.go b/cmd/frontend/internal/httpapi/httpapi.go
index f11b2b2..c83f78d 100644
--- a/cmd/frontend/internal/httpapi/httpapi.go
+++ b/cmd/frontend/internal/httpapi/httpapi.go
@@ -153,9 +153,7 @@ func init() {
 	})
 }
 
-type errorHandler struct {
-	WriteErrBody bool
-}
+type errorHandler struct { /* all structs must go */ }
 
 func (h *errorHandler) Handle(w http.ResponseWriter, r *http.Request, status int, err error) {
 	trace.SetRequestErrorCause(r.Context(), err)
diff --git a/cmd/frontend/internal/httpapi/internal.go b/cmd/frontend/internal/httpapi/internal.go
index 7256c75..ab47e93 100644
--- a/cmd/frontend/internal/httpapi/internal.go
+++ b/cmd/frontend/internal/httpapi/internal.go
@@ -161,42 +161,12 @@ func serveSearchConfiguration(w http.ResponseWriter, r *http.Request) error {
 	return err
 }
 
-type reposListServer struct {
-	// SourcegraphDotComMode is true if this instance of Sourcegraph is http://sourcegraph.com
-	SourcegraphDotComMode bool
-
-	// Repos is the subset of backend.Repos methods we use. Declared as an
-	// interface for testing.
-	Repos interface {
-		// ListDefault returns the repositories to index on Sourcegraph.com
-		ListDefault(context.Context) ([]*types.Repo, error)
-		// List returns a list of repositories
-		List(context.Context, db.ReposListOptions) ([]*types.Repo, error)
-	}
-
-	// Indexers is the subset of searchbackend.Indexers methods we
-	// use. reposListServer is used by indexed-search to get the list of
-	// repositories to index. These methods are used to return the correct
-	// subset for horizontal indexed search. Declared as an interface for
-	// testing.
-	Indexers interface {
-		// ReposSubset returns the subset of repoNames that hostname should
-		// index.
-		ReposSubset(ctx context.Context, hostname string, indexed map[string]struct{}, repoNames []string) ([]string, error)
-		// Enabled is true if horizontal indexed search is enabled.
-		Enabled() bool
-	}
-}
+type reposListServer struct { /* all structs must go */ }
 
 // serveIndex is used by zoekt to get the list of repositories for it to
 // index.
 func (h *reposListServer) serveIndex(w http.ResponseWriter, r *http.Request) error {
-	var opt struct {
-		// Hostname is used to determine the subset of repos to return
-		Hostname string
-		// Indexed is the repository names of indexed repos by Hostname.
-		Indexed []string
-	}
+	var opt struct { /* all structs must go */ }
 	if err := json.NewDecoder(r.Body).Decode(&opt); err != nil {
 		return err
 	}
@@ -236,9 +206,7 @@ func (h *reposListServer) serveIndex(w http.ResponseWriter, r *http.Request) err
 		}
 	}
 
-	data := struct {
-		RepoNames []string
-	}{
+	data := struct { /* all structs must go */ }{
 		RepoNames: names,
 	}
 
@@ -527,11 +495,7 @@ func serveGitExec(w http.ResponseWriter, r *http.Request) error {
 
 // gitServiceHandler are handlers which redirect git clone requests to the
 // gitserver for the repo.
-type gitServiceHandler struct {
-	Gitserver interface {
-		AddrForRepo(context.Context, api.RepoName) string
-	}
-}
+type gitServiceHandler struct { /* all structs must go */ }
 
 func (s *gitServiceHandler) serveInfoRefs(w http.ResponseWriter, r *http.Request) {
 	s.redirectToGitServer(w, r, "/info/refs")
diff --git a/cmd/frontend/internal/httpapi/internal_test.go b/cmd/frontend/internal/httpapi/internal_test.go
index 271492c..352e2fa 100644
--- a/cmd/frontend/internal/httpapi/internal_test.go
+++ b/cmd/frontend/internal/httpapi/internal_test.go
@@ -63,12 +63,7 @@ func TestReposIndex(t *testing.T) {
 	defaultRepos := []string{"github.com/popular/foo", "github.com/popular/bar"}
 	allRepos := append(defaultRepos, "github.com/alice/foo", "github.com/alice/bar")
 
-	cases := []struct {
-		name string
-		srv  *reposListServer
-		body string
-		want []string
-	}{{
+	cases := []struct { /* all structs must go */ }{{
 		name: "indexers",
 		srv: &reposListServer{
 			Repos: &mockRepos{
@@ -129,9 +124,7 @@ func TestReposIndex(t *testing.T) {
 				t.Errorf("got status %v", resp.StatusCode)
 			}
 
-			var data struct {
-				RepoNames []string
-			}
+			var data struct { /* all structs must go */ }
 			if err := json.Unmarshal(body, &data); err != nil {
 				t.Fatal(err)
 			}
@@ -144,10 +137,7 @@ func TestReposIndex(t *testing.T) {
 	}
 }
 
-type mockRepos struct {
-	defaultRepos []string
-	repos        []string
-}
+type mockRepos struct { /* all structs must go */ }
 
 func (r *mockRepos) ListDefault(context.Context) ([]*types.Repo, error) {
 	var repos []*types.Repo
diff --git a/cmd/frontend/internal/httpapi/repo_shield.go b/cmd/frontend/internal/httpapi/repo_shield.go
index e0b24ad..d81f7d5 100644
--- a/cmd/frontend/internal/httpapi/repo_shield.go
+++ b/cmd/frontend/internal/httpapi/repo_shield.go
@@ -38,11 +38,7 @@ func serveRepoShield(w http.ResponseWriter, r *http.Request) error {
 	if err != nil {
 		return err
 	}
-	return writeJSON(w, &struct {
-		// Note: Named lowercase because the JSON is consumed by shields.io JS
-		// code.
-		Value string `json:"value"`
-	}{
+	return writeJSON(w, &struct { /* all structs must go */ }{
 		Value: badgeValueFmt(value),
 	})
 }
diff --git a/cmd/frontend/internal/httpapi/src_cli.go b/cmd/frontend/internal/httpapi/src_cli.go
index 15a77e7..3189d2a 100644
--- a/cmd/frontend/internal/httpapi/src_cli.go
+++ b/cmd/frontend/internal/httpapi/src_cli.go
@@ -19,9 +19,7 @@ var allowedFilenames = []string{
 }
 
 func srcCliVersionServe(w http.ResponseWriter, r *http.Request) error {
-	return writeJSON(w, &struct {
-		Version string `json:"version"`
-	}{
+	return writeJSON(w, &struct { /* all structs must go */ }{
 		Version: srcCliVersion(),
 	})
 }
diff --git a/cmd/frontend/internal/inventory/context.go b/cmd/frontend/internal/inventory/context.go
index 8930768..f7a2f0b 100644
--- a/cmd/frontend/internal/inventory/context.go
+++ b/cmd/frontend/internal/inventory/context.go
@@ -7,18 +7,4 @@ import (
 )
 
 // Context defines the environment in which the inventory is computed.
-type Context struct {
-	// ReadTree is called to list the immediate children of a tree at path. The returned os.FileInfo
-	// values' Name method must return the full path (that can be passed to another ReadTree or
-	// ReadFile call), not just the basename.
-	ReadTree func(ctx context.Context, path string) ([]os.FileInfo, error)
-
-	// NewFileReader is called to get an io.ReadCloser from the file at path.
-	NewFileReader func(ctx context.Context, path string) (io.ReadCloser, error)
-
-	// CacheGet, if set, returns the cached inventory and true for the given tree, or false for a cache miss.
-	CacheGet func(os.FileInfo) (Inventory, bool)
-
-	// CacheSet, if set, stores the inventory in the cache for the given tree.
-	CacheSet func(os.FileInfo, Inventory)
-}
+type Context struct { /* all structs must go */ }
diff --git a/cmd/frontend/internal/inventory/inventory.go b/cmd/frontend/internal/inventory/inventory.go
index 2dff9d0..6a1cbe1 100644
--- a/cmd/frontend/internal/inventory/inventory.go
+++ b/cmd/frontend/internal/inventory/inventory.go
@@ -16,23 +16,10 @@ import (
 
 // Inventory summarizes a tree's contents (e.g., which programming
 // languages are used).
-type Inventory struct {
-	// Languages are the programming languages used in the tree.
-	Languages []Lang `json:"Languages,omitempty"`
-}
+type Inventory struct { /* all structs must go */ }
 
 // Lang represents a programming language used in a directory tree.
-type Lang struct {
-	// Name is the name of a programming language (e.g., "Go" or
-	// "Java").
-	Name string `json:"Name,omitempty"`
-	// TotalBytes is the total number of bytes of code written in the
-	// programming language.
-	TotalBytes uint64 `json:"TotalBytes,omitempty"`
-	// TotalLines is the total number of lines of code written in the
-	// programming language.
-	TotalLines uint64 `json:"TotalLines,omitempty"`
-}
+type Lang struct { /* all structs must go */ }
 
 var newLine = []byte{'\n'}
 
diff --git a/cmd/frontend/internal/inventory/inventory_test.go b/cmd/frontend/internal/inventory/inventory_test.go
index 3ab09b4..484f6a2 100644
--- a/cmd/frontend/internal/inventory/inventory_test.go
+++ b/cmd/frontend/internal/inventory/inventory_test.go
@@ -18,10 +18,7 @@ import (
 )
 
 func TestGetLang_language(t *testing.T) {
-	tests := map[string]struct {
-		file fi
-		want Lang
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"empty file": {file: fi{"a.java", ""}, want: Lang{
 			Name:       "Java",
 			TotalBytes: 0,
@@ -82,10 +79,7 @@ func makeFileReader(ctx context.Context, path, contents string) func(context.Con
 	}
 }
 
-type fi struct {
-	Path     string
-	Contents string
-}
+type fi struct { /* all structs must go */ }
 
 func (f fi) Name() string {
 	return f.Path
@@ -112,10 +106,7 @@ func (f fi) Sys() interface{} {
 }
 
 func TestGet_readFile(t *testing.T) {
-	tests := []struct {
-		file os.FileInfo
-		want string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{file: fi{"a.java", "aaaaaaaaa"}, want: "Java"},
 		{file: fi{"b.md", "# Hello"}, want: "Markdown"},
 
@@ -140,10 +131,7 @@ func TestGet_readFile(t *testing.T) {
 	}
 }
 
-type nopReadCloser struct {
-	data   []byte
-	reader *bytes.Reader
-}
+type nopReadCloser struct { /* all structs must go */ }
 
 func (n *nopReadCloser) Read(p []byte) (int, error) {
 	return n.reader.Read(p)
diff --git a/cmd/frontend/internal/pkg/handlerutil/error.go b/cmd/frontend/internal/pkg/handlerutil/error.go
index 5d915ea..5858e41 100644
--- a/cmd/frontend/internal/pkg/handlerutil/error.go
+++ b/cmd/frontend/internal/pkg/handlerutil/error.go
@@ -4,9 +4,7 @@ import "github.com/sourcegraph/sourcegraph/internal/api"
 
 // URLMovedError should be returned when a requested resource has moved to a new
 // address.
-type URLMovedError struct {
-	NewRepo api.RepoName `json:"RedirectTo"`
-}
+type URLMovedError struct { /* all structs must go */ }
 
 func (e *URLMovedError) Error() string {
 	return "URL moved to " + string(e.NewRepo)
diff --git a/cmd/frontend/internal/pkg/handlerutil/handler.go b/cmd/frontend/internal/pkg/handlerutil/handler.go
index 652a464..74d4a50 100644
--- a/cmd/frontend/internal/pkg/handlerutil/handler.go
+++ b/cmd/frontend/internal/pkg/handlerutil/handler.go
@@ -26,12 +26,7 @@ import (
 // Error must never panic. If it has to execute something that may panic
 // (for example, call out into an external code), then it must use recover
 // to catch potential panics. If Error panics, the panic will propagate upstream.
-type HandlerWithErrorReturn struct {
-	Handler func(http.ResponseWriter, *http.Request) error       // the underlying handler
-	Error   func(http.ResponseWriter, *http.Request, int, error) // called to send an error response (e.g., an error page), it must not panic
-
-	PretendPanic bool
-}
+type HandlerWithErrorReturn struct { /* all structs must go */ }
 
 func (h HandlerWithErrorReturn) ServeHTTP(w http.ResponseWriter, r *http.Request) {
 	// Handle when h.Handler panics.
diff --git a/cmd/frontend/internal/pkg/handlerutil/middleware.go b/cmd/frontend/internal/pkg/handlerutil/middleware.go
index 6588ffd..bdc9bbb 100644
--- a/cmd/frontend/internal/pkg/handlerutil/middleware.go
+++ b/cmd/frontend/internal/pkg/handlerutil/middleware.go
@@ -12,10 +12,7 @@ import (
 // forms compliant you will have to submit the token via the X-Csrf-Token header, which is made
 // available in the client-side context.
 func CSRFMiddleware(next http.Handler, isSecure func() bool) http.Handler {
-	type handler struct {
-		secure bool
-		http.Handler
-	}
+	type handler struct { /* all structs must go */ }
 
 	newHandler := func(secure bool) handler {
 
diff --git a/cmd/frontend/internal/pkg/usagestatsdeprecated/usage_stats.go b/cmd/frontend/internal/pkg/usagestatsdeprecated/usage_stats.go
index 2d9baca..bb7d51f 100644
--- a/cmd/frontend/internal/pkg/usagestatsdeprecated/usage_stats.go
+++ b/cmd/frontend/internal/pkg/usagestatsdeprecated/usage_stats.go
@@ -87,25 +87,13 @@ func GetByUserID(userID int32) (*types.UserUsageStatistics, error) {
 // SiteUsageStatisticsOptions contains options for the number of daily, weekly, and monthly periods in
 // which to calculate the number of unique users (i.e., how many days of Daily Active Users, or DAUs,
 // how many weeks of Weekly Active Users, or WAUs, and how many months of Monthly Active Users, or MAUs).
-type SiteUsageStatisticsOptions struct {
-	DayPeriods   *int
-	WeekPeriods  *int
-	MonthPeriods *int
-}
+type SiteUsageStatisticsOptions struct { /* all structs must go */ }
 
 // UsageDuration in aggregate represents a duration of time over which to calculate a set of unique users.
-type UsageDuration struct {
-	Days   int
-	Months int
-}
+type UsageDuration struct { /* all structs must go */ }
 
 // ActiveUsers contains sets of unique user IDs.
-type ActiveUsers struct {
-	All              []string
-	Registered       []string
-	Anonymous        []string
-	UsedIntegrations []string
-}
+type ActiveUsers struct { /* all structs must go */ }
 
 // GetSiteUsageStatistics returns the current site's SiteActivity.
 func GetSiteUsageStatistics(opt *SiteUsageStatisticsOptions) (*types.SiteUsageStatistics, error) {
diff --git a/cmd/frontend/internal/session/session.go b/cmd/frontend/internal/session/session.go
index c7107dd..3a3e8f0 100644
--- a/cmd/frontend/internal/session/session.go
+++ b/cmd/frontend/internal/session/session.go
@@ -52,11 +52,7 @@ func init() {
 
 // sessionInfo is the information we store in the session. The gorilla/sessions library doesn't appear to
 // enforce the maxAge field in its session store implementations, so we include the expiry here.
-type sessionInfo struct {
-	Actor        *actor.Actor  `json:"actor"`
-	LastActive   time.Time     `json:"lastActive"`
-	ExpiryPeriod time.Duration `json:"expiryPeriod"`
-}
+type sessionInfo struct { /* all structs must go */ }
 
 // SetSessionStore sets the backing store used for storing sessions on the server. It should be called exactly once.
 func SetSessionStore(s sessions.Store) {
@@ -66,10 +62,7 @@ func SetSessionStore(s sessions.Store) {
 // sessionsStore wraps another sessions.Store to dynamically set the values
 // of the session.Options.Secure and session.Options.SameSite fields to what
 // is returned by the secure closure at invocation time.
-type sessionsStore struct {
-	sessions.Store
-	secure func() bool
-}
+type sessionsStore struct { /* all structs must go */ }
 
 // Get returns a cached session, setting the secure cookie option dynamically.
 func (st *sessionsStore) Get(r *http.Request, name string) (s *sessions.Session, err error) {
diff --git a/cmd/frontend/internal/session/session_test.go b/cmd/frontend/internal/session/session_test.go
index ea37aad..1b2cf0c 100644
--- a/cmd/frontend/internal/session/session_test.go
+++ b/cmd/frontend/internal/session/session_test.go
@@ -204,11 +204,7 @@ func TestCookieMiddleware(t *testing.T) {
 		}
 	}
 
-	testcases := []struct {
-		req      *http.Request
-		expActor *actor.Actor
-		deleted  bool // whether the session was deleted
-	}{
+	testcases := []struct { /* all structs must go */ }{
 		{
 			req:      httptest.NewRequest("GET", "/", nil),
 			expActor: &actor.Actor{},
diff --git a/cmd/frontend/internal/usagestats/event_handlers.go b/cmd/frontend/internal/usagestats/event_handlers.go
index 4ed3534..5dd7586 100644
--- a/cmd/frontend/internal/usagestats/event_handlers.go
+++ b/cmd/frontend/internal/usagestats/event_handlers.go
@@ -17,14 +17,7 @@ import (
 var pubSubDotComEventsTopicID = env.Get("PUBSUB_DOTCOM_EVENTS_TOPIC_ID", "", "Pub/sub dotcom events topic ID is the pub/sub topic id where Sourcegraph.com events are published.")
 
 // Event represents a request to log telemetry.
-type Event struct {
-	EventName    string
-	UserID       int32
-	UserCookieID string
-	URL          string
-	Source       string
-	Argument     json.RawMessage
-}
+type Event struct { /* all structs must go */ }
 
 // LogBackendEvent is a convenience function for logging backend events.
 func LogBackendEvent(userID int32, eventName string, argument json.RawMessage) error {
@@ -52,16 +45,7 @@ func LogEvent(ctx context.Context, args Event) error {
 	return logLocalEvent(ctx, args.EventName, args.URL, args.UserID, args.UserCookieID, args.Source, args.Argument)
 }
 
-type bigQueryEvent struct {
-	EventName       string `json:"name"`
-	AnonymousUserID string `json:"anonymous_user_id"`
-	UserID          int    `json:"user_id"`
-	URL             string `json:"url"`
-	Source          string `json:"source"`
-	Timestamp       string `json:"timestamp"`
-	Version         string `json:"version"`
-	Argument        string `json:"argument"`
-}
+type bigQueryEvent struct { /* all structs must go */ }
 
 // publishSourcegraphDotComEvent publishes Sourcegraph.com events to BigQuery.
 func publishSourcegraphDotComEvent(args Event) error {
diff --git a/cmd/frontend/internal/usagestats/usage_stats.go b/cmd/frontend/internal/usagestats/usage_stats.go
index 45cbc8e..908e1da 100644
--- a/cmd/frontend/internal/usagestats/usage_stats.go
+++ b/cmd/frontend/internal/usagestats/usage_stats.go
@@ -178,11 +178,7 @@ func ListRegisteredUsersThisMonth(ctx context.Context) ([]int32, error) {
 // SiteUsageStatisticsOptions contains options for the number of daily, weekly, and monthly periods in
 // which to calculate the number of unique users (i.e., how many days of Daily Active Users, or DAUs,
 // how many weeks of Weekly Active Users, or WAUs, and how many months of Monthly Active Users, or MAUs).
-type SiteUsageStatisticsOptions struct {
-	DayPeriods   *int
-	WeekPeriods  *int
-	MonthPeriods *int
-}
+type SiteUsageStatisticsOptions struct { /* all structs must go */ }
 
 // GetSiteUsageStatistics returns the current site's SiteActivity.
 func GetSiteUsageStatistics(ctx context.Context, opt *SiteUsageStatisticsOptions) (*types.SiteUsageStatistics, error) {
diff --git a/cmd/frontend/registry/extension_connection_graphql.go b/cmd/frontend/registry/extension_connection_graphql.go
index bc00c6b..389a7aa 100644
--- a/cmd/frontend/registry/extension_connection_graphql.go
+++ b/cmd/frontend/registry/extension_connection_graphql.go
@@ -28,14 +28,7 @@ func (r *extensionRegistryResolver) Extensions(ctx context.Context, args *graphq
 }
 
 // registryExtensionConnectionResolver resolves a list of registry extensions.
-type registryExtensionConnectionResolver struct {
-	args graphqlbackend.RegistryExtensionConnectionArgs
-
-	// cache results because they are used by multiple fields
-	once               sync.Once
-	registryExtensions []graphqlbackend.RegistryExtension
-	err                error
-}
+type registryExtensionConnectionResolver struct { /* all structs must go */ }
 
 var (
 	// ListLocalRegistryExtensions lists and returns local registry extensions according to the args. If
diff --git a/cmd/frontend/registry/extension_graphql.go b/cmd/frontend/registry/extension_graphql.go
index e4415ce..11f9721 100644
--- a/cmd/frontend/registry/extension_graphql.go
+++ b/cmd/frontend/registry/extension_graphql.go
@@ -26,10 +26,7 @@ func init() {
 
 // RegistryExtensionID identifies a registry extension, either locally or on a remote
 // registry. Exactly 1 field must be set.
-type RegistryExtensionID struct {
-	LocalID  int32                      `json:"l,omitempty"`
-	RemoteID *registryExtensionRemoteID `json:"r,omitempty"`
-}
+type RegistryExtensionID struct { /* all structs must go */ }
 
 func MarshalRegistryExtensionID(id RegistryExtensionID) graphql.ID {
 	return relay.MarshalID("RegistryExtension", id)
diff --git a/cmd/frontend/registry/extension_manifest.go b/cmd/frontend/registry/extension_manifest.go
index 36ab29b..5445832 100644
--- a/cmd/frontend/registry/extension_manifest.go
+++ b/cmd/frontend/registry/extension_manifest.go
@@ -9,14 +9,7 @@ import (
 )
 
 // extensionManifest implements the GraphQL type ExtensionManifest.
-type extensionManifest struct {
-	raw string
-
-	// cache result because it is used by multiple fields
-	once   sync.Once
-	result *schema.SourcegraphExtensionManifest
-	err    error
-}
+type extensionManifest struct { /* all structs must go */ }
 
 // NewExtensionManifest creates a new resolver for the GraphQL type ExtensionManifest with the given
 // raw contents of an extension manifest.
diff --git a/cmd/frontend/registry/extension_remote_graphql.go b/cmd/frontend/registry/extension_remote_graphql.go
index a551872..82d845d 100644
--- a/cmd/frontend/registry/extension_remote_graphql.go
+++ b/cmd/frontend/registry/extension_remote_graphql.go
@@ -12,9 +12,7 @@ import (
 
 // registryExtensionRemoteResolver implements the GraphQL type RegistryExtension with data from a
 // remote registry.
-type registryExtensionRemoteResolver struct {
-	v *registry.Extension
-}
+type registryExtensionRemoteResolver struct { /* all structs must go */ }
 
 var _ graphqlbackend.RegistryExtension = &registryExtensionRemoteResolver{}
 
@@ -26,10 +24,7 @@ func (r *registryExtensionRemoteResolver) ID() graphql.ID {
 
 // registryExtensionRemoteID identifies a registry extension on a remote registry. It is encoded in
 // RegistryExtensionID.
-type registryExtensionRemoteID struct {
-	Registry string `json:"r"`
-	UUID     string `json:"u"`
-}
+type registryExtensionRemoteID struct { /* all structs must go */ }
 
 func (r *registryExtensionRemoteResolver) UUID() string { return r.v.UUID }
 
diff --git a/cmd/frontend/registry/extensions.go b/cmd/frontend/registry/extensions.go
index 73a08a9..a62b3d7 100644
--- a/cmd/frontend/registry/extensions.go
+++ b/cmd/frontend/registry/extensions.go
@@ -228,9 +228,7 @@ func listRemoteRegistryExtensions(ctx context.Context, query string) ([]*registr
 // This helps us feel the UX of not being in Northern California latency-wise and ensure that
 // Sourcegraph's communication with the remote extension registry (usually Sourcegraph.com) does not
 // block unrelated workflows.
-type sleepIfUncachedTransport struct {
-	http.RoundTripper
-}
+type sleepIfUncachedTransport struct { /* all structs must go */ }
 
 func (t sleepIfUncachedTransport) RoundTrip(req *http.Request) (*http.Response, error) {
 	resp, err := t.RoundTripper.RoundTrip(req)
@@ -256,10 +254,7 @@ func IsWorkInProgressExtension(manifest *string) bool {
 		return true
 	}
 
-	var result struct {
-		schema.SourcegraphExtensionManifest
-		Title string
-	}
+	var result struct { /* all structs must go */ }
 	if err := jsonc.Unmarshal(*manifest, &result); err != nil {
 		// An extension whose manifest fails to parse is problematic for other reasons (and an error
 		// will be displayed), but it isn't helpful to also consider it work-in-progress.
diff --git a/cmd/frontend/registry/extensions_test.go b/cmd/frontend/registry/extensions_test.go
index 03d51e1..5b5c82e 100644
--- a/cmd/frontend/registry/extensions_test.go
+++ b/cmd/frontend/registry/extensions_test.go
@@ -10,12 +10,7 @@ import (
 )
 
 func TestSplitExtensionID(t *testing.T) {
-	tests := map[string]struct {
-		wantPrefix    string
-		wantPublisher string
-		wantName      string
-		wantErr       bool
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"":        {wantErr: true},
 		"/":       {wantErr: true},
 		"a/":      {wantErr: true},
@@ -48,13 +43,7 @@ func TestSplitExtensionID(t *testing.T) {
 }
 
 func TestParseExtensionID(t *testing.T) {
-	tests := map[string]struct {
-		mockConfiguredPrefix         string
-		wantPrefix                   string
-		wantExtensionIDWithoutPrefix string
-		wantIsLocal                  bool
-		wantErr                      bool
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"":      {wantErr: true},
 		"b/c":   {wantExtensionIDWithoutPrefix: "b/c", wantIsLocal: true},
 		"a/b/c": {wantErr: true},
@@ -91,11 +80,7 @@ func TestParseExtensionID(t *testing.T) {
 	}
 }
 
-type mockRegistryExtension struct {
-	id   int32
-	name string
-	graphqlbackend.RegistryExtension
-}
+type mockRegistryExtension struct { /* all structs must go */ }
 
 func TestGetExtensionByExtensionID(t *testing.T) {
 	ctx := context.Background()
diff --git a/cmd/frontend/registry/registry_graphql.go b/cmd/frontend/registry/registry_graphql.go
index 7d9dfb2..52c995d 100644
--- a/cmd/frontend/registry/registry_graphql.go
+++ b/cmd/frontend/registry/registry_graphql.go
@@ -26,14 +26,7 @@ var ExtensionRegistry extensionRegistryResolver
 //
 // Some methods are only implemented if there is a local extension registry. For these methods, the
 // implementation (if one exists) is set on the XyzFunc struct field.
-type extensionRegistryResolver struct {
-	ViewerPublishersFunc func(context.Context) ([]graphqlbackend.RegistryPublisher, error)
-	PublishersFunc       func(context.Context, *graphqlutil.ConnectionArgs) (graphqlbackend.RegistryPublisherConnection, error)
-	CreateExtensionFunc  func(context.Context, *graphqlbackend.ExtensionRegistryCreateExtensionArgs) (graphqlbackend.ExtensionRegistryMutationResult, error)
-	UpdateExtensionFunc  func(context.Context, *graphqlbackend.ExtensionRegistryUpdateExtensionArgs) (graphqlbackend.ExtensionRegistryMutationResult, error)
-	PublishExtensionFunc func(context.Context, *graphqlbackend.ExtensionRegistryPublishExtensionArgs) (graphqlbackend.ExtensionRegistryMutationResult, error)
-	DeleteExtensionFunc  func(context.Context, *graphqlbackend.ExtensionRegistryDeleteExtensionArgs) (*graphqlbackend.EmptyResponse, error)
-}
+type extensionRegistryResolver struct { /* all structs must go */ }
 
 var errNoLocalExtensionRegistry = errors.New("no local extension registry exists")
 
@@ -120,9 +113,7 @@ func (r *extensionRegistryResolver) FilterRemoteExtensions(ids []string) []strin
 	return keep
 }
 
-type ExtensionRegistryMutationResult struct {
-	ID int32 // this is only used for local extensions, so it's OK that this only accepts a local extension ID
-}
+type ExtensionRegistryMutationResult struct { /* all structs must go */ }
 
 func (r *ExtensionRegistryMutationResult) Extension(ctx context.Context) (graphqlbackend.RegistryExtension, error) {
 	return RegistryExtensionByIDInt32(ctx, r.ID)
diff --git a/cmd/frontend/types/external_services.go b/cmd/frontend/types/external_services.go
index b1e77f2..bdf8e29 100644
--- a/cmd/frontend/types/external_services.go
+++ b/cmd/frontend/types/external_services.go
@@ -11,11 +11,7 @@ type CodeHostConnection interface {
 
 var _ CodeHostConnection = (*AWSCodeCommitConnection)(nil)
 
-type AWSCodeCommitConnection struct {
-	// The unique resource identifier of the external service.
-	URN string
-	*schema.AWSCodeCommitConnection
-}
+type AWSCodeCommitConnection struct { /* all structs must go */ }
 
 func (c *AWSCodeCommitConnection) SetURN(urn string) {
 	c.URN = urn
@@ -23,11 +19,7 @@ func (c *AWSCodeCommitConnection) SetURN(urn string) {
 
 var _ CodeHostConnection = (*BitbucketCloudConnection)(nil)
 
-type BitbucketCloudConnection struct {
-	// The unique resource identifier of the external service.
-	URN string
-	*schema.BitbucketCloudConnection
-}
+type BitbucketCloudConnection struct { /* all structs must go */ }
 
 func (c *BitbucketCloudConnection) SetURN(urn string) {
 	c.URN = urn
@@ -35,11 +27,7 @@ func (c *BitbucketCloudConnection) SetURN(urn string) {
 
 var _ CodeHostConnection = (*BitbucketServerConnection)(nil)
 
-type BitbucketServerConnection struct {
-	// The unique resource identifier of the external service.
-	URN string
-	*schema.BitbucketServerConnection
-}
+type BitbucketServerConnection struct { /* all structs must go */ }
 
 func (c *BitbucketServerConnection) SetURN(urn string) {
 	c.URN = urn
@@ -47,11 +35,7 @@ func (c *BitbucketServerConnection) SetURN(urn string) {
 
 var _ CodeHostConnection = (*GitHubConnection)(nil)
 
-type GitHubConnection struct {
-	// The unique resource identifier of the external service.
-	URN string
-	*schema.GitHubConnection
-}
+type GitHubConnection struct { /* all structs must go */ }
 
 func (c *GitHubConnection) SetURN(urn string) {
 	c.URN = urn
@@ -59,11 +43,7 @@ func (c *GitHubConnection) SetURN(urn string) {
 
 var _ CodeHostConnection = (*GitLabConnection)(nil)
 
-type GitLabConnection struct {
-	// The unique resource identifier of the external service.
-	URN string
-	*schema.GitLabConnection
-}
+type GitLabConnection struct { /* all structs must go */ }
 
 func (c *GitLabConnection) SetURN(urn string) {
 	c.URN = urn
@@ -71,11 +51,7 @@ func (c *GitLabConnection) SetURN(urn string) {
 
 var _ CodeHostConnection = (*GitoliteConnection)(nil)
 
-type GitoliteConnection struct {
-	// The unique resource identifier of the external service.
-	URN string
-	*schema.GitoliteConnection
-}
+type GitoliteConnection struct { /* all structs must go */ }
 
 func (c *GitoliteConnection) SetURN(urn string) {
 	c.URN = urn
@@ -83,11 +59,7 @@ func (c *GitoliteConnection) SetURN(urn string) {
 
 var _ CodeHostConnection = (*OtherExternalServiceConnection)(nil)
 
-type OtherExternalServiceConnection struct {
-	// The unique resource identifier of the external service.
-	URN string
-	*schema.OtherExternalServiceConnection
-}
+type OtherExternalServiceConnection struct { /* all structs must go */ }
 
 func (c *OtherExternalServiceConnection) SetURN(urn string) {
 	c.URN = urn
@@ -95,11 +67,7 @@ func (c *OtherExternalServiceConnection) SetURN(urn string) {
 
 var _ CodeHostConnection = (*PhabricatorConnection)(nil)
 
-type PhabricatorConnection struct {
-	// The unique resource identifier of the external service.
-	URN string
-	*schema.PhabricatorConnection
-}
+type PhabricatorConnection struct { /* all structs must go */ }
 
 func (c *PhabricatorConnection) SetURN(urn string) {
 	c.URN = urn
diff --git a/cmd/frontend/types/saved_searches.go b/cmd/frontend/types/saved_searches.go
index 34881c6..f023d1e 100644
--- a/cmd/frontend/types/saved_searches.go
+++ b/cmd/frontend/types/saved_searches.go
@@ -1,13 +1,4 @@
 package types
 
 // SavedSearch represents a saved search
-type SavedSearch struct {
-	ID              int32 // the globally unique DB ID
-	Description     string
-	Query           string  // the literal search query to be ran
-	Notify          bool    // whether or not to notify the owner(s) of this saved search via email
-	NotifySlack     bool    // whether or not to notify the owner(s) of this saved search via Slack
-	UserID          *int32  // if non-nil, the owner is this user. UserID/OrgID are mutually exclusive.
-	OrgID           *int32  // if non-nil, the owner is this organization. UserID/OrgID are mutually exclusive.
-	SlackWebhookURL *string // if non-nil && NotifySlack == true, indicates that this Slack webhook URL should be used instead of the owners default Slack webhook.
-}
+type SavedSearch struct { /* all structs must go */ }
diff --git a/cmd/frontend/types/types.go b/cmd/frontend/types/types.go
index ec6d2b7..6241b77 100644
--- a/cmd/frontend/types/types.go
+++ b/cmd/frontend/types/types.go
@@ -10,51 +10,10 @@ import (
 )
 
 // RepoFields are lazy loaded data fields on a Repo (from the DB).
-type RepoFields struct {
-	// URI is the full name for this repository (e.g.,
-	// "github.com/user/repo"). See the documentation for the Name field.
-	URI string
-
-	// Description is a brief description of the repository.
-	Description string
-
-	// DEPRECATED: this field is always empty for new repositories as of
-	// https://github.com/sourcegraph/sourcegraph/issues/2586. Do not use it.
-	//
-	// Language is the primary programming language used in this repository.
-	Language string
-
-	// Fork is whether this repository is a fork of another repository.
-	Fork bool
-
-	// Archived is whether this repository has been archived.
-	Archived bool
-
-	// Cloned is whether this repository is cloned.
-	Cloned bool
-}
+type RepoFields struct { /* all structs must go */ }
 
 // Repo represents a source code repository.
-type Repo struct {
-	// ID is the unique numeric ID for this repository.
-	ID api.RepoID
-	// ExternalRepo identifies this repository by its ID on the external service where it resides (and the external
-	// service itself).
-	ExternalRepo api.ExternalRepoSpec
-	// Name is the name for this repository (e.g., "github.com/user/repo"). It
-	// is the same as URI, unless the user configures a non-default
-	// repositoryPathPattern.
-	//
-	// Previously, this was called RepoURI.
-	Name api.RepoName
-
-	// Private is whether the repository is private on the code host.
-	Private bool
-
-	// RepoFields contains fields that are loaded from the DB only when necessary.
-	// This is to reduce memory usage when loading thousands of repos.
-	*RepoFields
-}
+type Repo struct { /* all structs must go */ }
 
 // Repos is an utility type of a list of repos.
 type Repos []*Repo
@@ -64,332 +23,112 @@ func (rs Repos) Less(i, j int) bool { return rs[i].ID < rs[j].ID }
 func (rs Repos) Swap(i, j int)      { rs[i], rs[j] = rs[j], rs[i] }
 
 // ExternalService is a connection to an external service.
-type ExternalService struct {
-	ID          int64
-	Kind        string
-	DisplayName string
-	Config      string
-	CreatedAt   time.Time
-	UpdatedAt   time.Time
-	DeletedAt   *time.Time
-}
+type ExternalService struct { /* all structs must go */ }
 
 // URN returns a unique resource identifier of this external service.
 func (e *ExternalService) URN() string {
 	return extsvc.URN(e.Kind, e.ID)
 }
 
-type GlobalState struct {
-	SiteID      string
-	Initialized bool // whether the initial site admin account has been created
-}
+type GlobalState struct { /* all structs must go */ }
 
 // User represents a registered user.
-type User struct {
-	ID          int32
-	Username    string
-	DisplayName string
-	AvatarURL   string
-	CreatedAt   time.Time
-	UpdatedAt   time.Time
-	SiteAdmin   bool
-	BuiltinAuth bool
-	Tags        []string
-}
+type User struct { /* all structs must go */ }
 
-type Org struct {
-	ID          int32
-	Name        string
-	DisplayName *string
-	CreatedAt   time.Time
-	UpdatedAt   time.Time
-}
+type Org struct { /* all structs must go */ }
 
-type OrgMembership struct {
-	ID        int32
-	OrgID     int32
-	UserID    int32
-	CreatedAt time.Time
-	UpdatedAt time.Time
-}
+type OrgMembership struct { /* all structs must go */ }
 
-type PhabricatorRepo struct {
-	ID       int32
-	Name     api.RepoName
-	URL      string
-	Callsign string
-}
+type PhabricatorRepo struct { /* all structs must go */ }
 
-type UserUsageStatistics struct {
-	UserID                      int32
-	PageViews                   int32
-	SearchQueries               int32
-	CodeIntelligenceActions     int32
-	FindReferencesActions       int32
-	LastActiveTime              *time.Time
-	LastCodeHostIntegrationTime *time.Time
-}
+type UserUsageStatistics struct { /* all structs must go */ }
 
 // UserUsageCounts captures the usage numbers of a user in a single day.
-type UserUsageCounts struct {
-	Date           time.Time
-	UserID         uint32
-	SearchCount    int32
-	CodeIntelCount int32
-}
+type UserUsageCounts struct { /* all structs must go */ }
 
 // UserDates captures the created and deleted dates of a single user.
-type UserDates struct {
-	UserID    int32
-	CreatedAt time.Time
-	DeletedAt time.Time
-}
+type UserDates struct { /* all structs must go */ }
 
 // NOTE: DO NOT alter this struct without making a symmetric change
 // to the updatecheck handler. This struct is marshalled and sent to
 // BigQuery, which requires the input match its schema exactly.
-type SiteUsageStatistics struct {
-	DAUs []*SiteActivityPeriod
-	WAUs []*SiteActivityPeriod
-	MAUs []*SiteActivityPeriod
-}
+type SiteUsageStatistics struct { /* all structs must go */ }
 
 // NOTE: DO NOT alter this struct without making a symmetric change
 // to the updatecheck handler. This struct is marshalled and sent to
 // BigQuery, which requires the input match its schema exactly.
-type SiteActivityPeriod struct {
-	StartTime            time.Time
-	UserCount            int32
-	RegisteredUserCount  int32
-	AnonymousUserCount   int32
-	IntegrationUserCount int32
-	Stages               *Stages
-}
+type SiteActivityPeriod struct { /* all structs must go */ }
 
 // NOTE: DO NOT alter this struct without making a symmetric change
 // to the updatecheck handler. This struct is marshalled and sent to
 // BigQuery, which requires the input match its schema exactly.
-type Stages struct {
-	Manage    int32 `json:"mng"`
-	Plan      int32 `json:"plan"`
-	Code      int32 `json:"code"`
-	Review    int32 `json:"rev"`
-	Verify    int32 `json:"ver"`
-	Package   int32 `json:"pkg"`
-	Deploy    int32 `json:"depl"`
-	Configure int32 `json:"conf"`
-	Monitor   int32 `json:"mtr"`
-	Secure    int32 `json:"sec"`
-	Automate  int32 `json:"auto"`
-}
+type Stages struct { /* all structs must go */ }
 
 // NOTE: DO NOT alter this struct without making a symmetric change
 // to the updatecheck handler. This struct is marshalled and sent to
 // BigQuery, which requires the input match its schema exactly.
-type CampaignsUsageStatistics struct {
-	CampaignsCount              int32
-	ActionChangesetsCount       int32
-	ActionChangesetsMergedCount int32
-	ManualChangesetsCount       int32
-	ManualChangesetsMergedCount int32
-}
+type CampaignsUsageStatistics struct { /* all structs must go */ }
 
 // NOTE: DO NOT alter this struct without making a symmetric change
 // to the updatecheck handler. This struct is marshalled and sent to
 // BigQuery, which requires the input match its schema exactly.
-type CodeIntelUsageStatistics struct {
-	Daily   []*CodeIntelUsagePeriod
-	Weekly  []*CodeIntelUsagePeriod
-	Monthly []*CodeIntelUsagePeriod
-}
+type CodeIntelUsageStatistics struct { /* all structs must go */ }
 
 // NOTE: DO NOT alter this struct without making a symmetric change
 // to the updatecheck handler. This struct is marshalled and sent to
 // BigQuery, which requires the input match its schema exactly.
-type CodeIntelUsagePeriod struct {
-	StartTime   time.Time
-	Hover       *CodeIntelEventCategoryStatistics
-	Definitions *CodeIntelEventCategoryStatistics
-	References  *CodeIntelEventCategoryStatistics
-}
+type CodeIntelUsagePeriod struct { /* all structs must go */ }
 
 // NOTE: DO NOT alter this struct without making a symmetric change
 // to the updatecheck handler. This struct is marshalled and sent to
 // BigQuery, which requires the input match its schema exactly.
-type CodeIntelEventCategoryStatistics struct {
-	LSIF   *CodeIntelEventStatistics
-	LSP    *CodeIntelEventStatistics
-	Search *CodeIntelEventStatistics
-}
+type CodeIntelEventCategoryStatistics struct { /* all structs must go */ }
 
 // NOTE: DO NOT alter this struct without making a symmetric change
 // to the updatecheck handler. This struct is marshalled and sent to
 // BigQuery, which requires the input match its schema exactly.
-type CodeIntelEventStatistics struct {
-	UsersCount     int32
-	EventsCount    *int32
-	EventLatencies *CodeIntelEventLatencies
-}
+type CodeIntelEventStatistics struct { /* all structs must go */ }
 
 // NOTE: DO NOT alter this struct without making a symmetric change
 // to the updatecheck handler. This struct is marshalled and sent to
 // BigQuery, which requires the input match its schema exactly.
-type CodeIntelEventLatencies struct {
-	P50 float64
-	P90 float64
-	P99 float64
-}
+type CodeIntelEventLatencies struct { /* all structs must go */ }
 
 // NOTE: DO NOT alter this struct without making a symmetric change
 // to the updatecheck handler. This struct is marshalled and sent to
 // BigQuery, which requires the input match its schema exactly.
-type SearchUsageStatistics struct {
-	Daily   []*SearchUsagePeriod
-	Weekly  []*SearchUsagePeriod
-	Monthly []*SearchUsagePeriod
-}
+type SearchUsageStatistics struct { /* all structs must go */ }
 
 // NOTE: DO NOT alter this struct without making a symmetric change
 // to the updatecheck handler. This struct is marshalled and sent to
 // BigQuery, which requires the input match its schema exactly.
-type SearchUsagePeriod struct {
-	StartTime          time.Time
-	TotalUsers         int32
-	Literal            *SearchEventStatistics
-	Regexp             *SearchEventStatistics
-	After              *SearchCountStatistics
-	Archived           *SearchCountStatistics
-	Author             *SearchCountStatistics
-	Before             *SearchCountStatistics
-	Case               *SearchCountStatistics
-	Commit             *SearchEventStatistics
-	Committer          *SearchCountStatistics
-	Content            *SearchCountStatistics
-	Count              *SearchCountStatistics
-	Diff               *SearchEventStatistics
-	File               *SearchEventStatistics
-	Fork               *SearchCountStatistics
-	Index              *SearchCountStatistics
-	Lang               *SearchCountStatistics
-	Message            *SearchCountStatistics
-	PatternType        *SearchCountStatistics
-	Repo               *SearchEventStatistics
-	Repohascommitafter *SearchCountStatistics
-	Repohasfile        *SearchCountStatistics
-	Repogroup          *SearchCountStatistics
-	Structural         *SearchEventStatistics
-	Symbol             *SearchEventStatistics
-	Timeout            *SearchCountStatistics
-	Type               *SearchCountStatistics
-	SearchModes        *SearchModeUsageStatistics
-}
+type SearchUsagePeriod struct { /* all structs must go */ }
 
-type SearchModeUsageStatistics struct {
-	Interactive *SearchCountStatistics
-	PlainText   *SearchCountStatistics
-}
+type SearchModeUsageStatistics struct { /* all structs must go */ }
 
-type SearchCountStatistics struct {
-	UserCount   *int32
-	EventsCount *int32
-}
+type SearchCountStatistics struct { /* all structs must go */ }
 
 // NOTE: DO NOT alter this struct without making a symmetric change
 // to the updatecheck handler. This struct is marshalled and sent to
 // BigQuery, which requires the input match its schema exactly.
-type SearchEventStatistics struct {
-	UserCount      *int32
-	EventsCount    *int32
-	EventLatencies *SearchEventLatencies
-}
+type SearchEventStatistics struct { /* all structs must go */ }
 
 // NOTE: DO NOT alter this struct without making a symmetric change
 // to the updatecheck handler. This struct is marshalled and sent to
 // BigQuery, which requires the input match its schema exactly.
-type SearchEventLatencies struct {
-	P50 float64
-	P90 float64
-	P99 float64
-}
+type SearchEventLatencies struct { /* all structs must go */ }
 
 // SiteUsageSummary is an alternate view of SiteUsageStatistics which is
 // calculated in the database layer.
-type SiteUsageSummary struct {
-	Month                   time.Time
-	Week                    time.Time
-	Day                     time.Time
-	UniquesMonth            int32
-	UniquesWeek             int32
-	UniquesDay              int32
-	RegisteredUniquesMonth  int32
-	RegisteredUniquesWeek   int32
-	RegisteredUniquesDay    int32
-	IntegrationUniquesMonth int32
-	IntegrationUniquesWeek  int32
-	IntegrationUniquesDay   int32
-	ManageUniquesMonth      int32
-	CodeUniquesMonth        int32
-	VerifyUniquesMonth      int32
-	MonitorUniquesMonth     int32
-	ManageUniquesWeek       int32
-	CodeUniquesWeek         int32
-	VerifyUniquesWeek       int32
-	MonitorUniquesWeek      int32
-}
+type SiteUsageSummary struct { /* all structs must go */ }
 
 // AggregatedEvent represents the total events, unique users, and
 // latencies over the current month, week, and day for a single event.
-type AggregatedEvent struct {
-	Name           string
-	Month          time.Time
-	Week           time.Time
-	Day            time.Time
-	TotalMonth     int32
-	TotalWeek      int32
-	TotalDay       int32
-	UniquesMonth   int32
-	UniquesWeek    int32
-	UniquesDay     int32
-	LatenciesMonth []float64
-	LatenciesWeek  []float64
-	LatenciesDay   []float64
-}
+type AggregatedEvent struct { /* all structs must go */ }
 
-type SurveyResponse struct {
-	ID        int32
-	UserID    *int32
-	Email     *string
-	Score     int32
-	Reason    *string
-	Better    *string
-	CreatedAt time.Time
-}
+type SurveyResponse struct { /* all structs must go */ }
 
-type Event struct {
-	ID              int32
-	Name            string
-	URL             string
-	UserID          *int32
-	AnonymousUserID string
-	Argument        string
-	Source          string
-	Version         string
-	Timestamp       time.Time
-}
+type Event struct { /* all structs must go */ }
 
 // Secret represents the secrets table
-type Secret struct {
-	ID int32
-
-	// The table containing an object whose token is being encrypted.
-	SourceType sql.NullString
-
-	// The ID of the object in the SourceType table.
-	SourceID sql.NullInt32
-
-	// KeyName represents a unique key for the case where we're storing key-value pairs.
-	KeyName sql.NullString
-
-	// Value contains the encrypted string
-	Value string
-}
+type Secret struct { /* all structs must go */ }
diff --git a/cmd/gitserver/main_test.go b/cmd/gitserver/main_test.go
index efefd78..a09a5f6 100644
--- a/cmd/gitserver/main_test.go
+++ b/cmd/gitserver/main_test.go
@@ -4,11 +4,7 @@ package main
 import "testing"
 
 func TestParsePercent(t *testing.T) {
-	tests := []struct {
-		s       string
-		want    int
-		wantErr bool
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{s: "", wantErr: true},
 		{s: "-1", wantErr: true},
 		{s: "-4", wantErr: true},
diff --git a/cmd/gitserver/server/cleanup.go b/cmd/gitserver/server/cleanup.go
index d588208..9621262 100644
--- a/cmd/gitserver/server/cleanup.go
+++ b/cmd/gitserver/server/cleanup.go
@@ -166,10 +166,7 @@ func (s *Server) cleanupRepos() {
 		return false, multi
 	}
 
-	type cleanupFn struct {
-		Name string
-		Do   func(GitDir) (bool, error)
-	}
+	type cleanupFn struct { /* all structs must go */ }
 	cleanups := []cleanupFn{
 		// Do some sanity checks on the repository.
 		{"maybe remove corrupt", maybeRemoveCorrupt},
diff --git a/cmd/gitserver/server/cleanup_test.go b/cmd/gitserver/server/cleanup_test.go
index c05d5ca..a42aa75 100644
--- a/cmd/gitserver/server/cleanup_test.go
+++ b/cmd/gitserver/server/cleanup_test.go
@@ -361,12 +361,7 @@ func TestHowManyBytesToFree(t *testing.T) {
 		DesiredPercentFree: 10,
 	}
 
-	tcs := []struct {
-		name      string
-		diskSize  uint64
-		bytesFree uint64
-		want      int64
-	}{
+	tcs := []struct { /* all structs must go */ }{
 		{
 			name:      "if there is already enough space, no space is freed",
 			diskSize:  10 * G,
@@ -404,10 +399,7 @@ func TestHowManyBytesToFree(t *testing.T) {
 	}
 }
 
-type fakeDiskSizer struct {
-	bytesFree uint64
-	diskSize  uint64
-}
+type fakeDiskSizer struct { /* all structs must go */ }
 
 func (f *fakeDiskSizer) BytesFreeOnDisk(mountPoint string) (uint64, error) {
 	return f.bytesFree, nil
diff --git a/cmd/gitserver/server/customfetch_test.go b/cmd/gitserver/server/customfetch_test.go
index e029a43..4db3301 100644
--- a/cmd/gitserver/server/customfetch_test.go
+++ b/cmd/gitserver/server/customfetch_test.go
@@ -35,10 +35,7 @@ func TestCustomGitFetch(t *testing.T) {
 		},
 	}
 
-	tests := []struct {
-		url          string
-		expectedArgs []string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			url:          "https://8cd1419f4d5c1e0527f2893c9422f1a2a435116d@github.com/foo/normal/one",
 			expectedArgs: []string{"echo", "normal", "one"},
diff --git a/cmd/gitserver/server/gitolite_phabricator_test.go b/cmd/gitserver/server/gitolite_phabricator_test.go
index f6f380a..0e22397 100644
--- a/cmd/gitserver/server/gitolite_phabricator_test.go
+++ b/cmd/gitserver/server/gitolite_phabricator_test.go
@@ -31,10 +31,7 @@ func TestServer_handleGet(t *testing.T) {
 	s := &Server{ReposDir: "/testroot"}
 	h := s.Handler()
 
-	cases := []struct {
-		repo        string
-		expMetadata string
-	}{{
+	cases := []struct { /* all structs must go */ }{{
 		repo:        "somerepo",
 		expMetadata: `{"callsign":"SOMEREPO"}`,
 	}, {
@@ -74,10 +71,7 @@ func TestServer_handleGet_invalid(t *testing.T) {
 	s := &Server{ReposDir: "/testroot"}
 	h := s.Handler()
 
-	cases := []struct {
-		repo        string
-		expMetadata string
-	}{{
+	cases := []struct { /* all structs must go */ }{{
 		repo:        "somerepo",
 		expMetadata: `{"callsign":""}`,
 	}, {
diff --git a/cmd/gitserver/server/gitservice.go b/cmd/gitserver/server/gitservice.go
index 4de96e0..1b9421a 100644
--- a/cmd/gitserver/server/gitservice.go
+++ b/cmd/gitserver/server/gitservice.go
@@ -34,11 +34,7 @@ var uploadPackArgs = []string{
 // This allows users to clone any git repo. We only support the smart
 // protocol. We aim to support modern git features such as protocol v2 to
 // minimize traffic.
-type gitServiceHandler struct {
-	// Dir is a funcion which takes a repository name and returns an absolute
-	// path to the GIT_DIR for it.
-	Dir func(string) string
-}
+type gitServiceHandler struct { /* all structs must go */ }
 
 func (s *gitServiceHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
 	// Only support clones and fetches (git upload-pack). /info/refs sets the
diff --git a/cmd/gitserver/server/gitservice_test.go b/cmd/gitserver/server/gitservice_test.go
index 9d01058..09494cf 100644
--- a/cmd/gitserver/server/gitservice_test.go
+++ b/cmd/gitserver/server/gitservice_test.go
@@ -40,10 +40,7 @@ func TestGitServiceHandler(t *testing.T) {
 		runCmd(t, tmpDir(t), "git", "-c", "protocol.version=1", "clone", cloneURL)
 	})
 
-	cloneV2 := []struct {
-		Name string
-		Args []string
-	}{{
+	cloneV2 := []struct { /* all structs must go */ }{{
 		"clonev2",
 		[]string{},
 	}, {
diff --git a/cmd/gitserver/server/list-gitolite.go b/cmd/gitserver/server/list-gitolite.go
index 0ac5e52..d75100f 100644
--- a/cmd/gitserver/server/list-gitolite.go
+++ b/cmd/gitserver/server/list-gitolite.go
@@ -14,9 +14,7 @@ func (s *Server) handleListGitolite(w http.ResponseWriter, r *http.Request) {
 
 var defaultGitolite = gitoliteFetcher{client: gitoliteClient{}}
 
-type gitoliteFetcher struct {
-	client iGitoliteClient
-}
+type gitoliteFetcher struct { /* all structs must go */ }
 
 type iGitoliteClient interface {
 	ListRepos(ctx context.Context, host string) ([]*gitolite.Repo, error)
diff --git a/cmd/gitserver/server/list-gitolite_test.go b/cmd/gitserver/server/list-gitolite_test.go
index f11697e..b0609ea 100644
--- a/cmd/gitserver/server/list-gitolite_test.go
+++ b/cmd/gitserver/server/list-gitolite_test.go
@@ -12,13 +12,7 @@ import (
 )
 
 func Test_Gitolite_listRepos(t *testing.T) {
-	tests := []struct {
-		listRepos       map[string][]*gitolite.Repo
-		configs         []*schema.GitoliteConnection
-		gitoliteHost    string
-		expResponseCode int
-		expResponseBody string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			listRepos: map[string][]*gitolite.Repo{
 				"git@gitolite.example.com": {
@@ -63,9 +57,7 @@ func Test_Gitolite_listRepos(t *testing.T) {
 	}
 }
 
-type stubGitoliteClient struct {
-	ListRepos_ func(ctx context.Context, host string) ([]*gitolite.Repo, error)
-}
+type stubGitoliteClient struct { /* all structs must go */ }
 
 func (c stubGitoliteClient) ListRepos(ctx context.Context, host string) ([]*gitolite.Repo, error) {
 	return c.ListRepos_(ctx, host)
diff --git a/cmd/gitserver/server/lock.go b/cmd/gitserver/server/lock.go
index fd2ef0a..480e159 100644
--- a/cmd/gitserver/server/lock.go
+++ b/cmd/gitserver/server/lock.go
@@ -15,13 +15,7 @@ import (
 //
 // The main use of RepositoryLocker is to prevent concurrent clones. However,
 // it is also used during maintenance tasks such as recloning/migrating/etc.
-type RepositoryLocker struct {
-	// mu protects status
-	mu sync.Mutex
-	// status tracks directories that are locked. The value is the status. If
-	// a directory is in status, the directory is locked.
-	status map[GitDir]string
-}
+type RepositoryLocker struct { /* all structs must go */ }
 
 // TryAcquire acquires the lock for dir. If it is already held, ok is false
 // and lock is nil. Otherwise a non-nil lock is returned and true. When
@@ -58,13 +52,7 @@ func (rl *RepositoryLocker) Status(dir GitDir) (status string, locked bool) {
 
 // RepositoryLock is returned by RepositoryLocker.TryAcquire. It allows
 // updating the status of a directory lock, as well as releasing the lock.
-type RepositoryLock struct {
-	locker *RepositoryLocker
-	dir    GitDir
-
-	// done is protected by locker.mu
-	done bool
-}
+type RepositoryLock struct { /* all structs must go */ }
 
 // SetStatus updates the status for the lock. If the lock has been released,
 // this is a noop.
diff --git a/cmd/gitserver/server/server.go b/cmd/gitserver/server/server.go
index ca14ec4..0e628b9 100644
--- a/cmd/gitserver/server/server.go
+++ b/cmd/gitserver/server/server.go
@@ -102,48 +102,9 @@ func runCommand(ctx context.Context, cmd *exec.Cmd) (exitCode int, err error) {
 }
 
 // Server is a gitserver server.
-type Server struct {
-	// ReposDir is the path to the base directory for gitserver storage.
-	ReposDir string
-
-	// DeleteStaleRepositories when true will delete old repositories when the
-	// Janitor job runs.
-	DeleteStaleRepositories bool
-
-	// DesiredPercentFree is the desired percentage of disk space to keep free.
-	DesiredPercentFree int
-
-	// DiskSizer tells how much disk is free and how large the disk is.
-	DiskSizer DiskSizer
-
-	// skipCloneForTests is set by tests to avoid clones.
-	skipCloneForTests bool
-
-	// ctx is the context we use for all background jobs. It is done when the
-	// server is stopped. Do not directly call this, rather call
-	// Server.context()
-	ctx      context.Context
-	cancel   context.CancelFunc // used to shutdown background jobs
-	cancelMu sync.Mutex         // protects canceled
-	canceled bool
-	wg       sync.WaitGroup // tracks running background jobs
-
-	locker *RepositoryLocker
-
-	// cloneLimiter and cloneableLimiter limits the number of concurrent
-	// clones and ls-remotes respectively. Use s.acquireCloneLimiter() and
-	// s.acquireClonableLimiter() instead of using these directly.
-	cloneLimiter     *mutablelimiter.Limiter
-	cloneableLimiter *mutablelimiter.Limiter
-
-	repoUpdateLocksMu sync.Mutex // protects the map below and also updates to locks.once
-	repoUpdateLocks   map[api.RepoName]*locks
-}
+type Server struct { /* all structs must go */ }
 
-type locks struct {
-	once *sync.Once  // consolidates multiple waiting updates
-	mu   *sync.Mutex // prevents updates running in parallel
-}
+type locks struct { /* all structs must go */ }
 
 // shortGitCommandTimeout returns the timeout for git commands that should not
 // take a long time. Some commands such as "git archive" are allowed more time
@@ -734,16 +695,7 @@ func setGitAttributes(dir GitDir) error {
 }
 
 // cloneOptions specify optional behaviour for the cloneRepo function.
-type cloneOptions struct {
-	// Block will wait for the clone to finish before returning. If the clone
-	// fails, the error will be returned. The passed in context is
-	// respected. When not blocking the clone is done with a server background
-	// context.
-	Block bool
-
-	// Overwrite will overwrite the existing clone.
-	Overwrite bool
-}
+type cloneOptions struct { /* all structs must go */ }
 
 // cloneRepo issues a git clone command for the given repo. It is
 // non-blocking by default.
@@ -925,11 +877,7 @@ func readCloneProgress(redactor *urlRedactor, lock *RepositoryLock, pr io.Reader
 }
 
 // urlRedactor redacts all sensitive strings from a message.
-type urlRedactor struct {
-	// sensitive are sensitive strings to be redacted.
-	// The strings should not be empty.
-	sensitive []string
-}
+type urlRedactor struct { /* all structs must go */ }
 
 // newURLRedactor returns a new urlRedactor that redacts
 // credentials found in rawurl, and the rawurl itself.
diff --git a/cmd/gitserver/server/server_test.go b/cmd/gitserver/server/server_test.go
index 72152e2..20986df 100644
--- a/cmd/gitserver/server/server_test.go
+++ b/cmd/gitserver/server/server_test.go
@@ -22,13 +22,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/mutablelimiter"
 )
 
-type Test struct {
-	Name             string
-	Request          *http.Request
-	ExpectedCode     int
-	ExpectedBody     string
-	ExpectedTrailers http.Header
-}
+type Test struct { /* all structs must go */ }
 
 func TestRequest(t *testing.T) {
 	tests := []Test{
@@ -295,11 +289,7 @@ func BenchmarkQuickRevParseHeadQuickSymbolicRefHead_unpacked_refs(b *testing.B)
 }
 
 func TestUrlRedactor(t *testing.T) {
-	testCases := []struct {
-		url      string
-		message  string
-		redacted string
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{
 			url:      "http://token@github.com/foo/bar/",
 			message:  "fatal: repository 'http://token@github.com/foo/bar/' not found",
diff --git a/cmd/gitserver/server/serverutil.go b/cmd/gitserver/server/serverutil.go
index 5edde7a..fd604a8 100644
--- a/cmd/gitserver/server/serverutil.go
+++ b/cmd/gitserver/server/serverutil.go
@@ -75,19 +75,7 @@ func checkSpecArgSafety(spec string) error {
 	return nil
 }
 
-type tlsConfig struct {
-	// Whether to not verify the SSL certificate when fetching or pushing over
-	// HTTPS.
-	//
-	// https://git-scm.com/docs/git-config#Documentation/git-config.txt-httpsslVerify
-	SSLNoVerify bool
-
-	// File containing the certificates to verify the peer with when fetching
-	// or pushing over HTTPS.
-	//
-	// https://git-scm.com/docs/git-config#Documentation/git-config.txt-httpsslCAInfo
-	SSLCAInfo string
-}
+type tlsConfig struct { /* all structs must go */ }
 
 var tlsExternal = conf.Cached(func() interface{} {
 	c := conf.Get().ExperimentalFeatures.TlsExternal
@@ -337,11 +325,7 @@ var repoRemoteRefs = func(ctx context.Context, url, prefix string) (map[string]s
 }
 
 // writeCounter wraps an io.Writer and keeps track of bytes written.
-type writeCounter struct {
-	w io.Writer
-	// n is the number of bytes written to w
-	n int64
-}
+type writeCounter struct { /* all structs must go */ }
 
 func (c *writeCounter) Write(p []byte) (n int, err error) {
 	n, err = c.w.Write(p)
@@ -350,10 +334,7 @@ func (c *writeCounter) Write(p []byte) (n int, err error) {
 }
 
 // limitWriter is a io.Writer that writes to an W but discards after N bytes.
-type limitWriter struct {
-	W io.Writer // underling writer
-	N int       // max bytes remaining
-}
+type limitWriter struct { /* all structs must go */ }
 
 func (l *limitWriter) Write(p []byte) (int, error) {
 	if l.N <= 0 {
@@ -379,15 +360,7 @@ func (l *limitWriter) Write(p []byte) (int, error) {
 //
 // This lets, e.g., clients with a context deadline see as much partial response
 // body as possible.
-type flushingResponseWriter struct {
-	// mu ensures we don't concurrently call Flush and Write. It also protects
-	// state.
-	mu      sync.Mutex
-	w       http.ResponseWriter
-	flusher http.Flusher
-	closed  bool
-	doFlush bool
-}
+type flushingResponseWriter struct { /* all structs must go */ }
 
 var logUnflushableResponseWriterOnce sync.Once
 
@@ -478,16 +451,7 @@ func (f *flushingResponseWriter) Close() {
 // progressWriter is an io.Writer that writes to a buffer.
 // '\r' resets the write offset to the index after last '\n' in the buffer,
 // or the beginning of the buffer if a '\n' has not been written yet.
-type progressWriter struct {
-	// writeOffset is the offset in buf where the next write should begin.
-	writeOffset int
-
-	// afterLastNewline is the index after the last '\n' in buf
-	// or 0 if there is no '\n' in buf.
-	afterLastNewline int
-
-	buf []byte
-}
+type progressWriter struct { /* all structs must go */ }
 
 func (w *progressWriter) Write(p []byte) (n int, err error) {
 	l := len(p)
diff --git a/cmd/gitserver/server/serverutil_test.go b/cmd/gitserver/server/serverutil_test.go
index 165305f..898f7a1 100644
--- a/cmd/gitserver/server/serverutil_test.go
+++ b/cmd/gitserver/server/serverutil_test.go
@@ -19,12 +19,7 @@ func TestConfigureRemoteGitCommand(t *testing.T) {
 		"GIT_ASKPASS=true",
 		"GIT_SSH_COMMAND=ssh -o BatchMode=yes -o ConnectTimeout=30",
 	}
-	tests := []struct {
-		input        *exec.Cmd
-		tlsConfig    *tlsConfig
-		expectedEnv  []string
-		expectedArgs []string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			input:        exec.Command("git", "clone"),
 			expectedEnv:  expectedEnv,
@@ -85,10 +80,7 @@ func TestConfigureRemoteGitCommand_tls(t *testing.T) {
 		"GIT_SSH_COMMAND=ssh -o BatchMode=yes -o ConnectTimeout=30",
 	}
 
-	cases := []struct {
-		conf *tlsConfig
-		want []string
-	}{{
+	cases := []struct { /* all structs must go */ }{{
 		conf: &tlsConfig{},
 		want: nil,
 	}, {
@@ -110,11 +102,7 @@ func TestConfigureRemoteGitCommand_tls(t *testing.T) {
 }
 
 func TestProgressWriter(t *testing.T) {
-	testCases := []struct {
-		name   string
-		writes []string
-		text   string
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{
 			name:   "identity",
 			writes: []string{"hello"},
diff --git a/cmd/loadtest/main.go b/cmd/loadtest/main.go
index 394f0cb..a4ba08a 100644
--- a/cmd/loadtest/main.go
+++ b/cmd/loadtest/main.go
@@ -20,9 +20,7 @@ var (
 	QueryPeriodMSEnv = env.Get("loadTestSearchPeriod", "2000", "Period of search query issuance (milliseconds). E.g., a value of 200 corresponds to 200ms or 5 QPS")
 )
 
-type GQLSearchVars struct {
-	Query string `json:"query"`
-}
+type GQLSearchVars struct { /* all structs must go */ }
 
 func main() {
 	if err := run(); err != nil {
@@ -82,20 +80,9 @@ func search(v GQLSearchVars) (int, error) {
 	return len(res.Data.Search.Results.Results), nil
 }
 
-type GraphQLResponseSearch struct {
-	Data struct {
-		Search struct {
-			Results struct {
-				Results []interface{} `json:"results"`
-			} `json:"results"`
-		} `json:"search"`
-	} `json:"data"`
-}
+type GraphQLResponseSearch struct { /* all structs must go */ }
 
-type GraphQLQuery struct {
-	Query     string      `json:"query"`
-	Variables interface{} `json:"variables"`
-}
+type GraphQLQuery struct { /* all structs must go */ }
 
 const gqlSearch = `query Search(
 	$query: String!,
diff --git a/cmd/query-runner/email.go b/cmd/query-runner/email.go
index 4f1b9fe..abedbd2 100644
--- a/cmd/query-runner/email.go
+++ b/cmd/query-runner/email.go
@@ -47,15 +47,7 @@ func (n *notifier) emailNotify(ctx context.Context) {
 			if n.results.Data.Search.Results.ApproximateResultCount != "1" {
 				plural = "s"
 			}
-			if err := sendEmail(ctx, recipient.spec.userID, "results", newSearchResultsEmailTemplates, struct {
-				URL                    string
-				SavedSearchPageURL     string
-				Description            string
-				Query                  string
-				ApproximateResultCount string
-				Ownership              string
-				PluralResults          string
-			}{
+			if err := sendEmail(ctx, recipient.spec.userID, "results", newSearchResultsEmailTemplates, struct { /* all structs must go */ }{
 				URL:                    searchURL(n.newQuery, utmSourceEmail),
 				SavedSearchPageURL:     savedSearchListPageURL(utmSourceEmail),
 				Description:            n.query.Description,
@@ -120,10 +112,7 @@ func emailNotifySubscribeUnsubscribe(ctx context.Context, recipient *recipient,
 		ownership = "your organization's"
 	}
 
-	return sendEmail(ctx, recipient.spec.userID, eventType, template, struct {
-		Ownership   string
-		Description string
-	}{
+	return sendEmail(ctx, recipient.spec.userID, eventType, template, struct { /* all structs must go */ }{
 		Ownership:   ownership,
 		Description: query.Config.Description,
 	})
diff --git a/cmd/query-runner/graphql.go b/cmd/query-runner/graphql.go
index 22e54af..eb94f74 100644
--- a/cmd/query-runner/graphql.go
+++ b/cmd/query-runner/graphql.go
@@ -17,10 +17,7 @@ import (
 	"github.com/pkg/errors"
 )
 
-type graphQLQuery struct {
-	Query     string      `json:"query"`
-	Variables interface{} `json:"variables"`
-}
+type graphQLQuery struct { /* all structs must go */ }
 
 const gqlSearchQuery = `query Search(
 	$query: String!,
@@ -104,23 +101,9 @@ const gqlSearchQuery = `query Search(
 	}
 }`
 
-type gqlSearchVars struct {
-	Query string `json:"query"`
-}
+type gqlSearchVars struct { /* all structs must go */ }
 
-type gqlSearchResponse struct {
-	Data struct {
-		Search struct {
-			Results struct {
-				ApproximateResultCount string
-				Cloning                []*api.Repo
-				Timedout               []*api.Repo
-				Results                []interface{}
-			}
-		}
-	}
-	Errors []interface{}
-}
+type gqlSearchResponse struct { /* all structs must go */ }
 
 func search(ctx context.Context, query string) (*gqlSearchResponse, error) {
 	var buf bytes.Buffer
diff --git a/cmd/query-runner/main.go b/cmd/query-runner/main.go
index 1a34c38..fc34e7a 100644
--- a/cmd/query-runner/main.go
+++ b/cmd/query-runner/main.go
@@ -85,9 +85,7 @@ var debugPretendSavedQueryResultsExist = false
 
 var executor = &executorT{}
 
-type executorT struct {
-	forceRunInterval *time.Duration
-}
+type executorT struct { /* all structs must go */ }
 
 func (e *executorT) run(ctx context.Context) error {
 	// Parse FORCE_RUN_INTERVAL value.
@@ -303,13 +301,7 @@ func notify(ctx context.Context, spec api.SavedQueryIDSpec, query api.ConfigSave
 	return nil
 }
 
-type notifier struct {
-	spec       api.SavedQueryIDSpec
-	query      api.ConfigSavedQuery
-	newQuery   string
-	results    *gqlSearchResponse
-	recipients recipients
-}
+type notifier struct { /* all structs must go */ }
 
 const (
 	utmSourceEmail = "saved-search-email"
diff --git a/cmd/query-runner/notif.go b/cmd/query-runner/notif.go
index ce3acc0..7f7481d 100644
--- a/cmd/query-runner/notif.go
+++ b/cmd/query-runner/notif.go
@@ -9,9 +9,7 @@ import (
 
 // recipientSpec identifies a recipient of a saved search notification. Exactly one of its fields is
 // nonzero.
-type recipientSpec struct {
-	userID, orgID int32
-}
+type recipientSpec struct { /* all structs must go */ }
 
 func (r recipientSpec) String() string {
 	if r.userID != 0 {
@@ -22,11 +20,7 @@ func (r recipientSpec) String() string {
 
 // recipient describes a recipient of a saved search notification and the type of notifications
 // they're configured to receive.
-type recipient struct {
-	spec  recipientSpec // the recipient's identity
-	email bool          // send an email to the recipient
-	slack bool          // post a Slack message to the recipient
-}
+type recipient struct { /* all structs must go */ }
 
 func (r *recipient) String() string {
 	return fmt.Sprintf("{%s email:%v slack:%v}", r.spec, r.email, r.slack)
diff --git a/cmd/query-runner/notif_test.go b/cmd/query-runner/notif_test.go
index e1d7bc4..d9fa061 100644
--- a/cmd/query-runner/notif_test.go
+++ b/cmd/query-runner/notif_test.go
@@ -64,10 +64,7 @@ func TestGetNotificationRecipients(t *testing.T) {
 }
 
 func TestDiffNotificationRecipients(t *testing.T) {
-	tests := []struct {
-		old, new               recipients
-		wantRemoved, wantAdded recipients
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			old:         recipients{},
 			new:         recipients{},
diff --git a/cmd/query-runner/queryrunnerapi/queryrunnerapi.go b/cmd/query-runner/queryrunnerapi/queryrunnerapi.go
index dcf0274..072d8c7 100644
--- a/cmd/query-runner/queryrunnerapi/queryrunnerapi.go
+++ b/cmd/query-runner/queryrunnerapi/queryrunnerapi.go
@@ -27,14 +27,9 @@ var (
 	}
 )
 
-type SubjectAndConfig struct {
-	Subject api.SettingsSubject
-	Config  api.PartialConfigSavedQueries
-}
+type SubjectAndConfig struct { /* all structs must go */ }
 
-type ErrorResponse struct {
-	Message string
-}
+type ErrorResponse struct { /* all structs must go */ }
 
 const (
 	PathSavedQueryWasCreatedOrUpdated = "/saved-query-was-created-or-updated"
@@ -42,14 +37,9 @@ const (
 	PathTestNotification              = "/test-notification"
 )
 
-type client struct {
-	client *http.Client
-}
+type client struct { /* all structs must go */ }
 
-type SavedQueryWasCreatedOrUpdatedArgs struct {
-	SubjectAndConfig                 *SubjectAndConfig
-	DisableSubscriptionNotifications bool
-}
+type SavedQueryWasCreatedOrUpdatedArgs struct { /* all structs must go */ }
 
 // SavedQueryWasCreated should be called whenever a saved query was created
 // or updated after the server has started.
@@ -63,10 +53,7 @@ func (c *client) SavedQueryWasCreatedOrUpdated(ctx context.Context, subject api.
 	})
 }
 
-type SavedQueryWasDeletedArgs struct {
-	Spec                             api.SavedQueryIDSpec
-	DisableSubscriptionNotifications bool
-}
+type SavedQueryWasDeletedArgs struct { /* all structs must go */ }
 
 // SavedQueryWasDeleted should be called whenever a saved query was deleted
 // after the server has started.
@@ -77,9 +64,7 @@ func (c *client) SavedQueryWasDeleted(ctx context.Context, spec api.SavedQueryID
 	})
 }
 
-type TestNotificationArgs struct {
-	SavedSearch api.SavedQuerySpecAndConfig
-}
+type TestNotificationArgs struct { /* all structs must go */ }
 
 // TestNotification is called to send a test notification for a saved search. Users may perform this
 // action to test that the configured notifications are working.
diff --git a/cmd/replacer/protocol/replacer.go b/cmd/replacer/protocol/replacer.go
index 9ed5e44..45b1870 100644
--- a/cmd/replacer/protocol/replacer.go
+++ b/cmd/replacer/protocol/replacer.go
@@ -7,49 +7,9 @@ import (
 )
 
 // Request represents a request to replacer
-type Request struct {
-	// Repo is the name of the repository to search. eg "github.com/gorilla/mux"
-	Repo api.RepoName
+type Request struct { /* all structs must go */ }
 
-	// URL specifies the repository's Git remote URL (for gitserver). It is optional. See
-	// (gitserver.ExecRequest).URL for documentation on what it is used for.
-	URL string
-
-	// Commit is which commit to search. It is required to be resolved,
-	// not a ref like HEAD or master. eg
-	// "599cba5e7b6137d46ddf58fb1765f5d928e69604"
-	Commit api.CommitID
-
-	// The amount of time to wait for a repo archive to fetch.
-	// It is parsed with time.ParseDuration.
-	//
-	// This timeout should be low when searching across many repos
-	// so that unfetched repos don't delay the search, and because we are likely
-	// to get results from the repos that have already been fetched.
-	//
-	// This timeout should be high when searching across a single repo
-	// because returning results slowly is better than returning no results at all.
-	//
-	// This only times out how long we wait for the fetch request;
-	// the fetch will still happen in the background so future requests don't have to wait.
-	FetchTimeout string
-
-	RewriteSpecification
-}
-
-type RewriteSpecification struct {
-	// A template pattern that expresses what to match.
-	MatchTemplate string
-
-	// A template pattern that expresses how matches should be rewritten.
-	RewriteTemplate string
-
-	// A file extension suffix filtering which files to process (e.g., ".go")
-	FileExtension string
-
-	// A directory prefix to exclude (e.g., vendor)
-	DirectoryExclude string
-}
+type RewriteSpecification struct { /* all structs must go */ }
 
 // GitserverRepo returns the repository information necessary to perform gitserver requests.
 func (r Request) GitserverRepo() gitserver.Repo { return gitserver.Repo{Name: r.Repo, URL: r.URL} }
diff --git a/cmd/replacer/replace/replace.go b/cmd/replacer/replace/replace.go
index 7623490..87da350 100644
--- a/cmd/replacer/replace/replace.go
+++ b/cmd/replacer/replace/replace.go
@@ -39,15 +39,9 @@ import (
 	"github.com/gorilla/schema"
 )
 
-type Service struct {
-	Store *store.Store
-	Log   log15.Logger
-}
+type Service struct { /* all structs must go */ }
 
-type ExternalTool struct {
-	Name       string
-	BinaryPath string
-}
+type ExternalTool struct { /* all structs must go */ }
 
 // Configure the command line options and return the command to execute using an external tool
 func (t *ExternalTool) command(ctx context.Context, spec *protocol.RewriteSpecification, zipPath string) (cmd *exec.Cmd, err error) {
diff --git a/cmd/replacer/replace/replace_test.go b/cmd/replacer/replace/replace_test.go
index 65ce319..1ec92aa 100644
--- a/cmd/replacer/replace/replace_test.go
+++ b/cmd/replacer/replace/replace_test.go
@@ -37,10 +37,7 @@ func main() {
 `,
 	}
 
-	cases := []struct {
-		arg  protocol.RewriteSpecification
-		want string
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{protocol.RewriteSpecification{
 			MatchTemplate:   "func",
 			RewriteTemplate: "derp",
diff --git a/cmd/repo-updater/repos/awscodecommit.go b/cmd/repo-updater/repos/awscodecommit.go
index 011cfdb..b7e82dd 100644
--- a/cmd/repo-updater/repos/awscodecommit.go
+++ b/cmd/repo-updater/repos/awscodecommit.go
@@ -21,17 +21,7 @@ import (
 // An AWSCodeCommitSource yields repositories from a single AWS Code Commit
 // connection configured in Sourcegraph via the external services
 // configuration.
-type AWSCodeCommitSource struct {
-	svc    *ExternalService
-	config *schema.AWSCodeCommitConnection
-
-	awsConfig    aws.Config
-	awsPartition endpoints.Partition // "aws", "aws-cn", "aws-us-gov"
-	awsRegion    endpoints.Region
-	client       *awscodecommit.Client
-
-	exclude excludeFunc
-}
+type AWSCodeCommitSource struct { /* all structs must go */ }
 
 // NewAWSCodeCommitSource returns a new AWSCodeCommitSource from the given external service.
 func NewAWSCodeCommitSource(svc *ExternalService, cf *httpcli.Factory) (*AWSCodeCommitSource, error) {
@@ -218,9 +208,7 @@ func limitedRedirect(r *http.Request, via []*http.Request) error {
 	return http.ErrUseLastResponse
 }
 
-type stubBadHTTPRedirectTransport struct {
-	tr http.RoundTripper
-}
+type stubBadHTTPRedirectTransport struct { /* all structs must go */ }
 
 const stubBadHTTPRedirectLocation = `https://amazonaws.com/badhttpredirectlocation`
 
diff --git a/cmd/repo-updater/repos/awscodecommit_test.go b/cmd/repo-updater/repos/awscodecommit_test.go
index c7e0127..5cf0b23 100644
--- a/cmd/repo-updater/repos/awscodecommit_test.go
+++ b/cmd/repo-updater/repos/awscodecommit_test.go
@@ -28,11 +28,7 @@ func TestAWSCodeCommitSource_Exclude(t *testing.T) {
 		t.Fatal(err)
 	}
 
-	for _, tc := range []struct {
-		name         string
-		repo         *awscodecommit.Repository
-		wantExcluded bool
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{"name matches", &awscodecommit.Repository{Name: "my-repository"}, true},
 		{"name does not match", &awscodecommit.Repository{Name: "foobar"}, false},
 		{"id matches", &awscodecommit.Repository{ID: "id1"}, true},
diff --git a/cmd/repo-updater/repos/bitbucketcloud.go b/cmd/repo-updater/repos/bitbucketcloud.go
index 99e6061..aaab0a4 100644
--- a/cmd/repo-updater/repos/bitbucketcloud.go
+++ b/cmd/repo-updater/repos/bitbucketcloud.go
@@ -19,12 +19,7 @@ import (
 
 // A BitbucketCloudSource yields repositories from a single BitbucketCloud connection configured
 // in Sourcegraph via the external services configuration.
-type BitbucketCloudSource struct {
-	svc     *ExternalService
-	config  *schema.BitbucketCloudConnection
-	exclude excludeFunc
-	client  *bitbucketcloud.Client
-}
+type BitbucketCloudSource struct { /* all structs must go */ }
 
 // NewBitbucketCloudSource returns a new BitbucketCloudSource from the given external service.
 func NewBitbucketCloudSource(svc *ExternalService, cf *httpcli.Factory) (*BitbucketCloudSource, error) {
@@ -159,10 +154,7 @@ func (s *BitbucketCloudSource) excludes(r *bitbucketcloud.Repo) bool {
 }
 
 func (s *BitbucketCloudSource) listAllRepos(ctx context.Context, results chan SourceResult) {
-	type batch struct {
-		repos []*bitbucketcloud.Repo
-		err   error
-	}
+	type batch struct { /* all structs must go */ }
 
 	ch := make(chan batch)
 
diff --git a/cmd/repo-updater/repos/bitbucketcloud_test.go b/cmd/repo-updater/repos/bitbucketcloud_test.go
index 7a2ab88..bab083f 100644
--- a/cmd/repo-updater/repos/bitbucketcloud_test.go
+++ b/cmd/repo-updater/repos/bitbucketcloud_test.go
@@ -34,12 +34,7 @@ func TestBitbucketCloudSource_ListRepos(t *testing.T) {
 		}
 	}
 
-	testCases := []struct {
-		name   string
-		assert ReposAssertion
-		conf   *schema.BitbucketCloudConnection
-		err    string
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{
 			name: "found",
 			assert: assertAllReposListed([]string{
@@ -121,10 +116,7 @@ func TestBitbucketCloudSource_makeRepo(t *testing.T) {
 
 	svc := ExternalService{ID: 1, Kind: extsvc.KindBitbucketCloud}
 
-	tests := []struct {
-		name   string
-		schmea *schema.BitbucketCloudConnection
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "simple",
 			schmea: &schema.BitbucketCloudConnection{
@@ -229,10 +221,7 @@ func TestBitbucketCloudSource_Exclude(t *testing.T) {
 				t.Fatal(err)
 			}
 
-			type output struct {
-				Include []string
-				Exclude []string
-			}
+			type output struct { /* all structs must go */ }
 			var got output
 			for _, r := range repos {
 				if s.excludes(r) {
diff --git a/cmd/repo-updater/repos/bitbucketserver.go b/cmd/repo-updater/repos/bitbucketserver.go
index 917f056..58b37ed 100644
--- a/cmd/repo-updater/repos/bitbucketserver.go
+++ b/cmd/repo-updater/repos/bitbucketserver.go
@@ -22,12 +22,7 @@ import (
 
 // A BitbucketServerSource yields repositories from a single BitbucketServer connection configured
 // in Sourcegraph via the external services configuration.
-type BitbucketServerSource struct {
-	svc     *ExternalService
-	config  *schema.BitbucketServerConnection
-	exclude excludeFunc
-	client  *bitbucketserver.Client
-}
+type BitbucketServerSource struct { /* all structs must go */ }
 
 // NewBitbucketServerSource returns a new BitbucketServerSource from the given external service.
 // rl is optional
@@ -328,10 +323,7 @@ func (s *BitbucketServerSource) listAllRepos(ctx context.Context, results chan S
 		return
 	}
 
-	type batch struct {
-		repos []*bitbucketserver.Repo
-		err   error
-	}
+	type batch struct { /* all structs must go */ }
 
 	ch := make(chan batch)
 
diff --git a/cmd/repo-updater/repos/bitbucketserver_test.go b/cmd/repo-updater/repos/bitbucketserver_test.go
index e888bcc..2872d3d 100644
--- a/cmd/repo-updater/repos/bitbucketserver_test.go
+++ b/cmd/repo-updater/repos/bitbucketserver_test.go
@@ -134,10 +134,7 @@ func TestBitbucketServerSource_Exclude(t *testing.T) {
 				t.Fatal(err)
 			}
 
-			type output struct {
-				Include []string
-				Exclude []string
-			}
+			type output struct { /* all structs must go */ }
 			var got output
 			for _, r := range repos {
 				name := r.Slug
@@ -178,11 +175,7 @@ func TestBitbucketServerSource_LoadChangesets(t *testing.T) {
 		{Repo: repo, Changeset: &campaigns.Changeset{ExternalID: "999"}},
 	}
 
-	testCases := []struct {
-		name string
-		cs   []*Changeset
-		err  string
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{
 			name: "found",
 			cs:   []*Changeset{changesets[0], changesets[1]},
@@ -259,12 +252,7 @@ func TestBitbucketServerSource_CreateChangeset(t *testing.T) {
 		},
 	}
 
-	testCases := []struct {
-		name   string
-		cs     *Changeset
-		err    string
-		exists bool
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{
 			name: "abbreviated refs",
 			cs: &Changeset{
@@ -366,11 +354,7 @@ func TestBitbucketServerSource_CloseChangeset(t *testing.T) {
 	pr.ToRef.Repository.Slug = "automation-testing"
 	pr.ToRef.Repository.Project.Key = "SOUR"
 
-	testCases := []struct {
-		name string
-		cs   *Changeset
-		err  string
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{
 			name: "success",
 			cs:   &Changeset{Changeset: &campaigns.Changeset{Metadata: pr}},
@@ -435,11 +419,7 @@ func TestBitbucketServerSource_UpdateChangeset(t *testing.T) {
 	pr.ToRef.Repository.Slug = "automation-testing"
 	pr.ToRef.Repository.Project.Key = "SOUR"
 
-	testCases := []struct {
-		name string
-		cs   *Changeset
-		err  string
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{
 			name: "success",
 			cs: &Changeset{
diff --git a/cmd/repo-updater/repos/exclude.go b/cmd/repo-updater/repos/exclude.go
index 4872e4a..782ea1d 100644
--- a/cmd/repo-updater/repos/exclude.go
+++ b/cmd/repo-updater/repos/exclude.go
@@ -10,12 +10,7 @@ import (
 type excludeFunc func(string) bool
 
 // excludeBuilder builds an excludeFunc.
-type excludeBuilder struct {
-	exact    map[string]struct{}
-	patterns []*regexp.Regexp
-
-	err error
-}
+type excludeBuilder struct { /* all structs must go */ }
 
 // Exact will case-insensitively exclude the string name.
 func (e *excludeBuilder) Exact(name string) {
diff --git a/cmd/repo-updater/repos/github.go b/cmd/repo-updater/repos/github.go
index edab7af..4cfa0e7 100644
--- a/cmd/repo-updater/repos/github.go
+++ b/cmd/repo-updater/repos/github.go
@@ -24,23 +24,7 @@ import (
 
 // A GithubSource yields repositories from a single Github connection configured
 // in Sourcegraph via the external services configuration.
-type GithubSource struct {
-	svc             *ExternalService
-	config          *schema.GitHubConnection
-	exclude         excludeFunc
-	excludeArchived bool
-	excludeForks    bool
-	githubDotCom    bool
-	baseURL         *url.URL
-	client          *github.Client
-	// searchClient is for using the GitHub search API, which has an independent
-	// rate limit much lower than non-search API requests.
-	searchClient *github.Client
-
-	// originalHostname is the hostname of config.Url (differs from client APIURL, whose host is api.github.com
-	// for an originalHostname of github.com).
-	originalHostname string
-}
+type GithubSource struct { /* all structs must go */ }
 
 // NewGithubSource returns a new GithubSource from the given external service.
 func NewGithubSource(svc *ExternalService, cf *httpcli.Factory) (*GithubSource, error) {
@@ -119,10 +103,7 @@ func newGithubSource(svc *ExternalService, c *schema.GitHubConnection, cf *httpc
 	}, nil
 }
 
-type githubResult struct {
-	err  error
-	repo *github.Repository
-}
+type githubResult struct { /* all structs must go */ }
 
 // ListRepos returns all Github repositories accessible to all connections configured
 // in Sourcegraph via the external services configuration.
diff --git a/cmd/repo-updater/repos/github_test.go b/cmd/repo-updater/repos/github_test.go
index 3a487f8..6cb64e5 100644
--- a/cmd/repo-updater/repos/github_test.go
+++ b/cmd/repo-updater/repos/github_test.go
@@ -43,12 +43,7 @@ func TestGithubSource_CreateChangeset(t *testing.T) {
 		},
 	}
 
-	testCases := []struct {
-		name   string
-		cs     *Changeset
-		err    string
-		exists bool
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{
 			name: "success",
 			cs: &Changeset{
@@ -135,11 +130,7 @@ func TestGithubSource_CreateChangeset(t *testing.T) {
 }
 
 func TestGithubSource_CloseChangeset(t *testing.T) {
-	testCases := []struct {
-		name string
-		cs   *Changeset
-		err  string
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{
 			name: "success",
 			cs: &Changeset{
@@ -202,11 +193,7 @@ func TestGithubSource_CloseChangeset(t *testing.T) {
 }
 
 func TestGithubSource_UpdateChangeset(t *testing.T) {
-	testCases := []struct {
-		name string
-		cs   *Changeset
-		err  string
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{
 			name: "success",
 			cs: &Changeset{
@@ -272,11 +259,7 @@ func TestGithubSource_UpdateChangeset(t *testing.T) {
 }
 
 func TestGithubSource_LoadChangesets(t *testing.T) {
-	testCases := []struct {
-		name string
-		cs   []*Changeset
-		err  string
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{
 			name: "found",
 			cs: []*Changeset{
@@ -350,12 +333,7 @@ func TestGithubSource_LoadChangesets(t *testing.T) {
 }
 
 func TestGithubSource_GetRepo(t *testing.T) {
-	testCases := []struct {
-		name          string
-		nameWithOwner string
-		assert        func(*testing.T, *Repo)
-		err           string
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{
 			name:          "invalid name",
 			nameWithOwner: "thisIsNotANameWithOwner",
@@ -456,10 +434,7 @@ func TestGithubSource_makeRepo(t *testing.T) {
 
 	svc := ExternalService{ID: 1, Kind: extsvc.KindGitHub}
 
-	tests := []struct {
-		name   string
-		schmea *schema.GitHubConnection
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "simple",
 			schmea: &schema.GitHubConnection{
@@ -541,13 +516,7 @@ func TestGithubSource_ListRepos(t *testing.T) {
 		}
 	}
 
-	testCases := []struct {
-		name   string
-		assert ReposAssertion
-		mw     httpcli.Middleware
-		conf   *schema.GitHubConnection
-		err    string
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{
 			name: "found",
 			assert: assertAllReposListed([]string{
diff --git a/cmd/repo-updater/repos/gitlab.go b/cmd/repo-updater/repos/gitlab.go
index 252dc0d..0f6308b 100644
--- a/cmd/repo-updater/repos/gitlab.go
+++ b/cmd/repo-updater/repos/gitlab.go
@@ -22,14 +22,7 @@ import (
 
 // A GitLabSource yields repositories from a single GitLab connection configured
 // in Sourcegraph via the external services configuration.
-type GitLabSource struct {
-	svc                 *ExternalService
-	config              *schema.GitLabConnection
-	exclude             excludeFunc
-	baseURL             *url.URL // URL with path /api/v4 (no trailing slash)
-	nameTransformations reposource.NameTransformations
-	client              *gitlab.Client
-}
+type GitLabSource struct { /* all structs must go */ }
 
 // NewGitLabSource returns a new GitLabSource from the given external service.
 func NewGitLabSource(svc *ExternalService, cf *httpcli.Factory) (*GitLabSource, error) {
@@ -166,10 +159,7 @@ func (s *GitLabSource) excludes(p *gitlab.Project) bool {
 }
 
 func (s *GitLabSource) listAllProjects(ctx context.Context, results chan SourceResult) {
-	type batch struct {
-		projs []*gitlab.Project
-		err   error
-	}
+	type batch struct { /* all structs must go */ }
 
 	ch := make(chan batch)
 
diff --git a/cmd/repo-updater/repos/gitlab_test.go b/cmd/repo-updater/repos/gitlab_test.go
index cc8b81c..ce639c7 100644
--- a/cmd/repo-updater/repos/gitlab_test.go
+++ b/cmd/repo-updater/repos/gitlab_test.go
@@ -24,12 +24,7 @@ import (
 )
 
 func TestProjectQueryToURL(t *testing.T) {
-	tests := []struct {
-		projectQuery string
-		perPage      int
-		expURL       string
-		expErr       error
-	}{{
+	tests := []struct { /* all structs must go */ }{{
 		projectQuery: "?membership=true",
 		perPage:      100,
 		expURL:       "projects?membership=true&per_page=100",
@@ -68,12 +63,7 @@ func TestProjectQueryToURL(t *testing.T) {
 }
 
 func TestGitLabSource_GetRepo(t *testing.T) {
-	testCases := []struct {
-		name                 string
-		projectWithNamespace string
-		assert               func(*testing.T, *Repo)
-		err                  string
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{
 			name:                 "not found",
 			projectWithNamespace: "foobarfoobarfoobar/please-let-this-not-exist",
@@ -174,10 +164,7 @@ func TestGitLabSource_makeRepo(t *testing.T) {
 
 	svc := ExternalService{ID: 1, Kind: extsvc.KindGitLab}
 
-	tests := []struct {
-		name   string
-		schmea *schema.GitLabConnection
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "simple",
 			schmea: &schema.GitLabConnection{
@@ -739,13 +726,7 @@ func (d *panicDoer) Do(r *http.Request) (*http.Response, error) {
 	panic("this function should not be called; a mock must be missing")
 }
 
-type gitLabChangesetSourceTestProvider struct {
-	changeset *Changeset
-	ctx       context.Context
-	mr        *gitlab.MergeRequest
-	source    *GitLabSource
-	t         *testing.T
-}
+type gitLabChangesetSourceTestProvider struct { /* all structs must go */ }
 
 // newGitLabChangesetSourceTestProvider provides a set of useful pre-canned
 // objects, along with a handful of methods to mock underlying
diff --git a/cmd/repo-updater/repos/gitolite.go b/cmd/repo-updater/repos/gitolite.go
index af53e36..9a251ac 100644
--- a/cmd/repo-updater/repos/gitolite.go
+++ b/cmd/repo-updater/repos/gitolite.go
@@ -21,14 +21,7 @@ import (
 
 // A GitoliteSource yields repositories from a single Gitolite connection configured
 // in Sourcegraph via the external services configuration.
-type GitoliteSource struct {
-	svc  *ExternalService
-	conn *schema.GitoliteConnection
-	// We ask gitserver to talk to gitolite because it holds the ssh keys
-	// required for authentication.
-	cli     *gitserver.Client
-	exclude excludeFunc
-}
+type GitoliteSource struct { /* all structs must go */ }
 
 // NewGitoliteSource returns a new GitoliteSource from the given external service.
 func NewGitoliteSource(svc *ExternalService, cf *httpcli.Factory) (*GitoliteSource, error) {
@@ -120,11 +113,7 @@ func (s GitoliteSource) makeRepo(repo *gitolite.Repo) *Repo {
 // repo links can still be the built-in Phabricator ones, as is usually expected by customers that rely on code
 // intelligence. With a Phabricator integration similar to all other code hosts, we could remove all of the special code
 // paths for Phabricator everywhere as well as the `phabricator_repo` table.
-type GitolitePhabricatorMetadataSyncer struct {
-	sem     *semaphore.Weighted // Only one sync at a time, like it was done before.
-	counter int64               // Only sync every 10th time, like it was done before.
-	store   Store               // Use to load the external services that yielded a given repo.
-}
+type GitolitePhabricatorMetadataSyncer struct { /* all structs must go */ }
 
 // NewGitolitePhabricatorMetadataSyncer returns a GitolitePhabricatorMetadataSyncer with
 // the given parameters.
diff --git a/cmd/repo-updater/repos/integration_test.go b/cmd/repo-updater/repos/integration_test.go
index b22f977..cd8aafd 100644
--- a/cmd/repo-updater/repos/integration_test.go
+++ b/cmd/repo-updater/repos/integration_test.go
@@ -43,10 +43,7 @@ func TestIntegration(t *testing.T) {
 		trace.Tracer{Tracer: opentracing.GlobalTracer()},
 	)
 
-	for _, tc := range []struct {
-		name string
-		test func(*testing.T)
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{"DBStore/Transact", testDBStoreTransact(dbstore)},
 		{"DBStore/ListExternalServices", testStoreListExternalServices(store)},
 		{"DBStore/ListExternalServices/ByRepo", testStoreListExternalServicesByRepos(store)},
diff --git a/cmd/repo-updater/repos/observability.go b/cmd/repo-updater/repos/observability.go
index 2f8c973..0b854ed 100644
--- a/cmd/repo-updater/repos/observability.go
+++ b/cmd/repo-updater/repos/observability.go
@@ -28,16 +28,10 @@ func ObservedSource(l logging.ErrorLogger, m SourceMetrics) func(Source) Source
 
 // An observedSource wraps another Source with error logging,
 // Prometheus metrics and tracing.
-type observedSource struct {
-	Source
-	metrics SourceMetrics
-	log     logging.ErrorLogger
-}
+type observedSource struct { /* all structs must go */ }
 
 // SourceMetrics encapsulates the Prometheus metrics of a Source.
-type SourceMetrics struct {
-	ListRepos *metrics.OperationMetrics
-}
+type SourceMetrics struct { /* all structs must go */ }
 
 // MustRegister registers all metrics in SourceMetrics in the given
 // prometheus.Registerer. It panics in case of failure.
@@ -115,26 +109,10 @@ func NewObservedStore(
 
 // An ObservedStore wraps another Store with error logging,
 // Prometheus metrics and tracing.
-type ObservedStore struct {
-	store   Store
-	log     logging.ErrorLogger
-	metrics StoreMetrics
-	tracer  trace.Tracer
-	txtrace *trace.Trace
-	txctx   context.Context
-}
+type ObservedStore struct { /* all structs must go */ }
 
 // StoreMetrics encapsulates the Prometheus metrics of a Store.
-type StoreMetrics struct {
-	Transact               *metrics.OperationMetrics
-	Done                   *metrics.OperationMetrics
-	UpsertRepos            *metrics.OperationMetrics
-	ListRepos              *metrics.OperationMetrics
-	UpsertExternalServices *metrics.OperationMetrics
-	ListExternalServices   *metrics.OperationMetrics
-	SetClonedRepos         *metrics.OperationMetrics
-	CountNotClonedRepos    *metrics.OperationMetrics
-}
+type StoreMetrics struct { /* all structs must go */ }
 
 // MustRegister registers all metrics in StoreMetrics in the given
 // prometheus.Registerer. It panics in case of failure.
diff --git a/cmd/repo-updater/repos/other.go b/cmd/repo-updater/repos/other.go
index beb69db..253fa14 100644
--- a/cmd/repo-updater/repos/other.go
+++ b/cmd/repo-updater/repos/other.go
@@ -19,11 +19,7 @@ import (
 
 // A OtherSource yields repositories from a single Other connection configured
 // in Sourcegraph via the external services configuration.
-type OtherSource struct {
-	svc    *ExternalService
-	conn   *schema.OtherExternalServiceConnection
-	client httpcli.Doer
-}
+type OtherSource struct { /* all structs must go */ }
 
 // NewOtherSource returns a new OtherSource from the given external service.
 func NewOtherSource(svc *ExternalService, cf *httpcli.Factory) (*OtherSource, error) {
@@ -159,9 +155,7 @@ func (s OtherSource) srcExpose(ctx context.Context) ([]*Repo, error) {
 		return nil, errors.Wrap(err, "failed to read response from src-expose")
 	}
 
-	var data struct {
-		Items []*Repo
-	}
+	var data struct { /* all structs must go */ }
 	err = json.Unmarshal(b, &data)
 	if err != nil {
 		return nil, errors.Wrapf(err, "failed to decode response from src-expose: %s", string(b))
diff --git a/cmd/repo-updater/repos/other_test.go b/cmd/repo-updater/repos/other_test.go
index 78dddd3..9bfcfaa 100644
--- a/cmd/repo-updater/repos/other_test.go
+++ b/cmd/repo-updater/repos/other_test.go
@@ -25,12 +25,7 @@ func TestSrcExpose(t *testing.T) {
 	}))
 	defer s.Close()
 
-	cases := []struct {
-		name string
-		body string
-		want []*Repo
-		err  string
-	}{{
+	cases := []struct { /* all structs must go */ }{{
 		name: "error",
 		body: "boom",
 		err:  "failed to decode response from src-expose: boom",
diff --git a/cmd/repo-updater/repos/phabricator.go b/cmd/repo-updater/repos/phabricator.go
index 28f0d72..3e4ad77 100644
--- a/cmd/repo-updater/repos/phabricator.go
+++ b/cmd/repo-updater/repos/phabricator.go
@@ -18,14 +18,7 @@ import (
 
 // A PhabricatorSource yields repositories from a single Phabricator connection configured
 // in Sourcegraph via the external services configuration.
-type PhabricatorSource struct {
-	svc  *ExternalService
-	conn *schema.PhabricatorConnection
-	cf   *httpcli.Factory
-
-	mu  sync.Mutex
-	cli *phabricator.Client
-}
+type PhabricatorSource struct { /* all structs must go */ }
 
 // NewPhabricatorSource returns a new PhabricatorSource from the given external service.
 func NewPhabricatorSource(svc *ExternalService, cf *httpcli.Factory) (*PhabricatorSource, error) {
@@ -98,9 +91,7 @@ func (s *PhabricatorSource) makeRepo(repo *phabricator.Repo) (*Repo, error) {
 	}
 
 	var cloneURL string
-	for _, alt := range [...]struct {
-		protocol, identifier string
-	}{ // Ordered by priority.
+	for _, alt := range [...]struct { /* all structs must go */ }{ // Ordered by priority.
 		{"https", "shortname"},
 		{"https", "callsign"},
 		{"https", "id"},
diff --git a/cmd/repo-updater/repos/scheduler.go b/cmd/repo-updater/repos/scheduler.go
index 6ef7293..5ac7779 100644
--- a/cmd/repo-updater/repos/scheduler.go
+++ b/cmd/repo-updater/repos/scheduler.go
@@ -17,10 +17,7 @@ import (
 )
 
 // schedulerConfig tracks the active scheduler configuration.
-type schedulerConfig struct {
-	running               bool
-	autoGitUpdatesEnabled bool
-}
+type schedulerConfig struct { /* all structs must go */ }
 
 // RunScheduler runs the worker that schedules git fetches of synced repositories in git-server.
 func RunScheduler(ctx context.Context, scheduler *updateScheduler) {
@@ -94,19 +91,12 @@ const (
 //
 // A worker continuously dequeues repos and sends updates to gitserver, but its concurrency
 // is limited by the gitMaxConcurrentClones site configuration.
-type updateScheduler struct {
-	updateQueue *updateQueue
-	schedule    *schedule
-}
+type updateScheduler struct { /* all structs must go */ }
 
 // A configuredRepo represents the configuration data for a given repo from
 // a configuration source, such as information retrieved from GitHub for a
 // given GitHubConnection.
-type configuredRepo struct {
-	URL  string
-	ID   api.RepoID
-	Name api.RepoName
-}
+type configuredRepo struct { /* all structs must go */ }
 
 // notifyChanBuffer controls the buffer size of notification channels.
 // It is important that this value is 1 so that we can perform lossless
@@ -336,11 +326,7 @@ func (s *updateScheduler) UpdateOnce(id api.RepoID, name api.RepoName, url strin
 
 // DebugDump returns the state of the update scheduler for debugging.
 func (s *updateScheduler) DebugDump() interface{} {
-	data := struct {
-		Name        string
-		UpdateQueue []*repoUpdate
-		Schedule    []*scheduledRepoUpdate
-	}{
+	data := struct { /* all structs must go */ }{
 		Name: "repos",
 	}
 
@@ -415,19 +401,7 @@ func (s *updateScheduler) ScheduleInfo(id api.RepoID) *protocol.RepoUpdateSchedu
 
 // updateQueue is a priority queue of repos to update.
 // A repo can't have more than one location in the queue.
-type updateQueue struct {
-	mu sync.Mutex
-
-	heap  []*repoUpdate
-	index map[api.RepoID]*repoUpdate
-
-	seq uint64
-
-	// The queue performs a non-blocking send on this channel
-	// when a new value is enqueued so that the update loop
-	// can wake up if it is idle.
-	notifyEnqueue chan struct{}
-}
+type updateQueue struct { /* all structs must go */ }
 
 type priority int
 
@@ -437,13 +411,7 @@ const (
 )
 
 // repoUpdate is a repository that has been queued for an update.
-type repoUpdate struct {
-	Repo     configuredRepo
-	Priority priority
-	Seq      uint64 // the sequence number of the update
-	Updating bool   // whether the repo has been acquired for update
-	Index    int    `json:"-"` // the index in the heap
-}
+type repoUpdate struct { /* all structs must go */ }
 
 func (q *updateQueue) reset() {
 	q.mu.Lock()
@@ -590,24 +558,10 @@ func (q *updateQueue) Pop() interface{} {
 }
 
 // schedule is the schedule of when repos get enqueued into the updateQueue.
-type schedule struct {
-	mu sync.Mutex
-
-	heap  []*scheduledRepoUpdate // min heap of scheduledRepoUpdates based on their due time.
-	index map[api.RepoID]*scheduledRepoUpdate
-
-	// timer sends a value on the wakeup channel when it is time
-	timer  *time.Timer
-	wakeup chan struct{}
-}
+type schedule struct { /* all structs must go */ }
 
 // scheduledRepoUpdate is the update schedule for a single repo.
-type scheduledRepoUpdate struct {
-	Repo     configuredRepo // the repo to update
-	Interval time.Duration  // how regularly the repo is updated
-	Due      time.Time      // the next time that the repo will be enqueued for a update
-	Index    int            `json:"-"` // the index in the heap
-}
+type scheduledRepoUpdate struct { /* all structs must go */ }
 
 // upsert inserts or updates a repo in the schedule.
 func (s *schedule) upsert(repo configuredRepo) (updated bool) {
diff --git a/cmd/repo-updater/repos/scheduler_test.go b/cmd/repo-updater/repos/scheduler_test.go
index cf7fc29..f19b8f6 100644
--- a/cmd/repo-updater/repos/scheduler_test.go
+++ b/cmd/repo-updater/repos/scheduler_test.go
@@ -28,10 +28,7 @@ func mockTime(t time.Time) {
 	}
 }
 
-type recording struct {
-	notifications       []chan struct{}
-	timeAfterFuncDelays []time.Duration
-}
+type recording struct { /* all structs must go */ }
 
 func startRecording() (*recording, func()) {
 	var r recording
@@ -63,18 +60,9 @@ func TestUpdateQueue_enqueue(t *testing.T) {
 	d := configuredRepo{ID: 4, Name: "d", URL: "d.com"}
 	e := configuredRepo{ID: 5, Name: "e", URL: "e.com"}
 
-	type enqueueCall struct {
-		repo     configuredRepo
-		priority priority
-	}
+	type enqueueCall struct { /* all structs must go */ }
 
-	tests := []struct {
-		name                  string
-		calls                 []*enqueueCall
-		acquire               int // acquire n updates before assertions
-		expectedUpdates       []*repoUpdate
-		expectedNotifications int
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "enqueue low priority",
 			calls: []*enqueueCall{
@@ -301,17 +289,9 @@ func TestUpdateQueue_remove(t *testing.T) {
 	b := configuredRepo{ID: 2, Name: "b", URL: "b.com"}
 	c := configuredRepo{ID: 3, Name: "c", URL: "c.com"}
 
-	type removeCall struct {
-		repo     configuredRepo
-		updating bool
-	}
+	type removeCall struct { /* all structs must go */ }
 
-	tests := []struct {
-		name         string
-		initialQueue []*repoUpdate
-		removeCalls  []*removeCall
-		finalQueue   []*repoUpdate
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "remove only",
 			initialQueue: []*repoUpdate{
@@ -460,12 +440,7 @@ func TestUpdateQueue_acquireNext(t *testing.T) {
 	a := configuredRepo{ID: 1, Name: "a", URL: "a.com"}
 	b := configuredRepo{ID: 2, Name: "b", URL: "b.com"}
 
-	tests := []struct {
-		name           string
-		initialQueue   []*repoUpdate
-		acquireResults []*configuredRepo
-		finalQueue     []*repoUpdate
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:           "acquire from empty queue returns nil",
 			acquireResults: []*configuredRepo{nil},
@@ -560,14 +535,7 @@ func Test_updateScheduler_UpdateFromDiff(t *testing.T) {
 	a := configuredRepo{ID: 1, Name: "a", URL: "a.com"}
 	b := configuredRepo{ID: 2, Name: "b", URL: "b.com"}
 
-	tests := []struct {
-		name            string
-		initialSchedule []*scheduledRepoUpdate
-		initialQueue    []*repoUpdate
-		diff            Diff
-		finalSchedule   []*scheduledRepoUpdate
-		finalQueue      []*repoUpdate
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "diff with deleted repos",
 			initialSchedule: []*scheduledRepoUpdate{
@@ -665,19 +633,9 @@ func TestSchedule_upsert(t *testing.T) {
 	a2 := configuredRepo{ID: 1, Name: "a2", URL: "a2.com"}
 	b := configuredRepo{ID: 2, Name: "b", URL: "b.com"}
 
-	type upsertCall struct {
-		time time.Time
-		repo configuredRepo
-	}
+	type upsertCall struct { /* all structs must go */ }
 
-	tests := []struct {
-		name                string
-		initialSchedule     []*scheduledRepoUpdate
-		upsertCalls         []*upsertCall
-		finalSchedule       []*scheduledRepoUpdate
-		timeAfterFuncDelays []time.Duration
-		wakeupNotifications int
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "upsert empty schedule",
 			upsertCalls: []*upsertCall{
@@ -849,20 +807,9 @@ func TestSchedule_updateInterval(t *testing.T) {
 	d := configuredRepo{ID: 4, Name: "d", URL: "d.com"}
 	e := configuredRepo{ID: 5, Name: "e", URL: "e.com"}
 
-	type updateCall struct {
-		time     time.Time
-		repo     configuredRepo
-		interval time.Duration
-	}
+	type updateCall struct { /* all structs must go */ }
 
-	tests := []struct {
-		name                string
-		initialSchedule     []*scheduledRepoUpdate
-		updateCalls         []*updateCall
-		finalSchedule       []*scheduledRepoUpdate
-		timeAfterFuncDelays []time.Duration
-		wakeupNotifications int
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "update has no effect if repo isn't in schedule",
 			updateCalls: []*updateCall{
@@ -1025,19 +972,9 @@ func TestSchedule_remove(t *testing.T) {
 	b := configuredRepo{ID: 2, Name: "b", URL: "b.com"}
 	c := configuredRepo{ID: 3, Name: "c", URL: "c.com"}
 
-	type removeCall struct {
-		time time.Time
-		repo configuredRepo
-	}
+	type removeCall struct { /* all structs must go */ }
 
-	tests := []struct {
-		name                string
-		initialSchedule     []*scheduledRepoUpdate
-		removeCalls         []*removeCall
-		finalSchedule       []*scheduledRepoUpdate
-		timeAfterFuncDelays []time.Duration
-		wakeupNotifications int
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "remove on empty schedule",
 			removeCalls: []*removeCall{
@@ -1164,14 +1101,7 @@ func TestUpdateScheduler_runSchedule(t *testing.T) {
 	d := configuredRepo{ID: 4, Name: "d", URL: "d.com"}
 	e := configuredRepo{ID: 5, Name: "e", URL: "e.com"}
 
-	tests := []struct {
-		name                  string
-		initialSchedule       []*scheduledRepoUpdate
-		finalSchedule         []*scheduledRepoUpdate
-		finalQueue            []*repoUpdate
-		timeAfterFuncDelays   []time.Duration
-		expectedNotifications func(s *updateScheduler) []chan struct{}
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "empty schedule",
 		},
@@ -1284,23 +1214,9 @@ func TestUpdateScheduler_runUpdateLoop(t *testing.T) {
 	b := configuredRepo{ID: 2, Name: "b", URL: "b.com"}
 	c := configuredRepo{ID: 3, Name: "c", URL: "c.com"}
 
-	type mockRequestRepoUpdate struct {
-		repo configuredRepo
-		resp *gitserverprotocol.RepoUpdateResponse
-		err  error
-	}
+	type mockRequestRepoUpdate struct { /* all structs must go */ }
 
-	tests := []struct {
-		name                   string
-		gitMaxConcurrentClones int
-		initialSchedule        []*scheduledRepoUpdate
-		initialQueue           []*repoUpdate
-		mockRequestRepoUpdates []*mockRequestRepoUpdate
-		finalSchedule          []*scheduledRepoUpdate
-		finalQueue             []*repoUpdate
-		timeAfterFuncDelays    []time.Duration
-		expectedNotifications  func(s *updateScheduler) []chan struct{}
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "empty queue",
 		},
@@ -1460,11 +1376,7 @@ func timePtr(t time.Time) *time.Time {
 
 func Test_updateQueue_Less(t *testing.T) {
 	q := &updateQueue{}
-	tests := []struct {
-		name   string
-		heap   []*repoUpdate
-		expVal bool
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "updating",
 			heap: []*repoUpdate{
diff --git a/cmd/repo-updater/repos/sources.go b/cmd/repo-updater/repos/sources.go
index fd17c92..a4ca5e1 100644
--- a/cmd/repo-updater/repos/sources.go
+++ b/cmd/repo-updater/repos/sources.go
@@ -118,9 +118,7 @@ type ChangesetSource interface {
 
 // ChangesetsNotFoundError is returned by LoadChangesets if any of the passed
 // Changesets could not be found on the codehost.
-type ChangesetsNotFoundError struct {
-	Changesets []*Changeset
-}
+type ChangesetsNotFoundError struct { /* all structs must go */ }
 
 func (e ChangesetsNotFoundError) Error() string {
 	if len(e.Changesets) == 1 {
@@ -140,19 +138,9 @@ func (e ChangesetsNotFoundError) Error() string {
 
 // A SourceResult is sent by a Source over a channel for each repository it
 // yields when listing repositories
-type SourceResult struct {
-	// Source points to the Source that produced this result
-	Source Source
-	// Repo is the repository that was listed by the Source
-	Repo *Repo
-	// Err is only set in case the Source ran into an error when listing repositories
-	Err error
-}
+type SourceResult struct { /* all structs must go */ }
 
-type SourceError struct {
-	Err    error
-	ExtSvc *ExternalService
-}
+type SourceError struct { /* all structs must go */ }
 
 func (s *SourceError) Error() string {
 	if multiErr, ok := s.Err.(*multierror.Error); ok {
diff --git a/cmd/repo-updater/repos/sources_test.go b/cmd/repo-updater/repos/sources_test.go
index de66739..a3f465d 100644
--- a/cmd/repo-updater/repos/sources_test.go
+++ b/cmd/repo-updater/repos/sources_test.go
@@ -63,12 +63,7 @@ func TestNewSourcer(t *testing.T) {
 		return srcs
 	}
 
-	for _, tc := range []struct {
-		name string
-		svcs ExternalServices
-		srcs Sources
-		err  string
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{
 			name: "deleted external services are excluded",
 			svcs: ExternalServices{&github, &gitlab},
@@ -102,13 +97,7 @@ func TestSources_ListRepos(t *testing.T) {
 	})
 	defer conf.Mock(nil)
 
-	type testCase struct {
-		name   string
-		ctx    context.Context
-		svcs   ExternalServices
-		assert func(*ExternalService) ReposAssertion
-		err    string
-	}
+	type testCase struct { /* all structs must go */ }
 
 	var testCases []testCase
 
@@ -214,9 +203,7 @@ func TestSources_ListRepos(t *testing.T) {
 						t.Fatal(err)
 					}
 
-					type excluded struct {
-						name, id, pattern string
-					}
+					type excluded struct { /* all structs must go */ }
 
 					var ex []excluded
 					switch cfg := c.(type) {
diff --git a/cmd/repo-updater/repos/store.go b/cmd/repo-updater/repos/store.go
index a27ac24..b9b7638 100644
--- a/cmd/repo-updater/repos/store.go
+++ b/cmd/repo-updater/repos/store.go
@@ -34,40 +34,13 @@ type Store interface {
 
 // StoreListReposArgs is a query arguments type used by
 // the ListRepos method of Store implementations.
-type StoreListReposArgs struct {
-	// Names of repos to list. When zero-valued, this is omitted from the predicate set.
-	Names []string
-	// IDs of repos to list. When zero-valued, this is omitted from the predicate set.
-	IDs []api.RepoID
-	// Kinds of repos to list. When zero-valued, this is omitted from the predicate set.
-	Kinds []string
-	// ExternalRepos of repos to list. When zero-valued, this is omitted from the predicate set.
-	ExternalRepos []api.ExternalRepoSpec
-	// Limit the total number of repos returned. Zero means no limit
-	Limit int64
-	// PerPage determines the number of repos returned on each page. Zero means it defaults to 10000.
-	PerPage int64
-	// Only include private repositories.
-	PrivateOnly bool
-	// Only include cloned repositories.
-	ClonedOnly bool
-
-	// UseOr decides between ANDing or ORing the predicates together.
-	UseOr bool
-}
+type StoreListReposArgs struct { /* all structs must go */ }
 
 // StoreListExternalServicesArgs is a query arguments type used by
 // the ListExternalServices method of Store implementations.
 //
 // Each defined argument must map to a disjunct (i.e. AND) filter predicate.
-type StoreListExternalServicesArgs struct {
-	// IDs of external services to list. When zero-valued, this is omitted from the predicate set.
-	IDs []int64
-	// RepoIDs that the listed external services own.
-	RepoIDs []api.RepoID
-	// Kinds of external services to list. When zero-valued, this is omitted from the predicate set.
-	Kinds []string
-}
+type StoreListExternalServicesArgs struct { /* all structs must go */ }
 
 // ErrNoResults is returned by Store method invocations that yield no result set.
 var ErrNoResults = errors.New("store: no results")
@@ -89,10 +62,7 @@ type TxStore interface {
 
 // DBStore implements the Store interface for reading and writing repos directly
 // from the Postgres database.
-type DBStore struct {
-	db     dbutil.DB
-	txOpts sql.TxOptions
-}
+type DBStore struct { /* all structs must go */ }
 
 // NewDBStore instantiates and returns a new DBStore with prepared statements.
 func NewDBStore(db dbutil.DB, txOpts sql.TxOptions) *DBStore {
@@ -536,11 +506,7 @@ func (s *DBStore) UpsertRepos(ctx context.Context, repos ...*Repo) (err error) {
 		}
 	}
 
-	for _, op := range []struct {
-		name  string
-		query string
-		repos []*Repo
-	}{
+	for _, op := range []struct { /* all structs must go */ }{
 		{"delete", deleteReposQuery, deletes},
 		{"update", updateReposQuery, updates},
 		{"insert", insertReposQuery, inserts},
@@ -598,24 +564,7 @@ func (s *DBStore) UpsertRepos(ctx context.Context, repos ...*Repo) (err error) {
 }
 
 func batchReposQuery(fmtstr string, repos []*Repo) (_ *sqlf.Query, err error) {
-	type record struct {
-		ID                  api.RepoID      `json:"id"`
-		Name                string          `json:"name"`
-		URI                 *string         `json:"uri,omitempty"`
-		Description         string          `json:"description"`
-		Language            string          `json:"language"`
-		CreatedAt           time.Time       `json:"created_at"`
-		UpdatedAt           *time.Time      `json:"updated_at,omitempty"`
-		DeletedAt           *time.Time      `json:"deleted_at,omitempty"`
-		ExternalServiceType *string         `json:"external_service_type,omitempty"`
-		ExternalServiceID   *string         `json:"external_service_id,omitempty"`
-		ExternalID          *string         `json:"external_id,omitempty"`
-		Archived            bool            `json:"archived"`
-		Fork                bool            `json:"fork"`
-		Private             bool            `json:"private"`
-		Sources             json.RawMessage `json:"sources"`
-		Metadata            json.RawMessage `json:"metadata"`
-	}
+	type record struct { /* all structs must go */ }
 
 	records := make([]record, 0, len(repos))
 	for _, r := range repos {
diff --git a/cmd/repo-updater/repos/store_test.go b/cmd/repo-updater/repos/store_test.go
index 0e661ff..b7287fa 100644
--- a/cmd/repo-updater/repos/store_test.go
+++ b/cmd/repo-updater/repos/store_test.go
@@ -32,10 +32,7 @@ func TestFakeStore(t *testing.T) {
 	lg := log15.New()
 	lg.SetHandler(log15.DiscardHandler())
 
-	for _, tc := range []struct {
-		name string
-		test func(repos.Store) func(*testing.T)
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{"ListExternalServices", testStoreListExternalServices},
 		{"UpsertExternalServices", testStoreUpsertExternalServices},
 		{"ListRepos", testStoreListRepos},
@@ -207,13 +204,7 @@ func testStoreListExternalServices(store repos.Store) func(*testing.T) {
 		&phabricatorService,
 	}
 
-	type testCase struct {
-		name   string
-		args   func(stored repos.ExternalServices) repos.StoreListExternalServicesArgs
-		stored repos.ExternalServices
-		assert repos.ExternalServicesAssertion
-		err    error
-	}
+	type testCase struct { /* all structs must go */ }
 
 	var testCases []testCase
 	testCases = append(testCases,
@@ -1128,13 +1119,7 @@ func testStoreListRepos(store repos.Store) func(*testing.T) {
 		extsvc.KindGitolite,
 	}
 
-	type testCase struct {
-		name   string
-		args   func(stored repos.Repos) repos.StoreListReposArgs
-		stored repos.Repos
-		repos  repos.ReposAssertion
-		err    error
-	}
+	type testCase struct { /* all structs must go */ }
 
 	var testCases []testCase
 	{
@@ -1444,11 +1429,7 @@ func transact(ctx context.Context, s repos.Store, test func(testing.TB, repos.St
 	}
 }
 
-type noopTxStore struct {
-	testing.TB
-	repos.Store
-	count int
-}
+type noopTxStore struct { /* all structs must go */ }
 
 func (tx *noopTxStore) Transact(context.Context) (repos.TxStore, error) {
 	if tx.count != 0 {
diff --git a/cmd/repo-updater/repos/syncer.go b/cmd/repo-updater/repos/syncer.go
index 93ec68a..ec26101 100644
--- a/cmd/repo-updater/repos/syncer.go
+++ b/cmd/repo-updater/repos/syncer.go
@@ -17,34 +17,7 @@ import (
 
 // A Syncer periodically synchronizes available repositories from all its given Sources
 // with the stored Repositories in Sourcegraph.
-type Syncer struct {
-	Store   Store
-	Sourcer Sourcer
-
-	// FailFullSync prevents Sync from running. This should only be true for
-	// Sourcegraph.com
-	FailFullSync bool
-
-	// Synced is sent a collection of Repos that were synced by Sync (only if Synced is non-nil)
-	Synced chan Diff
-
-	// SubsetSynced is sent a collection of Repos that were synced by SubsetSync (only if SubsetSynced is non-nil)
-	SubsetSynced chan Diff
-
-	// Logger if non-nil is logged to.
-	Logger log15.Logger
-
-	// Now is time.Now. Can be set by tests to get deterministic output.
-	Now func() time.Time
-
-	// lastSyncErr contains the last error returned by the Sourcer in each
-	// Sync. It's reset with each Sync and if the sync produced no error, it's
-	// set to nil.
-	lastSyncErr   error
-	lastSyncErrMu sync.Mutex
-
-	syncSignal signal
-}
+type Syncer struct { /* all structs must go */ }
 
 // Run runs the Sync at the specified interval.
 func (s *Syncer) Run(pctx context.Context, interval func() time.Duration) error {
@@ -279,12 +252,7 @@ func (s *Syncer) initialUnmodifiedDiffFromStore(ctx context.Context) {
 
 // Diff is the difference found by a sync between what is in the store and
 // what is returned from sources.
-type Diff struct {
-	Added      Repos
-	Deleted    Repos
-	Modified   Repos
-	Unmodified Repos
-}
+type Diff struct { /* all structs must go */ }
 
 // Sort sorts all Diff elements by Repo.IDs.
 func (d *Diff) Sort() {
@@ -495,10 +463,7 @@ func (s *Syncer) observe(ctx context.Context, family, title string) (context.Con
 	}
 }
 
-type signal struct {
-	once sync.Once
-	c    chan struct{}
-}
+type signal struct { /* all structs must go */ }
 
 func (s *signal) init() {
 	s.once.Do(func() {
diff --git a/cmd/repo-updater/repos/syncer_test.go b/cmd/repo-updater/repos/syncer_test.go
index 94b5670..adacfbc 100644
--- a/cmd/repo-updater/repos/syncer_test.go
+++ b/cmd/repo-updater/repos/syncer_test.go
@@ -31,12 +31,7 @@ func TestSyncer_Sync(t *testing.T) {
 	github := repos.ExternalService{ID: 1, Kind: extsvc.KindGitHub}
 	gitlab := repos.ExternalService{ID: 2, Kind: extsvc.KindGitLab}
 
-	for _, tc := range []struct {
-		name    string
-		sourcer repos.Sourcer
-		store   repos.Store
-		err     string
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{
 			name:    "sourcer error aborts sync",
 			sourcer: repos.NewFakeSourcer(errors.New("boom")),
@@ -210,22 +205,10 @@ func testSyncerSync(s repos.Store) func(*testing.T) {
 
 	clock := repos.NewFakeClock(time.Now(), 0)
 
-	type testCase struct {
-		name    string
-		sourcer repos.Sourcer
-		store   repos.Store
-		stored  repos.Repos
-		ctx     context.Context
-		now     func() time.Time
-		diff    repos.Diff
-		err     string
-	}
+	type testCase struct { /* all structs must go */ }
 
 	var testCases []testCase
-	for _, tc := range []struct {
-		repo *repos.Repo
-		svc  *repos.ExternalService
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{repo: githubRepo, svc: githubService},
 		{repo: gitlabRepo, svc: gitlabService},
 		{repo: bitbucketServerRepo, svc: bitbucketServerService},
@@ -616,12 +599,7 @@ func testSyncSubset(s repos.Store) func(*testing.T) {
 		},
 	}
 
-	testCases := []struct {
-		name    string
-		sourced repos.Repos
-		stored  repos.Repos
-		assert  repos.ReposAssertion
-	}{{
+	testCases := []struct { /* all structs must go */ }{{
 		name:   "no sourced",
 		stored: repos.Repos{repo.With(repos.Opt.RepoCreatedAt(clock.Time(2)))},
 		assert: repos.Assert.ReposEqual(repo.With(repos.Opt.RepoCreatedAt(clock.Time(2)))),
@@ -725,12 +703,7 @@ func TestDiff(t *testing.T) {
 	}
 	now := time.Now()
 
-	type testCase struct {
-		name   string
-		store  repos.Repos
-		source repos.Repos
-		diff   repos.Diff
-	}
+	type testCase struct { /* all structs must go */ }
 
 	cases := []testCase{
 		{
diff --git a/cmd/repo-updater/repos/testing.go b/cmd/repo-updater/repos/testing.go
index 08bb14c..92d5e03 100644
--- a/cmd/repo-updater/repos/testing.go
+++ b/cmd/repo-updater/repos/testing.go
@@ -35,11 +35,7 @@ func NewFakeSourcer(err error, srcs ...Source) Sourcer {
 }
 
 // FakeSource is a fake implementation of Source to be used in tests.
-type FakeSource struct {
-	svc   *ExternalService
-	repos []*Repo
-	err   error
-}
+type FakeSource struct { /* all structs must go */ }
 
 // NewFakeSource returns an instance of FakeSource with the given urn, error
 // and repos.
@@ -66,20 +62,7 @@ func (s FakeSource) ExternalServices() ExternalServices {
 }
 
 // FakeStore is a fake implementation of Store to be used in tests.
-type FakeStore struct {
-	ListExternalServicesError   error // error to be returned in ListExternalServices
-	UpsertExternalServicesError error // error to be returned in UpsertExternalServices
-	GetRepoByNameError          error // error to be returned in GetRepoByName
-	ListReposError              error // error to be returned in ListRepos
-	UpsertReposError            error // error to be returned in UpsertRepos
-	SetClonedReposError         error // error to be returned in SetClonedRepos
-	CountNotClonedReposError    error // error to be returned in CountNotClonedRepos
-	svcIDSeq                    int64
-	repoIDSeq                   api.RepoID
-	svcByID                     map[int64]*ExternalService
-	repoByID                    map[api.RepoID]*Repo
-	parent                      *FakeStore
-}
+type FakeStore struct { /* all structs must go */ }
 
 // Transact returns a TxStore whose methods operate within the context of a transaction.
 func (s *FakeStore) Transact(ctx context.Context) (TxStore, error) {
@@ -441,12 +424,7 @@ type ReposAssertion func(testing.TB, Repos)
 type ExternalServicesAssertion func(testing.TB, ExternalServices)
 
 // Assert contains assertion functions to be used in tests.
-var Assert = struct {
-	ReposEqual                func(...*Repo) ReposAssertion
-	ReposOrderedBy            func(func(a, b *Repo) bool) ReposAssertion
-	ExternalServicesEqual     func(...*ExternalService) ExternalServicesAssertion
-	ExternalServicesOrderedBy func(func(a, b *ExternalService) bool) ExternalServicesAssertion
-}{
+var Assert = struct { /* all structs must go */ }{
 	ReposEqual: func(rs ...*Repo) ReposAssertion {
 		want := append(Repos{}, rs...).With(Opt.RepoID(0))
 		return func(t testing.TB, have Repos) {
@@ -500,19 +478,7 @@ var Assert = struct {
 //
 
 // Opt contains functional options to be used in tests.
-var Opt = struct {
-	ExternalServiceID         func(int64) func(*ExternalService)
-	ExternalServiceModifiedAt func(time.Time) func(*ExternalService)
-	ExternalServiceDeletedAt  func(time.Time) func(*ExternalService)
-	RepoID                    func(api.RepoID) func(*Repo)
-	RepoName                  func(string) func(*Repo)
-	RepoCreatedAt             func(time.Time) func(*Repo)
-	RepoModifiedAt            func(time.Time) func(*Repo)
-	RepoDeletedAt             func(time.Time) func(*Repo)
-	RepoSources               func(...string) func(*Repo)
-	RepoMetadata              func(interface{}) func(*Repo)
-	RepoExternalID            func(string) func(*Repo)
-}{
+var Opt = struct { /* all structs must go */ }{
 	ExternalServiceID: func(n int64) func(*ExternalService) {
 		return func(e *ExternalService) {
 			e.ID = n
@@ -581,11 +547,7 @@ var Opt = struct {
 }
 
 // FakeClock provides a controllable clock for use in tests.
-type FakeClock struct {
-	epoch time.Time
-	step  time.Duration
-	steps int
-}
+type FakeClock struct { /* all structs must go */ }
 
 // NewFakeClock returns a FakeClock instance that starts telling time at the given epoch.
 // Every invocation of Now adds step amount of time to the clock.
diff --git a/cmd/repo-updater/repos/types.go b/cmd/repo-updater/repos/types.go
index 4e26085..4f6ca2a 100644
--- a/cmd/repo-updater/repos/types.go
+++ b/cmd/repo-updater/repos/types.go
@@ -28,26 +28,10 @@ import (
 )
 
 // A Changeset of an existing Repo.
-type Changeset struct {
-	Title   string
-	Body    string
-	HeadRef string
-	BaseRef string
-
-	*campaigns.Changeset
-	*Repo
-}
+type Changeset struct { /* all structs must go */ }
 
 // An ExternalService defines a Source that yields Repos.
-type ExternalService struct {
-	ID          int64
-	Kind        string
-	DisplayName string
-	Config      string
-	CreatedAt   time.Time
-	UpdatedAt   time.Time
-	DeletedAt   time.Time
-}
+type ExternalService struct { /* all structs must go */ }
 
 // URN returns a unique resource identifier of this external service,
 // used as the key in a repo's Sources map as well as the SourceInfo ID.
@@ -514,50 +498,10 @@ func (e *ExternalService) With(opts ...func(*ExternalService)) *ExternalService
 }
 
 // Repo represents a source code repository stored in Sourcegraph.
-type Repo struct {
-	// The internal Sourcegraph repo ID.
-	ID api.RepoID
-	// Name is the name for this repository (e.g., "github.com/user/repo"). It
-	// is the same as URI, unless the user configures a non-default
-	// repositoryPathPattern.
-	//
-	// Previously, this was called RepoURI.
-	Name string
-	// URI is the full name for this repository (e.g.,
-	// "github.com/user/repo"). See the documentation for the Name field.
-	URI string
-	// Description is a brief description of the repository.
-	Description string
-	// Language is the primary programming language used in this repository.
-	Language string
-	// Fork is whether this repository is a fork of another repository.
-	Fork bool
-	// Archived is whether the repository has been archived.
-	Archived bool
-	// Private is whether the repository is private.
-	Private bool
-	// Cloned is whether the repository is cloned.
-	Cloned bool
-	// CreatedAt is when this repository was created on Sourcegraph.
-	CreatedAt time.Time
-	// UpdatedAt is when this repository's metadata was last updated on Sourcegraph.
-	UpdatedAt time.Time
-	// DeletedAt is when this repository was soft-deleted from Sourcegraph.
-	DeletedAt time.Time
-	// ExternalRepo identifies this repository by its ID on the external service where it resides (and the external
-	// service itself).
-	ExternalRepo api.ExternalRepoSpec
-	// Sources identifies all the repo sources this Repo belongs to.
-	Sources map[string]*SourceInfo
-	// Metadata contains the raw source code host JSON metadata.
-	Metadata interface{}
-}
+type Repo struct { /* all structs must go */ }
 
 // A SourceInfo represents a source a Repo belongs to (such as an external service).
-type SourceInfo struct {
-	ID       string
-	CloneURL string
-}
+type SourceInfo struct { /* all structs must go */ }
 
 // ExternalServiceID returns the ID of the external service this
 // SourceInfo refers to.
@@ -937,10 +881,7 @@ func NewRateLimitSyncer(registry *ratelimit.Registry, serviceLister externalServ
 }
 
 // RateLimitSyncer syncs rate limits based on external service configuration
-type RateLimitSyncer struct {
-	registry      *ratelimit.Registry
-	serviceLister externalServiceLister
-}
+type RateLimitSyncer struct { /* all structs must go */ }
 
 // SyncRateLimiters syncs all rate limiters using current config.
 // We sync them all as we need to pick the most restrictive configured limit per code host
diff --git a/cmd/repo-updater/repos/types_test.go b/cmd/repo-updater/repos/types_test.go
index c63c4e9..1a0c96b 100644
--- a/cmd/repo-updater/repos/types_test.go
+++ b/cmd/repo-updater/repos/types_test.go
@@ -23,12 +23,7 @@ import (
 func TestExternalService_Exclude(t *testing.T) {
 	now := time.Now()
 
-	type testCase struct {
-		name   string
-		svcs   ExternalServices
-		repos  Repos
-		assert ExternalServicesAssertion
-	}
+	type testCase struct { /* all structs must go */ }
 
 	githubService := ExternalService{
 		Kind:        extsvc.KindGitHub,
@@ -515,11 +510,7 @@ func TestSyncRateLimiters(t *testing.T) {
 
 	baseURL := "http://gitlab.com/"
 
-	type limitOptions struct {
-		includeLimit bool
-		enabled      bool
-		perHour      float64
-	}
+	type limitOptions struct { /* all structs must go */ }
 
 	makeLister := func(options ...limitOptions) *MockExternalServicesLister {
 		services := make([]*ExternalService, 0, len(options))
@@ -555,11 +546,7 @@ func TestSyncRateLimiters(t *testing.T) {
 		}
 	}
 
-	for _, tc := range []struct {
-		name    string
-		options []limitOptions
-		want    rate.Limit
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{
 			name:    "No limiters defined",
 			options: []limitOptions{},
@@ -691,9 +678,7 @@ func TestSyncRateLimiters(t *testing.T) {
 	}
 }
 
-type MockExternalServicesLister struct {
-	listExternalServices func(context.Context, StoreListExternalServicesArgs) ([]*ExternalService, error)
-}
+type MockExternalServicesLister struct { /* all structs must go */ }
 
 func (m MockExternalServicesLister) ListExternalServices(ctx context.Context, args StoreListExternalServicesArgs) ([]*ExternalService, error) {
 	return m.listExternalServices(ctx, args)
diff --git a/cmd/repo-updater/repos/util_test.go b/cmd/repo-updater/repos/util_test.go
index e7c19f3..c114add 100644
--- a/cmd/repo-updater/repos/util_test.go
+++ b/cmd/repo-updater/repos/util_test.go
@@ -5,12 +5,7 @@ import (
 )
 
 func TestSetUserinfoBestEffort(t *testing.T) {
-	cases := []struct {
-		rawurl   string
-		username string
-		password string
-		want     string
-	}{
+	cases := []struct { /* all structs must go */ }{
 		// no-op
 		{"https://foo.com/foo/bar", "", "", "https://foo.com/foo/bar"},
 		// invalid name is returned as is
diff --git a/cmd/repo-updater/repoupdater/observability.go b/cmd/repo-updater/repoupdater/observability.go
index dab7cbe..7d50dbe 100644
--- a/cmd/repo-updater/repoupdater/observability.go
+++ b/cmd/repo-updater/repoupdater/observability.go
@@ -15,9 +15,7 @@ import (
 )
 
 // HandlerMetrics encapsulates the Prometheus metrics of an http.Handler.
-type HandlerMetrics struct {
-	ServeHTTP *metrics.OperationMetrics
-}
+type HandlerMetrics struct { /* all structs must go */ }
 
 // NewHandlerMetrics returns HandlerMetrics that need to be registered
 // in a Prometheus registry.
@@ -73,11 +71,7 @@ func ObservedHandler(
 	}
 }
 
-type observedHandler struct {
-	next    http.Handler
-	log     log15.Logger
-	metrics HandlerMetrics
-}
+type observedHandler struct { /* all structs must go */ }
 
 func (h *observedHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
 	rr := &responseRecorder{w, http.StatusOK, 0}
@@ -110,11 +104,7 @@ func (h *observedHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {
 	h.next.ServeHTTP(rr, r)
 }
 
-type responseRecorder struct {
-	http.ResponseWriter
-	code    int
-	written int64
-}
+type responseRecorder struct { /* all structs must go */ }
 
 // WriteHeader may not be explicitly called, so care must be taken to
 // initialize w.code to its default value of http.StatusOK.
diff --git a/cmd/repo-updater/repoupdater/server.go b/cmd/repo-updater/repoupdater/server.go
index d6e2121..f31fb96 100644
--- a/cmd/repo-updater/repoupdater/server.go
+++ b/cmd/repo-updater/repoupdater/server.go
@@ -26,42 +26,7 @@ import (
 )
 
 // Server is a repoupdater server.
-type Server struct {
-	repos.Store
-	*repos.Syncer
-	SourcegraphDotComMode bool
-	GithubDotComSource    interface {
-		GetRepo(ctx context.Context, nameWithOwner string) (*repos.Repo, error)
-	}
-	GitLabDotComSource interface {
-		GetRepo(ctx context.Context, projectWithNamespace string) (*repos.Repo, error)
-	}
-	Scheduler interface {
-		UpdateOnce(id api.RepoID, name api.RepoName, url string)
-		ScheduleInfo(id api.RepoID) *protocol.RepoUpdateSchedulerInfoResult
-	}
-	GitserverClient interface {
-		ListCloned(context.Context) ([]string, error)
-	}
-	ChangesetSyncRegistry interface {
-		// EnqueueChangesetSyncs will queue the supplied changesets to sync ASAP.
-		EnqueueChangesetSyncs(ctx context.Context, ids []int64) error
-		// HandleExternalServiceSync should be called when an external service changes so that
-		// the registry can start or stop the syncer associated with the service
-		HandleExternalServiceSync(es api.ExternalService)
-	}
-	RateLimitSyncer interface {
-		// SyncRateLimiters should be called when an external service changes so that
-		// our internal rate limiters are kept in sync
-		SyncRateLimiters(ctx context.Context) error
-	}
-	PermsSyncer interface {
-		// ScheduleUsers schedules new permissions syncing requests for given users.
-		ScheduleUsers(ctx context.Context, userIDs ...int32)
-		// ScheduleRepos schedules new permissions syncing requests for given repositories.
-		ScheduleRepos(ctx context.Context, repoIDs ...api.RepoID)
-	}
-}
+type Server struct { /* all structs must go */ }
 
 // Handler returns the http.Handler that should be used to serve requests.
 func (s *Server) Handler() http.Handler {
diff --git a/cmd/repo-updater/repoupdater/server_test.go b/cmd/repo-updater/repoupdater/server_test.go
index bc2cf7b..89d864f 100644
--- a/cmd/repo-updater/repoupdater/server_test.go
+++ b/cmd/repo-updater/repoupdater/server_test.go
@@ -220,21 +220,11 @@ func TestServer_SetRepoEnabled(t *testing.T) {
 		},
 	}).With(repos.Opt.RepoSources(bitbucketServerService.URN()))
 
-	type testCase struct {
-		name  string
-		svcs  repos.ExternalServices // stored services
-		repos repos.Repos            // stored repos
-		kind  string
-		res   *protocol.ExcludeRepoResponse
-		err   string
-	}
+	type testCase struct { /* all structs must go */ }
 
 	var testCases []testCase
 
-	for _, k := range []struct {
-		svc  *repos.ExternalService
-		repo *repos.Repo
-	}{
+	for _, k := range []struct { /* all structs must go */ }{
 		{githubService, githubRepo},
 		{bitbucketServerService, bitbucketServerRepo},
 		{gitlabService, gitlabRepo},
@@ -350,13 +340,7 @@ func TestServer_EnqueueRepoUpdate(t *testing.T) {
 
 	ctx := context.Background()
 
-	type testCase struct {
-		name  string
-		store repos.Store
-		repo  gitserver.Repo
-		res   *protocol.RepoUpdateResponse
-		err   string
-	}
+	type testCase struct { /* all structs must go */ }
 
 	var testCases []testCase
 	testCases = append(testCases,
@@ -501,12 +485,7 @@ func TestServer_RepoExternalServices(t *testing.T) {
 	must(store.UpsertExternalServices(ctx, service1, service2))
 	must(store.UpsertRepos(ctx, repoNoSources, repoSources))
 
-	testCases := []struct {
-		name   string
-		repoID api.RepoID
-		svcs   []api.ExternalService
-		err    string
-	}{{
+	testCases := []struct { /* all structs must go */ }{{
 		name:   "repo no sources",
 		repoID: repoNoSources.ID,
 		svcs:   nil,
@@ -549,15 +528,7 @@ func TestServer_StatusMessages(t *testing.T) {
 		DisplayName: "github.com - test",
 	}
 
-	testCases := []struct {
-		name            string
-		stored          repos.Repos
-		gitserverCloned []string
-		sourcerErr      error
-		listRepoErr     error
-		res             *protocol.StatusMessagesResponse
-		err             string
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{
 			name:            "all cloned",
 			gitserverCloned: []string{"foobar"},
@@ -854,16 +825,7 @@ func TestRepoLookup(t *testing.T) {
 		},
 	}
 
-	testCases := []struct {
-		name               string
-		args               protocol.RepoLookupArgs
-		stored             repos.Repos
-		result             *protocol.RepoLookupResult
-		githubDotComSource *fakeRepoSource
-		gitlabDotComSource *fakeRepoSource
-		assert             repos.ReposAssertion
-		err                string
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{
 			name: "not found",
 			args: protocol.RepoLookupArgs{
@@ -1134,10 +1096,7 @@ func TestRepoLookup(t *testing.T) {
 	}
 }
 
-type fakeRepoSource struct {
-	repo *repos.Repo
-	err  error
-}
+type fakeRepoSource struct { /* all structs must go */ }
 
 func (s *fakeRepoSource) GetRepo(context.Context, string) (*repos.Repo, error) {
 	return s.repo.Clone(), s.err
@@ -1150,9 +1109,7 @@ func (s *fakeScheduler) ScheduleInfo(id api.RepoID) *protocol.RepoUpdateSchedule
 	return &protocol.RepoUpdateSchedulerInfoResult{}
 }
 
-type fakeGitserverClient struct {
-	listClonedResponse []string
-}
+type fakeGitserverClient struct { /* all structs must go */ }
 
 func (g *fakeGitserverClient) ListCloned(ctx context.Context) ([]string, error) {
 	return g.listClonedResponse, nil
@@ -1167,13 +1124,7 @@ func (*fakePermsSyncer) ScheduleRepos(ctx context.Context, repoIDs ...api.RepoID
 }
 
 func TestServer_handleSchedulePermsSync(t *testing.T) {
-	tests := []struct {
-		name           string
-		permsSyncer    *fakePermsSyncer
-		body           string
-		wantStatusCode int
-		wantBody       string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:           "PermsSyncer not available",
 			wantStatusCode: http.StatusForbidden,
diff --git a/cmd/searcher/protocol/searcher.go b/cmd/searcher/protocol/searcher.go
index 9e7cc66..e46d3e6 100644
--- a/cmd/searcher/protocol/searcher.go
+++ b/cmd/searcher/protocol/searcher.go
@@ -10,102 +10,14 @@ import (
 )
 
 // Request represents a request to searcher
-type Request struct {
-	// Repo is the name of the repository to search. eg "github.com/gorilla/mux"
-	Repo api.RepoName
-
-	// URL specifies the repository's Git remote URL (for gitserver). It is optional. See
-	// (gitserver.ExecRequest).URL for documentation on what it is used for.
-	URL string
-
-	// Commit is which commit to search. It is required to be resolved,
-	// not a ref like HEAD or master. eg
-	// "599cba5e7b6137d46ddf58fb1765f5d928e69604"
-	Commit api.CommitID
-
-	PatternInfo
-
-	// The amount of time to wait for a repo archive to fetch.
-	// It is parsed with time.ParseDuration.
-	//
-	// This timeout should be low when searching across many repos
-	// so that unfetched repos don't delay the search, and because we are likely
-	// to get results from the repos that have already been fetched.
-	//
-	// This timeout should be high when searching across a single repo
-	// because returning results slowly is better than returning no results at all.
-	//
-	// This only times out how long we wait for the fetch request;
-	// the fetch will still happen in the background so future requests don't have to wait.
-	FetchTimeout string
-
-	// The deadline for the search request.
-	// It is parsed with time.Time.UnmarshalText.
-	Deadline string
-}
+type Request struct { /* all structs must go */ }
 
 // GitserverRepo returns the repository information necessary to perform gitserver requests.
 func (r Request) GitserverRepo() gitserver.Repo { return gitserver.Repo{Name: r.Repo} }
 
 // PatternInfo describes a search request on a repo. Most of the fields
 // are based on PatternInfo used in vscode.
-type PatternInfo struct {
-	// Pattern is the search query. It is a regular expression if IsRegExp
-	// is true, otherwise a fixed string. eg "route variable"
-	Pattern string
-
-	// IsRegExp if true will treat the Pattern as a regular expression.
-	IsRegExp bool
-
-	// IsStructuralPat if true will treat the pattern as a Comby structural search pattern.
-	IsStructuralPat bool
-
-	// IsWordMatch if true will only match the pattern at word boundaries.
-	IsWordMatch bool
-
-	// IsCaseSensitive if false will ignore the case of text and pattern
-	// when finding matches.
-	IsCaseSensitive bool
-
-	// ExcludePattern is a pattern that may not match the returned files' paths.
-	// eg '**/node_modules'
-	ExcludePattern string
-
-	// IncludePatterns is a list of patterns that must *all* match the returned
-	// files' paths.
-	// eg '**/node_modules'
-	//
-	// The patterns are ANDed together; a file's path must match all patterns
-	// for it to be kept. That is also why it is a list (unlike the singular
-	// ExcludePattern); it is not possible in general to construct a single
-	// glob or Go regexp that represents multiple such patterns ANDed together.
-	IncludePatterns []string
-
-	// IncludeExcludePatternAreRegExps indicates that ExcludePattern, IncludePattern,
-	// and IncludePatterns are regular expressions (not globs).
-	PathPatternsAreRegExps bool
-
-	// IncludeExcludePatternAreCaseSensitive indicates that ExcludePattern, IncludePattern,
-	// and IncludePatterns are case sensitive.
-	PathPatternsAreCaseSensitive bool
-
-	// FileMatchLimit limits the number of files with matches that are returned.
-	FileMatchLimit int
-
-	// PatternMatchesPath is whether the pattern should be matched against the content
-	// of files.
-	PatternMatchesContent bool
-
-	// PatternMatchesPath is whether a file whose path matches Pattern (but whose contents don't) should be
-	// considered a match.
-	PatternMatchesPath bool
-
-	// Languages is the languages passed via the lang filters (e.g., "lang:c")
-	Languages []string
-
-	// CombyRule is a rule that constrains matching for structural search. It only applies when IsStructuralPat is true.
-	CombyRule string
-}
+type PatternInfo struct { /* all structs must go */ }
 
 func (p *PatternInfo) String() string {
 	args := []string{fmt.Sprintf("%q", p.Pattern)}
@@ -156,41 +68,10 @@ func (p *PatternInfo) String() string {
 }
 
 // Response represents the response from a Search request.
-type Response struct {
-	Matches []FileMatch
-
-	// LimitHit is true if Matches may not include all FileMatches because a match limit was hit.
-	LimitHit bool
-
-	// DeadlineHit is true if Matches may not include all FileMatches because a deadline was hit.
-	DeadlineHit bool
-}
+type Response struct { /* all structs must go */ }
 
 // FileMatch is the struct used by vscode to receive search results
-type FileMatch struct {
-	Path        string
-	LineMatches []LineMatch
-	// MatchCount is the number of matches. Different from len(LineMatches), as multiple lines may correspond to one logical match.
-	MatchCount int
-
-	// LimitHit is true if LineMatches may not include all LineMatches.
-	LimitHit bool
-}
+type FileMatch struct { /* all structs must go */ }
 
 // LineMatch is the struct used by vscode to receive search results for a line.
-type LineMatch struct {
-	// Preview is the matched line.
-	Preview string
-
-	// LineNumber is the 0-based line number. Note: Our editors present
-	// 1-based line numbers, but internally vscode uses 0-based.
-	LineNumber int
-
-	// OffsetAndLengths is a slice of 2-tuples (Offset, Length)
-	// representing each match on a line.
-	// Offsets and lengths are measured in characters, not bytes.
-	OffsetAndLengths [][2]int
-
-	// LimitHit is true if OffsetAndLengths may not include all OffsetAndLengths.
-	LimitHit bool
-}
+type LineMatch struct { /* all structs must go */ }
diff --git a/cmd/searcher/search/search.go b/cmd/searcher/search/search.go
index 8987559..2aef3c6 100644
--- a/cmd/searcher/search/search.go
+++ b/cmd/searcher/search/search.go
@@ -50,10 +50,7 @@ const (
 )
 
 // Service is the search service. It is an http.Handler.
-type Service struct {
-	Store *store.Store
-	Log   log15.Logger
-}
+type Service struct { /* all structs must go */ }
 
 var decoder = schema.NewDecoder()
 
diff --git a/cmd/searcher/search/search_regex.go b/cmd/searcher/search/search_regex.go
index da57ad1..f0f1662 100644
--- a/cmd/searcher/search/search_regex.go
+++ b/cmd/searcher/search/search_regex.go
@@ -39,29 +39,7 @@ import (
 // consider using ripgrep directly (modify it to search zip archives).
 //
 // TODO(keegan) return search statistics
-type readerGrep struct {
-	// re is the regexp to match, or nil if empty ("match all files' content").
-	re *regexp.Regexp
-
-	// ignoreCase if true means we need to do case insensitive matching.
-	ignoreCase bool
-
-	// transformBuf is reused between file searches to avoid
-	// re-allocating. It is only used if we need to transform the input
-	// before matching. For example we lower case the input in the case of
-	// ignoreCase.
-	transformBuf []byte
-
-	// matchPath is compiled from the include/exclude path patterns and reports
-	// whether a file path matches (and should be searched).
-	matchPath pathmatch.PathMatcher
-
-	// literalSubstring is used to test if a file is worth considering for
-	// matches. literalSubstring is guaranteed to appear in any match found by
-	// re. It is the output of the longestLiteral function. It is only set if
-	// the regex has an empty LiteralPrefix.
-	literalSubstring []byte
-}
+type readerGrep struct { /* all structs must go */ }
 
 // compile returns a readerGrep for matching p.
 func compile(p *protocol.PatternInfo) (*readerGrep, error) {
diff --git a/cmd/searcher/search/search_regex_test.go b/cmd/searcher/search/search_regex_test.go
index 87cacfb..df9276e 100644
--- a/cmd/searcher/search/search_regex_test.go
+++ b/cmd/searcher/search/search_regex_test.go
@@ -538,21 +538,8 @@ func TestRegexSearch(t *testing.T) {
 	if err != nil {
 		t.Fatal(err)
 	}
-	type args struct {
-		ctx                   context.Context
-		rg                    *readerGrep
-		zf                    *store.ZipFile
-		fileMatchLimit        int
-		patternMatchesContent bool
-		patternMatchesPaths   bool
-	}
-	tests := []struct {
-		name         string
-		args         args
-		wantFm       []protocol.FileMatch
-		wantLimitHit bool
-		wantErr      bool
-	}{
+	type args struct { /* all structs must go */ }
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "nil re returns a FileMatch with no LineMatches",
 			args: args{
diff --git a/cmd/searcher/search/search_structural_test.go b/cmd/searcher/search/search_structural_test.go
index f8f01c6..efac74a 100644
--- a/cmd/searcher/search/search_structural_test.go
+++ b/cmd/searcher/search/search_structural_test.go
@@ -32,11 +32,7 @@ func foo(go string) {}
 		IncludePatterns: []string{"file_without_extension"},
 	}
 
-	cases := []struct {
-		Name      string
-		Languages []string
-		Want      []string
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			Name:      "Language test for no language",
 			Languages: []string{},
@@ -134,12 +130,7 @@ func foo(real string) {}
 }
 
 func TestRecordMetrics(t *testing.T) {
-	cases := []struct {
-		name            string
-		matcher         string
-		includePatterns *[]string
-		want            string
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			name:            "Empty values",
 			matcher:         "",
@@ -287,11 +278,7 @@ func TestRule(t *testing.T) {
 }
 
 func TestHighlightMultipleLines(t *testing.T) {
-	cases := []struct {
-		Name  string
-		Match *comby.Match
-		Want  []protocol.LineMatch
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			Name: "Single line",
 			Match: &comby.Match{
diff --git a/cmd/searcher/search/search_test.go b/cmd/searcher/search/search_test.go
index 00d233c..6d34f1e 100644
--- a/cmd/searcher/search/search_test.go
+++ b/cmd/searcher/search/search_test.go
@@ -47,10 +47,7 @@ func main() {
 		"milton.png": string(miltonPNG),
 	}
 
-	cases := []struct {
-		arg  protocol.PatternInfo
-		want string
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{protocol.PatternInfo{Pattern: "foo"}, ""},
 
 		{protocol.PatternInfo{Pattern: "World", IsCaseSensitive: true}, `
diff --git a/cmd/server/shared/assets/bindata.go b/cmd/server/shared/assets/bindata.go
index a2f385f..b383da8 100644
--- a/cmd/server/shared/assets/bindata.go
+++ b/cmd/server/shared/assets/bindata.go
@@ -43,18 +43,9 @@ func bindataRead(data []byte, name string) ([]byte, error) {
 	return buf.Bytes(), nil
 }
 
-type asset struct {
-	bytes  []byte
-	info   os.FileInfo
-	digest [sha256.Size]byte
-}
+type asset struct { /* all structs must go */ }
 
-type bindataFileInfo struct {
-	name    string
-	size    int64
-	mode    os.FileMode
-	modTime time.Time
-}
+type bindataFileInfo struct { /* all structs must go */ }
 
 func (fi bindataFileInfo) Name() string {
 	return fi.name
@@ -353,10 +344,7 @@ func AssetDir(name string) ([]string, error) {
 	return rv, nil
 }
 
-type bintree struct {
-	Func     func() (*asset, error)
-	Children map[string]*bintree
-}
+type bintree struct { /* all structs must go */ }
 
 var _bintree = &bintree{nil, map[string]*bintree{
 	"nginx": {nil, map[string]*bintree{
diff --git a/cmd/server/shared/copy.go b/cmd/server/shared/copy.go
index 45c1add..5cd25bb 100644
--- a/cmd/server/shared/copy.go
+++ b/cmd/server/shared/copy.go
@@ -68,14 +68,7 @@ func copySSH() error {
 
 // execer wraps exec.Command, but acts like "set -x". If a command fails, all
 // future commands will return the original error.
-type execer struct {
-	// Out if set will write the command, stdout and stderr to it
-	Out io.Writer
-	// Working directory of the command.
-	Dir string
-
-	err error
-}
+type execer struct { /* all structs must go */ }
 
 // Command creates an exec.Command connected to stdout/stderr and runs it.
 func (e *execer) Command(name string, arg ...string) {
diff --git a/cmd/server/shared/redis.go b/cmd/server/shared/redis.go
index d25d153..0b5b26c 100644
--- a/cmd/server/shared/redis.go
+++ b/cmd/server/shared/redis.go
@@ -16,13 +16,7 @@ import (
 var redisStoreConfTmpl = template.Must(template.New("redis-store.conf").Parse(assets.MustAssetString("redis-store.conf.tmpl")))
 var redisCacheConfTmpl = template.Must(template.New("redis-cache.conf").Parse(assets.MustAssetString("redis-cache.conf.tmpl")))
 
-type redisProcfileConfig struct {
-	envVar  string
-	name    string
-	port    string
-	tmpl    *template.Template
-	dataDir string
-}
+type redisProcfileConfig struct { /* all structs must go */ }
 
 func maybeRedisStoreProcFile() (string, error) {
 	return maybeRedisProcFile(redisProcfileConfig{
@@ -130,10 +124,7 @@ func redisFixAOF(rootDataDir string, c redisProcfileConfig) {
 // yesReader simulates the output of the "yes" command.
 //
 // It is equivalent to bytes.NewReader(bytes.Repeat(Expletive, infinity))
-type yesReader struct {
-	Expletive []byte
-	offset    int
-}
+type yesReader struct { /* all structs must go */ }
 
 func (r *yesReader) Read(p []byte) (int, error) {
 	if len(r.Expletive) == 0 {
diff --git a/cmd/symbols/internal/pkg/ctags/parser.go b/cmd/symbols/internal/pkg/ctags/parser.go
index 78ad803..345de55 100644
--- a/cmd/symbols/internal/pkg/ctags/parser.go
+++ b/cmd/symbols/internal/pkg/ctags/parser.go
@@ -15,19 +15,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/env"
 )
 
-type Entry struct {
-	Name       string
-	Path       string
-	Line       int
-	Kind       string
-	Language   string
-	Parent     string
-	ParentKind string
-	Pattern    string
-	Signature  string
-
-	FileLimited bool
-}
+type Entry struct { /* all structs must go */ }
 
 const debug = false
 
@@ -101,12 +89,7 @@ func New() (Parser, error) {
 	return &proc, nil
 }
 
-type ctagsProcess struct {
-	cmd     *exec.Cmd
-	in      io.WriteCloser
-	out     *scanner
-	outPipe io.ReadCloser
-}
+type ctagsProcess struct { /* all structs must go */ }
 
 func (p *ctagsProcess) Close() {
 	_ = p.cmd.Process.Kill()
@@ -160,36 +143,9 @@ func (p *ctagsProcess) post(req *request, content []byte) error {
 	return err
 }
 
-type request struct {
-	Command  string `json:"command"`
-	Filename string `json:"filename"`
-	Size     int    `json:"size"`
-}
+type request struct { /* all structs must go */ }
 
-type reply struct {
-	// Init
-	Typ     string `json:"_type"`
-	Name    string `json:"name"`
-	Version string `json:"version"`
-
-	// completed
-	Command string `json:"command"`
-
-	Path      string `json:"path"`
-	Language  string `json:"language"`
-	Line      int    `json:"line"`
-	Kind      string `json:"kind"`
-	End       int    `json:"end"`
-	Scope     string `json:"scope"`
-	ScopeKind string `json:"scopeKind"`
-	Access    string `json:"access"`
-	File      bool   `json:"file"`
-	Signature string `json:"signature"`
-	Pattern   string `json:"pattern"`
-
-	// error
-	Message string `json:"message"`
-}
+type reply struct { /* all structs must go */ }
 
 func (p *ctagsProcess) Parse(name string, content []byte) (entries []Entry, err error) {
 	req := request{
@@ -236,11 +192,7 @@ func (p *ctagsProcess) Parse(name string, content []byte) (entries []Entry, err
 // bufio.ErrTooLong.
 //
 // Additionally it will skip empty lines.
-type scanner struct {
-	r    *bufio.Reader
-	line []byte
-	err  error
-}
+type scanner struct { /* all structs must go */ }
 
 func (s *scanner) Scan() bool {
 	if s.err != nil {
diff --git a/cmd/symbols/internal/symbols/fetch.go b/cmd/symbols/internal/symbols/fetch.go
index 93cf649..1e768c1 100644
--- a/cmd/symbols/internal/symbols/fetch.go
+++ b/cmd/symbols/internal/symbols/fetch.go
@@ -14,10 +14,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/trace/ot"
 )
 
-type parseRequest struct {
-	path string
-	data []byte
-}
+type parseRequest struct { /* all structs must go */ }
 
 func (s *Service) fetchRepositoryArchive(ctx context.Context, repo api.RepoName, commitID api.CommitID) (<-chan parseRequest, <-chan error, error) {
 	fetchQueueSize.Inc()
diff --git a/cmd/symbols/internal/symbols/search.go b/cmd/symbols/internal/symbols/search.go
index 855345a..1253ad0 100644
--- a/cmd/symbols/internal/symbols/search.go
+++ b/cmd/symbols/internal/symbols/search.go
@@ -220,21 +220,7 @@ const symbolsDBVersion = 3
 // symbolInDB is the same as `protocol.Symbol`, but with two additional columns:
 // namelowercase and pathlowercase, which enable indexed case insensitive
 // queries.
-type symbolInDB struct {
-	Name          string
-	NameLowercase string // derived from `Name`
-	Path          string
-	PathLowercase string // derived from `Path`
-	Line          int
-	Kind          string
-	Language      string
-	Parent        string
-	ParentKind    string
-	Signature     string
-	Pattern       string
-
-	FileLimited bool
-}
+type symbolInDB struct { /* all structs must go */ }
 
 func symbolToSymbolInDB(symbol protocol.Symbol) symbolInDB {
 	return symbolInDB{
diff --git a/cmd/symbols/internal/symbols/service.go b/cmd/symbols/internal/symbols/service.go
index 3d1c72c..e7969fa 100644
--- a/cmd/symbols/internal/symbols/service.go
+++ b/cmd/symbols/internal/symbols/service.go
@@ -16,40 +16,7 @@ import (
 )
 
 // Service is the symbols service.
-type Service struct {
-	// FetchTar returns an io.ReadCloser to a tar archive of a repository at the specified Git
-	// remote URL and commit ID. If the error implements "BadRequest() bool", it will be used to
-	// determine if the error is a bad request (eg invalid repo).
-	FetchTar func(context.Context, gitserver.Repo, api.CommitID) (io.ReadCloser, error)
-
-	// MaxConcurrentFetchTar is the maximum number of concurrent calls allowed
-	// to FetchTar. It defaults to 15.
-	MaxConcurrentFetchTar int
-
-	NewParser func() (ctags.Parser, error)
-
-	// NumParserProcesses is the maximum number of ctags parser child processes to run.
-	NumParserProcesses int
-
-	// Path is the directory in which to store the cache.
-	Path string
-
-	// MaxCacheSizeBytes is the maximum size of the cache in bytes. Note:
-	// We can temporarily be larger than MaxCacheSizeBytes. When we go
-	// over MaxCacheSizeBytes we trigger delete files until we get below
-	// MaxCacheSizeBytes.
-	MaxCacheSizeBytes int64
-
-	// cache is the disk backed cache.
-	cache *diskcache.Store
-
-	// fetchSem is a semaphore to limit concurrent calls to FetchTar. The
-	// semaphore size is controlled by MaxConcurrentFetchTar
-	fetchSem chan int
-
-	// pool of ctags parser child processes
-	parsers chan ctags.Parser
-}
+type Service struct { /* all structs must go */ }
 
 // Start must be called before any requests are handled.
 func (s *Service) Start() error {
diff --git a/cmd/symbols/internal/symbols/service_test.go b/cmd/symbols/internal/symbols/service_test.go
index 517d4ec..1ba458a 100644
--- a/cmd/symbols/internal/symbols/service_test.go
+++ b/cmd/symbols/internal/symbols/service_test.go
@@ -25,11 +25,7 @@ func init() {
 }
 
 func TestIsLiteralEquality(t *testing.T) {
-	type TestCase struct {
-		Regex       string
-		WantOk      bool
-		WantLiteral string
-	}
+	type TestCase struct { /* all structs must go */ }
 
 	for _, test := range []TestCase{
 		{Regex: `^foo$`, WantLiteral: "foo", WantOk: true},
@@ -85,10 +81,7 @@ func TestService(t *testing.T) {
 	x := protocol.Symbol{Name: "x", Path: "a.js"}
 	y := protocol.Symbol{Name: "y", Path: "a.js"}
 
-	tests := map[string]struct {
-		args search.SymbolsParameters
-		want protocol.SearchResult
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"simple": {
 			args: search.SymbolsParameters{First: 10},
 			want: protocol.SearchResult{Symbols: []protocol.Symbol{x, y}},
diff --git a/dev/deps/main.go b/dev/deps/main.go
index 40bb073..cde441e 100644
--- a/dev/deps/main.go
+++ b/dev/deps/main.go
@@ -79,9 +79,7 @@ func getIntermediatePaths(pkg string) []string {
 	return []string{pkg}
 }
 
-type treeNode struct {
-	children map[string]*treeNode
-}
+type treeNode struct { /* all structs must go */ }
 
 func nestPaths(prefix string, pkgs []string) *treeNode {
 	nodes := map[string]*treeNode{}
@@ -117,11 +115,7 @@ func getAllImports(pkgs []string) (map[string][]string, error) {
 	}
 	close(ch)
 
-	type pair struct {
-		pkg     string
-		imports []string
-		err     error
-	}
+	type pair struct { /* all structs must go */ }
 
 	var wg sync.WaitGroup
 	pairs := make(chan pair, len(pkgs))
diff --git a/dev/gqltest/external_service_test.go b/dev/gqltest/external_service_test.go
index c522741..1734485 100644
--- a/dev/gqltest/external_service_test.go
+++ b/dev/gqltest/external_service_test.go
@@ -23,12 +23,7 @@ func TestExternalService(t *testing.T) {
 		esID, err := client.AddExternalService(gqltestutil.AddExternalServiceInput{
 			Kind:        extsvc.KindGitHub,
 			DisplayName: "gqltest-github-repoPathPattern",
-			Config: mustMarshalJSONString(struct {
-				URL                   string   `json:"url"`
-				Token                 string   `json:"token"`
-				Repos                 []string `json:"repos"`
-				RepositoryPathPattern string   `json:"repositoryPathPattern"`
-			}{
+			Config: mustMarshalJSONString(struct { /* all structs must go */ }{
 				URL:                   "http://github.com",
 				Token:                 *githubToken,
 				Repos:                 []string{repo},
@@ -75,13 +70,7 @@ func TestExternalService_AWSCodeCommit(t *testing.T) {
 	esID, err := client.AddExternalService(gqltestutil.AddExternalServiceInput{
 		Kind:        extsvc.KindAWSCodeCommit,
 		DisplayName: "gqltest-aws-code-commit",
-		Config: mustMarshalJSONString(struct {
-			Region                string            `json:"region"`
-			AccessKeyID           string            `json:"accessKeyID"`
-			SecretAccessKey       string            `json:"secretAccessKey"`
-			RepositoryPathPattern string            `json:"repositoryPathPattern"`
-			GitCredentials        map[string]string `json:"gitCredentials"`
-		}{
+		Config: mustMarshalJSONString(struct { /* all structs must go */ }{
 			Region:                "us-west-1",
 			AccessKeyID:           *awsAccessKeyID,
 			SecretAccessKey:       *awsSecretAccessKey,
@@ -128,13 +117,7 @@ func TestExternalService_BitbucketServer(t *testing.T) {
 	esID, err := client.AddExternalService(gqltestutil.AddExternalServiceInput{
 		Kind:        extsvc.KindBitbucketServer,
 		DisplayName: "gqltest-bitbucket-server",
-		Config: mustMarshalJSONString(struct {
-			URL                   string   `json:"url"`
-			Token                 string   `json:"token"`
-			Username              string   `json:"username"`
-			Repos                 []string `json:"repos"`
-			RepositoryPathPattern string   `json:"repositoryPathPattern"`
-		}{
+		Config: mustMarshalJSONString(struct { /* all structs must go */ }{
 			URL:                   *bbsURL,
 			Token:                 *bbsToken,
 			Username:              *bbsUsername,
diff --git a/dev/gqltest/organization_test.go b/dev/gqltest/organization_test.go
index ea14ca4..584814a 100644
--- a/dev/gqltest/organization_test.go
+++ b/dev/gqltest/organization_test.go
@@ -44,9 +44,7 @@ func TestOrganization(t *testing.T) {
 				t.Fatal(err)
 			}
 
-			var got struct {
-				QuickLinks []schema.QuickLink `json:"quicklinks"`
-			}
+			var got struct { /* all structs must go */ }
 			err = jsoniter.UnmarshalFromString(contents, &got)
 			if err != nil {
 				t.Fatal(err)
@@ -76,9 +74,7 @@ func TestOrganization(t *testing.T) {
 				t.Fatal(err)
 			}
 
-			var got struct {
-				QuickLinks []schema.QuickLink `json:"quicklinks"`
-			}
+			var got struct { /* all structs must go */ }
 			err = jsoniter.UnmarshalFromString(contents, &got)
 			if err != nil {
 				t.Fatal(err)
diff --git a/dev/gqltest/search_test.go b/dev/gqltest/search_test.go
index 956dea2..c365620 100644
--- a/dev/gqltest/search_test.go
+++ b/dev/gqltest/search_test.go
@@ -23,11 +23,7 @@ func TestSearch(t *testing.T) {
 	esID, err := client.AddExternalService(gqltestutil.AddExternalServiceInput{
 		Kind:        extsvc.KindGitHub,
 		DisplayName: "gqltest-github-search",
-		Config: mustMarshalJSONString(struct {
-			URL   string   `json:"url"`
-			Token string   `json:"token"`
-			Repos []string `json:"repos"`
-		}{
+		Config: mustMarshalJSONString(struct { /* all structs must go */ }{
 			URL:   "http://github.com",
 			Token: *githubToken,
 			Repos: []string{
@@ -65,10 +61,7 @@ func TestSearch(t *testing.T) {
 	}
 
 	t.Run("visibility", func(t *testing.T) {
-		tests := []struct {
-			query       string
-			wantMissing []string
-		}{
+		tests := []struct { /* all structs must go */ }{
 			{
 				query:       "type:repo visibility:private",
 				wantMissing: []string{},
@@ -205,12 +198,7 @@ func TestSearch(t *testing.T) {
 	})
 
 	t.Run("global search", func(t *testing.T) {
-		tests := []struct {
-			name          string
-			query         string
-			zeroResult    bool
-			minMatchCount int64
-		}{
+		tests := []struct { /* all structs must go */ }{
 			// Global search
 			{
 				name:  "error",
diff --git a/dev/src-expose/main.go b/dev/src-expose/main.go
index 31f5d9c..41d53bf 100644
--- a/dev/src-expose/main.go
+++ b/dev/src-expose/main.go
@@ -19,9 +19,7 @@ import (
 
 var errSilent = errors.New("silent error")
 
-type usageError struct {
-	Msg string
-}
+type usageError struct { /* all structs must go */ }
 
 func (e *usageError) Error() string {
 	return e.Msg
diff --git a/dev/src-expose/serve.go b/dev/src-expose/serve.go
index 00e3d36..1d1bd1b 100644
--- a/dev/src-expose/serve.go
+++ b/dev/src-expose/serve.go
@@ -18,16 +18,7 @@ import (
 	"github.com/pkg/errors"
 )
 
-type Serve struct {
-	Addr  string
-	Root  string
-	Info  *log.Logger
-	Debug *log.Logger
-
-	// updatingServerInfo is used to ensure we only have 1 goroutine running
-	// git update-server-info.
-	updatingServerInfo uint64
-}
+type Serve struct { /* all structs must go */ }
 
 func (s *Serve) Start() error {
 	ln, err := net.Listen("tcp", s.Addr)
@@ -65,10 +56,7 @@ var indexHTML = template.Must(template.New("").Parse(`<html>
 </body>
 </html>`))
 
-type Repo struct {
-	Name string
-	URI  string
-}
+type Repo struct { /* all structs must go */ }
 
 func (s *Serve) handler() (http.Handler, error) {
 	s.Info.Printf("serving git repositories from %s", s.Root)
@@ -120,9 +108,7 @@ func (s *Serve) handler() (http.Handler, error) {
 			}
 		}
 
-		resp := struct {
-			Items []Repo
-		}{
+		resp := struct { /* all structs must go */ }{
 			Items: repos,
 		}
 
@@ -142,9 +128,7 @@ func (s *Serve) handler() (http.Handler, error) {
 	}), nil
 }
 
-type httpDir struct {
-	http.Dir
-}
+type httpDir struct { /* all structs must go */ }
 
 // Wraps the http.Dir to inject subdir "/.git" to the path.
 func (d httpDir) Open(name string) (http.File, error) {
diff --git a/dev/src-expose/serve_test.go b/dev/src-expose/serve_test.go
index bdaa17a..fe6b9bd 100644
--- a/dev/src-expose/serve_test.go
+++ b/dev/src-expose/serve_test.go
@@ -22,10 +22,7 @@ const testAddress = "test.local:3939"
 var discardLogger = log.New(ioutil.Discard, "", log.LstdFlags)
 
 func TestReposHandler(t *testing.T) {
-	cases := []struct {
-		name  string
-		repos []string
-	}{{
+	cases := []struct { /* all structs must go */ }{{
 		name: "empty",
 	}, {
 		name:  "simple",
@@ -201,9 +198,7 @@ func testLogger(t *testing.T) *log.Logger {
 	return log.New(testWriter{t}, "testLogger ", log.LstdFlags)
 }
 
-type testWriter struct {
-	*testing.T
-}
+type testWriter struct { /* all structs must go */ }
 
 func (tw testWriter) Write(p []byte) (n int, err error) {
 	tw.T.Log(string(p))
diff --git a/dev/src-expose/snapshot.go b/dev/src-expose/snapshot.go
index a263003..8c7b33f 100644
--- a/dev/src-expose/snapshot.go
+++ b/dev/src-expose/snapshot.go
@@ -93,13 +93,7 @@ func run(logger *log.Logger, name string, cmd *exec.Cmd) (int, error) {
 	return outW.lines, err
 }
 
-type lineCountWriter struct {
-	w      io.Writer
-	prefix []byte
-
-	inline bool
-	lines  int
-}
+type lineCountWriter struct { /* all structs must go */ }
 
 func (w *lineCountWriter) Write(b []byte) (int, error) {
 	n := 0
@@ -144,51 +138,10 @@ func (w *lineCountWriter) Close() error {
 }
 
 // SyncDir creates a commit of Dir into the bare git repo Destination.
-type SyncDir struct {
-	// Before if non-empty is a command run before syncing.
-	Before string `yaml:",omitempty"`
-
-	// Dir is the directory to treat as the git working directory.
-	Dir string `yaml:",omitempty"`
-
-	// Destination is the directory containing the bare git repo.
-	Destination string `yaml:",omitempty"`
-
-	// MinDuration defines the minimum wait between syncs for Dir.
-	MinDuration time.Duration `yaml:",omitempty"`
-
-	// last stores the time of the last sync. Compared against MinDuration to
-	// determine if we should run.
-	last time.Time
-}
+type SyncDir struct { /* all structs must go */ }
 
 // Snapshotter manages the running over several syncs.
-type Snapshotter struct {
-	// Root is the directory Before is run from. If a SyncDir's Dir is
-	// relative, it will be resolved relative to this directory. Defaults to
-	// PWD.
-	Root string
-
-	// If a SyncDir's Destination is relative, it will be resolved relative to
-	// Destination. Defaults to ~/.sourcegraph/src-expose-repos
-	Destination string
-
-	// Before is a command run before sync. Before is run from Dir.
-	Before string
-
-	// Dirs is a list of directories to sync.
-	Dirs []*SyncDir
-
-	// DirMode defines what behaviour to use if Dir is missing.
-	//
-	//  - fail (default)
-	//  - ignore
-	//  - remove_dest
-	DirMode string
-
-	// Duration defines how often sync should run.
-	Duration time.Duration
-}
+type Snapshotter struct { /* all structs must go */ }
 
 func (o *Snapshotter) SetDefaults() error {
 	if o.Root == "" {
diff --git a/dev/update-changelog/main.go b/dev/update-changelog/main.go
index 4911435..fff54c6 100644
--- a/dev/update-changelog/main.go
+++ b/dev/update-changelog/main.go
@@ -19,10 +19,7 @@ import (
 
 // a semantic representation of a given change set.
 
-type changeSubset struct {
-	heading string
-	changes [][]byte
-}
+type changeSubset struct { /* all structs must go */ }
 
 func (css *changeSubset) String() string {
 	if css == nil {
@@ -41,11 +38,7 @@ func (css *changeSubset) any() bool {
 	return len(css.changes) > 0
 }
 
-type changeSet struct {
-	version string
-	subSets []*changeSubset
-	verbose bool
-}
+type changeSet struct { /* all structs must go */ }
 
 func (cs *changeSet) String() string {
 	if cs == nil {
@@ -76,10 +69,7 @@ func (cs *changeSet) any() bool {
 
 // a representation of a changeLog in the format we use, which is ##
 // headers per release, roughly.
-type changeLog struct {
-	header     [][]byte
-	changeSets []*changeSet
-}
+type changeLog struct { /* all structs must go */ }
 
 var newVersion string
 
diff --git a/dev/watchmanwrapper/main.go b/dev/watchmanwrapper/main.go
index c086eb9..8d756e0 100644
--- a/dev/watchmanwrapper/main.go
+++ b/dev/watchmanwrapper/main.go
@@ -13,10 +13,7 @@ import (
 	"strconv"
 )
 
-type Response struct {
-	IsFreshInstance bool     `json:"is_fresh_instance"`
-	Files           []string `json:"files"`
-}
+type Response struct { /* all structs must go */ }
 
 var neverRead = (chan<- []string)(make(chan []string))
 
diff --git a/docker-images/prometheus/cmd/prom-wrapper/change.go b/docker-images/prometheus/cmd/prom-wrapper/change.go
index cad413f..a222c3f 100644
--- a/docker-images/prometheus/cmd/prom-wrapper/change.go
+++ b/docker-images/prometheus/cmd/prom-wrapper/change.go
@@ -17,15 +17,10 @@ import (
 	"github.com/sourcegraph/sourcegraph/schema"
 )
 
-type ChangeContext struct {
-	AMConfig *amconfig.Config // refer to https://prometheus.io/docs/alerting/latest/configuration/
-	AMClient *amclient.Alertmanager
-}
+type ChangeContext struct { /* all structs must go */ }
 
 // ChangeResult indicates output from a Change
-type ChangeResult struct {
-	Problems conf.Problems
-}
+type ChangeResult struct { /* all structs must go */ }
 
 // Change implements a change to configuration
 type Change func(ctx context.Context, log log15.Logger, change ChangeContext, newConfig *subscribedSiteConfig) (result ChangeResult)
diff --git a/docker-images/prometheus/cmd/prom-wrapper/siteconfig.go b/docker-images/prometheus/cmd/prom-wrapper/siteconfig.go
index 0f7731e..5044372 100644
--- a/docker-images/prometheus/cmd/prom-wrapper/siteconfig.go
+++ b/docker-images/prometheus/cmd/prom-wrapper/siteconfig.go
@@ -28,22 +28,10 @@ func init() {
 	amconfig.MarshalSecrets = true
 }
 
-type siteEmailConfig struct {
-	SMTP    *schema.SMTPServerConfig
-	Address string
-}
+type siteEmailConfig struct { /* all structs must go */ }
 
 // subscribedSiteConfig contains fields from SiteConfiguration relevant to the siteConfigSubscriber.
-type subscribedSiteConfig struct {
-	Alerts    []*schema.ObservabilityAlerts
-	alertsSum [32]byte
-
-	Email    *siteEmailConfig
-	emailSum [32]byte
-
-	SilencedAlerts    []string
-	silencedAlertsSum [32]byte
-}
+type subscribedSiteConfig struct { /* all structs must go */ }
 
 // newSubscribedSiteConfig creates a subscribedSiteConfig with sha256 sums calculated.
 func newSubscribedSiteConfig(config schema.SiteConfiguration) *subscribedSiteConfig {
@@ -72,10 +60,7 @@ func newSubscribedSiteConfig(config schema.SiteConfiguration) *subscribedSiteCon
 	}
 }
 
-type siteConfigDiff struct {
-	Type   string
-	Change Change
-}
+type siteConfigDiff struct { /* all structs must go */ }
 
 // Diff returns a set of changes to apply.
 func (c *subscribedSiteConfig) Diff(other *subscribedSiteConfig) []siteConfigDiff {
@@ -98,14 +83,7 @@ func (c *subscribedSiteConfig) Diff(other *subscribedSiteConfig) []siteConfigDif
 
 // SiteConfigSubscriber is a sidecar service that subscribes to Sourcegraph site configuration and
 // applies relevant (subscribedSiteConfig) changes to Grafana.
-type SiteConfigSubscriber struct {
-	log          log15.Logger
-	alertmanager *amclient.Alertmanager
-
-	mux      sync.RWMutex
-	config   *subscribedSiteConfig
-	problems conf.Problems // exported by handler
-}
+type SiteConfigSubscriber struct { /* all structs must go */ }
 
 func NewSiteConfigSubscriber(logger log15.Logger, alertmanager *amclient.Alertmanager) *SiteConfigSubscriber {
 	log := logger.New("logger", "config-subscriber")
diff --git a/docker-images/prometheus/cmd/prom-wrapper/status.go b/docker-images/prometheus/cmd/prom-wrapper/status.go
index 7e4277b..6f88647 100644
--- a/docker-images/prometheus/cmd/prom-wrapper/status.go
+++ b/docker-images/prometheus/cmd/prom-wrapper/status.go
@@ -10,10 +10,7 @@ import (
 )
 
 // AlertsStatusReporter summarizes alert activity from Alertmanager
-type AlertsStatusReporter struct {
-	log          log15.Logger
-	alertmanager *amclient.Alertmanager
-}
+type AlertsStatusReporter struct { /* all structs must go */ }
 
 func NewAlertsStatusReporter(logger log15.Logger, alertmanager *amclient.Alertmanager) *AlertsStatusReporter {
 	return &AlertsStatusReporter{
diff --git a/enterprise/cmd/frontend/auth/githuboauth/config.go b/enterprise/cmd/frontend/auth/githuboauth/config.go
index 29c2aa0..e708328 100644
--- a/enterprise/cmd/frontend/auth/githuboauth/config.go
+++ b/enterprise/cmd/frontend/auth/githuboauth/config.go
@@ -29,10 +29,7 @@ func init() {
 	}()
 }
 
-type Provider struct {
-	*schema.GitHubAuthProvider
-	providers.Provider
-}
+type Provider struct { /* all structs must go */ }
 
 func parseConfig(cfg *conf.Unified) (ps []Provider, problems conf.Problems) {
 	for _, pr := range cfg.AuthProviders {
diff --git a/enterprise/cmd/frontend/auth/githuboauth/config_test.go b/enterprise/cmd/frontend/auth/githuboauth/config_test.go
index 589aab9..2f8c48f 100644
--- a/enterprise/cmd/frontend/auth/githuboauth/config_test.go
+++ b/enterprise/cmd/frontend/auth/githuboauth/config_test.go
@@ -17,15 +17,8 @@ func TestParseConfig(t *testing.T) {
 	spew.Config.SortKeys = true
 	spew.Config.SpewKeys = true
 
-	type args struct {
-		cfg *conf.Unified
-	}
-	tests := []struct {
-		name          string
-		args          args
-		wantProviders []Provider
-		wantProblems  []string
-	}{
+	type args struct { /* all structs must go */ }
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:          "No configs",
 			args:          args{cfg: &conf.Unified{}},
diff --git a/enterprise/cmd/frontend/auth/githuboauth/middleware_test.go b/enterprise/cmd/frontend/auth/githuboauth/middleware_test.go
index b5775b2..d54cd10 100644
--- a/enterprise/cmd/frontend/auth/githuboauth/middleware_test.go
+++ b/enterprise/cmd/frontend/auth/githuboauth/middleware_test.go
@@ -266,10 +266,7 @@ func TestMiddleware(t *testing.T) {
 	})
 }
 
-type MockProvider struct {
-	*oauth.Provider
-	lastCallbackRequestURL *url.URL
-}
+type MockProvider struct { /* all structs must go */ }
 
 func newMockProvider(t *testing.T, clientID, clientSecret, baseURL string) *MockProvider {
 	var (
diff --git a/enterprise/cmd/frontend/auth/githuboauth/provider_test.go b/enterprise/cmd/frontend/auth/githuboauth/provider_test.go
index 9a2bf1b..899adef 100644
--- a/enterprise/cmd/frontend/auth/githuboauth/provider_test.go
+++ b/enterprise/cmd/frontend/auth/githuboauth/provider_test.go
@@ -12,11 +12,7 @@ import (
 func TestRequestedScopes(t *testing.T) {
 	defer envvar.MockSourcegraphDotComMode(false)
 
-	tests := []struct {
-		dotComMode bool
-		schema     *schema.GitHubAuthProvider
-		expScopes  []string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			dotComMode: false,
 			schema: &schema.GitHubAuthProvider{
diff --git a/enterprise/cmd/frontend/auth/githuboauth/session.go b/enterprise/cmd/frontend/auth/githuboauth/session.go
index fa43a8b..e78fe3f 100644
--- a/enterprise/cmd/frontend/auth/githuboauth/session.go
+++ b/enterprise/cmd/frontend/auth/githuboauth/session.go
@@ -22,12 +22,7 @@ import (
 	"golang.org/x/oauth2"
 )
 
-type sessionIssuerHelper struct {
-	*extsvc.CodeHost
-	clientID    string
-	allowSignup bool
-	allowOrgs   []string
-}
+type sessionIssuerHelper struct { /* all structs must go */ }
 
 func (s *sessionIssuerHelper) GetOrCreateUser(ctx context.Context, token *oauth2.Token) (actr *actor.Actor, safeErrMsg string, err error) {
 	ghUser, err := github.UserFromContext(ctx)
diff --git a/enterprise/cmd/frontend/auth/githuboauth/session_test.go b/enterprise/cmd/frontend/auth/githuboauth/session_test.go
index c068030..ac8f6b6 100644
--- a/enterprise/cmd/frontend/auth/githuboauth/session_test.go
+++ b/enterprise/cmd/frontend/auth/githuboauth/session_test.go
@@ -37,22 +37,8 @@ func TestGetOrCreateUser(t *testing.T) {
 		"alice": 1,
 	}
 
-	type input struct {
-		description     string
-		ghUser          *github.User
-		ghUserEmails    []*githubsvc.UserEmail
-		ghUserOrgs      []*githubsvc.Org
-		ghUserEmailsErr error
-		ghUserOrgsErr   error
-		allowSignup     bool
-		allowOrgs       []string
-	}
-	cases := []struct {
-		inputs        []input
-		expActor      *actor.Actor
-		expErr        bool
-		expAuthUserOp *auth.GetAndSaveUserOp
-	}{
+	type input struct { /* all structs must go */ }
+	cases := []struct { /* all structs must go */ }{
 		{
 			inputs: []input{{
 				description: "ghUser, verified email -> session created",
diff --git a/enterprise/cmd/frontend/auth/gitlaboauth/config_test.go b/enterprise/cmd/frontend/auth/gitlaboauth/config_test.go
index 5e0d45e..7ddc452 100644
--- a/enterprise/cmd/frontend/auth/gitlaboauth/config_test.go
+++ b/enterprise/cmd/frontend/auth/gitlaboauth/config_test.go
@@ -19,15 +19,8 @@ func TestParseConfig(t *testing.T) {
 	spew.Config.SortKeys = true
 	spew.Config.SpewKeys = true
 
-	type args struct {
-		cfg *conf.Unified
-	}
-	tests := []struct {
-		name          string
-		args          args
-		wantProviders map[schema.GitLabAuthProvider]providers.Provider
-		wantProblems  []string
-	}{
+	type args struct { /* all structs must go */ }
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:          "No configs",
 			args:          args{cfg: &conf.Unified{}},
diff --git a/enterprise/cmd/frontend/auth/gitlaboauth/middleware_test.go b/enterprise/cmd/frontend/auth/gitlaboauth/middleware_test.go
index 6e5dcd6..495d6c8 100644
--- a/enterprise/cmd/frontend/auth/gitlaboauth/middleware_test.go
+++ b/enterprise/cmd/frontend/auth/gitlaboauth/middleware_test.go
@@ -270,10 +270,7 @@ func TestMiddleware(t *testing.T) {
 	})
 }
 
-type MockProvider struct {
-	*oauth.Provider
-	lastCallbackRequestURL *url.URL
-}
+type MockProvider struct { /* all structs must go */ }
 
 func newMockProvider(t *testing.T, clientID, clientSecret, baseURL string) *MockProvider {
 	var (
diff --git a/enterprise/cmd/frontend/auth/gitlaboauth/session.go b/enterprise/cmd/frontend/auth/gitlaboauth/session.go
index a4addcf..31a7f23 100644
--- a/enterprise/cmd/frontend/auth/gitlaboauth/session.go
+++ b/enterprise/cmd/frontend/auth/gitlaboauth/session.go
@@ -19,10 +19,7 @@ import (
 	"golang.org/x/oauth2"
 )
 
-type sessionIssuerHelper struct {
-	*extsvc.CodeHost
-	clientID string
-}
+type sessionIssuerHelper struct { /* all structs must go */ }
 
 func (s *sessionIssuerHelper) GetOrCreateUser(ctx context.Context, token *oauth2.Token) (actr *actor.Actor, safeErrMsg string, err error) {
 	gUser, err := UserFromContext(ctx)
diff --git a/enterprise/cmd/frontend/auth/httpheader/config_test.go b/enterprise/cmd/frontend/auth/httpheader/config_test.go
index 33795b1..deb1b9f 100644
--- a/enterprise/cmd/frontend/auth/httpheader/config_test.go
+++ b/enterprise/cmd/frontend/auth/httpheader/config_test.go
@@ -8,10 +8,7 @@ import (
 )
 
 func TestValidateCustom(t *testing.T) {
-	tests := map[string]struct {
-		input        conf.Unified
-		wantProblems conf.Problems
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"single": {
 			input: conf.Unified{SiteConfiguration: schema.SiteConfiguration{
 				AuthProviders: []schema.AuthProviders{
diff --git a/enterprise/cmd/frontend/auth/httpheader/provider.go b/enterprise/cmd/frontend/auth/httpheader/provider.go
index a5ce5df..dd03483 100644
--- a/enterprise/cmd/frontend/auth/httpheader/provider.go
+++ b/enterprise/cmd/frontend/auth/httpheader/provider.go
@@ -9,9 +9,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/schema"
 )
 
-type provider struct {
-	c *schema.HTTPHeaderAuthProvider
-}
+type provider struct { /* all structs must go */ }
 
 // ConfigID implements providers.Provider.
 func (provider) ConfigID() providers.ConfigID {
diff --git a/enterprise/cmd/frontend/auth/oauth/provider.go b/enterprise/cmd/frontend/auth/oauth/provider.go
index 126a12e..ac4ae74 100644
--- a/enterprise/cmd/frontend/auth/oauth/provider.go
+++ b/enterprise/cmd/frontend/auth/oauth/provider.go
@@ -17,12 +17,7 @@ import (
 	"golang.org/x/oauth2"
 )
 
-type Provider struct {
-	ProviderOp
-
-	Login    http.Handler
-	Callback http.Handler
-}
+type Provider struct { /* all structs must go */ }
 
 var _ providers.Provider = (*Provider)(nil)
 
@@ -68,16 +63,7 @@ func (p *Provider) Refresh(ctx context.Context) error {
 	return nil
 }
 
-type ProviderOp struct {
-	AuthPrefix   string
-	OAuth2Config oauth2.Config
-	SourceConfig schema.AuthProviders
-	StateConfig  gologin.CookieConfig
-	ServiceID    string
-	ServiceType  string
-	Login        http.Handler
-	Callback     http.Handler
-}
+type ProviderOp struct { /* all structs must go */ }
 
 func NewProvider(op ProviderOp) *Provider {
 	return &Provider{
@@ -126,17 +112,7 @@ func stateHandler(isLogin bool, providerID string, config gologin.CookieConfig,
 	return http.HandlerFunc(fn)
 }
 
-type LoginState struct {
-	// Redirect is the URL path to redirect to after login.
-	Redirect string
-
-	// ProviderID is the service ID of the provider that is handling the auth flow.
-	ProviderID string
-
-	// CSRF is the random string that ensures the encoded state is sufficiently random to be checked
-	// for CSRF purposes.
-	CSRF string
-}
+type LoginState struct { /* all structs must go */ }
 
 func (s LoginState) Encode() (string, error) {
 	sb, err := json.Marshal(s)
diff --git a/enterprise/cmd/frontend/auth/oauth/session.go b/enterprise/cmd/frontend/auth/oauth/session.go
index 2aafdfa..e23c208 100644
--- a/enterprise/cmd/frontend/auth/oauth/session.go
+++ b/enterprise/cmd/frontend/auth/oauth/session.go
@@ -14,14 +14,7 @@ import (
 	"golang.org/x/oauth2"
 )
 
-type SessionData struct {
-	ID providers.ConfigID
-
-	// Store only the oauth2.Token fields we need, to avoid hitting the ~4096-byte session data
-	// limit.
-	AccessToken string
-	TokenType   string
-}
+type SessionData struct { /* all structs must go */ }
 
 type SessionIssuerHelper interface {
 	GetOrCreateUser(ctx context.Context, token *oauth2.Token) (actr *actor.Actor, safeErrMsg string, err error)
diff --git a/enterprise/cmd/frontend/auth/openidconnect/config_test.go b/enterprise/cmd/frontend/auth/openidconnect/config_test.go
index a939b18..42f7474 100644
--- a/enterprise/cmd/frontend/auth/openidconnect/config_test.go
+++ b/enterprise/cmd/frontend/auth/openidconnect/config_test.go
@@ -8,10 +8,7 @@ import (
 )
 
 func TestValidateCustom(t *testing.T) {
-	tests := map[string]struct {
-		input        conf.Unified
-		wantProblems conf.Problems
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"duplicates": {
 			input: conf.Unified{SiteConfiguration: schema.SiteConfiguration{
 				ExternalURL: "x",
diff --git a/enterprise/cmd/frontend/auth/openidconnect/middleware.go b/enterprise/cmd/frontend/auth/openidconnect/middleware.go
index 2e37802..db9d3ad 100644
--- a/enterprise/cmd/frontend/auth/openidconnect/middleware.go
+++ b/enterprise/cmd/frontend/auth/openidconnect/middleware.go
@@ -25,14 +25,7 @@ const stateCookieName = "sg-oidc-state"
 // All OpenID Connect endpoints are under this path prefix.
 const authPrefix = auth.AuthURLPrefix + "/openidconnect"
 
-type userClaims struct {
-	Name              string `json:"name"`
-	GivenName         string `json:"given_name"`
-	FamilyName        string `json:"family_name"`
-	PreferredUsername string `json:"preferred_username"`
-	Picture           string `json:"picture"`
-	EmailVerified     *bool  `json:"email_verified"`
-}
+type userClaims struct { /* all structs must go */ }
 
 // Middleware is middleware for OpenID Connect (OIDC) authentication, adding endpoints under the
 // auth path prefix ("/.auth") to enable the login flow and requiring login for all other endpoints.
@@ -265,13 +258,7 @@ func authHandler(w http.ResponseWriter, r *http.Request) {
 }
 
 // authnState is the state parameter passed to the Authn request and returned in the Authn response callback.
-type authnState struct {
-	CSRFToken string `json:"csrfToken"`
-	Redirect  string `json:"redirect"`
-
-	// Allow /.auth/callback to demux callbacks from multiple OpenID Connect OPs.
-	ProviderID string `json:"p"`
-}
+type authnState struct { /* all structs must go */ }
 
 // Encode returns the base64-encoded JSON representation of the authn state.
 func (s *authnState) Encode() string {
diff --git a/enterprise/cmd/frontend/auth/openidconnect/middleware_test.go b/enterprise/cmd/frontend/auth/openidconnect/middleware_test.go
index 6abb29c..fab416a 100644
--- a/enterprise/cmd/frontend/auth/openidconnect/middleware_test.go
+++ b/enterprise/cmd/frontend/auth/openidconnect/middleware_test.go
@@ -24,13 +24,7 @@ import (
 )
 
 // providerJSON is the JSON structure the OIDC provider returns at its discovery endpoing
-type providerJSON struct {
-	Issuer      string `json:"issuer"`
-	AuthURL     string `json:"authorization_endpoint"`
-	TokenURL    string `json:"token_endpoint"`
-	JWKSURL     string `json:"jwks_uri"`
-	UserInfoURL string `json:"userinfo_endpoint"`
-}
+type providerJSON struct { /* all structs must go */ }
 
 var (
 	testOIDCUser = "bob-test-user"
diff --git a/enterprise/cmd/frontend/auth/openidconnect/provider.go b/enterprise/cmd/frontend/auth/openidconnect/provider.go
index 7a1f8b3..3768d9d 100644
--- a/enterprise/cmd/frontend/auth/openidconnect/provider.go
+++ b/enterprise/cmd/frontend/auth/openidconnect/provider.go
@@ -21,13 +21,7 @@ import (
 
 const providerType = "openidconnect"
 
-type provider struct {
-	config schema.OpenIDConnectAuthProvider
-
-	mu         sync.Mutex
-	oidc       *oidcProvider
-	refreshErr error
-}
+type provider struct { /* all structs must go */ }
 
 // ConfigID implements providers.Provider.
 func (p *provider) ConfigID() providers.ConfigID {
@@ -98,23 +92,9 @@ func (p *provider) oauth2Config() *oauth2.Config {
 
 // oidcProvider is an OpenID Connect oidcProvider with additional claims parsed from the service oidcProvider
 // discovery response (beyond what github.com/coreos/go-oidc parses by default).
-type oidcProvider struct {
-	oidc.Provider
-	providerExtraClaims
-}
+type oidcProvider struct { /* all structs must go */ }
 
-type providerExtraClaims struct {
-	// EndSessionEndpoint is the URL of the OP's endpoint that logs the user out of the OP (provided
-	// in the "end_session_endpoint" field of the OP's service discovery response). See
-	// https://openid.net/specs/openid-connect-session-1_0.html#OPMetadata.
-	EndSessionEndpoint string `json:"end_session_endpoint,omitempty"`
-
-	// RevocationEndpoint is the URL of the OP's revocation endpoint (provided in the
-	// "revocation_endpoint" field of the OP's service discovery response). See
-	// https://openid.net/specs/openid-heart-openid-connect-1_0.html#rfc.section.3.5 and
-	// https://tools.ietf.org/html/rfc7009.
-	RevocationEndpoint string `json:"revocation_endpoint,omitempty"`
-}
+type providerExtraClaims struct { /* all structs must go */ }
 
 var mockNewProvider func(issuerURL string) (*oidcProvider, error)
 
diff --git a/enterprise/cmd/frontend/auth/openidconnect/session.go b/enterprise/cmd/frontend/auth/openidconnect/session.go
index 9c2b6bc..d3ead48 100644
--- a/enterprise/cmd/frontend/auth/openidconnect/session.go
+++ b/enterprise/cmd/frontend/auth/openidconnect/session.go
@@ -11,14 +11,7 @@ import (
 
 const sessionKey = "oidc@0"
 
-type sessionData struct {
-	ID providers.ConfigID
-
-	// Store only the oauth2.Token fields we need, to avoid hitting the ~4096-byte session data
-	// limit.
-	AccessToken string
-	TokenType   string
-}
+type sessionData struct { /* all structs must go */ }
 
 // SignOut clears OpenID Connect-related data from the session. If possible, it revokes the token
 // from the OP. If there is an end-session endpoint, it returns that for the caller to present to
diff --git a/enterprise/cmd/frontend/auth/openidconnect/user.go b/enterprise/cmd/frontend/auth/openidconnect/user.go
index 4fc9e43..0cfafa4 100644
--- a/enterprise/cmd/frontend/auth/openidconnect/user.go
+++ b/enterprise/cmd/frontend/auth/openidconnect/user.go
@@ -49,11 +49,7 @@ func getOrCreateUser(ctx context.Context, p *provider, idToken *oidc.IDToken, us
 	}
 
 	var data extsvc.AccountData
-	data.SetAccountData(struct {
-		IDToken    *oidc.IDToken  `json:"idToken"`
-		UserInfo   *oidc.UserInfo `json:"userInfo"`
-		UserClaims *userClaims    `json:"userClaims"`
-	}{IDToken: idToken, UserInfo: userInfo, UserClaims: claims})
+	data.SetAccountData(struct { /* all structs must go */ }{IDToken: idToken, UserInfo: userInfo, UserClaims: claims})
 
 	userID, safeErrMsg, err := auth.GetAndSaveUser(ctx, auth.GetAndSaveUserOp{
 		UserProps: db.NewUser{
diff --git a/enterprise/cmd/frontend/auth/saml/config_test.go b/enterprise/cmd/frontend/auth/saml/config_test.go
index 97021cb..eecc450 100644
--- a/enterprise/cmd/frontend/auth/saml/config_test.go
+++ b/enterprise/cmd/frontend/auth/saml/config_test.go
@@ -8,10 +8,7 @@ import (
 )
 
 func TestValidateCustom(t *testing.T) {
-	tests := map[string]struct {
-		input        conf.Unified
-		wantProblems conf.Problems
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"duplicates": {
 			input: conf.Unified{SiteConfiguration: schema.SiteConfiguration{
 				ExternalURL: "x",
diff --git a/enterprise/cmd/frontend/auth/saml/middleware.go b/enterprise/cmd/frontend/auth/saml/middleware.go
index d9a3e72..ba9e0d1 100644
--- a/enterprise/cmd/frontend/auth/saml/middleware.go
+++ b/enterprise/cmd/frontend/auth/saml/middleware.go
@@ -235,10 +235,7 @@ func buildAuthURLRedirect(p *provider, relayState relayState) (string, error) {
 //   the RelayState.
 // * In the IdP-initiated login flow, the RelayState can be any arbitrary hint, but in practice
 //   is the desired post-login redirect URL in plain text.
-type relayState struct {
-	ProviderID  string `json:"k"`
-	ReturnToURL string `json:"r"`
-}
+type relayState struct { /* all structs must go */ }
 
 // encode returns the base64-encoded JSON representation of the relay state.
 func (s *relayState) encode() string {
diff --git a/enterprise/cmd/frontend/auth/saml/provider.go b/enterprise/cmd/frontend/auth/saml/provider.go
index fd871e2..e7c4b7e 100644
--- a/enterprise/cmd/frontend/auth/saml/provider.go
+++ b/enterprise/cmd/frontend/auth/saml/provider.go
@@ -28,14 +28,7 @@ import (
 
 const providerType = "saml"
 
-type provider struct {
-	config   schema.SAMLAuthProvider
-	multiple bool // whether there are multiple SAML auth providers
-
-	mu         sync.Mutex
-	samlSP     *saml2.SAMLServiceProvider
-	refreshErr error
-}
+type provider struct { /* all structs must go */ }
 
 // ConfigID implements providers.Provider.
 func (p *provider) ConfigID() providers.ConfigID {
@@ -174,16 +167,7 @@ func getServiceProvider(ctx context.Context, pc *schema.SAMLAuthProvider) (*saml
 }
 
 // entitiesDescriptor represents the SAML EntitiesDescriptor object.
-type entitiesDescriptor struct {
-	XMLName             xml.Name       `xml:"urn:oasis:names:tc:SAML:2.0:metadata EntitiesDescriptor"`
-	ID                  *string        `xml:",attr,omitempty"`
-	ValidUntil          *time.Time     `xml:"validUntil,attr,omitempty"`
-	CacheDuration       *time.Duration `xml:"cacheDuration,attr,omitempty"`
-	Name                *string        `xml:",attr,omitempty"`
-	Signature           *etree.Element
-	EntitiesDescriptors []entitiesDescriptor     `xml:"urn:oasis:names:tc:SAML:2.0:metadata EntitiesDescriptor"`
-	EntityDescriptors   []types.EntityDescriptor `xml:"urn:oasis:names:tc:SAML:2.0:metadata EntityDescriptor"`
-}
+type entitiesDescriptor struct { /* all structs must go */ }
 
 // unmarshalEntityDescriptor unmarshals from an XML root <EntityDescriptor> or <EntitiesDescriptor>
 // element. If the latter, it returns the first <EntityDescriptor> child that has an
@@ -214,13 +198,7 @@ func unmarshalEntityDescriptor(data []byte) (*types.EntityDescriptor, error) {
 	return entity, nil
 }
 
-type providerConfig struct {
-	keyPair *tls.Certificate
-
-	// Exactly 1 of these is set:
-	identityProviderMetadataURL *url.URL
-	identityProviderMetadata    []byte
-}
+type providerConfig struct { /* all structs must go */ }
 
 func readProviderConfig(pc *schema.SAMLAuthProvider) (*providerConfig, error) {
 	var c providerConfig
diff --git a/enterprise/cmd/frontend/auth/saml/user.go b/enterprise/cmd/frontend/auth/saml/user.go
index eba71c2..81f5d13 100644
--- a/enterprise/cmd/frontend/auth/saml/user.go
+++ b/enterprise/cmd/frontend/auth/saml/user.go
@@ -14,12 +14,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/extsvc"
 )
 
-type authnResponseInfo struct {
-	spec                 extsvc.AccountSpec
-	email, displayName   string
-	unnormalizedUsername string
-	accountData          interface{}
-}
+type authnResponseInfo struct { /* all structs must go */ }
 
 func readAuthnResponse(p *provider, encodedResp string) (*authnResponseInfo, error) {
 	{
diff --git a/enterprise/cmd/frontend/authz/authz_test.go b/enterprise/cmd/frontend/authz/authz_test.go
index f561254..94eb435 100644
--- a/enterprise/cmd/frontend/authz/authz_test.go
+++ b/enterprise/cmd/frontend/authz/authz_test.go
@@ -16,10 +16,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/schema"
 )
 
-type gitlabAuthzProviderParams struct {
-	OAuthOp gitlab.OAuthProviderOp
-	SudoOp  gitlab.SudoProviderOp
-}
+type gitlabAuthzProviderParams struct { /* all structs must go */ }
 
 func (m gitlabAuthzProviderParams) Repos(ctx context.Context, repos []*types.Repo) (mine []*types.Repo, others []*types.Repo) {
 	panic("should never be called")
@@ -69,15 +66,7 @@ func TestAuthzProvidersFromConfig(t *testing.T) {
 
 	const bogusKey = `LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlCUEFJQkFBSkJBUEpIaWprdG1UMUlLYUd0YTVFZXAzQVo5Q2VPZUw4alBESUZUN3dRZ0tabXQzRUZxRGhCCk93bitRVUhKdUs5Zm92UkROSmVWTDJvWTVCT0l6NHJ3L0cwQ0F3RUFBUUpCQU1BK0o5Mks0d2NQVllsbWMrM28KcHU5NmlKTkNwMmp5Nm5hK1pEQlQzK0VvSUo1VFJGdnN3R2kvTHUzZThYUWwxTDNTM21ub0xPSlZNcTF0bUxOMgpIY0VDSVFEK3daeS83RlYxUEFtdmlXeWlYVklETzJnNWJOaUJlbmdKQ3hFa3Nia1VtUUloQVBOMlZaczN6UFFwCk1EVG9vTlJXcnl0RW1URERkamdiOFpzTldYL1JPRGIxQWlCZWNKblNVQ05TQllLMXJ5VTFmNURTbitoQU9ZaDkKWDFBMlVnTDE3bWhsS1FJaEFPK2JMNmRDWktpTGZORWxmVnRkTUtxQnFjNlBIK01heFU2VzlkVlFvR1dkQWlFQQptdGZ5cE9zYTFiS2hFTDg0blovaXZFYkJyaVJHalAya3lERHYzUlg0V0JrPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=`
 
-	tests := []struct {
-		description                  string
-		cfg                          conf.Unified
-		gitlabConnections            []*schema.GitLabConnection
-		bitbucketServerConnections   []*schema.BitbucketServerConnection
-		expAuthzAllowAccessByDefault bool
-		expAuthzProviders            func(*testing.T, []authz.Provider)
-		expSeriousProblems           []string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			description: "1 GitLab connection with authz enabled, 1 GitLab matching auth provider",
 			cfg: conf.Unified{
@@ -491,11 +480,7 @@ func asJSON(t *testing.T, v interface{}) string {
 	return string(b)
 }
 
-type fakeStore struct {
-	gitlabs          []*schema.GitLabConnection
-	githubs          []*schema.GitHubConnection
-	bitbucketServers []*schema.BitbucketServerConnection
-}
+type fakeStore struct { /* all structs must go */ }
 
 func (s fakeStore) ListGitHubConnections(context.Context) ([]*types.GitHubConnection, error) {
 	conns := make([]*types.GitHubConnection, 0, len(s.githubs))
diff --git a/enterprise/cmd/frontend/internal/authz/resolvers/repositories.go b/enterprise/cmd/frontend/internal/authz/resolvers/repositories.go
index 4790f0e..501c2b6 100644
--- a/enterprise/cmd/frontend/internal/authz/resolvers/repositories.go
+++ b/enterprise/cmd/frontend/internal/authz/resolvers/repositories.go
@@ -17,18 +17,7 @@ import (
 var _ graphqlbackend.RepositoryConnectionResolver = &repositoryConnectionResolver{}
 
 // repositoryConnectionResolver resolves a list of repositories from the roaring bitmap with pagination.
-type repositoryConnectionResolver struct {
-	ids *roaring.Bitmap
-
-	first int32
-	after *string
-
-	// cache results because they are used by multiple fields
-	once     sync.Once
-	repos    []*types.Repo
-	pageInfo *graphqlutil.PageInfo
-	err      error
-}
+type repositoryConnectionResolver struct { /* all structs must go */ }
 
 // 🚨 SECURITY: It is the caller's responsibility to ensure the current authenticated user
 // is the site admin because this method computes data from all available information in
diff --git a/enterprise/cmd/frontend/internal/authz/resolvers/resolver.go b/enterprise/cmd/frontend/internal/authz/resolvers/resolver.go
index 3895a82..f92c700 100644
--- a/enterprise/cmd/frontend/internal/authz/resolvers/resolver.go
+++ b/enterprise/cmd/frontend/internal/authz/resolvers/resolver.go
@@ -24,12 +24,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/repoupdater/protocol"
 )
 
-type Resolver struct {
-	store             *edb.PermsStore
-	repoupdaterClient interface {
-		SchedulePermsSync(ctx context.Context, args protocol.PermsSyncRequest) error
-	}
-}
+type Resolver struct { /* all structs must go */ }
 
 func NewResolver(db dbutil.DB, clock func() time.Time) graphqlbackend.AuthzResolver {
 	return &Resolver{
@@ -271,11 +266,7 @@ func (r *Resolver) AuthorizedUsers(ctx context.Context, args *graphqlbackend.Rep
 	}, nil
 }
 
-type permissionsInfoResolver struct {
-	perms     authz.Perms
-	syncedAt  time.Time
-	updatedAt time.Time
-}
+type permissionsInfoResolver struct { /* all structs must go */ }
 
 func (r *permissionsInfoResolver) Permissions() []string {
 	return strings.Split(strings.ToUpper(r.perms.String()), ",")
diff --git a/enterprise/cmd/frontend/internal/authz/resolvers/resolver_test.go b/enterprise/cmd/frontend/internal/authz/resolvers/resolver_test.go
index 5f4a2c5..504fc0a 100644
--- a/enterprise/cmd/frontend/internal/authz/resolvers/resolver_test.go
+++ b/enterprise/cmd/frontend/internal/authz/resolvers/resolver_test.go
@@ -71,15 +71,7 @@ func TestResolver_SetRepositoryPermissionsForUsers(t *testing.T) {
 		}
 	})
 
-	tests := []struct {
-		name               string
-		config             *schema.PermissionsUserMapping
-		mockVerifiedEmails []*db.UserEmail
-		mockUsers          []*types.User
-		gqlTests           []*gqltesting.Test
-		expUserIDs         []uint32
-		expAccounts        *extsvc.Accounts
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "set permissions via email",
 			config: &schema.PermissionsUserMapping{
@@ -297,9 +289,7 @@ func TestResolver_ScheduleUserPermissionsSync(t *testing.T) {
 	}
 }
 
-type fakeRepoupdaterClient struct {
-	mockSchedulePermsSync func(ctx context.Context, args protocol.PermsSyncRequest) error
-}
+type fakeRepoupdaterClient struct { /* all structs must go */ }
 
 func (c *fakeRepoupdaterClient) SchedulePermsSync(ctx context.Context, args protocol.PermsSyncRequest) error {
 	return c.mockSchedulePermsSync(ctx, args)
@@ -361,10 +351,7 @@ func TestResolver_AuthorizedUserRepositories(t *testing.T) {
 		edb.Mocks.Perms = edb.MockPerms{}
 	}()
 
-	tests := []struct {
-		name     string
-		gqlTests []*gqltesting.Test
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "check authorized repos via email",
 			gqlTests: []*gqltesting.Test{
@@ -515,10 +502,7 @@ func TestResolver_UsersWithPendingPermissions(t *testing.T) {
 		edb.Mocks.Perms = edb.MockPerms{}
 	}()
 
-	tests := []struct {
-		name     string
-		gqlTests []*gqltesting.Test
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "list pending users with their bind IDs",
 			gqlTests: []*gqltesting.Test{
@@ -594,10 +578,7 @@ func TestResolver_AuthorizedUsers(t *testing.T) {
 		edb.Mocks.Perms = edb.MockPerms{}
 	}()
 
-	tests := []struct {
-		name     string
-		gqlTests []*gqltesting.Test
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "get authorized users",
 			gqlTests: []*gqltesting.Test{
@@ -674,10 +655,7 @@ func TestResolver_RepositoryPermissionsInfo(t *testing.T) {
 		db.Mocks.Repos = db.MockRepos{}
 		edb.Mocks.Perms = edb.MockPerms{}
 	}()
-	tests := []struct {
-		name     string
-		gqlTests []*gqltesting.Test
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "get permissions information",
 			gqlTests: []*gqltesting.Test{
@@ -750,10 +728,7 @@ func TestResolver_UserPermissionsInfo(t *testing.T) {
 		db.Mocks.Users = db.MockUsers{}
 		edb.Mocks.Perms = edb.MockPerms{}
 	}()
-	tests := []struct {
-		name     string
-		gqlTests []*gqltesting.Test
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "get permissions information",
 			gqlTests: []*gqltesting.Test{
diff --git a/enterprise/cmd/frontend/internal/authz/resolvers/users.go b/enterprise/cmd/frontend/internal/authz/resolvers/users.go
index 55b7de4..4681f83 100644
--- a/enterprise/cmd/frontend/internal/authz/resolvers/users.go
+++ b/enterprise/cmd/frontend/internal/authz/resolvers/users.go
@@ -17,18 +17,7 @@ import (
 var _ graphqlbackend.UserConnectionResolver = &userConnectionResolver{}
 
 // userConnectionResolver resolves a list of user from the roaring bitmap with pagination.
-type userConnectionResolver struct {
-	ids *roaring.Bitmap
-
-	first int32
-	after *string
-
-	// cache results because they are used by multiple fields
-	once     sync.Once
-	users    []*types.User
-	pageInfo *graphqlutil.PageInfo
-	err      error
-}
+type userConnectionResolver struct { /* all structs must go */ }
 
 // 🚨 SECURITY: It is the caller's responsibility to ensure the current authenticated user
 // is the site admin because this method computes data from all available information in
diff --git a/enterprise/cmd/frontend/internal/dotcom/billing/events_graphql.go b/enterprise/cmd/frontend/internal/dotcom/billing/events_graphql.go
index 1d19b1e..b85a84a 100644
--- a/enterprise/cmd/frontend/internal/dotcom/billing/events_graphql.go
+++ b/enterprise/cmd/frontend/internal/dotcom/billing/events_graphql.go
@@ -11,9 +11,7 @@ import (
 )
 
 // productSubscriptionEvent implements the GraphQL type ProductSubscriptionEvent.
-type productSubscriptionEvent struct {
-	v *stripe.Event
-}
+type productSubscriptionEvent struct { /* all structs must go */ }
 
 // ToProductSubscriptionEvent returns a resolver for the GraphQL type ProductSubscriptionEvent from
 // the given billing event.
diff --git a/enterprise/cmd/frontend/internal/dotcom/billing/plans_graphql.go b/enterprise/cmd/frontend/internal/dotcom/billing/plans_graphql.go
index 716c43f..0f3c398 100644
--- a/enterprise/cmd/frontend/internal/dotcom/billing/plans_graphql.go
+++ b/enterprise/cmd/frontend/internal/dotcom/billing/plans_graphql.go
@@ -12,23 +12,10 @@ import (
 )
 
 // productPlan implements the GraphQL type ProductPlan.
-type productPlan struct {
-	billingPlanID       string
-	productPlanID       string
-	name                string
-	pricePerUserPerYear int32
-	minQuantity         *int32
-	maxQuantity         *int32
-	tiersMode           string
-	planTiers           []graphqlbackend.PlanTier
-}
+type productPlan struct { /* all structs must go */ }
 
 // planTier implements the GraphQL type PlanTier.
-type planTier struct {
-	unitAmount int64
-	upTo       int64
-	flatAmount int64
-}
+type planTier struct { /* all structs must go */ }
 
 func (r *productPlan) ProductPlanID() string      { return r.productPlanID }
 func (r *productPlan) BillingPlanID() string      { return r.billingPlanID }
diff --git a/enterprise/cmd/frontend/internal/dotcom/productsubscription/invoices_graphql.go b/enterprise/cmd/frontend/internal/dotcom/productsubscription/invoices_graphql.go
index e776c79..8ed3e8f 100644
--- a/enterprise/cmd/frontend/internal/dotcom/productsubscription/invoices_graphql.go
+++ b/enterprise/cmd/frontend/internal/dotcom/productsubscription/invoices_graphql.go
@@ -15,12 +15,7 @@ import (
 	"github.com/stripe/stripe-go/sub"
 )
 
-type productSubscriptionPreviewInvoice struct {
-	price         int32
-	amountDue     int32
-	prorationDate *int64
-	before, after *productSubscriptionInvoiceItem
-}
+type productSubscriptionPreviewInvoice struct { /* all structs must go */ }
 
 func (r *productSubscriptionPreviewInvoice) Price() int32     { return r.price }
 func (r *productSubscriptionPreviewInvoice) AmountDue() int32 { return r.amountDue }
diff --git a/enterprise/cmd/frontend/internal/dotcom/productsubscription/license_expiration_test.go b/enterprise/cmd/frontend/internal/dotcom/productsubscription/license_expiration_test.go
index 8533eb7..58efb0f 100644
--- a/enterprise/cmd/frontend/internal/dotcom/productsubscription/license_expiration_test.go
+++ b/enterprise/cmd/frontend/internal/dotcom/productsubscription/license_expiration_test.go
@@ -17,9 +17,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/schema"
 )
 
-type fakeSlackClient struct {
-	payloads []*slack.Payload
-}
+type fakeSlackClient struct { /* all structs must go */ }
 
 func (c *fakeSlackClient) Post(ctx context.Context, payload *slack.Payload) error {
 	c.payloads = append(c.payloads, payload)
diff --git a/enterprise/cmd/frontend/internal/dotcom/productsubscription/licenses_db.go b/enterprise/cmd/frontend/internal/dotcom/productsubscription/licenses_db.go
index dff2ad9..0c3da81 100644
--- a/enterprise/cmd/frontend/internal/dotcom/productsubscription/licenses_db.go
+++ b/enterprise/cmd/frontend/internal/dotcom/productsubscription/licenses_db.go
@@ -12,12 +12,7 @@ import (
 )
 
 // dbLicense describes an product license row in the product_licenses DB table.
-type dbLicense struct {
-	ID                    string // UUID
-	ProductSubscriptionID string // UUID
-	LicenseKey            string
-	CreatedAt             time.Time
-}
+type dbLicense struct { /* all structs must go */ }
 
 // errLicenseNotFound occurs when a database operation expects a specific Sourcegraph
 // license to exist but it does not exist.
@@ -79,11 +74,7 @@ func (s dbLicenses) GetByLicenseKey(ctx context.Context, licenseKey string) (*db
 }
 
 // dbLicensesListOptions contains options for listing product licenses.
-type dbLicensesListOptions struct {
-	LicenseKeySubstring   string
-	ProductSubscriptionID string // only list product licenses for this subscription (by UUID)
-	*db.LimitOffset
-}
+type dbLicensesListOptions struct { /* all structs must go */ }
 
 func (o dbLicensesListOptions) sqlConditions() []*sqlf.Query {
 	conds := []*sqlf.Query{sqlf.Sprintf("TRUE")}
@@ -142,9 +133,4 @@ func (dbLicenses) Count(ctx context.Context, opt dbLicensesListOptions) (int, er
 	return count, nil
 }
 
-type mockLicenses struct {
-	Create          func(subscriptionID, licenseKey string) (id string, err error)
-	GetByID         func(id string) (*dbLicense, error)
-	GetByLicenseKey func(licenseKey string) (*dbLicense, error)
-	List            func(ctx context.Context, opt dbLicensesListOptions) ([]*dbLicense, error)
-}
+type mockLicenses struct { /* all structs must go */ }
diff --git a/enterprise/cmd/frontend/internal/dotcom/productsubscription/licenses_graphql.go b/enterprise/cmd/frontend/internal/dotcom/productsubscription/licenses_graphql.go
index 4127046..8ee53a5 100644
--- a/enterprise/cmd/frontend/internal/dotcom/productsubscription/licenses_graphql.go
+++ b/enterprise/cmd/frontend/internal/dotcom/productsubscription/licenses_graphql.go
@@ -22,9 +22,7 @@ func init() {
 }
 
 // productLicense implements the GraphQL type ProductLicense.
-type productLicense struct {
-	v *dbLicense
-}
+type productLicense struct { /* all structs must go */ }
 
 // productLicenseByID looks up and returns the ProductLicense with the given GraphQL ID. If no such
 // ProductLicense exists, it returns a non-nil error.
@@ -152,14 +150,7 @@ func (ProductSubscriptionLicensingResolver) ProductLicenses(ctx context.Context,
 //
 // 🚨 SECURITY: When instantiating a productLicenseConnection value, the caller MUST
 // check permissions.
-type productLicenseConnection struct {
-	opt dbLicensesListOptions
-
-	// cache results because they are used by multiple fields
-	once    sync.Once
-	results []*dbLicense
-	err     error
-}
+type productLicenseConnection struct { /* all structs must go */ }
 
 func (r *productLicenseConnection) compute(ctx context.Context) ([]*dbLicense, error) {
 	r.once.Do(func() {
diff --git a/enterprise/cmd/frontend/internal/dotcom/productsubscription/mock_db.go b/enterprise/cmd/frontend/internal/dotcom/productsubscription/mock_db.go
index c5343bc..4a902d2 100644
--- a/enterprise/cmd/frontend/internal/dotcom/productsubscription/mock_db.go
+++ b/enterprise/cmd/frontend/internal/dotcom/productsubscription/mock_db.go
@@ -1,8 +1,5 @@
 package productsubscription
 
-type dbMocks struct {
-	subscriptions mockSubscriptions
-	licenses      mockLicenses
-}
+type dbMocks struct { /* all structs must go */ }
 
 var mocks dbMocks
diff --git a/enterprise/cmd/frontend/internal/dotcom/productsubscription/subscription_invoice_item_graphql.go b/enterprise/cmd/frontend/internal/dotcom/productsubscription/subscription_invoice_item_graphql.go
index d7813b6..ef2e0c3 100644
--- a/enterprise/cmd/frontend/internal/dotcom/productsubscription/subscription_invoice_item_graphql.go
+++ b/enterprise/cmd/frontend/internal/dotcom/productsubscription/subscription_invoice_item_graphql.go
@@ -28,11 +28,7 @@ func (r *productSubscription) InvoiceItem(ctx context.Context) (graphqlbackend.P
 	}, nil
 }
 
-type productSubscriptionInvoiceItem struct {
-	plan      *stripe.Plan
-	userCount int32
-	expiresAt time.Time
-}
+type productSubscriptionInvoiceItem struct { /* all structs must go */ }
 
 var _ graphqlbackend.ProductSubscriptionInvoiceItem = &productSubscriptionInvoiceItem{}
 
diff --git a/enterprise/cmd/frontend/internal/dotcom/productsubscription/subscriptions_db.go b/enterprise/cmd/frontend/internal/dotcom/productsubscription/subscriptions_db.go
index 2006cf7..7f87bf0 100644
--- a/enterprise/cmd/frontend/internal/dotcom/productsubscription/subscriptions_db.go
+++ b/enterprise/cmd/frontend/internal/dotcom/productsubscription/subscriptions_db.go
@@ -14,13 +14,7 @@ import (
 
 // dbSubscription describes an product subscription row in the product_subscriptions DB
 // table.
-type dbSubscription struct {
-	ID                    string // UUID
-	UserID                int32
-	BillingSubscriptionID *string // this subscription's ID in the billing system
-	CreatedAt             time.Time
-	ArchivedAt            *time.Time
-}
+type dbSubscription struct { /* all structs must go */ }
 
 var emailQueries = sqlf.Sprintf(`all_primary_emails AS (
 	SELECT user_id, FIRST_VALUE(email) over (PARTITION BY user_id ORDER BY created_at ASC) AS primary_email
@@ -74,12 +68,7 @@ func (s dbSubscriptions) GetByID(ctx context.Context, id string) (*dbSubscriptio
 }
 
 // dbSubscriptionsListOptions contains options for listing product subscriptions.
-type dbSubscriptionsListOptions struct {
-	UserID          int32 // only list product subscriptions for this user
-	Query           string
-	IncludeArchived bool
-	*db.LimitOffset
-}
+type dbSubscriptionsListOptions struct { /* all structs must go */ }
 
 func (o dbSubscriptionsListOptions) sqlConditions() []*sqlf.Query {
 	conds := []*sqlf.Query{sqlf.Sprintf("TRUE")}
@@ -155,9 +144,7 @@ WHERE (%s)`, emailQueries, sqlf.Join(opt.sqlConditions(), ") AND ("))
 // dbSubscriptionsUpdate represents an update to a product subscription in the database. Each field
 // represents an update to the corresponding database field if the Go value is non-nil. If the Go
 // value is nil, the field remains unchanged in the database.
-type dbSubscriptionUpdate struct {
-	billingSubscriptionID *sql.NullString
-}
+type dbSubscriptionUpdate struct { /* all structs must go */ }
 
 // Update updates a product subscription.
 func (dbSubscriptions) Update(ctx context.Context, id string, update dbSubscriptionUpdate) error {
@@ -205,9 +192,4 @@ func (dbSubscriptions) Archive(ctx context.Context, id string) error {
 	return nil
 }
 
-type mockSubscriptions struct {
-	Create  func(userID int32) (id string, err error)
-	GetByID func(id string) (*dbSubscription, error)
-	Archive func(id string) error
-	List    func(ctx context.Context, opt dbSubscriptionsListOptions) ([]*dbSubscription, error)
-}
+type mockSubscriptions struct { /* all structs must go */ }
diff --git a/enterprise/cmd/frontend/internal/dotcom/productsubscription/subscriptions_graphql.go b/enterprise/cmd/frontend/internal/dotcom/productsubscription/subscriptions_graphql.go
index 38332ab..54ea5c9 100644
--- a/enterprise/cmd/frontend/internal/dotcom/productsubscription/subscriptions_graphql.go
+++ b/enterprise/cmd/frontend/internal/dotcom/productsubscription/subscriptions_graphql.go
@@ -31,9 +31,7 @@ func init() {
 }
 
 // productSubscription implements the GraphQL type ProductSubscription.
-type productSubscription struct {
-	v *dbSubscription
-}
+type productSubscription struct { /* all structs must go */ }
 
 // productSubscriptionByID looks up and returns the ProductSubscription with the given GraphQL
 // ID. If no such ProductSubscription exists, it returns a non-nil error.
@@ -498,14 +496,7 @@ func (ProductSubscriptionLicensingResolver) ProductSubscriptions(ctx context.Con
 //
 // 🚨 SECURITY: When instantiating a productSubscriptionConnection value, the caller MUST
 // check permissions.
-type productSubscriptionConnection struct {
-	opt dbSubscriptionsListOptions
-
-	// cache results because they are used by multiple fields
-	once    sync.Once
-	results []*dbSubscription
-	err     error
-}
+type productSubscriptionConnection struct { /* all structs must go */ }
 
 func (r *productSubscriptionConnection) compute(ctx context.Context) ([]*dbSubscription, error) {
 	r.once.Do(func() {
diff --git a/enterprise/cmd/frontend/internal/graphqlbackend/dotcom.go b/enterprise/cmd/frontend/internal/graphqlbackend/dotcom.go
index 6a7b593..4097c46 100644
--- a/enterprise/cmd/frontend/internal/graphqlbackend/dotcom.go
+++ b/enterprise/cmd/frontend/internal/graphqlbackend/dotcom.go
@@ -13,7 +13,4 @@ func init() {
 }
 
 // dotcomResolver implements the GraphQL types DotcomMutation and DotcomQuery.
-type dotcomResolver struct {
-	productsubscription.ProductSubscriptionLicensingResolver
-	billing.BillingResolver
-}
+type dotcomResolver struct { /* all structs must go */ }
diff --git a/enterprise/cmd/frontend/internal/licensing/enforcement_test.go b/enterprise/cmd/frontend/internal/licensing/enforcement_test.go
index d3a3449..ad0e9cd 100644
--- a/enterprise/cmd/frontend/internal/licensing/enforcement_test.go
+++ b/enterprise/cmd/frontend/internal/licensing/enforcement_test.go
@@ -9,11 +9,7 @@ import (
 )
 
 func TestEnforcementPreCreateUser(t *testing.T) {
-	tests := []struct {
-		license         *license.Info
-		activeUserCount int
-		wantErr         bool
-	}{
+	tests := []struct { /* all structs must go */ }{
 		// See the impl for why we treat UserCount == 0 as unlimited.
 		{
 			license:         &license.Info{UserCount: 0},
diff --git a/enterprise/cmd/frontend/internal/licensing/licensing.go b/enterprise/cmd/frontend/internal/licensing/licensing.go
index 8d375ea..f1fcad7 100644
--- a/enterprise/cmd/frontend/internal/licensing/licensing.go
+++ b/enterprise/cmd/frontend/internal/licensing/licensing.go
@@ -13,9 +13,7 @@ import (
 )
 
 // Info wraps the lower-level license.Info and exposes plan and feature information.
-type Info struct {
-	license.Info
-}
+type Info struct { /* all structs must go */ }
 
 // publicKey is the public key used to verify product license keys.
 var publicKey = func() ssh.PublicKey {
diff --git a/enterprise/cmd/frontend/internal/licensing/plans_test.go b/enterprise/cmd/frontend/internal/licensing/plans_test.go
index ac0d55e..955f10e 100644
--- a/enterprise/cmd/frontend/internal/licensing/plans_test.go
+++ b/enterprise/cmd/frontend/internal/licensing/plans_test.go
@@ -27,10 +27,7 @@ func TestPlan_isKnown(t *testing.T) {
 }
 
 func TestInfo_Plan(t *testing.T) {
-	tests := []struct {
-		tags []string
-		want Plan
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{tags: []string{"foo", testPlan.tag()}, want: testPlan},
 		{tags: []string{"foo", testPlan.tag(), Plan("xyz").tag()}, want: testPlan},
 		{tags: []string{"foo", Plan("xyz").tag(), testPlan.tag()}, want: testPlan},
diff --git a/enterprise/cmd/frontend/internal/licensing/tags_test.go b/enterprise/cmd/frontend/internal/licensing/tags_test.go
index 4650203..5b6c183 100644
--- a/enterprise/cmd/frontend/internal/licensing/tags_test.go
+++ b/enterprise/cmd/frontend/internal/licensing/tags_test.go
@@ -6,11 +6,7 @@ import (
 )
 
 func TestProductNameWithBrand(t *testing.T) {
-	tests := []struct {
-		hasLicense  bool
-		licenseTags []string
-		want        string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{hasLicense: false, want: "Sourcegraph Free"},
 		{hasLicense: true, licenseTags: nil, want: "Sourcegraph Enterprise"},
 		{hasLicense: true, licenseTags: []string{}, want: "Sourcegraph Enterprise"},
diff --git a/enterprise/cmd/frontend/internal/registry/extension_connection_graphql_test.go b/enterprise/cmd/frontend/internal/registry/extension_connection_graphql_test.go
index ceb698b..c1b5abf 100644
--- a/enterprise/cmd/frontend/internal/registry/extension_connection_graphql_test.go
+++ b/enterprise/cmd/frontend/internal/registry/extension_connection_graphql_test.go
@@ -38,10 +38,7 @@ func TestFilteringExtensionIDs(t *testing.T) {
 }
 
 func TestToDBExtensionsListOptions(t *testing.T) {
-	tests := map[string]struct {
-		args graphqlbackend.RegistryExtensionConnectionArgs
-		want dbExtensionsListOptions
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"empty": {
 			args: graphqlbackend.RegistryExtensionConnectionArgs{},
 			want: dbExtensionsListOptions{},
diff --git a/enterprise/cmd/frontend/internal/registry/extension_graphql.go b/enterprise/cmd/frontend/internal/registry/extension_graphql.go
index 3fe2933..76ed2a4 100644
--- a/enterprise/cmd/frontend/internal/registry/extension_graphql.go
+++ b/enterprise/cmd/frontend/internal/registry/extension_graphql.go
@@ -12,13 +12,7 @@ import (
 )
 
 // extensionDBResolver implements the GraphQL type RegistryExtension.
-type extensionDBResolver struct {
-	v *dbExtension
-
-	// Supplied as part of list endpoints, but
-	// calculated as part of single-extension endpoints
-	r *dbRelease
-}
+type extensionDBResolver struct { /* all structs must go */ }
 
 func (r *extensionDBResolver) ID() graphql.ID {
 	return registry.MarshalRegistryExtensionID(registry.RegistryExtensionID{LocalID: r.v.ID})
diff --git a/enterprise/cmd/frontend/internal/registry/extensions_db.go b/enterprise/cmd/frontend/internal/registry/extensions_db.go
index 4f85d17..c0f366b 100644
--- a/enterprise/cmd/frontend/internal/registry/extensions_db.go
+++ b/enterprise/cmd/frontend/internal/registry/extensions_db.go
@@ -20,44 +20,12 @@ import (
 // It is the internal form of github.com/sourcegraph/sourcegraph/internal/registry.Extension (which is
 // the external API type). These types should generally be kept in sync, but registry.Extension
 // updates require backcompat.
-type dbExtension struct {
-	ID        int32
-	UUID      string
-	Publisher dbPublisher
-	Name      string
-	CreatedAt time.Time
-	UpdatedAt time.Time
-
-	// NonCanonicalExtensionID is the denormalized fully qualified extension ID
-	// ("[registry/]publisher/name" format), using the username/name of the extension's publisher
-	// (joined from another table) as of when the query executed. Do not persist this, because the
-	// (denormalized) registry and publisher names can change.
-	//
-	// If this value is obtained directly from a method on RegistryExtensions, this field will never
-	// contain the registry name prefix (which is necessary to distinguish local extensions from
-	// remote extensions). Call prefixLocalExtensionID to add it. The recommended way to apply this
-	// automatically (when needed) is to use registry.GetExtensionByExtensionID instead of
-	// (dbExtensions).GetByExtensionID.
-	NonCanonicalExtensionID string
-
-	// NonCanonicalRegistry is the denormalized registry name (as of when this field was set). This
-	// field is only set by prefixLocalExtensionID and is always empty if this value is obtained
-	// directly from a method on RegistryExtensions. Do not persist this value, because the
-	// (denormalized) registry name can change.
-	NonCanonicalRegistry string
-
-	// NonCanonicalIsWorkInProgress is whether this extension was marked as a WIP extension when it
-	// was fetched. This information comes from a separate table (registry_extension_releases, not
-	// registry_extensions), so it is not canonical.
-	NonCanonicalIsWorkInProgress bool
-}
+type dbExtension struct { /* all structs must go */ }
 
 type dbExtensions struct{}
 
 // extensionNotFoundError occurs when an extension is not found in the extension registry.
-type extensionNotFoundError struct {
-	args []interface{}
-}
+type extensionNotFoundError struct { /* all structs must go */ }
 
 // NotFound implements errcode.NotFounder.
 func (err extensionNotFoundError) NotFound() bool { return true }
@@ -180,14 +148,7 @@ func (s dbExtensions) GetByExtensionID(ctx context.Context, extensionID string)
 }
 
 // dbExtensionsListOptions contains options for listing registry extensions.
-type dbExtensionsListOptions struct {
-	Publisher              dbPublisher
-	Query                  string // matches the extension ID and latest release's manifest's title
-	Category               string // matches the latest release's manifest's categories array
-	Tag                    string // matches the latest release's manifest's tags array
-	PrioritizeExtensionIDs []string
-	*db.LimitOffset
-}
+type dbExtensionsListOptions struct { /* all structs must go */ }
 
 // extensionIsWIPExpr is the SQL expression for whether the extension is a WIP extension.
 //
@@ -364,11 +325,4 @@ func (dbExtensions) Delete(ctx context.Context, id int32) error {
 }
 
 // mockExtensions mocks the registry extensions store.
-type mockExtensions struct {
-	Create           func(publisherUserID, publisherOrgID int32, name string) (int32, error)
-	GetByID          func(id int32) (*dbExtension, error)
-	GetByUUID        func(uuid string) (*dbExtension, error)
-	GetByExtensionID func(extensionID string) (*dbExtension, error)
-	Update           func(id int32, name *string) error
-	Delete           func(id int32) error
-}
+type mockExtensions struct { /* all structs must go */ }
diff --git a/enterprise/cmd/frontend/internal/registry/extensions_db_test.go b/enterprise/cmd/frontend/internal/registry/extensions_db_test.go
index b175624..ddef9e1 100644
--- a/enterprise/cmd/frontend/internal/registry/extensions_db_test.go
+++ b/enterprise/cmd/frontend/internal/registry/extensions_db_test.go
@@ -15,10 +15,7 @@ import (
 
 // registryExtensionNamesForTests is a list of test cases containing valid and invalid registry
 // extension names.
-var registryExtensionNamesForTests = []struct {
-	name      string
-	wantValid bool
-}{
+var registryExtensionNamesForTests = []struct { /* all structs must go */ }{
 	{"", false},
 	{"a", true},
 	{"-a", false},
@@ -172,10 +169,7 @@ func TestRegistryExtensions(t *testing.T) {
 		}
 	})
 
-	publishers := map[string]struct {
-		publisherUserID, publisherOrgID int32
-		publisherName                   string
-	}{
+	publishers := map[string]struct { /* all structs must go */ }{
 		"user": {publisherUserID: user.ID, publisherName: "u"},
 		"org":  {publisherOrgID: org.ID, publisherName: "o"},
 	}
diff --git a/enterprise/cmd/frontend/internal/registry/http_api.go b/enterprise/cmd/frontend/internal/registry/http_api.go
index 1848c86..f0261ba 100644
--- a/enterprise/cmd/frontend/internal/registry/http_api.go
+++ b/enterprise/cmd/frontend/internal/registry/http_api.go
@@ -121,10 +121,7 @@ func newExtension(v *dbExtension, manifest *string, publishedAt time.Time) *regi
 	}
 }
 
-type responseRecorder struct {
-	http.ResponseWriter
-	code int
-}
+type responseRecorder struct { /* all structs must go */ }
 
 func (r *responseRecorder) WriteHeader(code int) {
 	r.code = code
diff --git a/enterprise/cmd/frontend/internal/registry/mock_db.go b/enterprise/cmd/frontend/internal/registry/mock_db.go
index 1400b5a..619c59c 100644
--- a/enterprise/cmd/frontend/internal/registry/mock_db.go
+++ b/enterprise/cmd/frontend/internal/registry/mock_db.go
@@ -4,9 +4,6 @@ func resetMocks() {
 	mocks = dbMocks{}
 }
 
-type dbMocks struct {
-	extensions mockExtensions
-	releases   mockReleases
-}
+type dbMocks struct { /* all structs must go */ }
 
 var mocks dbMocks
diff --git a/enterprise/cmd/frontend/internal/registry/publisher_connection_graphql.go b/enterprise/cmd/frontend/internal/registry/publisher_connection_graphql.go
index 8d0aae1..68576b1 100644
--- a/enterprise/cmd/frontend/internal/registry/publisher_connection_graphql.go
+++ b/enterprise/cmd/frontend/internal/registry/publisher_connection_graphql.go
@@ -20,14 +20,7 @@ func extensionRegistryPublishers(ctx context.Context, args *graphqlutil.Connecti
 }
 
 // registryPublisherConnection resolves a list of registry publishers.
-type registryPublisherConnection struct {
-	opt dbPublishersListOptions
-
-	// cache results because they are used by multiple fields
-	once               sync.Once
-	registryPublishers []*dbPublisher
-	err                error
-}
+type registryPublisherConnection struct { /* all structs must go */ }
 
 func (r *registryPublisherConnection) compute(ctx context.Context) ([]*dbPublisher, error) {
 	r.once.Do(func() {
diff --git a/enterprise/cmd/frontend/internal/registry/publisher_graphql.go b/enterprise/cmd/frontend/internal/registry/publisher_graphql.go
index c233b3f..3db40b8 100644
--- a/enterprise/cmd/frontend/internal/registry/publisher_graphql.go
+++ b/enterprise/cmd/frontend/internal/registry/publisher_graphql.go
@@ -43,10 +43,7 @@ func extensionRegistryViewerPublishers(ctx context.Context) ([]graphqlbackend.Re
 }
 
 // registryPublisher implements the GraphQL type RegistryPublisher.
-type registryPublisher struct {
-	user *graphqlbackend.UserResolver
-	org  *graphqlbackend.OrgResolver
-}
+type registryPublisher struct { /* all structs must go */ }
 
 var _ graphqlbackend.RegistryPublisher = &registryPublisher{}
 
@@ -96,9 +93,7 @@ func getRegistryPublisher(ctx context.Context, publisher dbPublisher) (*registry
 	}
 }
 
-type registryPublisherID struct {
-	userID, orgID int32
-}
+type registryPublisherID struct { /* all structs must go */ }
 
 func toRegistryPublisherID(extension *dbExtension) *registryPublisherID {
 	return &registryPublisherID{
diff --git a/enterprise/cmd/frontend/internal/registry/publishers_db.go b/enterprise/cmd/frontend/internal/registry/publishers_db.go
index cbe6ef9..eafe795 100644
--- a/enterprise/cmd/frontend/internal/registry/publishers_db.go
+++ b/enterprise/cmd/frontend/internal/registry/publishers_db.go
@@ -11,21 +11,13 @@ import (
 )
 
 // dbPublisher is a publisher of extensions to the registry.
-type dbPublisher struct {
-	UserID, OrgID int32 // exactly 1 is nonzero
-
-	// NonCanonicalExtensionID is the publisher's username (for a user) or name (for an org) as of
-	// when the query executed. Do not persist this.
-	NonCanonicalName string
-}
+type dbPublisher struct { /* all structs must go */ }
 
 // IsZero reports whether p is the zero value.
 func (p dbPublisher) IsZero() bool { return p == dbPublisher{} }
 
 // publisherNotFoundError occurs when a registry extension publisher is not found.
-type publisherNotFoundError struct {
-	args []interface{}
-}
+type publisherNotFoundError struct { /* all structs must go */ }
 
 // NotFound implements errcode.NotFounder.
 func (err publisherNotFoundError) NotFound() bool { return true }
@@ -36,9 +28,7 @@ func (err publisherNotFoundError) Error() string {
 
 // dbPublishersListOptions contains options for listing publishers of extensions in the
 // registry.
-type dbPublishersListOptions struct {
-	*db.LimitOffset
-}
+type dbPublishersListOptions struct { /* all structs must go */ }
 
 func (o dbPublishersListOptions) sqlConditions() []*sqlf.Query {
 	var conds []*sqlf.Query
diff --git a/enterprise/cmd/frontend/internal/registry/releases_db.go b/enterprise/cmd/frontend/internal/registry/releases_db.go
index 2e779cc..28e22c3 100644
--- a/enterprise/cmd/frontend/internal/registry/releases_db.go
+++ b/enterprise/cmd/frontend/internal/registry/releases_db.go
@@ -13,25 +13,13 @@ import (
 )
 
 // dbRelease describes a release of an extension in the extension registry.
-type dbRelease struct {
-	ID                  int64
-	RegistryExtensionID int32
-	CreatorUserID       int32
-	ReleaseVersion      *string
-	ReleaseTag          string
-	Manifest            string
-	Bundle              *string
-	SourceMap           *string
-	CreatedAt           time.Time
-}
+type dbRelease struct { /* all structs must go */ }
 
 type dbReleases struct{}
 
 // releaseNotFoundError occurs when an extension release is not found in the
 // extension registry.
-type releaseNotFoundError struct {
-	args []interface{}
-}
+type releaseNotFoundError struct { /* all structs must go */ }
 
 // NotFound implements errcode.NotFounder.
 func (err releaseNotFoundError) NotFound() bool { return true }
@@ -159,8 +147,4 @@ WHERE id=%d AND deleted_at IS NULL`, id)
 }
 
 // mockReleases mocks the registry extension releases store.
-type mockReleases struct {
-	Create         func(release *dbRelease) (int64, error)
-	GetLatest      func(registryExtensionID int32, releaseTag string, includeArtifacts bool) (*dbRelease, error)
-	GetLatestBatch func(registryExtensionIDs []int32, releaseTag string, includeArtifacts bool) ([]*dbRelease, error)
-}
+type mockReleases struct { /* all structs must go */ }
diff --git a/enterprise/cmd/precise-code-intel-bundle-manager/internal/database/database.go b/enterprise/cmd/precise-code-intel-bundle-manager/internal/database/database.go
index 7dc1d44..fc1fedb 100644
--- a/enterprise/cmd/precise-code-intel-bundle-manager/internal/database/database.go
+++ b/enterprise/cmd/precise-code-intel-bundle-manager/internal/database/database.go
@@ -52,11 +52,7 @@ type Database interface {
 	PackageInformation(ctx context.Context, path string, packageInformationID string) (bundles.PackageInformationData, bool, error)
 }
 
-type databaseImpl struct {
-	filename        string
-	reader          persistence.Reader // database file reader
-	numResultChunks int                // numResultChunks value from meta row
-}
+type databaseImpl struct { /* all structs must go */ }
 
 var _ Database = &databaseImpl{}
 
@@ -74,17 +70,10 @@ func newRange(startLine, startCharacter, endLine, endCharacter int) bundles.Rang
 }
 
 // DocumentPathRangeID denotes a range qualified by its containing document.
-type DocumentPathRangeID struct {
-	Path    string
-	RangeID types.ID
-}
+type DocumentPathRangeID struct { /* all structs must go */ }
 
 // ErrMalformedBundle is returned when a bundle is missing an expected map key.
-type ErrMalformedBundle struct {
-	Filename string // the filename of the malformed bundle
-	Name     string // the type of value key should contain
-	Key      string // the missing key
-}
+type ErrMalformedBundle struct { /* all structs must go */ }
 
 func (e ErrMalformedBundle) Error() string {
 	return fmt.Sprintf("malformed bundle: unknown %s %s", e.Name, e.Key)
diff --git a/enterprise/cmd/precise-code-intel-bundle-manager/internal/database/database_test.go b/enterprise/cmd/precise-code-intel-bundle-manager/internal/database/database_test.go
index 1a6f8eb..f3b1e2a 100644
--- a/enterprise/cmd/precise-code-intel-bundle-manager/internal/database/database_test.go
+++ b/enterprise/cmd/precise-code-intel-bundle-manager/internal/database/database_test.go
@@ -21,10 +21,7 @@ func init() {
 }
 
 func TestDatabaseExists(t *testing.T) {
-	testCases := []struct {
-		path     string
-		expected bool
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{"cmd/lsif-go/main.go", true},
 		{"internal/index/indexer.go", true},
 		{"missing.go", false},
@@ -307,15 +304,7 @@ func TestDatabaseMonikerResults(t *testing.T) {
 		},
 	}
 
-	testCases := []struct {
-		tableName          string
-		scheme             string
-		identifier         string
-		skip               int
-		take               int
-		expectedLocations  []bundles.Location
-		expectedTotalCount int
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{"definitions", "gomod", "github.com/sourcegraph/lsif-go/protocol:Edge", 0, 100, edgeLocations, 10},
 		{"definitions", "gomod", "github.com/sourcegraph/lsif-go/protocol:Edge", 3, 4, edgeLocations[3:7], 10},
 		{"references", "gomod", "github.com/slimsag/godocmd:ToMarkdown", 0, 100, markdownLocations, 1},
diff --git a/enterprise/cmd/precise-code-intel-bundle-manager/internal/database/mock_database_test.go b/enterprise/cmd/precise-code-intel-bundle-manager/internal/database/mock_database_test.go
index 58df096..bba75cb 100644
--- a/enterprise/cmd/precise-code-intel-bundle-manager/internal/database/mock_database_test.go
+++ b/enterprise/cmd/precise-code-intel-bundle-manager/internal/database/mock_database_test.go
@@ -12,38 +12,7 @@ import (
 // package
 // github.com/sourcegraph/sourcegraph/enterprise/cmd/precise-code-intel-bundle-manager/internal/database)
 // used for unit testing.
-type MockDatabase struct {
-	// CloseFunc is an instance of a mock function object controlling the
-	// behavior of the method Close.
-	CloseFunc *DatabaseCloseFunc
-	// DefinitionsFunc is an instance of a mock function object controlling
-	// the behavior of the method Definitions.
-	DefinitionsFunc *DatabaseDefinitionsFunc
-	// DiagnosticsFunc is an instance of a mock function object controlling
-	// the behavior of the method Diagnostics.
-	DiagnosticsFunc *DatabaseDiagnosticsFunc
-	// ExistsFunc is an instance of a mock function object controlling the
-	// behavior of the method Exists.
-	ExistsFunc *DatabaseExistsFunc
-	// HoverFunc is an instance of a mock function object controlling the
-	// behavior of the method Hover.
-	HoverFunc *DatabaseHoverFunc
-	// MonikerResultsFunc is an instance of a mock function object
-	// controlling the behavior of the method MonikerResults.
-	MonikerResultsFunc *DatabaseMonikerResultsFunc
-	// MonikersByPositionFunc is an instance of a mock function object
-	// controlling the behavior of the method MonikersByPosition.
-	MonikersByPositionFunc *DatabaseMonikersByPositionFunc
-	// PackageInformationFunc is an instance of a mock function object
-	// controlling the behavior of the method PackageInformation.
-	PackageInformationFunc *DatabasePackageInformationFunc
-	// RangesFunc is an instance of a mock function object controlling the
-	// behavior of the method Ranges.
-	RangesFunc *DatabaseRangesFunc
-	// ReferencesFunc is an instance of a mock function object controlling
-	// the behavior of the method References.
-	ReferencesFunc *DatabaseReferencesFunc
-}
+type MockDatabase struct { /* all structs must go */ }
 
 // NewMockDatabase creates a new mock of the Database interface. All methods
 // return zero values for all results, unless overwritten.
@@ -141,12 +110,7 @@ func NewMockDatabaseFrom(i Database) *MockDatabase {
 
 // DatabaseCloseFunc describes the behavior when the Close method of the
 // parent MockDatabase instance is invoked.
-type DatabaseCloseFunc struct {
-	defaultHook func() error
-	hooks       []func() error
-	history     []DatabaseCloseFuncCall
-	mutex       sync.Mutex
-}
+type DatabaseCloseFunc struct { /* all structs must go */ }
 
 // Close delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -220,11 +184,7 @@ func (f *DatabaseCloseFunc) History() []DatabaseCloseFuncCall {
 
 // DatabaseCloseFuncCall is an object that describes an invocation of method
 // Close on an instance of MockDatabase.
-type DatabaseCloseFuncCall struct {
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type DatabaseCloseFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -240,12 +200,7 @@ func (c DatabaseCloseFuncCall) Results() []interface{} {
 
 // DatabaseDefinitionsFunc describes the behavior when the Definitions
 // method of the parent MockDatabase instance is invoked.
-type DatabaseDefinitionsFunc struct {
-	defaultHook func(context.Context, string, int, int) ([]client.Location, error)
-	hooks       []func(context.Context, string, int, int) ([]client.Location, error)
-	history     []DatabaseDefinitionsFuncCall
-	mutex       sync.Mutex
-}
+type DatabaseDefinitionsFunc struct { /* all structs must go */ }
 
 // Definitions delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -320,26 +275,7 @@ func (f *DatabaseDefinitionsFunc) History() []DatabaseDefinitionsFuncCall {
 
 // DatabaseDefinitionsFuncCall is an object that describes an invocation of
 // method Definitions on an instance of MockDatabase.
-type DatabaseDefinitionsFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 int
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []client.Location
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type DatabaseDefinitionsFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -355,12 +291,7 @@ func (c DatabaseDefinitionsFuncCall) Results() []interface{} {
 
 // DatabaseDiagnosticsFunc describes the behavior when the Diagnostics
 // method of the parent MockDatabase instance is invoked.
-type DatabaseDiagnosticsFunc struct {
-	defaultHook func(context.Context, string, int, int) ([]client.Diagnostic, int, error)
-	hooks       []func(context.Context, string, int, int) ([]client.Diagnostic, int, error)
-	history     []DatabaseDiagnosticsFuncCall
-	mutex       sync.Mutex
-}
+type DatabaseDiagnosticsFunc struct { /* all structs must go */ }
 
 // Diagnostics delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -435,29 +366,7 @@ func (f *DatabaseDiagnosticsFunc) History() []DatabaseDiagnosticsFuncCall {
 
 // DatabaseDiagnosticsFuncCall is an object that describes an invocation of
 // method Diagnostics on an instance of MockDatabase.
-type DatabaseDiagnosticsFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 int
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []client.Diagnostic
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 int
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type DatabaseDiagnosticsFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -473,12 +382,7 @@ func (c DatabaseDiagnosticsFuncCall) Results() []interface{} {
 
 // DatabaseExistsFunc describes the behavior when the Exists method of the
 // parent MockDatabase instance is invoked.
-type DatabaseExistsFunc struct {
-	defaultHook func(context.Context, string) (bool, error)
-	hooks       []func(context.Context, string) (bool, error)
-	history     []DatabaseExistsFuncCall
-	mutex       sync.Mutex
-}
+type DatabaseExistsFunc struct { /* all structs must go */ }
 
 // Exists delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -552,20 +456,7 @@ func (f *DatabaseExistsFunc) History() []DatabaseExistsFuncCall {
 
 // DatabaseExistsFuncCall is an object that describes an invocation of
 // method Exists on an instance of MockDatabase.
-type DatabaseExistsFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 bool
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type DatabaseExistsFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -581,12 +472,7 @@ func (c DatabaseExistsFuncCall) Results() []interface{} {
 
 // DatabaseHoverFunc describes the behavior when the Hover method of the
 // parent MockDatabase instance is invoked.
-type DatabaseHoverFunc struct {
-	defaultHook func(context.Context, string, int, int) (string, client.Range, bool, error)
-	hooks       []func(context.Context, string, int, int) (string, client.Range, bool, error)
-	history     []DatabaseHoverFuncCall
-	mutex       sync.Mutex
-}
+type DatabaseHoverFunc struct { /* all structs must go */ }
 
 // Hover delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -660,32 +546,7 @@ func (f *DatabaseHoverFunc) History() []DatabaseHoverFuncCall {
 
 // DatabaseHoverFuncCall is an object that describes an invocation of method
 // Hover on an instance of MockDatabase.
-type DatabaseHoverFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 int
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 string
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 client.Range
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 bool
-	// Result3 is the value of the 4th result returned from this method
-	// invocation.
-	Result3 error
-}
+type DatabaseHoverFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -701,12 +562,7 @@ func (c DatabaseHoverFuncCall) Results() []interface{} {
 
 // DatabaseMonikerResultsFunc describes the behavior when the MonikerResults
 // method of the parent MockDatabase instance is invoked.
-type DatabaseMonikerResultsFunc struct {
-	defaultHook func(context.Context, string, string, string, int, int) ([]client.Location, int, error)
-	hooks       []func(context.Context, string, string, string, int, int) ([]client.Location, int, error)
-	history     []DatabaseMonikerResultsFuncCall
-	mutex       sync.Mutex
-}
+type DatabaseMonikerResultsFunc struct { /* all structs must go */ }
 
 // MonikerResults delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -781,35 +637,7 @@ func (f *DatabaseMonikerResultsFunc) History() []DatabaseMonikerResultsFuncCall
 
 // DatabaseMonikerResultsFuncCall is an object that describes an invocation
 // of method MonikerResults on an instance of MockDatabase.
-type DatabaseMonikerResultsFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 string
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 string
-	// Arg4 is the value of the 5th argument passed to this method
-	// invocation.
-	Arg4 int
-	// Arg5 is the value of the 6th argument passed to this method
-	// invocation.
-	Arg5 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []client.Location
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 int
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type DatabaseMonikerResultsFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -825,12 +653,7 @@ func (c DatabaseMonikerResultsFuncCall) Results() []interface{} {
 
 // DatabaseMonikersByPositionFunc describes the behavior when the
 // MonikersByPosition method of the parent MockDatabase instance is invoked.
-type DatabaseMonikersByPositionFunc struct {
-	defaultHook func(context.Context, string, int, int) ([][]client.MonikerData, error)
-	hooks       []func(context.Context, string, int, int) ([][]client.MonikerData, error)
-	history     []DatabaseMonikersByPositionFuncCall
-	mutex       sync.Mutex
-}
+type DatabaseMonikersByPositionFunc struct { /* all structs must go */ }
 
 // MonikersByPosition delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -905,26 +728,7 @@ func (f *DatabaseMonikersByPositionFunc) History() []DatabaseMonikersByPositionF
 
 // DatabaseMonikersByPositionFuncCall is an object that describes an
 // invocation of method MonikersByPosition on an instance of MockDatabase.
-type DatabaseMonikersByPositionFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 int
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 [][]client.MonikerData
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type DatabaseMonikersByPositionFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -940,12 +744,7 @@ func (c DatabaseMonikersByPositionFuncCall) Results() []interface{} {
 
 // DatabasePackageInformationFunc describes the behavior when the
 // PackageInformation method of the parent MockDatabase instance is invoked.
-type DatabasePackageInformationFunc struct {
-	defaultHook func(context.Context, string, string) (client.PackageInformationData, bool, error)
-	hooks       []func(context.Context, string, string) (client.PackageInformationData, bool, error)
-	history     []DatabasePackageInformationFuncCall
-	mutex       sync.Mutex
-}
+type DatabasePackageInformationFunc struct { /* all structs must go */ }
 
 // PackageInformation delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -1020,26 +819,7 @@ func (f *DatabasePackageInformationFunc) History() []DatabasePackageInformationF
 
 // DatabasePackageInformationFuncCall is an object that describes an
 // invocation of method PackageInformation on an instance of MockDatabase.
-type DatabasePackageInformationFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 string
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 client.PackageInformationData
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 bool
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type DatabasePackageInformationFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -1055,12 +835,7 @@ func (c DatabasePackageInformationFuncCall) Results() []interface{} {
 
 // DatabaseRangesFunc describes the behavior when the Ranges method of the
 // parent MockDatabase instance is invoked.
-type DatabaseRangesFunc struct {
-	defaultHook func(context.Context, string, int, int) ([]client.CodeIntelligenceRange, error)
-	hooks       []func(context.Context, string, int, int) ([]client.CodeIntelligenceRange, error)
-	history     []DatabaseRangesFuncCall
-	mutex       sync.Mutex
-}
+type DatabaseRangesFunc struct { /* all structs must go */ }
 
 // Ranges delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -1134,26 +909,7 @@ func (f *DatabaseRangesFunc) History() []DatabaseRangesFuncCall {
 
 // DatabaseRangesFuncCall is an object that describes an invocation of
 // method Ranges on an instance of MockDatabase.
-type DatabaseRangesFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 int
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []client.CodeIntelligenceRange
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type DatabaseRangesFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -1169,12 +925,7 @@ func (c DatabaseRangesFuncCall) Results() []interface{} {
 
 // DatabaseReferencesFunc describes the behavior when the References method
 // of the parent MockDatabase instance is invoked.
-type DatabaseReferencesFunc struct {
-	defaultHook func(context.Context, string, int, int) ([]client.Location, error)
-	hooks       []func(context.Context, string, int, int) ([]client.Location, error)
-	history     []DatabaseReferencesFuncCall
-	mutex       sync.Mutex
-}
+type DatabaseReferencesFunc struct { /* all structs must go */ }
 
 // References delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -1248,26 +999,7 @@ func (f *DatabaseReferencesFunc) History() []DatabaseReferencesFuncCall {
 
 // DatabaseReferencesFuncCall is an object that describes an invocation of
 // method References on an instance of MockDatabase.
-type DatabaseReferencesFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 int
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []client.Location
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type DatabaseReferencesFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
diff --git a/enterprise/cmd/precise-code-intel-bundle-manager/internal/database/observability.go b/enterprise/cmd/precise-code-intel-bundle-manager/internal/database/observability.go
index 19bc704..d598736 100644
--- a/enterprise/cmd/precise-code-intel-bundle-manager/internal/database/observability.go
+++ b/enterprise/cmd/precise-code-intel-bundle-manager/internal/database/observability.go
@@ -10,19 +10,7 @@ import (
 )
 
 // An ObservedDatabase wraps another Database with error logging, Prometheus metrics, and tracing.
-type ObservedDatabase struct {
-	database                    Database
-	filename                    string
-	existsOperation             *observation.Operation
-	rangesOperation             *observation.Operation
-	definitionsOperation        *observation.Operation
-	referencesOperation         *observation.Operation
-	hoverOperation              *observation.Operation
-	diagnosticsOperation        *observation.Operation
-	monikersByPositionOperation *observation.Operation
-	monikerResultsOperation     *observation.Operation
-	packageInformationOperation *observation.Operation
-}
+type ObservedDatabase struct { /* all structs must go */ }
 
 var _ Database = &ObservedDatabase{}
 
diff --git a/enterprise/cmd/precise-code-intel-bundle-manager/internal/database/ranges_test.go b/enterprise/cmd/precise-code-intel-bundle-manager/internal/database/ranges_test.go
index 8314df2..60e015e 100644
--- a/enterprise/cmd/precise-code-intel-bundle-manager/internal/database/ranges_test.go
+++ b/enterprise/cmd/precise-code-intel-bundle-manager/internal/database/ranges_test.go
@@ -110,11 +110,7 @@ func TestComparePosition(t *testing.T) {
 		EndCharacter:   13,
 	}
 
-	testCases := []struct {
-		line      int
-		character int
-		expected  int
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{5, 11, 0},
 		{5, 12, 0},
 		{5, 13, 0},
@@ -132,11 +128,7 @@ func TestComparePosition(t *testing.T) {
 }
 
 func TestRangeIntersectsSpan(t *testing.T) {
-	testCases := []struct {
-		startLine int
-		endLine   int
-		expected  bool
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{startLine: 1, endLine: 4, expected: false},
 		{startLine: 7, endLine: 9, expected: false},
 		{startLine: 1, endLine: 6, expected: true},
diff --git a/enterprise/cmd/precise-code-intel-bundle-manager/internal/janitor/janitor.go b/enterprise/cmd/precise-code-intel-bundle-manager/internal/janitor/janitor.go
index 2227563..e471c6d 100644
--- a/enterprise/cmd/precise-code-intel-bundle-manager/internal/janitor/janitor.go
+++ b/enterprise/cmd/precise-code-intel-bundle-manager/internal/janitor/janitor.go
@@ -10,18 +10,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/store"
 )
 
-type Janitor struct {
-	store              store.Store
-	bundleDir          string
-	desiredPercentFree int
-	janitorInterval    time.Duration
-	maxUploadAge       time.Duration
-	maxUploadPartAge   time.Duration
-	maxDatabasePartAge time.Duration
-	metrics            JanitorMetrics
-	done               chan struct{}
-	once               sync.Once
-}
+type Janitor struct { /* all structs must go */ }
 
 func New(
 	store store.Store,
diff --git a/enterprise/cmd/precise-code-intel-bundle-manager/internal/janitor/metrics.go b/enterprise/cmd/precise-code-intel-bundle-manager/internal/janitor/metrics.go
index 9eb8906..8888ff8 100644
--- a/enterprise/cmd/precise-code-intel-bundle-manager/internal/janitor/metrics.go
+++ b/enterprise/cmd/precise-code-intel-bundle-manager/internal/janitor/metrics.go
@@ -2,14 +2,7 @@ package janitor
 
 import "github.com/prometheus/client_golang/prometheus"
 
-type JanitorMetrics struct {
-	UploadFilesRemoved        prometheus.Counter
-	PartFilesRemoved          prometheus.Counter
-	OrphanedFilesRemoved      prometheus.Counter
-	EvictedBundleFilesRemoved prometheus.Counter
-	UploadRecordsRemoved      prometheus.Counter
-	Errors                    prometheus.Counter
-}
+type JanitorMetrics struct { /* all structs must go */ }
 
 func NewJanitorMetrics(r prometheus.Registerer) JanitorMetrics {
 	uploadFilesRemoved := prometheus.NewCounter(prometheus.CounterOpts{
diff --git a/enterprise/cmd/precise-code-intel-bundle-manager/internal/paths/migrate_test.go b/enterprise/cmd/precise-code-intel-bundle-manager/internal/paths/migrate_test.go
index 7f490e5..d4c6d29 100644
--- a/enterprise/cmd/precise-code-intel-bundle-manager/internal/paths/migrate_test.go
+++ b/enterprise/cmd/precise-code-intel-bundle-manager/internal/paths/migrate_test.go
@@ -51,11 +51,7 @@ func TestMigrate(t *testing.T) {
 }
 
 func TestGetIDAndPartIndex(t *testing.T) {
-	testCases := []struct {
-		filename  string
-		id        int
-		partIndex int
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{"123.lsif.db", 123, -1},
 		{"123.456.lsif.db", 123, 456},
 		{"123.456.sqlite", -1, -1},
diff --git a/enterprise/cmd/precise-code-intel-bundle-manager/internal/server/server.go b/enterprise/cmd/precise-code-intel-bundle-manager/internal/server/server.go
index 048fdeb..f302d5e 100644
--- a/enterprise/cmd/precise-code-intel-bundle-manager/internal/server/server.go
+++ b/enterprise/cmd/precise-code-intel-bundle-manager/internal/server/server.go
@@ -17,13 +17,7 @@ import (
 
 const Port = 3187
 
-type Server struct {
-	bundleDir          string
-	readerCache        cache.ReaderCache
-	observationContext *observation.Context
-	server             *http.Server
-	once               sync.Once
-}
+type Server struct { /* all structs must go */ }
 
 func New(
 	bundleDir string,
diff --git a/enterprise/cmd/precise-code-intel-indexer/internal/indexability_updater/metrics.go b/enterprise/cmd/precise-code-intel-indexer/internal/indexability_updater/metrics.go
index 427bc34..69cb35c 100644
--- a/enterprise/cmd/precise-code-intel-indexer/internal/indexability_updater/metrics.go
+++ b/enterprise/cmd/precise-code-intel-indexer/internal/indexability_updater/metrics.go
@@ -4,9 +4,7 @@ import (
 	"github.com/prometheus/client_golang/prometheus"
 )
 
-type UpdaterMetrics struct {
-	Errors prometheus.Counter
-}
+type UpdaterMetrics struct { /* all structs must go */ }
 
 func NewUpdaterMetrics(r prometheus.Registerer) UpdaterMetrics {
 	errors := prometheus.NewCounter(prometheus.CounterOpts{
diff --git a/enterprise/cmd/precise-code-intel-indexer/internal/indexability_updater/updater.go b/enterprise/cmd/precise-code-intel-indexer/internal/indexability_updater/updater.go
index 900aced..a7f277a 100644
--- a/enterprise/cmd/precise-code-intel-indexer/internal/indexability_updater/updater.go
+++ b/enterprise/cmd/precise-code-intel-indexer/internal/indexability_updater/updater.go
@@ -12,14 +12,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/vcs"
 )
 
-type Updater struct {
-	store           store.Store
-	gitserverClient gitserver.Client
-	interval        time.Duration
-	metrics         UpdaterMetrics
-	done            chan struct{}
-	once            sync.Once
-}
+type Updater struct { /* all structs must go */ }
 
 func NewUpdater(
 	store store.Store,
diff --git a/enterprise/cmd/precise-code-intel-indexer/internal/indexer/metrics.go b/enterprise/cmd/precise-code-intel-indexer/internal/indexer/metrics.go
index dc9bac4..563b632 100644
--- a/enterprise/cmd/precise-code-intel-indexer/internal/indexer/metrics.go
+++ b/enterprise/cmd/precise-code-intel-indexer/internal/indexer/metrics.go
@@ -5,9 +5,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/observation"
 )
 
-type IndexerMetrics struct {
-	ProcessOperation *observation.Operation
-}
+type IndexerMetrics struct { /* all structs must go */ }
 
 func NewIndexerMetrics(observationContext *observation.Context) IndexerMetrics {
 	metrics := metrics.NewOperationMetrics(
diff --git a/enterprise/cmd/precise-code-intel-indexer/internal/indexer/mock_processor_test.go b/enterprise/cmd/precise-code-intel-indexer/internal/indexer/mock_processor_test.go
index 35c7545..173fe1e 100644
--- a/enterprise/cmd/precise-code-intel-indexer/internal/indexer/mock_processor_test.go
+++ b/enterprise/cmd/precise-code-intel-indexer/internal/indexer/mock_processor_test.go
@@ -12,11 +12,7 @@ import (
 // the package
 // github.com/sourcegraph/sourcegraph/enterprise/cmd/precise-code-intel-indexer/internal/indexer)
 // used for unit testing.
-type MockProcessor struct {
-	// ProcessFunc is an instance of a mock function object controlling the
-	// behavior of the method Process.
-	ProcessFunc *ProcessorProcessFunc
-}
+type MockProcessor struct { /* all structs must go */ }
 
 // NewMockProcessor creates a new mock of the Processor interface. All
 // methods return zero values for all results, unless overwritten.
@@ -42,12 +38,7 @@ func NewMockProcessorFrom(i Processor) *MockProcessor {
 
 // ProcessorProcessFunc describes the behavior when the Process method of
 // the parent MockProcessor instance is invoked.
-type ProcessorProcessFunc struct {
-	defaultHook func(context.Context, store.Index) error
-	hooks       []func(context.Context, store.Index) error
-	history     []ProcessorProcessFuncCall
-	mutex       sync.Mutex
-}
+type ProcessorProcessFunc struct { /* all structs must go */ }
 
 // Process delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -121,17 +112,7 @@ func (f *ProcessorProcessFunc) History() []ProcessorProcessFuncCall {
 
 // ProcessorProcessFuncCall is an object that describes an invocation of
 // method Process on an instance of MockProcessor.
-type ProcessorProcessFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 store.Index
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type ProcessorProcessFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
diff --git a/enterprise/cmd/precise-code-intel-indexer/internal/indexer/processor.go b/enterprise/cmd/precise-code-intel-indexer/internal/indexer/processor.go
index 1b4136e..fcdd4fc 100644
--- a/enterprise/cmd/precise-code-intel-indexer/internal/indexer/processor.go
+++ b/enterprise/cmd/precise-code-intel-indexer/internal/indexer/processor.go
@@ -17,11 +17,7 @@ type Processor interface {
 	Process(ctx context.Context, index store.Index) error
 }
 
-type processor struct {
-	store           store.Store
-	gitserverClient gitserver.Client
-	frontendURL     string
-}
+type processor struct { /* all structs must go */ }
 
 func (p *processor) Process(ctx context.Context, index store.Index) error {
 	repoDir, err := fetchRepository(ctx, p.store, p.gitserverClient, index.RepositoryID, index.Commit)
diff --git a/enterprise/cmd/precise-code-intel-indexer/internal/janitor/janitor.go b/enterprise/cmd/precise-code-intel-indexer/internal/janitor/janitor.go
index 6d8da57..e1bd412 100644
--- a/enterprise/cmd/precise-code-intel-indexer/internal/janitor/janitor.go
+++ b/enterprise/cmd/precise-code-intel-indexer/internal/janitor/janitor.go
@@ -9,13 +9,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/store"
 )
 
-type Janitor struct {
-	store           store.Store
-	janitorInterval time.Duration
-	metrics         JanitorMetrics
-	done            chan struct{}
-	once            sync.Once
-}
+type Janitor struct { /* all structs must go */ }
 
 func New(
 	store store.Store,
diff --git a/enterprise/cmd/precise-code-intel-indexer/internal/janitor/metrics.go b/enterprise/cmd/precise-code-intel-indexer/internal/janitor/metrics.go
index cfef7bd..f23f1c8 100644
--- a/enterprise/cmd/precise-code-intel-indexer/internal/janitor/metrics.go
+++ b/enterprise/cmd/precise-code-intel-indexer/internal/janitor/metrics.go
@@ -2,10 +2,7 @@ package janitor
 
 import "github.com/prometheus/client_golang/prometheus"
 
-type JanitorMetrics struct {
-	IndexRecordsRemoved prometheus.Counter
-	Errors              prometheus.Counter
-}
+type JanitorMetrics struct { /* all structs must go */ }
 
 func NewJanitorMetrics(r prometheus.Registerer) JanitorMetrics {
 	indexRecordsRemoved := prometheus.NewCounter(prometheus.CounterOpts{
diff --git a/enterprise/cmd/precise-code-intel-indexer/internal/scheduler/metrics.go b/enterprise/cmd/precise-code-intel-indexer/internal/scheduler/metrics.go
index 2c5e4dc..67e64c5 100644
--- a/enterprise/cmd/precise-code-intel-indexer/internal/scheduler/metrics.go
+++ b/enterprise/cmd/precise-code-intel-indexer/internal/scheduler/metrics.go
@@ -4,9 +4,7 @@ import (
 	"github.com/prometheus/client_golang/prometheus"
 )
 
-type SchedulerMetrics struct {
-	Errors prometheus.Counter
-}
+type SchedulerMetrics struct { /* all structs must go */ }
 
 func NewSchedulerMetrics(r prometheus.Registerer) SchedulerMetrics {
 	errors := prometheus.NewCounter(prometheus.CounterOpts{
diff --git a/enterprise/cmd/precise-code-intel-indexer/internal/scheduler/scheduler.go b/enterprise/cmd/precise-code-intel-indexer/internal/scheduler/scheduler.go
index 13e3689..d15a90f 100644
--- a/enterprise/cmd/precise-code-intel-indexer/internal/scheduler/scheduler.go
+++ b/enterprise/cmd/precise-code-intel-indexer/internal/scheduler/scheduler.go
@@ -12,19 +12,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/vcs"
 )
 
-type Scheduler struct {
-	store                       store.Store
-	gitserverClient             gitserver.Client
-	interval                    time.Duration
-	batchSize                   int
-	minimumTimeSinceLastEnqueue time.Duration
-	minimumSearchCount          int
-	minimumSearchRatio          float64
-	minimumPreciseCount         int
-	metrics                     SchedulerMetrics
-	done                        chan struct{}
-	once                        sync.Once
-}
+type Scheduler struct { /* all structs must go */ }
 
 func NewScheduler(
 	store store.Store,
diff --git a/enterprise/cmd/precise-code-intel-indexer/internal/server/server.go b/enterprise/cmd/precise-code-intel-indexer/internal/server/server.go
index 321c789..ff0671c 100644
--- a/enterprise/cmd/precise-code-intel-indexer/internal/server/server.go
+++ b/enterprise/cmd/precise-code-intel-indexer/internal/server/server.go
@@ -15,10 +15,7 @@ import (
 
 const Port = 3189
 
-type Server struct {
-	server *http.Server
-	once   sync.Once
-}
+type Server struct { /* all structs must go */ }
 
 func New() *Server {
 	host := ""
diff --git a/enterprise/cmd/precise-code-intel-worker/internal/correlation/correlate.go b/enterprise/cmd/precise-code-intel-worker/internal/correlation/correlate.go
index 726850a..bd10f7f 100644
--- a/enterprise/cmd/precise-code-intel-worker/internal/correlation/correlate.go
+++ b/enterprise/cmd/precise-code-intel-worker/internal/correlation/correlate.go
@@ -104,11 +104,7 @@ func correlateFromReader(r io.Reader, root string) (*State, error) {
 	return wrappedState.State, nil
 }
 
-type wrappedState struct {
-	*State
-	dumpRoot            string
-	unsupportedVertices *datastructures.IDSet
-}
+type wrappedState struct { /* all structs must go */ }
 
 func newWrappedState(dumpRoot string) *wrappedState {
 	return &wrappedState{
diff --git a/enterprise/cmd/precise-code-intel-worker/internal/correlation/datastructures/idset.go b/enterprise/cmd/precise-code-intel-worker/internal/correlation/datastructures/idset.go
index 6e522ba..5100e00 100644
--- a/enterprise/cmd/precise-code-intel-worker/internal/correlation/datastructures/idset.go
+++ b/enterprise/cmd/precise-code-intel-worker/internal/correlation/datastructures/idset.go
@@ -22,10 +22,7 @@ import (
 // elements of the set are written to an int-keyed map. Maps have a larger overhead than slices
 // (see https://golang.org/src/runtime/map.go#L115), so we only want to pay this cost when the
 // performance of using a slice outweighs the memory savings.
-type IDSet struct {
-	s []int            // small set
-	m map[int]struct{} // large set
-}
+type IDSet struct { /* all structs must go */ }
 
 // NewIDSet creates a new empty identifier set.
 func NewIDSet() *IDSet {
diff --git a/enterprise/cmd/precise-code-intel-worker/internal/correlation/datastructures/idset_test.go b/enterprise/cmd/precise-code-intel-worker/internal/correlation/datastructures/idset_test.go
index f1489af..9ddf1ee 100644
--- a/enterprise/cmd/precise-code-intel-worker/internal/correlation/datastructures/idset_test.go
+++ b/enterprise/cmd/precise-code-intel-worker/internal/correlation/datastructures/idset_test.go
@@ -49,10 +49,7 @@ func TestIDSetOperations(t *testing.T) {
 }
 
 func TestIDSetMin(t *testing.T) {
-	testCases := []struct {
-		add int
-		min int
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{5, 5},
 		{6, 5},
 		{4, 4},
diff --git a/enterprise/cmd/precise-code-intel-worker/internal/correlation/errors.go b/enterprise/cmd/precise-code-intel-worker/internal/correlation/errors.go
index d5355c0..bfb3556 100644
--- a/enterprise/cmd/precise-code-intel-worker/internal/correlation/errors.go
+++ b/enterprise/cmd/precise-code-intel-worker/internal/correlation/errors.go
@@ -15,16 +15,7 @@ var ErrUnexpectedPayload = errors.New("unexpected payload for element")
 
 // ErrMalformedDump is an error that occurs when the correlator find an identifier
 // that does not point to the correct element (if it points to any element at all).
-type ErrMalformedDump struct {
-	// id is the identifier of the element in which the error occurs.
-	id int
-
-	// references is the identifier being referenced by the failing element.
-	references int
-
-	// kinds is the type(s) of elements references should refer to.
-	kinds []string
-}
+type ErrMalformedDump struct { /* all structs must go */ }
 
 func (e ErrMalformedDump) Error() string {
 	return fmt.Sprintf("unknown reference to %d (expected a %s) in element %d", e.references, strings.Join(e.kinds, " or "), e.id)
diff --git a/enterprise/cmd/precise-code-intel-worker/internal/correlation/group.go b/enterprise/cmd/precise-code-intel-worker/internal/correlation/group.go
index 4850bf0..0fbb128 100644
--- a/enterprise/cmd/precise-code-intel-worker/internal/correlation/group.go
+++ b/enterprise/cmd/precise-code-intel-worker/internal/correlation/group.go
@@ -15,15 +15,7 @@ import (
 // GroupedBundleData is a view of a correlation State that sorts data by it containing document
 // and shared data into shareded result chunks. The fields of this type are what is written to
 // persistent storage and what is read in the query path.
-type GroupedBundleData struct {
-	Meta              types.MetaData
-	Documents         map[string]types.DocumentData
-	ResultChunks      map[int]types.ResultChunkData
-	Definitions       []types.MonikerLocations
-	References        []types.MonikerLocations
-	Packages          []types.Package
-	PackageReferences []types.PackageReference
-}
+type GroupedBundleData struct { /* all structs must go */ }
 
 const MaxNumResultChunks = 1000
 const ResultsPerResultChunk = 500
@@ -295,12 +287,7 @@ func gatherPackages(state *State, dumpID int) []types.Package {
 }
 
 func gatherPackageReferences(state *State, dumpID int) ([]types.PackageReference, error) {
-	type ExpandedPackageReference struct {
-		Scheme      string
-		Name        string
-		Version     string
-		Identifiers []string
-	}
+	type ExpandedPackageReference struct { /* all structs must go */ }
 
 	uniques := make(map[string]ExpandedPackageReference, state.ImportedMonikers.Len())
 	state.ImportedMonikers.Each(func(id int) {
diff --git a/enterprise/cmd/precise-code-intel-worker/internal/correlation/lsif/interner.go b/enterprise/cmd/precise-code-intel-worker/internal/correlation/lsif/interner.go
index 633e0e3..eb0871b 100644
--- a/enterprise/cmd/precise-code-intel-worker/internal/correlation/lsif/interner.go
+++ b/enterprise/cmd/precise-code-intel-worker/internal/correlation/lsif/interner.go
@@ -13,10 +13,7 @@ import (
 // Assumption: The output of LSIF indexers will not generally mix types of identifiers.
 // If integers are used, they are used for all ids. If strings are used, they are used
 // for all ids.
-type Interner struct {
-	sync.RWMutex
-	m map[string]int
-}
+type Interner struct { /* all structs must go */ }
 
 // NewInterner creates a new empty interner.
 func NewInterner() *Interner {
diff --git a/enterprise/cmd/precise-code-intel-worker/internal/correlation/lsif/reader.go b/enterprise/cmd/precise-code-intel-worker/internal/correlation/lsif/reader.go
index f5c686f..c607851 100644
--- a/enterprise/cmd/precise-code-intel-worker/internal/correlation/lsif/reader.go
+++ b/enterprise/cmd/precise-code-intel-worker/internal/correlation/lsif/reader.go
@@ -9,10 +9,7 @@ import (
 	"sync"
 )
 
-type Pair struct {
-	Element Element
-	Err     error
-}
+type Pair struct { /* all structs must go */ }
 
 // Read reads the given content as line-separated JSON objects and returns a channel of Pair values for each
 // non-empty line.
diff --git a/enterprise/cmd/precise-code-intel-worker/internal/correlation/lsif/types.go b/enterprise/cmd/precise-code-intel-worker/internal/correlation/lsif/types.go
index f205abe..50514ee 100644
--- a/enterprise/cmd/precise-code-intel-worker/internal/correlation/lsif/types.go
+++ b/enterprise/cmd/precise-code-intel-worker/internal/correlation/lsif/types.go
@@ -2,41 +2,15 @@ package lsif
 
 import "github.com/sourcegraph/sourcegraph/enterprise/cmd/precise-code-intel-worker/internal/correlation/datastructures"
 
-type Element struct {
-	ID      int
-	Type    string
-	Label   string
-	Payload interface{}
-}
+type Element struct { /* all structs must go */ }
 
-type Edge struct {
-	OutV     int
-	InV      int
-	InVs     []int
-	Document int
-}
+type Edge struct { /* all structs must go */ }
 
-type MetaData struct {
-	Version     string
-	ProjectRoot string
-}
+type MetaData struct { /* all structs must go */ }
 
-type Document struct {
-	URI         string
-	Contains    *datastructures.IDSet
-	Diagnostics *datastructures.IDSet
-}
+type Document struct { /* all structs must go */ }
 
-type Range struct {
-	StartLine          int
-	StartCharacter     int
-	EndLine            int
-	EndCharacter       int
-	DefinitionResultID int
-	ReferenceResultID  int
-	HoverResultID      int
-	MonikerIDs         *datastructures.IDSet
-}
+type Range struct { /* all structs must go */ }
 
 func (d Range) SetDefinitionResultID(id int) Range {
 	return Range{
@@ -90,12 +64,7 @@ func (d Range) SetMonikerIDs(ids *datastructures.IDSet) Range {
 	}
 }
 
-type ResultSet struct {
-	DefinitionResultID int
-	ReferenceResultID  int
-	HoverResultID      int
-	MonikerIDs         *datastructures.IDSet
-}
+type ResultSet struct { /* all structs must go */ }
 
 func (d ResultSet) SetDefinitionResultID(id int) ResultSet {
 	return ResultSet{
@@ -133,12 +102,7 @@ func (d ResultSet) SetMonikerIDs(ids *datastructures.IDSet) ResultSet {
 	}
 }
 
-type Moniker struct {
-	Kind                 string
-	Scheme               string
-	Identifier           string
-	PackageInformationID int
-}
+type Moniker struct { /* all structs must go */ }
 
 func (d Moniker) SetPackageInformationID(id int) Moniker {
 	return Moniker{
@@ -149,22 +113,8 @@ func (d Moniker) SetPackageInformationID(id int) Moniker {
 	}
 }
 
-type PackageInformation struct {
-	Name    string
-	Version string
-}
+type PackageInformation struct { /* all structs must go */ }
 
-type DiagnosticResult struct {
-	Result []Diagnostic
-}
+type DiagnosticResult struct { /* all structs must go */ }
 
-type Diagnostic struct {
-	Severity       int
-	Code           string
-	Message        string
-	Source         string
-	StartLine      int
-	StartCharacter int
-	EndLine        int
-	EndCharacter   int
-}
+type Diagnostic struct { /* all structs must go */ }
diff --git a/enterprise/cmd/precise-code-intel-worker/internal/correlation/lsif/unmarshal.go b/enterprise/cmd/precise-code-intel-worker/internal/correlation/lsif/unmarshal.go
index c09cf34..bdd1fb8 100644
--- a/enterprise/cmd/precise-code-intel-worker/internal/correlation/lsif/unmarshal.go
+++ b/enterprise/cmd/precise-code-intel-worker/internal/correlation/lsif/unmarshal.go
@@ -13,11 +13,7 @@ import (
 var unmarshaller = jsoniter.ConfigFastest
 
 func unmarshalElement(interner *Interner, line []byte) (_ Element, err error) {
-	var payload struct {
-		ID    json.RawMessage `json:"id"`
-		Type  string          `json:"type"`
-		Label string          `json:"label"`
-	}
+	var payload struct { /* all structs must go */ }
 	if err := unmarshaller.Unmarshal(line, &payload); err != nil {
 		return Element{}, err
 	}
@@ -45,12 +41,7 @@ func unmarshalElement(interner *Interner, line []byte) (_ Element, err error) {
 }
 
 func unmarshalEdge(interner *Interner, line []byte) (interface{}, error) {
-	var payload struct {
-		OutV     json.RawMessage   `json:"outV"`
-		InV      json.RawMessage   `json:"inV"`
-		InVs     []json.RawMessage `json:"inVs"`
-		Document json.RawMessage   `json:"document"`
-	}
+	var payload struct { /* all structs must go */ }
 	if err := unmarshaller.Unmarshal(line, &payload); err != nil {
 		return Edge{}, err
 	}
@@ -97,10 +88,7 @@ var vertexUnmarshalers = map[string]func(line []byte) (interface{}, error){
 }
 
 func unmarshalMetaData(line []byte) (interface{}, error) {
-	var payload struct {
-		Version     string `json:"version"`
-		ProjectRoot string `json:"projectRoot"`
-	}
+	var payload struct { /* all structs must go */ }
 	if err := unmarshaller.Unmarshal(line, &payload); err != nil {
 		return nil, err
 	}
@@ -112,9 +100,7 @@ func unmarshalMetaData(line []byte) (interface{}, error) {
 }
 
 func unmarshalDocument(line []byte) (interface{}, error) {
-	var payload struct {
-		URI string `json:"uri"`
-	}
+	var payload struct { /* all structs must go */ }
 	if err := unmarshaller.Unmarshal(line, &payload); err != nil {
 		return nil, err
 	}
@@ -127,14 +113,8 @@ func unmarshalDocument(line []byte) (interface{}, error) {
 }
 
 func unmarshalRange(line []byte) (interface{}, error) {
-	type _position struct {
-		Line      int `json:"line"`
-		Character int `json:"character"`
-	}
-	var payload struct {
-		Start _position `json:"start"`
-		End   _position `json:"end"`
-	}
+	type _position struct { /* all structs must go */ }
+	var payload struct { /* all structs must go */ }
 	if err := unmarshaller.Unmarshal(line, &payload); err != nil {
 		return nil, err
 	}
@@ -154,12 +134,8 @@ var (
 )
 
 func unmarshalHover(line []byte) (interface{}, error) {
-	type _hoverResult struct {
-		Contents json.RawMessage `json:"contents"`
-	}
-	var payload struct {
-		Result _hoverResult `json:"result"`
-	}
+	type _hoverResult struct { /* all structs must go */ }
+	var payload struct { /* all structs must go */ }
 	if err := unmarshaller.Unmarshal(line, &payload); err != nil {
 		return nil, err
 	}
@@ -193,10 +169,7 @@ func unmarshalHoverPart(raw json.RawMessage) ([]byte, error) {
 		return bytes.TrimSpace([]byte(strPayload)), nil
 	}
 
-	var objPayload struct {
-		Language string `json:"language"`
-		Value    string `json:"value"`
-	}
+	var objPayload struct { /* all structs must go */ }
 	if err := unmarshaller.Unmarshal(raw, &objPayload); err != nil {
 		return nil, errors.New("unrecognized hover format")
 	}
@@ -217,11 +190,7 @@ func unmarshalHoverPart(raw json.RawMessage) ([]byte, error) {
 }
 
 func unmarshalMoniker(line []byte) (interface{}, error) {
-	var payload struct {
-		Kind       string `json:"kind"`
-		Scheme     string `json:"scheme"`
-		Identifier string `json:"identifier"`
-	}
+	var payload struct { /* all structs must go */ }
 	if err := unmarshaller.Unmarshal(line, &payload); err != nil {
 		return nil, err
 	}
@@ -238,10 +207,7 @@ func unmarshalMoniker(line []byte) (interface{}, error) {
 }
 
 func unmarshalPackageInformation(line []byte) (interface{}, error) {
-	var payload struct {
-		Name    string `json:"name"`
-		Version string `json:"version"`
-	}
+	var payload struct { /* all structs must go */ }
 	if err := unmarshaller.Unmarshal(line, &payload); err != nil {
 		return nil, err
 	}
@@ -253,24 +219,10 @@ func unmarshalPackageInformation(line []byte) (interface{}, error) {
 }
 
 func unmarshalDiagnosticResult(line []byte) (interface{}, error) {
-	type _position struct {
-		Line      int `json:"line"`
-		Character int `json:"character"`
-	}
-	type _range struct {
-		Start _position `json:"start"`
-		End   _position `json:"end"`
-	}
-	type _result struct {
-		Severity int         `json:"severity"`
-		Code     StringOrInt `json:"code"`
-		Message  string      `json:"message"`
-		Source   string      `json:"source"`
-		Range    _range      `json:"range"`
-	}
-	var payload struct {
-		Results []_result `json:"result"`
-	}
+	type _position struct { /* all structs must go */ }
+	type _range struct { /* all structs must go */ }
+	type _result struct { /* all structs must go */ }
+	var payload struct { /* all structs must go */ }
 	if err := unmarshaller.Unmarshal(line, &payload); err != nil {
 		return nil, err
 	}
diff --git a/enterprise/cmd/precise-code-intel-worker/internal/correlation/lsif/unmarshal_test.go b/enterprise/cmd/precise-code-intel-worker/internal/correlation/lsif/unmarshal_test.go
index 1ea007b..5220d84 100644
--- a/enterprise/cmd/precise-code-intel-worker/internal/correlation/lsif/unmarshal_test.go
+++ b/enterprise/cmd/precise-code-intel-worker/internal/correlation/lsif/unmarshal_test.go
@@ -127,10 +127,7 @@ func TestUnmarshalRange(t *testing.T) {
 }
 
 func TestUnmarshalHover(t *testing.T) {
-	testCases := []struct {
-		contents      string
-		expectedHover string
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{
 			contents:      `"text"`,
 			expectedHover: "text",
diff --git a/enterprise/cmd/precise-code-intel-worker/internal/correlation/state.go b/enterprise/cmd/precise-code-intel-worker/internal/correlation/state.go
index 1c6df5a..b56435b 100644
--- a/enterprise/cmd/precise-code-intel-worker/internal/correlation/state.go
+++ b/enterprise/cmd/precise-code-intel-worker/internal/correlation/state.go
@@ -6,24 +6,7 @@ import (
 )
 
 // State is an in-memory representation of an uploaded LSIF index.
-type State struct {
-	LSIFVersion            string
-	ProjectRoot            string
-	DocumentData           map[int]lsif.Document
-	RangeData              map[int]lsif.Range
-	ResultSetData          map[int]lsif.ResultSet
-	DefinitionData         map[int]datastructures.DefaultIDSetMap
-	ReferenceData          map[int]datastructures.DefaultIDSetMap
-	HoverData              map[int]string
-	MonikerData            map[int]lsif.Moniker
-	PackageInformationData map[int]lsif.PackageInformation
-	Diagnostics            map[int]lsif.DiagnosticResult
-	NextData               map[int]int                  // maps vertices related via next edges
-	ImportedMonikers       *datastructures.IDSet        // moniker ids that have kind "import"
-	ExportedMonikers       *datastructures.IDSet        // moniker ids that have kind "export"
-	LinkedMonikers         datastructures.DisjointIDSet // tracks which moniker ids are related via next edges
-	LinkedReferenceResults datastructures.DisjointIDSet // tracks which reference result ids are related via next edges
-}
+type State struct { /* all structs must go */ }
 
 // newState create a new State with zero-valued map fields.
 func newState() *State {
diff --git a/enterprise/cmd/precise-code-intel-worker/internal/existence/dirtree.go b/enterprise/cmd/precise-code-intel-worker/internal/existence/dirtree.go
index a8940e9..c2305f3 100644
--- a/enterprise/cmd/precise-code-intel-worker/internal/existence/dirtree.go
+++ b/enterprise/cmd/precise-code-intel-worker/internal/existence/dirtree.go
@@ -6,15 +6,7 @@ import (
 )
 
 // DirTree node represents a single directory in a file tree.
-type DirTreeNode struct {
-	// Name is the path segment indicating the name of this directory. It does
-	// not contain any separator characters.
-	Name string
-
-	// Children represent the directory subtrees directly nested under this
-	// directory. Ordering of this slice is arbitrary.
-	Children []DirTreeNode
-}
+type DirTreeNode struct { /* all structs must go */ }
 
 // makeTree creates a file tree (excluding files, directories only) from the given
 // set of file paths. The given root is prepended to every path in the list.
diff --git a/enterprise/cmd/precise-code-intel-worker/internal/existence/existence_checker.go b/enterprise/cmd/precise-code-intel-worker/internal/existence/existence_checker.go
index 6288f2e..e6ef394 100644
--- a/enterprise/cmd/precise-code-intel-worker/internal/existence/existence_checker.go
+++ b/enterprise/cmd/precise-code-intel-worker/internal/existence/existence_checker.go
@@ -5,10 +5,7 @@ import (
 	"path/filepath"
 )
 
-type ExistenceChecker struct {
-	root              string
-	directoryContents map[string]StringSet
-}
+type ExistenceChecker struct { /* all structs must go */ }
 
 // NewExistenceChecker constructs a map of directory contents from the given set of paths and the given
 // getChildren function pointer that determines which of the given paths exist in the git clone at the
diff --git a/enterprise/cmd/precise-code-intel-worker/internal/existence/paths_test.go b/enterprise/cmd/precise-code-intel-worker/internal/existence/paths_test.go
index 69542f8..50285f7 100644
--- a/enterprise/cmd/precise-code-intel-worker/internal/existence/paths_test.go
+++ b/enterprise/cmd/precise-code-intel-worker/internal/existence/paths_test.go
@@ -5,10 +5,7 @@ import (
 )
 
 func TestDirWithoutDot(t *testing.T) {
-	testCases := []struct {
-		actual   string
-		expected string
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{dirWithoutDot("foo.txt"), ""},
 		{dirWithoutDot("foo/bar.txt"), "foo"},
 		{dirWithoutDot("foo/baz"), "foo"},
diff --git a/enterprise/cmd/precise-code-intel-worker/internal/metrics/metrics.go b/enterprise/cmd/precise-code-intel-worker/internal/metrics/metrics.go
index 91f29f0..03724a5 100644
--- a/enterprise/cmd/precise-code-intel-worker/internal/metrics/metrics.go
+++ b/enterprise/cmd/precise-code-intel-worker/internal/metrics/metrics.go
@@ -5,17 +5,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/observation"
 )
 
-type WorkerMetrics struct {
-	ProcessOperation             *observation.Operation
-	RepoStateOperation           *observation.Operation
-	CorrelateOperation           *observation.Operation
-	CanonicalizeOperation        *observation.Operation
-	PruneOperation               *observation.Operation
-	GroupBundleDataOperation     *observation.Operation
-	WriteOperation               *observation.Operation
-	UpdateXrepoDatabaseOperation *observation.Operation
-	SendDBOperation              *observation.Operation
-}
+type WorkerMetrics struct { /* all structs must go */ }
 
 func NewWorkerMetrics(observationContext *observation.Context) WorkerMetrics {
 	metrics := metrics.NewOperationMetrics(
diff --git a/enterprise/cmd/precise-code-intel-worker/internal/server/server.go b/enterprise/cmd/precise-code-intel-worker/internal/server/server.go
index 46813f6..cbb05f9 100644
--- a/enterprise/cmd/precise-code-intel-worker/internal/server/server.go
+++ b/enterprise/cmd/precise-code-intel-worker/internal/server/server.go
@@ -15,10 +15,7 @@ import (
 
 const Port = 3188
 
-type Server struct {
-	server *http.Server
-	once   sync.Once
-}
+type Server struct { /* all structs must go */ }
 
 func New() *Server {
 	host := ""
diff --git a/enterprise/cmd/precise-code-intel-worker/internal/worker/mock_processor_test.go b/enterprise/cmd/precise-code-intel-worker/internal/worker/mock_processor_test.go
index b0454e9..007788e 100644
--- a/enterprise/cmd/precise-code-intel-worker/internal/worker/mock_processor_test.go
+++ b/enterprise/cmd/precise-code-intel-worker/internal/worker/mock_processor_test.go
@@ -12,11 +12,7 @@ import (
 // the package
 // github.com/sourcegraph/sourcegraph/enterprise/cmd/precise-code-intel-worker/internal/worker)
 // used for unit testing.
-type MockProcessor struct {
-	// ProcessFunc is an instance of a mock function object controlling the
-	// behavior of the method Process.
-	ProcessFunc *ProcessorProcessFunc
-}
+type MockProcessor struct { /* all structs must go */ }
 
 // NewMockProcessor creates a new mock of the Processor interface. All
 // methods return zero values for all results, unless overwritten.
@@ -42,12 +38,7 @@ func NewMockProcessorFrom(i Processor) *MockProcessor {
 
 // ProcessorProcessFunc describes the behavior when the Process method of
 // the parent MockProcessor instance is invoked.
-type ProcessorProcessFunc struct {
-	defaultHook func(context.Context, store.Store, store.Upload) (bool, error)
-	hooks       []func(context.Context, store.Store, store.Upload) (bool, error)
-	history     []ProcessorProcessFuncCall
-	mutex       sync.Mutex
-}
+type ProcessorProcessFunc struct { /* all structs must go */ }
 
 // Process delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -121,23 +112,7 @@ func (f *ProcessorProcessFunc) History() []ProcessorProcessFuncCall {
 
 // ProcessorProcessFuncCall is an object that describes an invocation of
 // method Process on an instance of MockProcessor.
-type ProcessorProcessFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 store.Store
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 store.Upload
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 bool
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type ProcessorProcessFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
diff --git a/enterprise/cmd/precise-code-intel-worker/internal/worker/processor.go b/enterprise/cmd/precise-code-intel-worker/internal/worker/processor.go
index 606d896..15d5e12 100644
--- a/enterprise/cmd/precise-code-intel-worker/internal/worker/processor.go
+++ b/enterprise/cmd/precise-code-intel-worker/internal/worker/processor.go
@@ -30,11 +30,7 @@ type Processor interface {
 	Process(ctx context.Context, tx store.Store, upload store.Upload) (bool, error)
 }
 
-type processor struct {
-	bundleManagerClient bundles.BundleManagerClient
-	gitserverClient     gitserver.Client
-	metrics             metrics.WorkerMetrics
-}
+type processor struct { /* all structs must go */ }
 
 // process converts a raw upload into a dump within the given transaction context. Returns true if the
 // upload record was requeued and false otherwise.
diff --git a/enterprise/cmd/precise-code-intel-worker/internal/worker/worker.go b/enterprise/cmd/precise-code-intel-worker/internal/worker/worker.go
index 548fcea..96b4e32 100644
--- a/enterprise/cmd/precise-code-intel-worker/internal/worker/worker.go
+++ b/enterprise/cmd/precise-code-intel-worker/internal/worker/worker.go
@@ -52,12 +52,7 @@ func NewWorker(
 	return workerutil.NewWorker(rootContext, store.WorkerutilUploadStore(s), options)
 }
 
-type handler struct {
-	store           store.Store
-	processor       *processor
-	enableBudget    bool
-	budgetRemaining int64
-}
+type handler struct { /* all structs must go */ }
 
 func (h *handler) Handle(ctx context.Context, tx workerutil.Store, record workerutil.Record) error {
 	_, err := h.processor.Process(ctx, h.store.With(tx), record.(store.Upload))
diff --git a/enterprise/cmd/repo-updater/authz/perms_syncer.go b/enterprise/cmd/repo-updater/authz/perms_syncer.go
index 163f400..861dc3f 100644
--- a/enterprise/cmd/repo-updater/authz/perms_syncer.go
+++ b/enterprise/cmd/repo-updater/authz/perms_syncer.go
@@ -28,20 +28,7 @@ import (
 // permissions up-to-date for users and repositories.
 //
 // It is meant to be running in the background.
-type PermsSyncer struct {
-	// The priority queue to maintain the permissions syncing requests.
-	queue *requestQueue
-	// The database interface for any repos and external services operations.
-	reposStore repos.Store
-	// The database interface for any permissions operations.
-	permsStore *edb.PermsStore
-	// The mockable function to return the current time.
-	clock func() time.Time
-	// The rate limit registry for code hosts.
-	rateLimiterRegistry *ratelimit.Registry
-	// The time duration of how often to re-compute schedule for users and repositories.
-	scheduleInterval time.Duration
-}
+type PermsSyncer struct { /* all structs must go */ }
 
 // NewPermsSyncer returns a new permissions syncing manager.
 func NewPermsSyncer(
@@ -527,32 +514,13 @@ func (s *PermsSyncer) scheduleReposWithOldestPerms(ctx context.Context, limit in
 }
 
 // schedule contains information for scheduling users and repositories.
-type schedule struct {
-	Users []scheduledUser
-	Repos []scheduledRepo
-}
+type schedule struct { /* all structs must go */ }
 
 // scheduledUser contains information for scheduling a user.
-type scheduledUser struct {
-	priority   priority
-	userID     int32
-	nextSyncAt time.Time
-
-	// Whether the user has no permissions when scheduled. Currently used to
-	// accept partial results from authz provider in case of error.
-	noPerms bool
-}
+type scheduledUser struct { /* all structs must go */ }
 
 // scheduledRepo contains for scheduling a repository.
-type scheduledRepo struct {
-	priority   priority
-	repoID     api.RepoID
-	nextSyncAt time.Time
-
-	// Whether the repository has no permissions when scheduled. Currently used
-	// to accept partial results from authz provider in case of error.
-	noPerms bool
-}
+type scheduledRepo struct { /* all structs must go */ }
 
 // schedule computes schedule four lists in the following order:
 //   1. Users with no permissions, because they can't do anything meaningful (e.g. not able to search).
@@ -636,15 +604,8 @@ func (s *PermsSyncer) runSchedule(ctx context.Context) {
 
 // DebugDump returns the state of the permissions syncer for debugging.
 func (s *PermsSyncer) DebugDump() interface{} {
-	type requestInfo struct {
-		Meta     *requestMeta
-		Acquired bool
-	}
-	data := struct {
-		Name  string
-		Size  int
-		Queue []*requestInfo
-	}{
+	type requestInfo struct { /* all structs must go */ }
+	data := struct { /* all structs must go */ }{
 		Name: "permissions",
 	}
 
diff --git a/enterprise/cmd/repo-updater/authz/perms_syncer_test.go b/enterprise/cmd/repo-updater/authz/perms_syncer_test.go
index 6a3767f..92cfaf3 100644
--- a/enterprise/cmd/repo-updater/authz/perms_syncer_test.go
+++ b/enterprise/cmd/repo-updater/authz/perms_syncer_test.go
@@ -50,14 +50,7 @@ func TestPermsSyncer_ScheduleRepos(t *testing.T) {
 	}
 }
 
-type mockProvider struct {
-	id          int64
-	serviceType string
-	serviceID   string
-
-	fetchUserPerms func(context.Context, *extsvc.Account) ([]extsvc.RepoID, error)
-	fetchRepoPerms func(ctx context.Context, repo *extsvc.Repository) ([]extsvc.AccountID, error)
-}
+type mockProvider struct { /* all structs must go */ }
 
 func (*mockProvider) FetchAccount(context.Context, *types.User, []*extsvc.Account) (*extsvc.Account, error) {
 	return nil, nil
@@ -76,9 +69,7 @@ func (p *mockProvider) FetchRepoPerms(ctx context.Context, repo *extsvc.Reposito
 	return p.fetchRepoPerms(ctx, repo)
 }
 
-type mockReposStore struct {
-	listRepos func(context.Context, repos.StoreListReposArgs) ([]*repos.Repo, error)
-}
+type mockReposStore struct { /* all structs must go */ }
 
 func (s *mockReposStore) ListExternalServices(context.Context, repos.StoreListExternalServicesArgs) ([]*repos.ExternalService, error) {
 	return nil, nil
@@ -151,11 +142,7 @@ func TestPermsSyncer_syncUserPerms(t *testing.T) {
 	permsStore := edb.NewPermsStore(nil, clock)
 	s := NewPermsSyncer(reposStore, permsStore, clock, nil)
 
-	tests := []struct {
-		name     string
-		noPerms  bool
-		fetchErr error
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:     "sync for the first time and encounter an error",
 			noPerms:  true,
@@ -354,11 +341,7 @@ func TestPermsSyncer_syncRepoPerms(t *testing.T) {
 	}
 	s := newPermsSyncer(reposStore)
 
-	tests := []struct {
-		name     string
-		noPerms  bool
-		fetchErr error
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:     "sync for the first time and encounter an error",
 			noPerms:  true,
diff --git a/enterprise/cmd/repo-updater/authz/request_queue.go b/enterprise/cmd/repo-updater/authz/request_queue.go
index 548c760..f59544d 100644
--- a/enterprise/cmd/repo-updater/authz/request_queue.go
+++ b/enterprise/cmd/repo-updater/authz/request_queue.go
@@ -35,41 +35,18 @@ func (t1 requestType) higherPriorityThan(t2 requestType) bool {
 }
 
 // requestMeta contains metadata of a permissions syncing request.
-type requestMeta struct {
-	Priority   priority
-	Type       requestType
-	ID         int32
-	NextSyncAt time.Time
-	NoPerms    bool
-}
+type requestMeta struct { /* all structs must go */ }
 
 // syncRequest is a permissions syncing request with its current status in the queue.
-type syncRequest struct {
-	*requestMeta
-
-	acquired bool // Whether the request has been acquired
-	index    int  // The index in the heap
-}
+type syncRequest struct { /* all structs must go */ }
 
 // requestQueueKey is the key type for index in a requestQueue.
-type requestQueueKey struct {
-	typ requestType
-	id  int32
-}
+type requestQueueKey struct { /* all structs must go */ }
 
 // requestQueue is a priority queue of permissions syncing requests.
 // Requests with same requestType and id are guaranteed to only have
 // one instance in the queue.
-type requestQueue struct {
-	mu    sync.RWMutex
-	heap  []*syncRequest
-	index map[requestQueueKey]*syncRequest
-
-	// The queue performs a non-blocking send on this channel
-	// when a new value is enqueued so that the update loop
-	// can wake up if it is idle.
-	notifyEnqueue chan struct{}
-}
+type requestQueue struct { /* all structs must go */ }
 
 func newRequestQueue() *requestQueue {
 	return &requestQueue{
diff --git a/enterprise/cmd/repo-updater/authz/request_queue_test.go b/enterprise/cmd/repo-updater/authz/request_queue_test.go
index 1296aeb..fe6cecf 100644
--- a/enterprise/cmd/repo-updater/authz/request_queue_test.go
+++ b/enterprise/cmd/repo-updater/authz/request_queue_test.go
@@ -21,14 +21,7 @@ func Test_requestQueue_enqueue(t *testing.T) {
 
 	lowUser1 := &requestMeta{Priority: priorityLow, Type: requestTypeUser, ID: 1}
 
-	tests := []struct {
-		name             string
-		metas            []*requestMeta
-		acquires         int // To acquire n requests before assertions
-		expHeap          []*syncRequest
-		expUpdated       []requestQueueKey
-		expNotifications int // The number of notifications expect to receive
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "enqueue a low priority repo 1",
 			metas: []*requestMeta{
@@ -239,17 +232,9 @@ func Test_requestQueue_remove(t *testing.T) {
 	repo3 := &requestMeta{Type: requestTypeRepo, ID: 3}
 	repo3Key := requestQueueKey{typ: requestTypeRepo, id: 3}
 
-	type remove struct {
-		requestQueueKey
-		acquired bool
-	}
+	type remove struct { /* all structs must go */ }
 
-	tests := []struct {
-		name    string
-		metas   []*requestMeta
-		removes []*remove
-		expHeap []*syncRequest
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "remove the only one",
 			metas: []*requestMeta{
@@ -386,13 +371,7 @@ func Test_requestQueue_acquireNext(t *testing.T) {
 	repo1 := &requestMeta{Type: requestTypeRepo, ID: 1}
 	repo2 := &requestMeta{Type: requestTypeRepo, ID: 2}
 
-	tests := []struct {
-		name        string
-		metas       []*requestMeta
-		acquires    int // To acquire n requests before assertions
-		expAcquires []*syncRequest
-		expHeap     []*syncRequest
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:     "acquire from empty queue returns nothing",
 			acquires: 1,
@@ -511,11 +490,7 @@ func Test_requestQueue_release(t *testing.T) {
 func Test_requestQueue_Less(t *testing.T) {
 	q := newRequestQueue()
 
-	tests := []struct {
-		name   string
-		heap   []*syncRequest
-		expVal bool
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "i is acquired",
 			heap: []*syncRequest{
diff --git a/enterprise/dev/ci/ci/helpers.go b/enterprise/dev/ci/ci/helpers.go
index 29aed3a..9a58a71 100644
--- a/enterprise/dev/ci/ci/helpers.go
+++ b/enterprise/dev/ci/ci/helpers.go
@@ -14,34 +14,7 @@ import (
 
 // Config is the set of configuration parameters that determine the structure of the CI build. These
 // parameters are extracted from the build environment (branch name, commit hash, timestamp, etc.)
-type Config struct {
-	now     time.Time
-	branch  string
-	version string
-	commit  string
-
-	// mustIncludeCommit, if non-empty, is a list of commits at least one of which must be present
-	// in the branch. If empty, then no check is enforced.
-	mustIncludeCommit []string
-
-	// changedFiles is the list of files that have changed since the
-	// merge-base with origin/master.
-	changedFiles []string
-
-	taggedRelease       bool
-	releaseBranch       bool
-	isBextReleaseBranch bool
-	isBextNightly       bool
-	isRenovateBranch    bool
-	patch               bool
-	patchNoTest         bool
-	isQuick             bool
-	isMasterDryRun      bool
-
-	// profilingEnabled, if true, tells buildkite to print timing and resource utilization information
-	// for each command
-	profilingEnabled bool
-}
+type Config struct { /* all structs must go */ }
 
 func ComputeConfig() Config {
 	now := time.Now()
diff --git a/enterprise/internal/campaigns/changeset_events_test.go b/enterprise/internal/campaigns/changeset_events_test.go
index 1fc1f27..60423f5 100644
--- a/enterprise/internal/campaigns/changeset_events_test.go
+++ b/enterprise/internal/campaigns/changeset_events_test.go
@@ -27,11 +27,7 @@ func TestFindMergeCommitID(t *testing.T) {
 		return event
 	}
 
-	for _, tc := range []struct {
-		name   string
-		events ChangesetEvents
-		want   string
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{
 			name:   "nil events",
 			events: nil,
diff --git a/enterprise/internal/campaigns/changeset_history.go b/enterprise/internal/campaigns/changeset_history.go
index 8d1bd96..f6c2852 100644
--- a/enterprise/internal/campaigns/changeset_history.go
+++ b/enterprise/internal/campaigns/changeset_history.go
@@ -36,11 +36,7 @@ func (h changesetHistory) StatesAtTime(t time.Time) (changesetStatesAtTime, bool
 	return states, found
 }
 
-type changesetStatesAtTime struct {
-	t             time.Time
-	externalState campaigns.ChangesetExternalState
-	reviewState   campaigns.ChangesetReviewState
-}
+type changesetStatesAtTime struct { /* all structs must go */ }
 
 // computeHistory calculates the changesetHistory for the given Changeset and
 // its ChangesetEvents.
diff --git a/enterprise/internal/campaigns/counts.go b/enterprise/internal/campaigns/counts.go
index 01aea06..bf99656 100644
--- a/enterprise/internal/campaigns/counts.go
+++ b/enterprise/internal/campaigns/counts.go
@@ -10,16 +10,7 @@ import (
 
 // ChangesetCounts represents the states in which a given set of Changesets was
 // at a given point in time
-type ChangesetCounts struct {
-	Time                 time.Time
-	Total                int32
-	Merged               int32
-	Closed               int32
-	Open                 int32
-	OpenApproved         int32
-	OpenChangesRequested int32
-	OpenPending          int32
-}
+type ChangesetCounts struct { /* all structs must go */ }
 
 func (cc *ChangesetCounts) String() string {
 	return fmt.Sprintf("%s (Total: %d, Merged: %d, Closed: %d, Open: %d, OpenApproved: %d, OpenChangesRequested: %d, OpenPending: %d)",
diff --git a/enterprise/internal/campaigns/counts_test.go b/enterprise/internal/campaigns/counts_test.go
index 69a67ce..5bf21ec 100644
--- a/enterprise/internal/campaigns/counts_test.go
+++ b/enterprise/internal/campaigns/counts_test.go
@@ -15,15 +15,7 @@ func TestCalcCounts(t *testing.T) {
 	now := time.Now().UTC().Truncate(time.Microsecond)
 	daysAgo := func(days int) time.Time { return now.AddDate(0, 0, -days) }
 
-	tests := []struct {
-		codehosts  string
-		name       string
-		changesets []*campaigns.Changeset
-		start      time.Time
-		end        time.Time
-		events     []*campaigns.ChangesetEvent
-		want       []*ChangesetCounts
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			codehosts: extsvc.TypeGitHub,
 			name:      "single changeset open merged",
diff --git a/enterprise/internal/campaigns/resolvers/apitest/types.go b/enterprise/internal/campaigns/resolvers/apitest/types.go
index 0db32f3..75cc427 100644
--- a/enterprise/internal/campaigns/resolvers/apitest/types.go
+++ b/enterprise/internal/campaigns/resolvers/apitest/types.go
@@ -5,22 +5,9 @@ import (
 	"github.com/sourcegraph/sourcegraph/cmd/frontend/graphqlbackend"
 )
 
-type GitTarget struct {
-	OID            string
-	AbbreviatedOID string
-	TargetType     string `json:"type"`
-}
+type GitTarget struct { /* all structs must go */ }
 
-type GitRef struct {
-	Name        string
-	AbbrevName  string
-	DisplayName string
-	Prefix      string
-	RefType     string `json:"type"`
-	Repository  struct{ ID string }
-	URL         string
-	Target      GitTarget
-}
+type GitRef struct { /* all structs must go */ }
 
 type DiffRange struct{ StartLine, Lines int }
 
@@ -30,220 +17,46 @@ func (ds DiffStat) ToDiffStat() *diff.Stat {
 	return &diff.Stat{Added: ds.Added, Deleted: ds.Deleted, Changed: ds.Changed}
 }
 
-type FileDiffHunk struct {
-	Body, Section      string
-	OldNoNewlineAt     bool
-	OldRange, NewRange DiffRange
-}
-
-type File struct {
-	Name string
-	// Ignoring other fields of File2, since that would require gitserver
-}
-
-type FileDiff struct {
-	OldPath, NewPath string
-	Hunks            []FileDiffHunk
-	Stat             DiffStat
-	OldFile          File
-}
-
-type FileDiffs struct {
-	RawDiff  string
-	DiffStat DiffStat
-	PageInfo struct {
-		HasNextPage bool
-		EndCursor   string
-	}
-	Nodes []FileDiff
-}
-
-type PatchConnection struct {
-	Nodes      []Patch
-	TotalCount int
-	PageInfo   struct {
-		HasNextPage bool
-	}
-}
-
-type Patch struct {
-	Typename            string `json:"__typename"`
-	ID                  string
-	PublicationEnqueued bool
-	Publishable         bool
-	Repository          struct{ Name, URL string }
-	Diff                struct {
-		FileDiffs FileDiffs
-	}
-}
-
-type PatchSet struct {
-	ID         string
-	Patches    PatchConnection
-	PreviewURL string
-	DiffStat   DiffStat
-}
-
-type User struct {
-	ID         string
-	DatabaseID int32
-	SiteAdmin  bool
-}
-
-type Org struct {
-	ID   string
-	Name string
-}
-
-type UserOrg struct {
-	ID         string
-	DatabaseID int32
-	SiteAdmin  bool
-	Name       string
-}
+type FileDiffHunk struct { /* all structs must go */ }
 
-type Campaign struct {
-	ID                      string
-	Name                    string
-	Description             string
-	Branch                  string
-	Author                  User
-	ViewerCanAdminister     bool
-	Namespace               UserOrg
-	CreatedAt               string
-	UpdatedAt               string
-	Patches                 PatchConnection
-	HasUnpublishedPatches   bool
-	Changesets              ChangesetConnection
-	ChangesetCountsOverTime []ChangesetCounts
-	DiffStat                DiffStat
-	PatchSet                PatchSet
-}
+type File struct { /* all structs must go */ }
 
-type CampaignConnection struct {
-	Nodes      []Campaign
-	TotalCount int
-	PageInfo   struct {
-		HasNextPage bool
-	}
-}
+type FileDiff struct { /* all structs must go */ }
 
-type ChangesetEventConnection struct {
-	TotalCount int
-}
+type FileDiffs struct { /* all structs must go */ }
 
-type Repository struct {
-	ID   string
-	Name string
-}
+type PatchConnection struct { /* all structs must go */ }
 
-type Changeset struct {
-	Typename      string `json:"__typename"`
-	ID            string
-	Repository    Repository
-	Campaigns     CampaignConnection
-	CreatedAt     string
-	UpdatedAt     string
-	NextSyncAt    string
-	Title         string
-	Body          string
-	State         string
-	ExternalState string
-	ExternalURL   struct {
-		URL         string
-		ServiceType string
-	}
-	ReviewState string
-	CheckState  string
-	Events      ChangesetEventConnection
-	Head        GitRef
-	Base        GitRef
-
-	Diff struct {
-		FileDiffs FileDiffs
-	}
-}
+type Patch struct { /* all structs must go */ }
 
-type ChangesetConnection struct {
-	Nodes      []Changeset
-	TotalCount int
-	PageInfo   struct {
-		HasNextPage bool
-	}
-}
+type PatchSet struct { /* all structs must go */ }
 
-type ChangesetCounts struct {
-	Date                 graphqlbackend.DateTime
-	Total                int32
-	Merged               int32
-	Closed               int32
-	Open                 int32
-	OpenApproved         int32
-	OpenChangesRequested int32
-	OpenPending          int32
-}
+type User struct { /* all structs must go */ }
 
-type CampaignSpec struct {
-	Typename string `json:"__typename"`
-	ID       string
+type Org struct { /* all structs must go */ }
 
-	OriginalInput string
-	ParsedInput   graphqlbackend.JSONValue
+type UserOrg struct { /* all structs must go */ }
 
-	PreviewURL string
+type Campaign struct { /* all structs must go */ }
 
-	Namespace UserOrg
-	Creator   User
+type CampaignConnection struct { /* all structs must go */ }
 
-	ChangesetSpecs ChangesetSpecConnection
+type ChangesetEventConnection struct { /* all structs must go */ }
 
-	ViewerCanAdminister bool
+type Repository struct { /* all structs must go */ }
 
-	CreatedAt graphqlbackend.DateTime
-	ExpiresAt *graphqlbackend.DateTime
-}
+type Changeset struct { /* all structs must go */ }
 
-type ChangesetSpec struct {
-	Typename string `json:"__typename"`
-	ID       string
+type ChangesetConnection struct { /* all structs must go */ }
 
-	Description ChangesetSpecDescription
+type ChangesetCounts struct { /* all structs must go */ }
 
-	ExpiresAt *graphqlbackend.DateTime
-}
-
-type ChangesetSpecConnection struct {
-	Nodes      []ChangesetSpec
-	TotalCount int
-	PageInfo   struct {
-		HasNextPage bool
-		EndCursor   *string
-	}
-}
-
-type ChangesetSpecDescription struct {
-	Typename string `json:"__typename"`
-
-	BaseRepository Repository
-	ExternalID     string
-	BaseRef        string
+type CampaignSpec struct { /* all structs must go */ }
 
-	HeadRepository Repository
-	HeadRef        string
+type ChangesetSpec struct { /* all structs must go */ }
 
-	Title string
-	Body  string
+type ChangesetSpecConnection struct { /* all structs must go */ }
 
-	Commits []GitCommitDescription
+type ChangesetSpecDescription struct { /* all structs must go */ }
 
-	Published bool
-
-	Diff struct {
-		FileDiffs FileDiffs
-	}
-}
-
-type GitCommitDescription struct {
-	Message string
-	Diff    string
-}
+type GitCommitDescription struct { /* all structs must go */ }
diff --git a/enterprise/internal/campaigns/resolvers/campaign_spec.go b/enterprise/internal/campaigns/resolvers/campaign_spec.go
index 79925f3..d435b77 100644
--- a/enterprise/internal/campaigns/resolvers/campaign_spec.go
+++ b/enterprise/internal/campaigns/resolvers/campaign_spec.go
@@ -24,12 +24,7 @@ func unmarshalCampaignSpecID(id graphql.ID) (campaignSpecRandID string, err erro
 
 var _ graphqlbackend.CampaignSpecResolver = &campaignSpecResolver{}
 
-type campaignSpecResolver struct {
-	store       *ee.Store
-	httpFactory *httpcli.Factory
-
-	campaignSpec *campaigns.CampaignSpec
-}
+type campaignSpecResolver struct { /* all structs must go */ }
 
 func (r *campaignSpecResolver) ID() graphql.ID {
 	// 🚨 SECURITY: This needs to be the RandID! We can't expose the
@@ -111,9 +106,7 @@ func (r *campaignSpecResolver) ViewerCanAdminister(ctx context.Context) (bool, e
 	return checkSiteAdminOrSameUser(ctx, r.campaignSpec.UserID)
 }
 
-type campaignDescriptionResolver struct {
-	name, description string
-}
+type campaignDescriptionResolver struct { /* all structs must go */ }
 
 func (r *campaignDescriptionResolver) Name() string {
 	return r.name
diff --git a/enterprise/internal/campaigns/resolvers/campaigns.go b/enterprise/internal/campaigns/resolvers/campaigns.go
index af0d8ef..41d61a7 100644
--- a/enterprise/internal/campaigns/resolvers/campaigns.go
+++ b/enterprise/internal/campaigns/resolvers/campaigns.go
@@ -16,17 +16,7 @@ import (
 
 var _ graphqlbackend.CampaignsConnectionResolver = &campaignsConnectionResolver{}
 
-type campaignsConnectionResolver struct {
-	store       *ee.Store
-	httpFactory *httpcli.Factory
-	opts        ee.ListCampaignsOpts
-
-	// cache results because they are used by multiple fields
-	once      sync.Once
-	campaigns []*campaigns.Campaign
-	next      int64
-	err       error
-}
+type campaignsConnectionResolver struct { /* all structs must go */ }
 
 func (r *campaignsConnectionResolver) Nodes(ctx context.Context) ([]graphqlbackend.CampaignResolver, error) {
 	nodes, _, err := r.compute(ctx)
@@ -63,11 +53,7 @@ func (r *campaignsConnectionResolver) compute(ctx context.Context) ([]*campaigns
 
 var _ graphqlbackend.CampaignResolver = &campaignResolver{}
 
-type campaignResolver struct {
-	store       *ee.Store
-	httpFactory *httpcli.Factory
-	*campaigns.Campaign
-}
+type campaignResolver struct { /* all structs must go */ }
 
 func (r *campaignResolver) ID() graphql.ID {
 	return campaigns.MarshalCampaignID(r.Campaign.ID)
diff --git a/enterprise/internal/campaigns/resolvers/changeset_events.go b/enterprise/internal/campaigns/resolvers/changeset_events.go
index a6ec998..ce9f8e6 100644
--- a/enterprise/internal/campaigns/resolvers/changeset_events.go
+++ b/enterprise/internal/campaigns/resolvers/changeset_events.go
@@ -13,18 +13,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/httpcli"
 )
 
-type changesetEventsConnectionResolver struct {
-	store       *ee.Store
-	httpFactory *httpcli.Factory
-	changeset   *campaigns.Changeset
-	opts        ee.ListChangesetEventsOpts
-
-	// cache results because they are used by multiple fields
-	once            sync.Once
-	changesetEvents []*campaigns.ChangesetEvent
-	next            int64
-	err             error
-}
+type changesetEventsConnectionResolver struct { /* all structs must go */ }
 
 func (r *changesetEventsConnectionResolver) Nodes(ctx context.Context) ([]graphqlbackend.ChangesetEventResolver, error) {
 	changesetEvents, _, err := r.compute(ctx)
@@ -64,12 +53,7 @@ func (r *changesetEventsConnectionResolver) compute(ctx context.Context) ([]*cam
 	return r.changesetEvents, r.next, r.err
 }
 
-type changesetEventResolver struct {
-	store       *ee.Store
-	httpFactory *httpcli.Factory
-	changeset   *campaigns.Changeset
-	*campaigns.ChangesetEvent
-}
+type changesetEventResolver struct { /* all structs must go */ }
 
 const changesetEventIDKind = "ChangesetEvent"
 
@@ -94,9 +78,7 @@ func (r *changesetEventResolver) Changeset(ctx context.Context) (graphqlbackend.
 	}, nil
 }
 
-type changesetCountsResolver struct {
-	counts *ee.ChangesetCounts
-}
+type changesetCountsResolver struct { /* all structs must go */ }
 
 func (r *changesetCountsResolver) Date() graphqlbackend.DateTime {
 	return graphqlbackend.DateTime{Time: r.counts.Time}
diff --git a/enterprise/internal/campaigns/resolvers/changeset_spec.go b/enterprise/internal/campaigns/resolvers/changeset_spec.go
index 4ee50ac..ee69f94 100644
--- a/enterprise/internal/campaigns/resolvers/changeset_spec.go
+++ b/enterprise/internal/campaigns/resolvers/changeset_spec.go
@@ -26,25 +26,7 @@ func unmarshalChangesetSpecID(id graphql.ID) (changesetSpecRandID string, err er
 
 var _ graphqlbackend.ChangesetSpecResolver = &changesetSpecResolver{}
 
-type changesetSpecResolver struct {
-	store       *ee.Store
-	httpFactory *httpcli.Factory
-
-	changesetSpec *campaigns.ChangesetSpec
-
-	preloadedRepo        *types.Repo
-	attemptedPreloadRepo bool
-
-	// Cache repo because it's accessed more than once
-	repoOnce sync.Once
-	repo     *graphqlbackend.RepositoryResolver
-	repoErr  error
-	// The context with which we try to load the repository if it's not
-	// preloaded. We need an extra field for that, because the
-	// ToVisibleChangesetSpec/ToHiddenChangesetSpec methods cannot take a
-	// context.Context without graphql-go panic'ing.
-	repoCtx context.Context
-}
+type changesetSpecResolver struct { /* all structs must go */ }
 
 func (r *changesetSpecResolver) ID() graphql.ID {
 	// 🚨 SECURITY: This needs to be the RandID! We can't expose the
@@ -144,10 +126,7 @@ var _ graphqlbackend.ChangesetDescription = &changesetDescriptionResolver{}
 // changesetDescriptionResolver implements both ChangesetDescription
 // interfaces: ExistingChangesetReferenceResolver and
 // GitBranchChangesetDescriptionResolver.
-type changesetDescriptionResolver struct {
-	repoResolver *graphqlbackend.RepositoryResolver
-	desc         *campaigns.ChangesetSpecDescription
-}
+type changesetDescriptionResolver struct { /* all structs must go */ }
 
 func (r *changesetDescriptionResolver) ToExistingChangesetReference() (graphqlbackend.ExistingChangesetReferenceResolver, bool) {
 	if r.desc.IsExisting() {
@@ -197,10 +176,7 @@ func (r *changesetDescriptionResolver) Commits() []graphqlbackend.GitCommitDescr
 
 var _ graphqlbackend.GitCommitDescriptionResolver = &gitCommitDescriptionResolver{}
 
-type gitCommitDescriptionResolver struct {
-	message string
-	diff    string
-}
+type gitCommitDescriptionResolver struct { /* all structs must go */ }
 
 func (r *gitCommitDescriptionResolver) Message() string { return r.message }
 func (r *gitCommitDescriptionResolver) Diff() string    { return r.diff }
diff --git a/enterprise/internal/campaigns/resolvers/changeset_spec_connection.go b/enterprise/internal/campaigns/resolvers/changeset_spec_connection.go
index f14712c..f105033 100644
--- a/enterprise/internal/campaigns/resolvers/changeset_spec_connection.go
+++ b/enterprise/internal/campaigns/resolvers/changeset_spec_connection.go
@@ -17,19 +17,7 @@ import (
 
 var _ graphqlbackend.ChangesetSpecConnectionResolver = &changesetSpecConnectionResolver{}
 
-type changesetSpecConnectionResolver struct {
-	store       *ee.Store
-	httpFactory *httpcli.Factory
-
-	opts ee.ListChangesetSpecsOpts
-
-	// Cache results because they are used by multiple fields
-	once           sync.Once
-	changesetSpecs []*campaigns.ChangesetSpec
-	reposByID      map[api.RepoID]*types.Repo
-	next           int64
-	err            error
-}
+type changesetSpecConnectionResolver struct { /* all structs must go */ }
 
 func (r *changesetSpecConnectionResolver) TotalCount(ctx context.Context) (int32, error) {
 	count, err := r.store.CountChangesetSpecs(ctx, ee.CountChangesetSpecsOpts{
diff --git a/enterprise/internal/campaigns/resolvers/changeset_spec_connection_test.go b/enterprise/internal/campaigns/resolvers/changeset_spec_connection_test.go
index ea2d40b..002884e 100644
--- a/enterprise/internal/campaigns/resolvers/changeset_spec_connection_test.go
+++ b/enterprise/internal/campaigns/resolvers/changeset_spec_connection_test.go
@@ -76,12 +76,7 @@ func TestChangesetSpecConnectionResolver(t *testing.T) {
 
 	apiID := string(marshalCampaignSpecRandID(campaignSpec.RandID))
 
-	tests := []struct {
-		first int
-
-		wantTotalCount  int
-		wantHasNextPage bool
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{first: 1, wantTotalCount: 3, wantHasNextPage: true},
 		{first: 2, wantTotalCount: 3, wantHasNextPage: true},
 		{first: 3, wantTotalCount: 3, wantHasNextPage: false},
diff --git a/enterprise/internal/campaigns/resolvers/changeset_spec_test.go b/enterprise/internal/campaigns/resolvers/changeset_spec_test.go
index 951526f..073423c 100644
--- a/enterprise/internal/campaigns/resolvers/changeset_spec_test.go
+++ b/enterprise/internal/campaigns/resolvers/changeset_spec_test.go
@@ -47,11 +47,7 @@ func TestChangesetSpecResolver(t *testing.T) {
 
 	}
 
-	tests := []struct {
-		name    string
-		rawSpec string
-		want    func(spec *campaigns.ChangesetSpec) apitest.ChangesetSpec
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:    "GitBranchChangesetDescription",
 			rawSpec: ct.NewRawChangesetSpecGitBranch(repoID, string(testRev)),
diff --git a/enterprise/internal/campaigns/resolvers/changesets.go b/enterprise/internal/campaigns/resolvers/changesets.go
index 82dd56c..a459231 100644
--- a/enterprise/internal/campaigns/resolvers/changesets.go
+++ b/enterprise/internal/campaigns/resolvers/changesets.go
@@ -26,9 +26,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/vcs/git"
 )
 
-type changesetsConnectionStatsResolver struct {
-	unpublished, open, merged, closed, total int32
-}
+type changesetsConnectionStatsResolver struct { /* all structs must go */ }
 
 func (r *changesetsConnectionStatsResolver) Unpublished() int32 {
 	return r.unpublished
@@ -46,24 +44,7 @@ func (r *changesetsConnectionStatsResolver) Total() int32 {
 	return r.total
 }
 
-type changesetsConnectionResolver struct {
-	store       *ee.Store
-	httpFactory *httpcli.Factory
-
-	opts ee.ListChangesetsOpts
-	// 🚨 SECURITY: If the given opts do not reveal hidden information about a
-	// changeset by including the changeset in the result set, this should be
-	// set to true.
-	optsSafe bool
-
-	// cache results because they are used by multiple fields
-	once           sync.Once
-	changesets     []*campaigns.Changeset
-	scheduledSyncs map[int64]time.Time
-	reposByID      map[api.RepoID]*types.Repo
-	next           int64
-	err            error
-}
+type changesetsConnectionResolver struct { /* all structs must go */ }
 
 func (r *changesetsConnectionResolver) Nodes(ctx context.Context) ([]graphqlbackend.ChangesetResolver, error) {
 	changesets, reposByID, _, err := r.compute(ctx)
@@ -186,36 +167,7 @@ func (r *changesetsConnectionResolver) Stats(ctx context.Context) (graphqlbacken
 	return &changesetsConnectionStatsResolver{}, nil
 }
 
-type changesetResolver struct {
-	store       *ee.Store
-	httpFactory *httpcli.Factory
-
-	changeset *campaigns.Changeset
-
-	attemptedPreloadRepo bool
-	preloadedRepo        *types.Repo
-
-	// cache repo because it's called more than once
-	repoOnce sync.Once
-	repo     *graphqlbackend.RepositoryResolver
-	repoErr  error
-	// The context with which we try to load the repository if it's not
-	// preloaded. We need an extra field for that, because the
-	// ToExternalChangeset/ToHiddenExternalChangeset methods cannot take a
-	// context.Context without graphql-go panic'ing.
-	repoCtx context.Context
-
-	// cache changeset events as they are used more than once
-	eventsOnce sync.Once
-	events     ee.ChangesetEvents
-	eventsErr  error
-
-	// When the next sync is scheduled
-	preloadedNextSyncAt *time.Time
-	nextSyncAtOnce      sync.Once
-	nextSyncAt          time.Time
-	nextSyncAtErr       error
-}
+type changesetResolver struct { /* all structs must go */ }
 
 const changesetIDKind = "Changeset"
 
@@ -460,9 +412,7 @@ func (r *changesetResolver) Labels(ctx context.Context) ([]graphqlbackend.Change
 	return resolvers, nil
 }
 
-func (r *changesetResolver) Events(ctx context.Context, args *struct {
-	graphqlutil.ConnectionArgs
-}) (graphqlbackend.ChangesetEventsConnectionResolver, error) {
+func (r *changesetResolver) Events(ctx context.Context, args *struct { /* all structs must go */ }) (graphqlbackend.ChangesetEventsConnectionResolver, error) {
 	// TODO: We already need to fetch all events for ReviewState and Labels
 	// perhaps we can use the cached data here
 	return &changesetEventsConnectionResolver{
@@ -624,9 +574,7 @@ func (r *changesetResolver) commitID(ctx context.Context, repo *graphqlbackend.R
 	return git.ResolveRevision(ctx, *grepo, nil, refName, git.ResolveRevisionOptions{})
 }
 
-type changesetLabelResolver struct {
-	label campaigns.ChangesetLabel
-}
+type changesetLabelResolver struct { /* all structs must go */ }
 
 func (r *changesetLabelResolver) Text() string {
 	return r.label.Name
diff --git a/enterprise/internal/campaigns/resolvers/permissions_test.go b/enterprise/internal/campaigns/resolvers/permissions_test.go
index 1778689..0079def 100644
--- a/enterprise/internal/campaigns/resolvers/permissions_test.go
+++ b/enterprise/internal/campaigns/resolvers/permissions_test.go
@@ -130,12 +130,7 @@ func TestPermissionLevels(t *testing.T) {
 		userCampaignSpec := createCampaignSpec(t, store, userID)
 
 		t.Run("CampaignByID", func(t *testing.T) {
-			tests := []struct {
-				name                    string
-				currentUser             int32
-				campaign                int64
-				wantViewerCanAdminister bool
-			}{
+			tests := []struct { /* all structs must go */ }{
 				{
 					name:                    "site-admin viewing own campaign",
 					currentUser:             adminID,
@@ -189,12 +184,7 @@ func TestPermissionLevels(t *testing.T) {
 		})
 
 		t.Run("CampaignSpecByID", func(t *testing.T) {
-			tests := []struct {
-				name                    string
-				currentUser             int32
-				campaignSpec            string
-				wantViewerCanAdminister bool
-			}{
+			tests := []struct { /* all structs must go */ }{
 				{
 					name:                    "site-admin viewing own campaign spec",
 					currentUser:             adminID,
@@ -248,12 +238,7 @@ func TestPermissionLevels(t *testing.T) {
 		})
 
 		t.Run("Campaigns", func(t *testing.T) {
-			tests := []struct {
-				name                string
-				currentUser         int32
-				viewerCanAdminister bool
-				wantCampaigns       []int64
-			}{
+			tests := []struct { /* all structs must go */ }{
 				{
 					name:                "admin listing viewerCanAdminister: true",
 					currentUser:         adminID,
@@ -298,10 +283,7 @@ func TestPermissionLevels(t *testing.T) {
 						}
 					}
 					}`, tc.viewerCanAdminister, marshalChangesetID(changeset.ID), tc.viewerCanAdminister)
-					var res struct {
-						Campaigns apitest.CampaignConnection
-						Node      apitest.Changeset
-					}
+					var res struct { /* all structs must go */ }
 					apitest.MustExec(actorCtx, t, s, nil, &res, query)
 					for _, conn := range []apitest.CampaignConnection{res.Campaigns, res.Node.Campaigns} {
 						if have, want := conn.TotalCount, len(tc.wantCampaigns); have != want {
@@ -322,10 +304,7 @@ func TestPermissionLevels(t *testing.T) {
 	})
 
 	t.Run("mutations", func(t *testing.T) {
-		mutations := []struct {
-			name         string
-			mutationFunc func(campaignID, changesetID, campaignSpecID string) string
-		}{
+		mutations := []struct { /* all structs must go */ }{
 			{
 				name: "closeCampaign",
 				mutationFunc: func(campaignID, changesetID, campaignSpecID string) string {
@@ -360,12 +339,7 @@ func TestPermissionLevels(t *testing.T) {
 
 		for _, m := range mutations {
 			t.Run(m.name, func(t *testing.T) {
-				tests := []struct {
-					name           string
-					currentUser    int32
-					campaignAuthor int32
-					wantAuthErr    bool
-				}{
+				tests := []struct { /* all structs must go */ }{
 					{
 						name:           "unauthorized",
 						currentUser:    userID,
@@ -669,11 +643,7 @@ func TestRepositoryPermissions(t *testing.T) {
 	})
 }
 
-type wantCampaignResponse struct {
-	changesetTypes   map[string]int
-	changesetsCount  int
-	campaignDiffStat apitest.DiffStat
-}
+type wantCampaignResponse struct { /* all structs must go */ }
 
 func testCampaignResponse(t *testing.T, s *graphql.Schema, ctx context.Context, in map[string]interface{}, w wantCampaignResponse) {
 	t.Helper()
@@ -803,10 +773,7 @@ query {
 }
 `
 
-type wantCampaignSpecResponse struct {
-	changesetSpecTypes  map[string]int
-	changesetSpecsCount int
-}
+type wantCampaignSpecResponse struct { /* all structs must go */ }
 
 func testCampaignSpecResponse(t *testing.T, s *graphql.Schema, ctx context.Context, campaignSpecRandID string, w wantCampaignSpecResponse) {
 	t.Helper()
diff --git a/enterprise/internal/campaigns/resolvers/resolver.go b/enterprise/internal/campaigns/resolvers/resolver.go
index a93d4a5..f18c769 100644
--- a/enterprise/internal/campaigns/resolvers/resolver.go
+++ b/enterprise/internal/campaigns/resolvers/resolver.go
@@ -23,10 +23,7 @@ import (
 var ErrIDIsZero = errors.New("invalid node id")
 
 // Resolver is the GraphQL resolver of all things related to Campaigns.
-type Resolver struct {
-	store       *ee.Store
-	httpFactory *httpcli.Factory
-}
+type Resolver struct { /* all structs must go */ }
 
 // NewResolver returns a new Resolver whose store uses the given db
 func NewResolver(db *sql.DB) graphqlbackend.CampaignsResolver {
diff --git a/enterprise/internal/campaigns/resolvers/resolver_test.go b/enterprise/internal/campaigns/resolvers/resolver_test.go
index 5e858fe..289aa00 100644
--- a/enterprise/internal/campaigns/resolvers/resolver_test.go
+++ b/enterprise/internal/campaigns/resolvers/resolver_test.go
@@ -58,11 +58,7 @@ func TestCampaigns(t *testing.T) {
 		t.Fatal(err)
 	}
 
-	var users struct {
-		Admin, User struct {
-			apitest.User `json:"user"`
-		}
-	}
+	var users struct { /* all structs must go */ }
 
 	apitest.MustExec(ctx, t, s, nil, &users, `
 		fragment u on User { id, databaseID, siteAdmin }
@@ -80,9 +76,7 @@ func TestCampaigns(t *testing.T) {
 		t.Fatal("admin must be a site-admin, since it was the first user created")
 	}
 
-	var orgs struct {
-		ACME apitest.Org
-	}
+	var orgs struct { /* all structs must go */ }
 
 	ctx = actor.WithActor(ctx, actor.FromUser(users.Admin.DatabaseID))
 	apitest.MustExec(ctx, t, s, nil, &orgs, `
diff --git a/enterprise/internal/campaigns/resolvers/testing.go b/enterprise/internal/campaigns/resolvers/testing.go
index 3b3b5b4..8dcc5ee 100644
--- a/enterprise/internal/campaigns/resolvers/testing.go
+++ b/enterprise/internal/campaigns/resolvers/testing.go
@@ -45,10 +45,7 @@ index 6f8b5d9..17400bc 100644
 var testDiffGraphQL = apitest.FileDiffs{
 	RawDiff:  testDiff,
 	DiffStat: apitest.DiffStat{Changed: 2},
-	PageInfo: struct {
-		HasNextPage bool
-		EndCursor   string
-	}{},
+	PageInfo: struct { /* all structs must go */ }{},
 	Nodes: []apitest.FileDiff{
 		{
 			OldPath: "README.md",
diff --git a/enterprise/internal/campaigns/service.go b/enterprise/internal/campaigns/service.go
index b38fc78..6a5efee 100644
--- a/enterprise/internal/campaigns/service.go
+++ b/enterprise/internal/campaigns/service.go
@@ -36,14 +36,7 @@ func NewServiceWithClock(store *Store, cf *httpcli.Factory, clock func() time.Ti
 	return svc
 }
 
-type Service struct {
-	store *Store
-	cf    *httpcli.Factory
-
-	sourcer repos.Sourcer
-
-	clock func() time.Time
-}
+type Service struct { /* all structs must go */ }
 
 // CreateCampaign creates the Campaign.
 func (s *Service) CreateCampaign(ctx context.Context, c *campaigns.Campaign) error {
@@ -82,14 +75,7 @@ func (s *Service) CreateCampaign(ctx context.Context, c *campaigns.Campaign) err
 	return nil
 }
 
-type CreateCampaignSpecOpts struct {
-	RawSpec string
-
-	NamespaceUserID int32
-	NamespaceOrgID  int32
-
-	ChangesetSpecRandIDs []string
-}
+type CreateCampaignSpecOpts struct { /* all structs must go */ }
 
 // CreateCampaignSpec creates the CampaignSpec.
 func (s *Service) CreateCampaignSpec(ctx context.Context, opts CreateCampaignSpecOpts) (spec *campaigns.CampaignSpec, err error) {
@@ -198,9 +184,7 @@ func (s *Service) CreateChangesetSpec(ctx context.Context, rawSpec string, userI
 // changesetSpecNotFoundErr is returned by CreateCampaignSpec if a
 // ChangesetSpec with the given RandID doesn't exist.
 // It fulfills the interface required by errcode.IsNotFound.
-type changesetSpecNotFoundErr struct {
-	RandID string
-}
+type changesetSpecNotFoundErr struct { /* all structs must go */ }
 
 func (e *changesetSpecNotFoundErr) Error() string {
 	if e.RandID != "" {
@@ -211,10 +195,7 @@ func (e *changesetSpecNotFoundErr) Error() string {
 
 func (e *changesetSpecNotFoundErr) NotFound() bool { return true }
 
-type ApplyCampaignOpts struct {
-	CampaignSpecRandID string
-	EnsureCampaignID   int64
-}
+type ApplyCampaignOpts struct { /* all structs must go */ }
 
 func (o ApplyCampaignOpts) String() string {
 	return fmt.Sprintf(
@@ -294,14 +275,7 @@ func (s *Service) ApplyCampaign(ctx context.Context, opts ApplyCampaignOpts) (ca
 	return campaign, tx.UpdateCampaign(ctx, campaign)
 }
 
-type MoveCampaignOpts struct {
-	CampaignID int64
-
-	NewName string
-
-	NewNamespaceUserID int32
-	NewNamespaceOrgID  int32
-}
+type MoveCampaignOpts struct { /* all structs must go */ }
 
 func (o MoveCampaignOpts) String() string {
 	return fmt.Sprintf(
diff --git a/enterprise/internal/campaigns/service_test.go b/enterprise/internal/campaigns/service_test.go
index 2ca11cf..a2293d2 100644
--- a/enterprise/internal/campaigns/service_test.go
+++ b/enterprise/internal/campaigns/service_test.go
@@ -116,12 +116,7 @@ func TestServicePermissionLevels(t *testing.T) {
 		}
 	}
 
-	tests := []struct {
-		name           string
-		campaignAuthor int32
-		currentUser    int32
-		assertFunc     func(t *testing.T, err error)
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:           "unauthorized user",
 			campaignAuthor: user.ID,
diff --git a/enterprise/internal/campaigns/state_test.go b/enterprise/internal/campaigns/state_test.go
index 23fe166..7254e2d 100644
--- a/enterprise/internal/campaigns/state_test.go
+++ b/enterprise/internal/campaigns/state_test.go
@@ -53,11 +53,7 @@ func TestComputeGithubCheckState(t *testing.T) {
 	lastSynced := now.Add(-1 * time.Minute)
 	pr := &github.PullRequest{}
 
-	tests := []struct {
-		name   string
-		events []*cmpgn.ChangesetEvent
-		want   cmpgn.ChangesetCheckState
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:   "empty slice",
 			events: nil,
@@ -180,11 +176,7 @@ func TestComputeBitbucketBuildStatus(t *testing.T) {
 		},
 	}
 
-	tests := []struct {
-		name   string
-		events []*cmpgn.ChangesetEvent
-		want   cmpgn.ChangesetCheckState
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:   "empty slice",
 			events: nil,
@@ -264,10 +256,7 @@ func TestComputeBitbucketBuildStatus(t *testing.T) {
 }
 
 func TestComputeGitLabCheckState(t *testing.T) {
-	for name, tc := range map[string]struct {
-		mr   *gitlab.MergeRequest
-		want cmpgn.ChangesetCheckState
-	}{
+	for name, tc := range map[string]struct { /* all structs must go */ }{
 		"no pipelines at all": {
 			mr:   &gitlab.MergeRequest{},
 			want: cmpgn.ChangesetCheckStateUnknown,
@@ -344,12 +333,7 @@ func TestComputeReviewState(t *testing.T) {
 	now := time.Now().UTC().Truncate(time.Microsecond)
 	daysAgo := func(days int) time.Time { return now.AddDate(0, 0, -days) }
 
-	tests := []struct {
-		name      string
-		changeset *campaigns.Changeset
-		history   []changesetStatesAtTime
-		want      cmpgn.ChangesetReviewState
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:      "github - no events",
 			changeset: githubChangeset(daysAgo(10), "OPEN"),
@@ -489,12 +473,7 @@ func TestComputeExternalState(t *testing.T) {
 	now := time.Now().UTC().Truncate(time.Microsecond)
 	daysAgo := func(days int) time.Time { return now.AddDate(0, 0, -days) }
 
-	tests := []struct {
-		name      string
-		changeset *campaigns.Changeset
-		history   []changesetStatesAtTime
-		want      cmpgn.ChangesetExternalState
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:      "github - no events",
 			changeset: githubChangeset(daysAgo(10), "OPEN"),
@@ -650,12 +629,7 @@ func TestComputeLabels(t *testing.T) {
 		return ls
 	}
 
-	tests := []struct {
-		name      string
-		changeset *cmpgn.Changeset
-		events    ChangesetEvents
-		want      []cmpgn.ChangesetLabel
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "zero values",
 		},
@@ -718,13 +692,7 @@ func bitbucketChangeset(updatedAt time.Time, state, reviewStatus string) *campai
 		Metadata: &bitbucketserver.PullRequest{
 			State: state,
 			// TODO: Reviewers should be its own struct
-			Reviewers: []struct {
-				User               *bitbucketserver.User `json:"user"`
-				LastReviewedCommit string                `json:"lastReviewedCommit"`
-				Role               string                `json:"role"`
-				Approved           bool                  `json:"approved"`
-				Status             string                `json:"status"`
-			}{
+			Reviewers: []struct { /* all structs must go */ }{
 				{Status: reviewStatus},
 			},
 		},
diff --git a/enterprise/internal/campaigns/store.go b/enterprise/internal/campaigns/store.go
index c63e729..34dc6d4 100644
--- a/enterprise/internal/campaigns/store.go
+++ b/enterprise/internal/campaigns/store.go
@@ -27,10 +27,7 @@ var seededRand *rand.Rand = rand.New(rand.NewSource(time.Now().UnixNano()))
 
 // Store exposes methods to read and write campaigns domain models
 // from persistent storage.
-type Store struct {
-	db  dbutil.DB
-	now func() time.Time
-}
+type Store struct { /* all structs must go */ }
 
 // NewStore returns a new Store backed by the given db.
 func NewStore(db dbutil.DB) *Store {
@@ -151,9 +148,7 @@ func (s *Store) DB() dbutil.DB { return s.db }
 // AlreadyExistError is returned by CreateChangesets in case a subset of the
 // given changesets already existed in the database and were not inserted but
 // returned
-type AlreadyExistError struct {
-	ChangesetIDs []int64
-}
+type AlreadyExistError struct { /* all structs must go */ }
 
 func (e AlreadyExistError) Error() string {
 	return fmt.Sprintf("Changesets already exist: %v", e.ChangesetIDs)
@@ -330,28 +325,7 @@ func (s *Store) createChangesetsQuery(cs []*campaigns.Changeset) (*sqlf.Query, e
 }
 
 func batchChangesetsQuery(fmtstr string, cs []*campaigns.Changeset) (*sqlf.Query, error) {
-	type record struct {
-		ID                  int64                             `json:"id"`
-		RepoID              api.RepoID                        `json:"repo_id"`
-		CreatedAt           time.Time                         `json:"created_at"`
-		UpdatedAt           time.Time                         `json:"updated_at"`
-		Metadata            json.RawMessage                   `json:"metadata"`
-		CampaignIDs         json.RawMessage                   `json:"campaign_ids"`
-		ExternalID          string                            `json:"external_id"`
-		ExternalServiceType string                            `json:"external_service_type"`
-		ExternalBranch      string                            `json:"external_branch"`
-		ExternalDeletedAt   *time.Time                        `json:"external_deleted_at"`
-		ExternalUpdatedAt   *time.Time                        `json:"external_updated_at"`
-		ExternalState       *campaigns.ChangesetExternalState `json:"external_state"`
-		ExternalReviewState *campaigns.ChangesetReviewState   `json:"external_review_state"`
-		ExternalCheckState  *campaigns.ChangesetCheckState    `json:"external_check_state"`
-		CreatedByCampaign   bool                              `json:"created_by_campaign"`
-		AddedToCampaign     bool                              `json:"added_to_campaign"`
-		DiffStatAdded       *int32                            `json:"diff_stat_added"`
-		DiffStatChanged     *int32                            `json:"diff_stat_changed"`
-		DiffStatDeleted     *int32                            `json:"diff_stat_deleted"`
-		SyncState           json.RawMessage                   `json:"sync_state"`
-	}
+	type record struct { /* all structs must go */ }
 
 	records := make([]record, 0, len(cs))
 
@@ -428,12 +402,7 @@ DELETE FROM changesets WHERE id = %s
 
 // CountChangesetsOpts captures the query options needed for
 // counting changesets.
-type CountChangesetsOpts struct {
-	CampaignID          int64
-	ExternalState       *campaigns.ChangesetExternalState
-	ExternalReviewState *campaigns.ChangesetReviewState
-	ExternalCheckState  *campaigns.ChangesetCheckState
-}
+type CountChangesetsOpts struct { /* all structs must go */ }
 
 // CountChangesets returns the number of changesets in the database.
 func (s *Store) CountChangesets(ctx context.Context, opts CountChangesetsOpts) (count int64, _ error) {
@@ -474,12 +443,7 @@ func countChangesetsQuery(opts *CountChangesetsOpts) *sqlf.Query {
 }
 
 // GetChangesetOpts captures the query options needed for getting a Changeset
-type GetChangesetOpts struct {
-	ID                  int64
-	RepoID              api.RepoID
-	ExternalID          string
-	ExternalServiceType string
-}
+type GetChangesetOpts struct { /* all structs must go */ }
 
 // ErrNoResults is returned by Store method calls that found no results.
 var ErrNoResults = errors.New("no results")
@@ -554,10 +518,7 @@ func getChangesetQuery(opts *GetChangesetOpts) *sqlf.Query {
 	return sqlf.Sprintf(getChangesetsQueryFmtstr, sqlf.Join(preds, "\n AND "))
 }
 
-type ListChangesetSyncDataOpts struct {
-	// Return only the supplied changesets. If empty, all changesets are returned
-	ChangesetIDs []int64
-}
+type ListChangesetSyncDataOpts struct { /* all structs must go */ }
 
 // ListChangesetSyncData returns sync data on all non-externally-deleted changesets
 // that are part of at least one open campaign.
@@ -623,17 +584,7 @@ func listChangesetSyncData(opts ListChangesetSyncDataOpts) *sqlf.Query {
 
 // ListChangesetsOpts captures the query options needed for
 // listing changesets.
-type ListChangesetsOpts struct {
-	Cursor               int64
-	Limit                int
-	CampaignID           int64
-	IDs                  []int64
-	WithoutDeleted       bool
-	ExternalState        *campaigns.ChangesetExternalState
-	ExternalReviewState  *campaigns.ChangesetReviewState
-	ExternalCheckState   *campaigns.ChangesetCheckState
-	OnlyWithoutDiffStats bool
-}
+type ListChangesetsOpts struct { /* all structs must go */ }
 
 // ListChangesets lists Changesets with the given filters.
 func (s *Store) ListChangesets(ctx context.Context, opts ListChangesetsOpts) (cs campaigns.Changesets, next int64, err error) {
@@ -824,12 +775,7 @@ func (s *Store) updateChangesetsQuery(cs []*campaigns.Changeset) (*sqlf.Query, e
 }
 
 // GetChangesetEventOpts captures the query options needed for getting a ChangesetEvent
-type GetChangesetEventOpts struct {
-	ID          int64
-	ChangesetID int64
-	Kind        campaigns.ChangesetEventKind
-	Key         string
-}
+type GetChangesetEventOpts struct { /* all structs must go */ }
 
 // GetChangesetEvent gets a changeset matching the given options.
 func (s *Store) GetChangesetEvent(ctx context.Context, opts GetChangesetEventOpts) (*campaigns.ChangesetEvent, error) {
@@ -888,11 +834,7 @@ func getChangesetEventQuery(opts *GetChangesetEventOpts) *sqlf.Query {
 
 // ListChangesetEventsOpts captures the query options needed for
 // listing changeset events.
-type ListChangesetEventsOpts struct {
-	ChangesetIDs []int64
-	Cursor       int64
-	Limit        int
-}
+type ListChangesetEventsOpts struct { /* all structs must go */ }
 
 // ListChangesetEvents lists ChangesetEvents with the given filters.
 func (s *Store) ListChangesetEvents(ctx context.Context, opts ListChangesetEventsOpts) (cs []*campaigns.ChangesetEvent, next int64, err error) {
@@ -965,9 +907,7 @@ func listChangesetEventsQuery(opts *ListChangesetEventsOpts) *sqlf.Query {
 
 // CountChangesetEventsOpts captures the query options needed for
 // counting changeset events.
-type CountChangesetEventsOpts struct {
-	ChangesetID int64
-}
+type CountChangesetEventsOpts struct { /* all structs must go */ }
 
 // CountChangesetEvents returns the number of changeset events in the database.
 func (s *Store) CountChangesetEvents(ctx context.Context, opts CountChangesetEventsOpts) (count int64, _ error) {
@@ -1092,15 +1032,7 @@ func (s *Store) upsertChangesetEventsQuery(es []*campaigns.ChangesetEvent) (*sql
 }
 
 func batchChangesetEventsQuery(fmtstr string, es []*campaigns.ChangesetEvent) (*sqlf.Query, error) {
-	type record struct {
-		ID          int64           `json:"id"`
-		ChangesetID int64           `json:"changeset_id"`
-		Kind        string          `json:"kind"`
-		Key         string          `json:"key"`
-		CreatedAt   time.Time       `json:"created_at"`
-		UpdatedAt   time.Time       `json:"updated_at"`
-		Metadata    json.RawMessage `json:"metadata"`
-	}
+	type record struct { /* all structs must go */ }
 
 	records := make([]record, 0, len(es))
 
@@ -1317,12 +1249,7 @@ DELETE FROM campaigns WHERE id = %s
 
 // CountCampaignsOpts captures the query options needed for
 // counting campaigns.
-type CountCampaignsOpts struct {
-	ChangesetID int64
-	State       campaigns.CampaignState
-	// Only return campaigns where author_id is the given.
-	OnlyForAuthor int32
-}
+type CountCampaignsOpts struct { /* all structs must go */ }
 
 // CountCampaigns returns the number of campaigns in the database.
 func (s *Store) CountCampaigns(ctx context.Context, opts CountCampaignsOpts) (count int64, _ error) {
@@ -1365,15 +1292,7 @@ func countCampaignsQuery(opts *CountCampaignsOpts) *sqlf.Query {
 }
 
 // GetCampaignOpts captures the query options needed for getting a Campaign
-type GetCampaignOpts struct {
-	ID int64
-
-	NamespaceUserID int32
-	NamespaceOrgID  int32
-
-	CampaignSpecID   int64
-	CampaignSpecName string
-}
+type GetCampaignOpts struct { /* all structs must go */ }
 
 // GetCampaign gets a campaign matching the given options.
 func (s *Store) GetCampaign(ctx context.Context, opts GetCampaignOpts) (*campaigns.Campaign, error) {
@@ -1454,14 +1373,7 @@ func getCampaignQuery(opts *GetCampaignOpts) *sqlf.Query {
 
 // ListCampaignsOpts captures the query options needed for
 // listing campaigns.
-type ListCampaignsOpts struct {
-	ChangesetID int64
-	Cursor      int64
-	Limit       int
-	State       campaigns.CampaignState
-	// Only return campaigns where author_id is the given.
-	OnlyForAuthor int32
-}
+type ListCampaignsOpts struct { /* all structs must go */ }
 
 // ListCampaigns lists Campaigns with the given filters.
 func (s *Store) ListCampaigns(ctx context.Context, opts ListCampaignsOpts) (cs []*campaigns.Campaign, next int64, err error) {
diff --git a/enterprise/internal/campaigns/store_campaign_specs.go b/enterprise/internal/campaigns/store_campaign_specs.go
index 5de1b62..640b0d0 100644
--- a/enterprise/internal/campaigns/store_campaign_specs.go
+++ b/enterprise/internal/campaigns/store_campaign_specs.go
@@ -160,10 +160,7 @@ FROM campaign_specs
 `
 
 // GetCampaignSpecOpts captures the query options needed for getting a CampaignSpec
-type GetCampaignSpecOpts struct {
-	ID     int64
-	RandID string
-}
+type GetCampaignSpecOpts struct { /* all structs must go */ }
 
 // GetCampaignSpec gets a code mod matching the given options.
 func (s *Store) GetCampaignSpec(ctx context.Context, opts GetCampaignSpecOpts) (*campaigns.CampaignSpec, error) {
@@ -211,10 +208,7 @@ func getCampaignSpecQuery(opts *GetCampaignSpecOpts) *sqlf.Query {
 
 // ListCampaignSpecsOpts captures the query options needed for
 // listing code mods.
-type ListCampaignSpecsOpts struct {
-	Cursor int64
-	Limit  int
-}
+type ListCampaignSpecsOpts struct { /* all structs must go */ }
 
 // ListCampaignSpecs lists CampaignSpecs with the given filters.
 func (s *Store) ListCampaignSpecs(ctx context.Context, opts ListCampaignSpecsOpts) (cs []*campaigns.CampaignSpec, next int64, err error) {
diff --git a/enterprise/internal/campaigns/store_campaign_specs_test.go b/enterprise/internal/campaigns/store_campaign_specs_test.go
index d7670e7..985f235 100644
--- a/enterprise/internal/campaigns/store_campaign_specs_test.go
+++ b/enterprise/internal/campaigns/store_campaign_specs_test.go
@@ -239,11 +239,7 @@ func testStoreCampaignSpecs(t *testing.T, ctx context.Context, s *Store, _ repos
 		underTTL := clock.now().Add(-cmpgn.CampaignSpecTTL + 1*time.Minute)
 		overTTL := clock.now().Add(-cmpgn.CampaignSpecTTL - 1*time.Minute)
 
-		tests := []struct {
-			createdAt   time.Time
-			hasCampaign bool
-			wantDeleted bool
-		}{
+		tests := []struct { /* all structs must go */ }{
 			{hasCampaign: false, createdAt: underTTL, wantDeleted: false},
 			{hasCampaign: false, createdAt: overTTL, wantDeleted: true},
 			{hasCampaign: true, createdAt: underTTL, wantDeleted: false},
diff --git a/enterprise/internal/campaigns/store_changeset_specs.go b/enterprise/internal/campaigns/store_changeset_specs.go
index 0924a82..ee9d95c 100644
--- a/enterprise/internal/campaigns/store_changeset_specs.go
+++ b/enterprise/internal/campaigns/store_changeset_specs.go
@@ -162,9 +162,7 @@ DELETE FROM changeset_specs WHERE id = %s
 
 // CountChangesetSpecsOpts captures the query options needed for counting
 // ChangesetSpecs.
-type CountChangesetSpecsOpts struct {
-	CampaignSpecID int64
-}
+type CountChangesetSpecsOpts struct { /* all structs must go */ }
 
 // CountChangesetSpecs returns the number of changeset specs in the database.
 func (s *Store) CountChangesetSpecs(ctx context.Context, opts CountChangesetSpecsOpts) (count int64, _ error) {
@@ -201,10 +199,7 @@ func countChangesetSpecsQuery(opts *CountChangesetSpecsOpts) *sqlf.Query {
 }
 
 // GetChangesetSpecOpts captures the query options needed for getting a ChangesetSpec
-type GetChangesetSpecOpts struct {
-	ID     int64
-	RandID string
-}
+type GetChangesetSpecOpts struct { /* all structs must go */ }
 
 // GetChangesetSpec gets a code mod matching the given options.
 func (s *Store) GetChangesetSpec(ctx context.Context, opts GetChangesetSpecOpts) (*campaigns.ChangesetSpec, error) {
@@ -256,13 +251,7 @@ func getChangesetSpecQuery(opts *GetChangesetSpecOpts) *sqlf.Query {
 
 // ListChangesetSpecsOpts captures the query options needed for
 // listing code mods.
-type ListChangesetSpecsOpts struct {
-	Cursor int64
-	Limit  int
-
-	CampaignSpecID int64
-	RandIDs        []string
-}
+type ListChangesetSpecsOpts struct { /* all structs must go */ }
 
 // ListChangesetSpecs lists ChangesetSpecs with the given filters.
 func (s *Store) ListChangesetSpecs(ctx context.Context, opts ListChangesetSpecsOpts) (cs []*campaigns.ChangesetSpec, next int64, err error) {
diff --git a/enterprise/internal/campaigns/store_changeset_specs_test.go b/enterprise/internal/campaigns/store_changeset_specs_test.go
index 99f13dd..256ac36 100644
--- a/enterprise/internal/campaigns/store_changeset_specs_test.go
+++ b/enterprise/internal/campaigns/store_changeset_specs_test.go
@@ -321,11 +321,7 @@ func testStoreChangesetSpecs(t *testing.T, ctx context.Context, s *Store, rs rep
 		underTTL := clock.now().Add(-cmpgn.ChangesetSpecTTL + 24*time.Hour)
 		overTTL := clock.now().Add(-cmpgn.ChangesetSpecTTL - 24*time.Hour)
 
-		tests := []struct {
-			createdAt       time.Time
-			hasCampaignSpec bool
-			wantDeleted     bool
-		}{
+		tests := []struct { /* all structs must go */ }{
 			{hasCampaignSpec: false, createdAt: underTTL, wantDeleted: false},
 			{hasCampaignSpec: false, createdAt: overTTL, wantDeleted: true},
 			{hasCampaignSpec: true, createdAt: underTTL, wantDeleted: false},
diff --git a/enterprise/internal/campaigns/store_test.go b/enterprise/internal/campaigns/store_test.go
index ae6d58d..be5ba84 100644
--- a/enterprise/internal/campaigns/store_test.go
+++ b/enterprise/internal/campaigns/store_test.go
@@ -24,9 +24,7 @@ type clock interface {
 	add(time.Duration) time.Time
 }
 
-type testClock struct {
-	t time.Time
-}
+type testClock struct { /* all structs must go */ }
 
 func (c *testClock) now() time.Time                { return c.t }
 func (c *testClock) add(d time.Duration) time.Time { c.t = c.t.Add(d); return c.t }
@@ -207,11 +205,7 @@ func testStoreCampaigns(t *testing.T, ctx context.Context, s *Store, _ repos.Sto
 			}
 		}
 
-		filterTests := []struct {
-			name  string
-			state cmpgn.CampaignState
-			want  []*cmpgn.Campaign
-		}{
+		filterTests := []struct { /* all structs must go */ }{
 			{
 				name:  "Any",
 				state: cmpgn.CampaignStateAny,
@@ -831,10 +825,7 @@ func testStoreChangesets(t *testing.T, ctx context.Context, s *Store, reposStore
 		statePassed := cmpgn.ChangesetCheckStatePassed
 		stateFailed := cmpgn.ChangesetCheckStateFailed
 
-		filterCases := []struct {
-			opts      ListChangesetsOpts
-			wantCount int
-		}{
+		filterCases := []struct { /* all structs must go */ }{
 			{
 				opts: ListChangesetsOpts{
 					ExternalState: &stateOpen,
diff --git a/enterprise/internal/campaigns/syncer.go b/enterprise/internal/campaigns/syncer.go
index 6622ae1..07f1474 100644
--- a/enterprise/internal/campaigns/syncer.go
+++ b/enterprise/internal/campaigns/syncer.go
@@ -20,19 +20,7 @@ import (
 )
 
 // SyncRegistry manages a ChangesetSyncer per code host
-type SyncRegistry struct {
-	Ctx         context.Context
-	SyncStore   SyncStore
-	RepoStore   RepoStore
-	HTTPFactory *httpcli.Factory
-
-	// Used to receive high priority sync requests
-	priorityNotify chan []int64
-
-	mu sync.Mutex
-	// key is normalised code host url, also called external_service_id on the repo table
-	syncers map[string]*ChangesetSyncer
-}
+type SyncRegistry struct { /* all structs must go */ }
 
 type RepoStore interface {
 	ListExternalServices(context.Context, repos.StoreListExternalServicesArgs) ([]*repos.ExternalService, error)
@@ -213,36 +201,9 @@ func timeIsNilOrZero(t *time.Time) bool {
 
 // A ChangesetSyncer periodically syncs metadata of changesets
 // saved in the database.
-type ChangesetSyncer struct {
-	SyncStore   SyncStore
-	ReposStore  RepoStore
-	HTTPFactory *httpcli.Factory
-
-	codeHostURL string
-
-	// scheduleInterval determines how often a new schedule will be computed.
-	// NOTE: It involves a DB query but no communication with code hosts.
-	scheduleInterval time.Duration
-
-	queue          *changesetPriorityQueue
-	priorityNotify chan []int64
-
-	// Replaceable for testing
-	syncFunc func(ctx context.Context, id int64) error
-	clock    func() time.Time
+type ChangesetSyncer struct { /* all structs must go */ }
 
-	// cancel should be called to stop this syncer
-	cancel context.CancelFunc
-}
-
-var syncerMetrics = struct {
-	syncs                   *prometheus.CounterVec
-	priorityQueued          *prometheus.CounterVec
-	syncDuration            *prometheus.HistogramVec
-	computeScheduleDuration *prometheus.HistogramVec
-	scheduleSize            *prometheus.GaugeVec
-	behindSchedule          *prometheus.GaugeVec
-}{}
+var syncerMetrics = struct { /* all structs must go */ }{}
 
 func init() {
 	syncerMetrics.syncs = promauto.NewCounterVec(prometheus.CounterOpts{
@@ -701,18 +662,11 @@ func filterSyncData(codeHostURL string, allSyncData []campaigns.ChangesetSyncDat
 	return syncData
 }
 
-type scheduledSync struct {
-	changesetID int64
-	nextSync    time.Time
-	priority    priority
-}
+type scheduledSync struct { /* all structs must go */ }
 
 // changesetPriorityQueue is a min heap that sorts syncs by priority
 // and time of next sync. It is not safe for concurrent use.
-type changesetPriorityQueue struct {
-	items []scheduledSync
-	index map[int64]int // changesetID -> index
-}
+type changesetPriorityQueue struct { /* all structs must go */ }
 
 // newChangesetPriorityQueue creates a new queue for holding changeset sync instructions in chronological order.
 // items with a high priority will always appear at the front of the queue.
@@ -824,7 +778,4 @@ const (
 
 // A SourceChangesets groups *repos.Changesets together with the
 // repos.ChangesetSource that can be used to modify the changesets.
-type SourceChangesets struct {
-	repos.ChangesetSource
-	Changesets []*repos.Changeset
-}
+type SourceChangesets struct { /* all structs must go */ }
diff --git a/enterprise/internal/campaigns/syncer_test.go b/enterprise/internal/campaigns/syncer_test.go
index 0b9b202..1a2533b 100644
--- a/enterprise/internal/campaigns/syncer_test.go
+++ b/enterprise/internal/campaigns/syncer_test.go
@@ -17,11 +17,7 @@ import (
 
 func TestNextSync(t *testing.T) {
 	clock := func() time.Time { return time.Date(2020, 01, 01, 01, 01, 01, 01, time.UTC) }
-	tests := []struct {
-		name string
-		h    campaigns.ChangesetSyncData
-		want time.Time
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "No time passed",
 			h: campaigns.ChangesetSyncData{
@@ -177,11 +173,7 @@ func TestChangesetPriorityQueue(t *testing.T) {
 }
 
 func TestPrioritizeChangesetsWithoutDiffStats(t *testing.T) {
-	for name, tc := range map[string]struct {
-		listChangesets func(context.Context, ListChangesetsOpts) (campaigns.Changesets, int64, error)
-		wantError      bool
-		wantIDs        []int64
-	}{
+	for name, tc := range map[string]struct { /* all structs must go */ }{
 		"ListChangesets error": {
 			listChangesets: func(ctx context.Context, opts ListChangesetsOpts) (campaigns.Changesets, int64, error) {
 				return nil, 0, errors.New("hello!")
@@ -346,12 +338,7 @@ func TestSyncerRun(t *testing.T) {
 }
 
 func TestFilterSyncData(t *testing.T) {
-	testCases := []struct {
-		name        string
-		codeHostURL string
-		data        []campaigns.ChangesetSyncData
-		want        []campaigns.ChangesetSyncData
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{
 			name:        "Empty",
 			codeHostURL: "https://example.com/",
@@ -502,14 +489,7 @@ func TestSyncRegistry(t *testing.T) {
 	}
 }
 
-type MockSyncStore struct {
-	listChangesetSyncData func(context.Context, ListChangesetSyncDataOpts) ([]campaigns.ChangesetSyncData, error)
-	getChangeset          func(context.Context, GetChangesetOpts) (*campaigns.Changeset, error)
-	listChangesets        func(context.Context, ListChangesetsOpts) (campaigns.Changesets, int64, error)
-	updateChangesets      func(context.Context, ...*campaigns.Changeset) error
-	upsertChangesetEvents func(context.Context, ...*campaigns.ChangesetEvent) error
-	transact              func(context.Context) (*Store, error)
-}
+type MockSyncStore struct { /* all structs must go */ }
 
 func (m MockSyncStore) ListChangesetSyncData(ctx context.Context, opts ListChangesetSyncDataOpts) ([]campaigns.ChangesetSyncData, error) {
 	return m.listChangesetSyncData(ctx, opts)
@@ -535,10 +515,7 @@ func (m MockSyncStore) Transact(ctx context.Context) (*Store, error) {
 	return m.transact(ctx)
 }
 
-type MockRepoStore struct {
-	listExternalServices func(context.Context, repos.StoreListExternalServicesArgs) ([]*repos.ExternalService, error)
-	listRepos            func(context.Context, repos.StoreListReposArgs) ([]*repos.Repo, error)
-}
+type MockRepoStore struct { /* all structs must go */ }
 
 func (m MockRepoStore) UpsertExternalServices(ctx context.Context, svcs ...*repos.ExternalService) error {
 	panic("implement me")
diff --git a/enterprise/internal/campaigns/testing/changeset_source.go b/enterprise/internal/campaigns/testing/changeset_source.go
index 559c116..88d4976 100644
--- a/enterprise/internal/campaigns/testing/changeset_source.go
+++ b/enterprise/internal/campaigns/testing/changeset_source.go
@@ -11,31 +11,7 @@ import (
 
 // FakeChangesetSource is a fake implementation of the repos.ChangesetSource
 // interface to be used in tests.
-type FakeChangesetSource struct {
-	Svc *repos.ExternalService
-
-	// The Changeset.HeadRef to be expected in CreateChangeset/UpdateChangeset calls.
-	WantHeadRef string
-	// The Changeset.BaseRef to be expected in CreateChangeset/UpdateChangeset calls.
-	WantBaseRef string
-
-	// The metadata the FakeChangesetSource should set on the created/updated
-	// Changeset with changeset.SetMetadata.
-	FakeMetadata interface{}
-
-	// Whether or not the changeset already ChangesetExists on the code host at the time
-	// when CreateChangeset is called.
-	ChangesetExists bool
-
-	// error to be returned from every method
-	Err error
-
-	// ClosedChangesets contains the changesets that were passed to CloseChangeset
-	ClosedChangesets []*repos.Changeset
-
-	// LoadedChangesets contains the changesets that were passed to LoadChangesets
-	LoadedChangesets []*repos.Changeset
-}
+type FakeChangesetSource struct { /* all structs must go */ }
 
 func (s *FakeChangesetSource) CreateChangeset(ctx context.Context, c *repos.Changeset) (bool, error) {
 	if s.Err != nil {
@@ -95,10 +71,7 @@ func (s *FakeChangesetSource) CloseChangeset(ctx context.Context, c *repos.Chang
 
 // FakeGitserverClient is a test implementation of the GitserverClient
 // interface required by ExecChangesetJob.
-type FakeGitserverClient struct {
-	Response    string
-	ResponseErr error
-}
+type FakeGitserverClient struct { /* all structs must go */ }
 
 func (f *FakeGitserverClient) CreateCommitFromPatch(ctx context.Context, req protocol.CreateCommitFromPatchRequest) (string, error) {
 	return f.Response, f.ResponseErr
diff --git a/enterprise/internal/campaigns/testing/mock_sync_state.go b/enterprise/internal/campaigns/testing/mock_sync_state.go
index 99d36bb..c9eaafb 100644
--- a/enterprise/internal/campaigns/testing/mock_sync_state.go
+++ b/enterprise/internal/campaigns/testing/mock_sync_state.go
@@ -12,11 +12,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/vcs/git"
 )
 
-type MockedChangesetSyncState struct {
-	execReader      func([]string) (io.ReadCloser, error)
-	mockRepoLookup  func(protocol.RepoLookupArgs) (*protocol.RepoLookupResult, error)
-	resolveRevision func(string, git.ResolveRevisionOptions) (api.CommitID, error)
-}
+type MockedChangesetSyncState struct { /* all structs must go */ }
 
 // MockChangesetSyncState sets up mocks such that invoking SetDerivedState() with
 // a Changeset will use the same diff (+1, ~1, -3) when setting the SyncState
diff --git a/enterprise/internal/campaigns/webhooks.go b/enterprise/internal/campaigns/webhooks.go
index 2c3d142..7818ceb 100644
--- a/enterprise/internal/campaigns/webhooks.go
+++ b/enterprise/internal/campaigns/webhooks.go
@@ -24,20 +24,9 @@ import (
 	"github.com/sourcegraph/sourcegraph/schema"
 )
 
-type Webhook struct {
-	Store *Store
-	Repos repos.Store
-	Now   func() time.Time
-
-	// ServiceType corresponds to api.ExternalRepoSpec.ServiceType
-	// Example values: extsvc.TypeBitbucketServer, extsvc.TypeGitHub
-	ServiceType string
-}
+type Webhook struct { /* all structs must go */ }
 
-type PR struct {
-	ID             int64
-	RepoExternalID string
-}
+type PR struct { /* all structs must go */ }
 
 func (h Webhook) getRepoForPR(
 	ctx context.Context,
@@ -178,18 +167,9 @@ func (h Webhook) upsertChangesetEvent(
 // GitHubWebhook receives GitHub organization webhook events that are
 // relevant to campaigns, normalizes those events into ChangesetEvents
 // and upserts them to the database.
-type GitHubWebhook struct {
-	*Webhook
-}
+type GitHubWebhook struct { /* all structs must go */ }
 
-type BitbucketServerWebhook struct {
-	*Webhook
-	Name string
-
-	// cache of config we've seen so that we can decide what changes
-	// need to be synced if any
-	configCache map[int64]*schema.BitbucketServerConnection
-}
+type BitbucketServerWebhook struct { /* all structs must go */ }
 
 func NewGitHubWebhook(store *Store, repos repos.Store, now func() time.Time) *GitHubWebhook {
 	return &GitHubWebhook{&Webhook{store, repos, now, extsvc.TypeGitHub}}
@@ -903,10 +883,7 @@ func (h *BitbucketServerWebhook) convertEvent(theirs interface{}) (prs []PR, our
 	return
 }
 
-type httpError struct {
-	code int
-	err  error
-}
+type httpError struct { /* all structs must go */ }
 
 func (e httpError) Error() string {
 	if e.err != nil {
diff --git a/enterprise/internal/campaigns/webhooks_test.go b/enterprise/internal/campaigns/webhooks_test.go
index faf02ad..2f16140 100644
--- a/enterprise/internal/campaigns/webhooks_test.go
+++ b/enterprise/internal/campaigns/webhooks_test.go
@@ -385,13 +385,7 @@ func getSingleRepo(ctx context.Context, bitbucketSource *repos.BitbucketServerSo
 	return bitbucketRepo, nil
 }
 
-type webhookTestCase struct {
-	Payloads []struct {
-		PayloadType string          `json:"payload_type"`
-		Data        json.RawMessage `json:"data"`
-	} `json:"payloads"`
-	ChangesetEvents []*campaigns.ChangesetEvent `json:"changeset_events"`
-}
+type webhookTestCase struct { /* all structs must go */ }
 
 func loadWebhookTestCase(t testing.TB, path string) webhookTestCase {
 	t.Helper()
diff --git a/enterprise/internal/codeintel/api/api.go b/enterprise/internal/codeintel/api/api.go
index c1c9b88..6504203 100644
--- a/enterprise/internal/codeintel/api/api.go
+++ b/enterprise/internal/codeintel/api/api.go
@@ -36,11 +36,7 @@ type CodeIntelAPI interface {
 	Diagnostics(ctx context.Context, prefix string, uploadID, limit, offset int) ([]ResolvedDiagnostic, int, error)
 }
 
-type codeIntelAPI struct {
-	store               store.Store
-	bundleManagerClient bundles.BundleManagerClient
-	gitserverClient     gitserver.Client
-}
+type codeIntelAPI struct { /* all structs must go */ }
 
 var _ CodeIntelAPI = &codeIntelAPI{}
 
diff --git a/enterprise/internal/codeintel/api/cursor.go b/enterprise/internal/codeintel/api/cursor.go
index 0b0c01f..ae8b632 100644
--- a/enterprise/internal/codeintel/api/cursor.go
+++ b/enterprise/internal/codeintel/api/cursor.go
@@ -12,24 +12,7 @@ import (
 )
 
 // Cursor holds the complete state necessary to page through a reference result set.
-type Cursor struct {
-	Phase                  string                // common
-	DumpID                 int                   // common
-	Path                   string                // same-dump/same-dump-monikers/definition-monikers
-	Line                   int                   // same-dump/same-dump-monikers
-	Character              int                   // same-dump/same-dump-monikers
-	Monikers               []bundles.MonikerData // same-dump/same-dump-monikers/definition-monikers
-	SkipResults            int                   // same-dump/same-dump-monikers/definition-monikers
-	Identifier             string                // same-repo/remote-repo
-	Scheme                 string                // same-repo/remote-repo
-	Name                   string                // same-repo/remote-repo
-	Version                string                // same-repo/remote-repo
-	DumpIDs                []int                 // same-repo/remote-repo
-	TotalDumpsWhenBatching int                   // same-repo/remote-repo
-	SkipDumpsWhenBatching  int                   // same-repo/remote-repo
-	SkipDumpsInBatch       int                   // same-repo/remote-repo
-	SkipResultsInDump      int                   // same-repo/remote-repo
-}
+type Cursor struct { /* all structs must go */ }
 
 // EncodeCursor returns an encoding of the given cursor suitable for a URL.
 func EncodeCursor(cursor Cursor) string {
diff --git a/enterprise/internal/codeintel/api/diagnostics.go b/enterprise/internal/codeintel/api/diagnostics.go
index 929a261..086f9e7 100644
--- a/enterprise/internal/codeintel/api/diagnostics.go
+++ b/enterprise/internal/codeintel/api/diagnostics.go
@@ -10,10 +10,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/store"
 )
 
-type ResolvedDiagnostic struct {
-	Dump       store.Dump
-	Diagnostic bundles.Diagnostic
-}
+type ResolvedDiagnostic struct { /* all structs must go */ }
 
 // Diagnostics returns the diagnostics for documents with the given path prefix.
 func (api *codeIntelAPI) Diagnostics(ctx context.Context, prefix string, uploadID, limit, offset int) ([]ResolvedDiagnostic, int, error) {
diff --git a/enterprise/internal/codeintel/api/locations.go b/enterprise/internal/codeintel/api/locations.go
index b4a4ab9..194cce9 100644
--- a/enterprise/internal/codeintel/api/locations.go
+++ b/enterprise/internal/codeintel/api/locations.go
@@ -5,11 +5,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/store"
 )
 
-type ResolvedLocation struct {
-	Dump  store.Dump
-	Path  string
-	Range bundles.Range
-}
+type ResolvedLocation struct { /* all structs must go */ }
 
 func sliceLocations(locations []bundles.Location, lo, hi int) []bundles.Location {
 	if lo >= len(locations) {
diff --git a/enterprise/internal/codeintel/api/mocks/mock_api.go b/enterprise/internal/codeintel/api/mocks/mock_api.go
index c917851..644ad15 100644
--- a/enterprise/internal/codeintel/api/mocks/mock_api.go
+++ b/enterprise/internal/codeintel/api/mocks/mock_api.go
@@ -14,26 +14,7 @@ import (
 // (from the package
 // github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/api)
 // used for unit testing.
-type MockCodeIntelAPI struct {
-	// DefinitionsFunc is an instance of a mock function object controlling
-	// the behavior of the method Definitions.
-	DefinitionsFunc *CodeIntelAPIDefinitionsFunc
-	// DiagnosticsFunc is an instance of a mock function object controlling
-	// the behavior of the method Diagnostics.
-	DiagnosticsFunc *CodeIntelAPIDiagnosticsFunc
-	// FindClosestDumpsFunc is an instance of a mock function object
-	// controlling the behavior of the method FindClosestDumps.
-	FindClosestDumpsFunc *CodeIntelAPIFindClosestDumpsFunc
-	// HoverFunc is an instance of a mock function object controlling the
-	// behavior of the method Hover.
-	HoverFunc *CodeIntelAPIHoverFunc
-	// RangesFunc is an instance of a mock function object controlling the
-	// behavior of the method Ranges.
-	RangesFunc *CodeIntelAPIRangesFunc
-	// ReferencesFunc is an instance of a mock function object controlling
-	// the behavior of the method References.
-	ReferencesFunc *CodeIntelAPIReferencesFunc
-}
+type MockCodeIntelAPI struct { /* all structs must go */ }
 
 // NewMockCodeIntelAPI creates a new mock of the CodeIntelAPI interface. All
 // methods return zero values for all results, unless overwritten.
@@ -100,12 +81,7 @@ func NewMockCodeIntelAPIFrom(i api.CodeIntelAPI) *MockCodeIntelAPI {
 
 // CodeIntelAPIDefinitionsFunc describes the behavior when the Definitions
 // method of the parent MockCodeIntelAPI instance is invoked.
-type CodeIntelAPIDefinitionsFunc struct {
-	defaultHook func(context.Context, string, int, int, int) ([]api.ResolvedLocation, error)
-	hooks       []func(context.Context, string, int, int, int) ([]api.ResolvedLocation, error)
-	history     []CodeIntelAPIDefinitionsFuncCall
-	mutex       sync.Mutex
-}
+type CodeIntelAPIDefinitionsFunc struct { /* all structs must go */ }
 
 // Definitions delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -180,29 +156,7 @@ func (f *CodeIntelAPIDefinitionsFunc) History() []CodeIntelAPIDefinitionsFuncCal
 
 // CodeIntelAPIDefinitionsFuncCall is an object that describes an invocation
 // of method Definitions on an instance of MockCodeIntelAPI.
-type CodeIntelAPIDefinitionsFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 int
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 int
-	// Arg4 is the value of the 5th argument passed to this method
-	// invocation.
-	Arg4 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []api.ResolvedLocation
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type CodeIntelAPIDefinitionsFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -218,12 +172,7 @@ func (c CodeIntelAPIDefinitionsFuncCall) Results() []interface{} {
 
 // CodeIntelAPIDiagnosticsFunc describes the behavior when the Diagnostics
 // method of the parent MockCodeIntelAPI instance is invoked.
-type CodeIntelAPIDiagnosticsFunc struct {
-	defaultHook func(context.Context, string, int, int, int) ([]api.ResolvedDiagnostic, int, error)
-	hooks       []func(context.Context, string, int, int, int) ([]api.ResolvedDiagnostic, int, error)
-	history     []CodeIntelAPIDiagnosticsFuncCall
-	mutex       sync.Mutex
-}
+type CodeIntelAPIDiagnosticsFunc struct { /* all structs must go */ }
 
 // Diagnostics delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -298,32 +247,7 @@ func (f *CodeIntelAPIDiagnosticsFunc) History() []CodeIntelAPIDiagnosticsFuncCal
 
 // CodeIntelAPIDiagnosticsFuncCall is an object that describes an invocation
 // of method Diagnostics on an instance of MockCodeIntelAPI.
-type CodeIntelAPIDiagnosticsFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 int
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 int
-	// Arg4 is the value of the 5th argument passed to this method
-	// invocation.
-	Arg4 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []api.ResolvedDiagnostic
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 int
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type CodeIntelAPIDiagnosticsFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -340,12 +264,7 @@ func (c CodeIntelAPIDiagnosticsFuncCall) Results() []interface{} {
 // CodeIntelAPIFindClosestDumpsFunc describes the behavior when the
 // FindClosestDumps method of the parent MockCodeIntelAPI instance is
 // invoked.
-type CodeIntelAPIFindClosestDumpsFunc struct {
-	defaultHook func(context.Context, int, string, string, bool, string) ([]store.Dump, error)
-	hooks       []func(context.Context, int, string, string, bool, string) ([]store.Dump, error)
-	history     []CodeIntelAPIFindClosestDumpsFuncCall
-	mutex       sync.Mutex
-}
+type CodeIntelAPIFindClosestDumpsFunc struct { /* all structs must go */ }
 
 // FindClosestDumps delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -420,32 +339,7 @@ func (f *CodeIntelAPIFindClosestDumpsFunc) History() []CodeIntelAPIFindClosestDu
 
 // CodeIntelAPIFindClosestDumpsFuncCall is an object that describes an
 // invocation of method FindClosestDumps on an instance of MockCodeIntelAPI.
-type CodeIntelAPIFindClosestDumpsFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 string
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 string
-	// Arg4 is the value of the 5th argument passed to this method
-	// invocation.
-	Arg4 bool
-	// Arg5 is the value of the 6th argument passed to this method
-	// invocation.
-	Arg5 string
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []store.Dump
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type CodeIntelAPIFindClosestDumpsFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -461,12 +355,7 @@ func (c CodeIntelAPIFindClosestDumpsFuncCall) Results() []interface{} {
 
 // CodeIntelAPIHoverFunc describes the behavior when the Hover method of the
 // parent MockCodeIntelAPI instance is invoked.
-type CodeIntelAPIHoverFunc struct {
-	defaultHook func(context.Context, string, int, int, int) (string, client.Range, bool, error)
-	hooks       []func(context.Context, string, int, int, int) (string, client.Range, bool, error)
-	history     []CodeIntelAPIHoverFuncCall
-	mutex       sync.Mutex
-}
+type CodeIntelAPIHoverFunc struct { /* all structs must go */ }
 
 // Hover delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -540,35 +429,7 @@ func (f *CodeIntelAPIHoverFunc) History() []CodeIntelAPIHoverFuncCall {
 
 // CodeIntelAPIHoverFuncCall is an object that describes an invocation of
 // method Hover on an instance of MockCodeIntelAPI.
-type CodeIntelAPIHoverFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 int
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 int
-	// Arg4 is the value of the 5th argument passed to this method
-	// invocation.
-	Arg4 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 string
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 client.Range
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 bool
-	// Result3 is the value of the 4th result returned from this method
-	// invocation.
-	Result3 error
-}
+type CodeIntelAPIHoverFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -584,12 +445,7 @@ func (c CodeIntelAPIHoverFuncCall) Results() []interface{} {
 
 // CodeIntelAPIRangesFunc describes the behavior when the Ranges method of
 // the parent MockCodeIntelAPI instance is invoked.
-type CodeIntelAPIRangesFunc struct {
-	defaultHook func(context.Context, string, int, int, int) ([]api.ResolvedCodeIntelligenceRange, error)
-	hooks       []func(context.Context, string, int, int, int) ([]api.ResolvedCodeIntelligenceRange, error)
-	history     []CodeIntelAPIRangesFuncCall
-	mutex       sync.Mutex
-}
+type CodeIntelAPIRangesFunc struct { /* all structs must go */ }
 
 // Ranges delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -663,29 +519,7 @@ func (f *CodeIntelAPIRangesFunc) History() []CodeIntelAPIRangesFuncCall {
 
 // CodeIntelAPIRangesFuncCall is an object that describes an invocation of
 // method Ranges on an instance of MockCodeIntelAPI.
-type CodeIntelAPIRangesFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 int
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 int
-	// Arg4 is the value of the 5th argument passed to this method
-	// invocation.
-	Arg4 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []api.ResolvedCodeIntelligenceRange
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type CodeIntelAPIRangesFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -701,12 +535,7 @@ func (c CodeIntelAPIRangesFuncCall) Results() []interface{} {
 
 // CodeIntelAPIReferencesFunc describes the behavior when the References
 // method of the parent MockCodeIntelAPI instance is invoked.
-type CodeIntelAPIReferencesFunc struct {
-	defaultHook func(context.Context, int, string, int, api.Cursor) ([]api.ResolvedLocation, api.Cursor, bool, error)
-	hooks       []func(context.Context, int, string, int, api.Cursor) ([]api.ResolvedLocation, api.Cursor, bool, error)
-	history     []CodeIntelAPIReferencesFuncCall
-	mutex       sync.Mutex
-}
+type CodeIntelAPIReferencesFunc struct { /* all structs must go */ }
 
 // References delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -781,35 +610,7 @@ func (f *CodeIntelAPIReferencesFunc) History() []CodeIntelAPIReferencesFuncCall
 
 // CodeIntelAPIReferencesFuncCall is an object that describes an invocation
 // of method References on an instance of MockCodeIntelAPI.
-type CodeIntelAPIReferencesFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 string
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 int
-	// Arg4 is the value of the 5th argument passed to this method
-	// invocation.
-	Arg4 api.Cursor
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []api.ResolvedLocation
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 api.Cursor
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 bool
-	// Result3 is the value of the 4th result returned from this method
-	// invocation.
-	Result3 error
-}
+type CodeIntelAPIReferencesFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
diff --git a/enterprise/internal/codeintel/api/observability.go b/enterprise/internal/codeintel/api/observability.go
index e40e34a..0d9597f 100644
--- a/enterprise/internal/codeintel/api/observability.go
+++ b/enterprise/internal/codeintel/api/observability.go
@@ -10,15 +10,7 @@ import (
 )
 
 // An ObservedCodeIntelAPI wraps another CodeIntelAPI with error logging, Prometheus metrics, and tracing.
-type ObservedCodeIntelAPI struct {
-	codeIntelAPI              CodeIntelAPI
-	findClosestDumpsOperation *observation.Operation
-	rangesOperation           *observation.Operation
-	definitionsOperation      *observation.Operation
-	referencesOperation       *observation.Operation
-	hoverOperation            *observation.Operation
-	diagnosticsOperation      *observation.Operation
-}
+type ObservedCodeIntelAPI struct { /* all structs must go */ }
 
 var _ CodeIntelAPI = &ObservedCodeIntelAPI{}
 
diff --git a/enterprise/internal/codeintel/api/ranges.go b/enterprise/internal/codeintel/api/ranges.go
index 9b3a5f4..b367014 100644
--- a/enterprise/internal/codeintel/api/ranges.go
+++ b/enterprise/internal/codeintel/api/ranges.go
@@ -9,12 +9,7 @@ import (
 	bundles "github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/bundles/client"
 )
 
-type ResolvedCodeIntelligenceRange struct {
-	Range       bundles.Range
-	Definitions []ResolvedLocation
-	References  []ResolvedLocation
-	HoverText   string
-}
+type ResolvedCodeIntelligenceRange struct { /* all structs must go */ }
 
 // Ranges returns definition, reference, and hover data for each range within the given span of lines.
 func (api *codeIntelAPI) Ranges(ctx context.Context, file string, startLine, endLine, uploadID int) ([]ResolvedCodeIntelligenceRange, error) {
diff --git a/enterprise/internal/codeintel/api/references.go b/enterprise/internal/codeintel/api/references.go
index c925d06..b2f191f 100644
--- a/enterprise/internal/codeintel/api/references.go
+++ b/enterprise/internal/codeintel/api/references.go
@@ -38,14 +38,7 @@ func (api *codeIntelAPI) References(ctx context.Context, repositoryID int, commi
 	return rpr.resolvePage(ctx, cursor)
 }
 
-type ReferencePageResolver struct {
-	store               store.Store
-	bundleManagerClient bundles.BundleManagerClient
-	repositoryID        int
-	commit              string
-	remoteDumpLimit     int
-	limit               int
-}
+type ReferencePageResolver struct { /* all structs must go */ }
 
 func (s *ReferencePageResolver) resolvePage(ctx context.Context, cursor Cursor) ([]ResolvedLocation, Cursor, bool, error) {
 	var allLocations []ResolvedLocation
diff --git a/enterprise/internal/codeintel/api/references_test.go b/enterprise/internal/codeintel/api/references_test.go
index d7006b8..1530186 100644
--- a/enterprise/internal/codeintel/api/references_test.go
+++ b/enterprise/internal/codeintel/api/references_test.go
@@ -776,11 +776,7 @@ func TestApplyBloomFilter(t *testing.T) {
 		{DumpID: 12, Filter: readTestFilter(t, "normal", "12")}, // bar
 	}
 
-	testCases := []struct {
-		limit           int
-		expectedScanned int
-		expectedDumpIDs []int
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{1, 1, []int{1}},
 		{2, 3, []int{1, 3}},
 		{6, 9, []int{1, 3, 4, 6, 7, 9}},
diff --git a/enterprise/internal/codeintel/bloomfilter/bloom_filter.go b/enterprise/internal/codeintel/bloomfilter/bloom_filter.go
index f13f122..e4a34fe 100644
--- a/enterprise/internal/codeintel/bloomfilter/bloom_filter.go
+++ b/enterprise/internal/codeintel/bloomfilter/bloom_filter.go
@@ -24,10 +24,7 @@ const BloomFilterNumHashFunctions = 16
 // This includes the bitstring encoded as arrays of 32-bit integers as well as the number of hash
 // functions each identifier is identified with. This is necessary to encode as increasing its value
 // after its created will make all inserted identifiers un-findable.
-type encodedFilterPayload struct {
-	Buckets          []int32 `json:"buckets"`
-	NumHashFunctions int32   `json:"numHashFunctions"`
-}
+type encodedFilterPayload struct { /* all structs must go */ }
 
 // CreateFilter allocates a new bloom filter and inserts all of the given identifiers. The returned
 // value is an encoded and compressed payload that can be passed to DecodeAndTestFilter.
diff --git a/enterprise/internal/codeintel/bloomfilter/bloom_filter_test.go b/enterprise/internal/codeintel/bloomfilter/bloom_filter_test.go
index 2e1316c..a091387 100644
--- a/enterprise/internal/codeintel/bloomfilter/bloom_filter_test.go
+++ b/enterprise/internal/codeintel/bloomfilter/bloom_filter_test.go
@@ -6,10 +6,7 @@ import (
 )
 
 func TestCreateFilter(t *testing.T) {
-	testCases := []struct {
-		includeFile  string
-		excludeFiles []string
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{includeFile: "lorem-ipsum", excludeFiles: []string{"corporate-ipsum", "emojis"}},
 		{includeFile: "corporate-ipsum", excludeFiles: []string{"lorem-ipsum", "emojis"}},
 		{includeFile: "emojis", excludeFiles: []string{"lorem-ipsum", "corporate-ipsum"}},
@@ -47,11 +44,7 @@ func TestCreateFilter(t *testing.T) {
 }
 
 func TestTestTypeScriptGeneratedBloomFilters(t *testing.T) {
-	testCases := []struct {
-		filterFile  string
-		includeFile string
-		excludeFile string
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{filterFile: "64kb-16", includeFile: "lorem-ipsum", excludeFile: "corporate-ipsum"},
 		{filterFile: "64kb-08", includeFile: "lorem-ipsum", excludeFile: "corporate-ipsum"},
 		{filterFile: "64kb-24", includeFile: "lorem-ipsum", excludeFile: "corporate-ipsum"},
diff --git a/enterprise/internal/codeintel/bundles/client/bundle_client.go b/enterprise/internal/codeintel/bundles/client/bundle_client.go
index 6c3805e..2f7db66 100644
--- a/enterprise/internal/codeintel/bundles/client/bundle_client.go
+++ b/enterprise/internal/codeintel/bundles/client/bundle_client.go
@@ -40,10 +40,7 @@ type BundleClient interface {
 	PackageInformation(ctx context.Context, path, packageInformationID string) (PackageInformationData, error)
 }
 
-type bundleClientImpl struct {
-	base     baseClient
-	bundleID int
-}
+type bundleClientImpl struct { /* all structs must go */ }
 
 var _ BundleClient = &bundleClientImpl{}
 
@@ -113,10 +110,7 @@ func (c *bundleClientImpl) Hover(ctx context.Context, path string, line, charact
 		return "", Range{}, false, nil
 	}
 
-	payload := struct {
-		Text  string `json:"text"`
-		Range Range  `json:"range"`
-	}{}
+	payload := struct { /* all structs must go */ }{}
 
 	if err := json.Unmarshal(*target, &payload); err != nil {
 		return "", Range{}, false, err
@@ -137,10 +131,7 @@ func (c *bundleClientImpl) Diagnostics(ctx context.Context, prefix string, skip,
 		args["take"] = take
 	}
 
-	target := struct {
-		Diagnostics []Diagnostic `json:"diagnostics"`
-		Count       int          `json:"count"`
-	}{}
+	target := struct { /* all structs must go */ }{}
 
 	err = c.request(ctx, "diagnostics", args, &target)
 	diagnostics = target.Diagnostics
@@ -177,10 +168,7 @@ func (c *bundleClientImpl) MonikerResults(ctx context.Context, modelType, scheme
 		args["take"] = take
 	}
 
-	target := struct {
-		Locations []Location `json:"locations"`
-		Count     int        `json:"count"`
-	}{}
+	target := struct { /* all structs must go */ }{}
 
 	err = c.request(ctx, "monikerResults", args, &target)
 	locations = target.Locations
diff --git a/enterprise/internal/codeintel/bundles/client/bundle_manager_client.go b/enterprise/internal/codeintel/bundles/client/bundle_manager_client.go
index 7682b4e..cff2810 100644
--- a/enterprise/internal/codeintel/bundles/client/bundle_manager_client.go
+++ b/enterprise/internal/codeintel/bundles/client/bundle_manager_client.go
@@ -94,15 +94,7 @@ var defaultTransport = &ot.Transport{
 	}),
 }
 
-type bundleManagerClientImpl struct {
-	httpClient          *http.Client
-	httpLimiter         *parallel.Run
-	bundleManagerURL    string
-	userAgent           string
-	maxPayloadSizeBytes int
-	clock               glock.Clock
-	ioCopy              func(io.Writer, io.Reader) (int64, error)
-}
+type bundleManagerClientImpl struct { /* all structs must go */ }
 
 var _ BundleManagerClient = &bundleManagerClientImpl{}
 var _ baseClient = &bundleManagerClientImpl{}
@@ -387,9 +379,7 @@ func (c *bundleManagerClientImpl) doAndDecode(ctx context.Context, method string
 // doAndDecodeSize performs an HTTP request to the bundle manager and decodes the body into target. This assumes that
 // the shape of the response body is `{"size": ...}`.
 func (c *bundleManagerClientImpl) doAndDecodeSize(ctx context.Context, method string, url *url.URL, body io.Reader) (size int, err error) {
-	payload := struct {
-		Size *int `json:"size"`
-	}{
+	payload := struct { /* all structs must go */ }{
 		Size: &size,
 	}
 	err = c.doAndDecode(ctx, "POST", url, body, &payload)
diff --git a/enterprise/internal/codeintel/bundles/client/mocks/mock_bundle_client.go b/enterprise/internal/codeintel/bundles/client/mocks/mock_bundle_client.go
index 6c9ab15..fb1fec3 100644
--- a/enterprise/internal/codeintel/bundles/client/mocks/mock_bundle_client.go
+++ b/enterprise/internal/codeintel/bundles/client/mocks/mock_bundle_client.go
@@ -12,38 +12,7 @@ import (
 // (from the package
 // github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/bundles/client)
 // used for unit testing.
-type MockBundleClient struct {
-	// DefinitionsFunc is an instance of a mock function object controlling
-	// the behavior of the method Definitions.
-	DefinitionsFunc *BundleClientDefinitionsFunc
-	// DiagnosticsFunc is an instance of a mock function object controlling
-	// the behavior of the method Diagnostics.
-	DiagnosticsFunc *BundleClientDiagnosticsFunc
-	// ExistsFunc is an instance of a mock function object controlling the
-	// behavior of the method Exists.
-	ExistsFunc *BundleClientExistsFunc
-	// HoverFunc is an instance of a mock function object controlling the
-	// behavior of the method Hover.
-	HoverFunc *BundleClientHoverFunc
-	// IDFunc is an instance of a mock function object controlling the
-	// behavior of the method ID.
-	IDFunc *BundleClientIDFunc
-	// MonikerResultsFunc is an instance of a mock function object
-	// controlling the behavior of the method MonikerResults.
-	MonikerResultsFunc *BundleClientMonikerResultsFunc
-	// MonikersByPositionFunc is an instance of a mock function object
-	// controlling the behavior of the method MonikersByPosition.
-	MonikersByPositionFunc *BundleClientMonikersByPositionFunc
-	// PackageInformationFunc is an instance of a mock function object
-	// controlling the behavior of the method PackageInformation.
-	PackageInformationFunc *BundleClientPackageInformationFunc
-	// RangesFunc is an instance of a mock function object controlling the
-	// behavior of the method Ranges.
-	RangesFunc *BundleClientRangesFunc
-	// ReferencesFunc is an instance of a mock function object controlling
-	// the behavior of the method References.
-	ReferencesFunc *BundleClientReferencesFunc
-}
+type MockBundleClient struct { /* all structs must go */ }
 
 // NewMockBundleClient creates a new mock of the BundleClient interface. All
 // methods return zero values for all results, unless overwritten.
@@ -142,12 +111,7 @@ func NewMockBundleClientFrom(i client.BundleClient) *MockBundleClient {
 
 // BundleClientDefinitionsFunc describes the behavior when the Definitions
 // method of the parent MockBundleClient instance is invoked.
-type BundleClientDefinitionsFunc struct {
-	defaultHook func(context.Context, string, int, int) ([]client.Location, error)
-	hooks       []func(context.Context, string, int, int) ([]client.Location, error)
-	history     []BundleClientDefinitionsFuncCall
-	mutex       sync.Mutex
-}
+type BundleClientDefinitionsFunc struct { /* all structs must go */ }
 
 // Definitions delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -222,26 +186,7 @@ func (f *BundleClientDefinitionsFunc) History() []BundleClientDefinitionsFuncCal
 
 // BundleClientDefinitionsFuncCall is an object that describes an invocation
 // of method Definitions on an instance of MockBundleClient.
-type BundleClientDefinitionsFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 int
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []client.Location
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type BundleClientDefinitionsFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -257,12 +202,7 @@ func (c BundleClientDefinitionsFuncCall) Results() []interface{} {
 
 // BundleClientDiagnosticsFunc describes the behavior when the Diagnostics
 // method of the parent MockBundleClient instance is invoked.
-type BundleClientDiagnosticsFunc struct {
-	defaultHook func(context.Context, string, int, int) ([]client.Diagnostic, int, error)
-	hooks       []func(context.Context, string, int, int) ([]client.Diagnostic, int, error)
-	history     []BundleClientDiagnosticsFuncCall
-	mutex       sync.Mutex
-}
+type BundleClientDiagnosticsFunc struct { /* all structs must go */ }
 
 // Diagnostics delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -337,29 +277,7 @@ func (f *BundleClientDiagnosticsFunc) History() []BundleClientDiagnosticsFuncCal
 
 // BundleClientDiagnosticsFuncCall is an object that describes an invocation
 // of method Diagnostics on an instance of MockBundleClient.
-type BundleClientDiagnosticsFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 int
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []client.Diagnostic
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 int
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type BundleClientDiagnosticsFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -375,12 +293,7 @@ func (c BundleClientDiagnosticsFuncCall) Results() []interface{} {
 
 // BundleClientExistsFunc describes the behavior when the Exists method of
 // the parent MockBundleClient instance is invoked.
-type BundleClientExistsFunc struct {
-	defaultHook func(context.Context, string) (bool, error)
-	hooks       []func(context.Context, string) (bool, error)
-	history     []BundleClientExistsFuncCall
-	mutex       sync.Mutex
-}
+type BundleClientExistsFunc struct { /* all structs must go */ }
 
 // Exists delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -454,20 +367,7 @@ func (f *BundleClientExistsFunc) History() []BundleClientExistsFuncCall {
 
 // BundleClientExistsFuncCall is an object that describes an invocation of
 // method Exists on an instance of MockBundleClient.
-type BundleClientExistsFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 bool
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type BundleClientExistsFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -483,12 +383,7 @@ func (c BundleClientExistsFuncCall) Results() []interface{} {
 
 // BundleClientHoverFunc describes the behavior when the Hover method of the
 // parent MockBundleClient instance is invoked.
-type BundleClientHoverFunc struct {
-	defaultHook func(context.Context, string, int, int) (string, client.Range, bool, error)
-	hooks       []func(context.Context, string, int, int) (string, client.Range, bool, error)
-	history     []BundleClientHoverFuncCall
-	mutex       sync.Mutex
-}
+type BundleClientHoverFunc struct { /* all structs must go */ }
 
 // Hover delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -562,32 +457,7 @@ func (f *BundleClientHoverFunc) History() []BundleClientHoverFuncCall {
 
 // BundleClientHoverFuncCall is an object that describes an invocation of
 // method Hover on an instance of MockBundleClient.
-type BundleClientHoverFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 int
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 string
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 client.Range
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 bool
-	// Result3 is the value of the 4th result returned from this method
-	// invocation.
-	Result3 error
-}
+type BundleClientHoverFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -603,12 +473,7 @@ func (c BundleClientHoverFuncCall) Results() []interface{} {
 
 // BundleClientIDFunc describes the behavior when the ID method of the
 // parent MockBundleClient instance is invoked.
-type BundleClientIDFunc struct {
-	defaultHook func() int
-	hooks       []func() int
-	history     []BundleClientIDFuncCall
-	mutex       sync.Mutex
-}
+type BundleClientIDFunc struct { /* all structs must go */ }
 
 // ID delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -682,11 +547,7 @@ func (f *BundleClientIDFunc) History() []BundleClientIDFuncCall {
 
 // BundleClientIDFuncCall is an object that describes an invocation of
 // method ID on an instance of MockBundleClient.
-type BundleClientIDFuncCall struct {
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 int
-}
+type BundleClientIDFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -702,12 +563,7 @@ func (c BundleClientIDFuncCall) Results() []interface{} {
 
 // BundleClientMonikerResultsFunc describes the behavior when the
 // MonikerResults method of the parent MockBundleClient instance is invoked.
-type BundleClientMonikerResultsFunc struct {
-	defaultHook func(context.Context, string, string, string, int, int) ([]client.Location, int, error)
-	hooks       []func(context.Context, string, string, string, int, int) ([]client.Location, int, error)
-	history     []BundleClientMonikerResultsFuncCall
-	mutex       sync.Mutex
-}
+type BundleClientMonikerResultsFunc struct { /* all structs must go */ }
 
 // MonikerResults delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -782,35 +638,7 @@ func (f *BundleClientMonikerResultsFunc) History() []BundleClientMonikerResultsF
 
 // BundleClientMonikerResultsFuncCall is an object that describes an
 // invocation of method MonikerResults on an instance of MockBundleClient.
-type BundleClientMonikerResultsFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 string
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 string
-	// Arg4 is the value of the 5th argument passed to this method
-	// invocation.
-	Arg4 int
-	// Arg5 is the value of the 6th argument passed to this method
-	// invocation.
-	Arg5 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []client.Location
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 int
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type BundleClientMonikerResultsFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -827,12 +655,7 @@ func (c BundleClientMonikerResultsFuncCall) Results() []interface{} {
 // BundleClientMonikersByPositionFunc describes the behavior when the
 // MonikersByPosition method of the parent MockBundleClient instance is
 // invoked.
-type BundleClientMonikersByPositionFunc struct {
-	defaultHook func(context.Context, string, int, int) ([][]client.MonikerData, error)
-	hooks       []func(context.Context, string, int, int) ([][]client.MonikerData, error)
-	history     []BundleClientMonikersByPositionFuncCall
-	mutex       sync.Mutex
-}
+type BundleClientMonikersByPositionFunc struct { /* all structs must go */ }
 
 // MonikersByPosition delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -908,26 +731,7 @@ func (f *BundleClientMonikersByPositionFunc) History() []BundleClientMonikersByP
 // BundleClientMonikersByPositionFuncCall is an object that describes an
 // invocation of method MonikersByPosition on an instance of
 // MockBundleClient.
-type BundleClientMonikersByPositionFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 int
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 [][]client.MonikerData
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type BundleClientMonikersByPositionFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -944,12 +748,7 @@ func (c BundleClientMonikersByPositionFuncCall) Results() []interface{} {
 // BundleClientPackageInformationFunc describes the behavior when the
 // PackageInformation method of the parent MockBundleClient instance is
 // invoked.
-type BundleClientPackageInformationFunc struct {
-	defaultHook func(context.Context, string, string) (client.PackageInformationData, error)
-	hooks       []func(context.Context, string, string) (client.PackageInformationData, error)
-	history     []BundleClientPackageInformationFuncCall
-	mutex       sync.Mutex
-}
+type BundleClientPackageInformationFunc struct { /* all structs must go */ }
 
 // PackageInformation delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -1025,23 +824,7 @@ func (f *BundleClientPackageInformationFunc) History() []BundleClientPackageInfo
 // BundleClientPackageInformationFuncCall is an object that describes an
 // invocation of method PackageInformation on an instance of
 // MockBundleClient.
-type BundleClientPackageInformationFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 string
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 client.PackageInformationData
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type BundleClientPackageInformationFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -1057,12 +840,7 @@ func (c BundleClientPackageInformationFuncCall) Results() []interface{} {
 
 // BundleClientRangesFunc describes the behavior when the Ranges method of
 // the parent MockBundleClient instance is invoked.
-type BundleClientRangesFunc struct {
-	defaultHook func(context.Context, string, int, int) ([]client.CodeIntelligenceRange, error)
-	hooks       []func(context.Context, string, int, int) ([]client.CodeIntelligenceRange, error)
-	history     []BundleClientRangesFuncCall
-	mutex       sync.Mutex
-}
+type BundleClientRangesFunc struct { /* all structs must go */ }
 
 // Ranges delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -1136,26 +914,7 @@ func (f *BundleClientRangesFunc) History() []BundleClientRangesFuncCall {
 
 // BundleClientRangesFuncCall is an object that describes an invocation of
 // method Ranges on an instance of MockBundleClient.
-type BundleClientRangesFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 int
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []client.CodeIntelligenceRange
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type BundleClientRangesFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -1171,12 +930,7 @@ func (c BundleClientRangesFuncCall) Results() []interface{} {
 
 // BundleClientReferencesFunc describes the behavior when the References
 // method of the parent MockBundleClient instance is invoked.
-type BundleClientReferencesFunc struct {
-	defaultHook func(context.Context, string, int, int) ([]client.Location, error)
-	hooks       []func(context.Context, string, int, int) ([]client.Location, error)
-	history     []BundleClientReferencesFuncCall
-	mutex       sync.Mutex
-}
+type BundleClientReferencesFunc struct { /* all structs must go */ }
 
 // References delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -1251,26 +1005,7 @@ func (f *BundleClientReferencesFunc) History() []BundleClientReferencesFuncCall
 
 // BundleClientReferencesFuncCall is an object that describes an invocation
 // of method References on an instance of MockBundleClient.
-type BundleClientReferencesFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 int
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []client.Location
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type BundleClientReferencesFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
diff --git a/enterprise/internal/codeintel/bundles/client/mocks/mock_bundle_manager_client.go b/enterprise/internal/codeintel/bundles/client/mocks/mock_bundle_manager_client.go
index a0daab1..dcab4a4 100644
--- a/enterprise/internal/codeintel/bundles/client/mocks/mock_bundle_manager_client.go
+++ b/enterprise/internal/codeintel/bundles/client/mocks/mock_bundle_manager_client.go
@@ -13,32 +13,7 @@ import (
 // BundleManagerClient interface (from the package
 // github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/bundles/client)
 // used for unit testing.
-type MockBundleManagerClient struct {
-	// BundleClientFunc is an instance of a mock function object controlling
-	// the behavior of the method BundleClient.
-	BundleClientFunc *BundleManagerClientBundleClientFunc
-	// DeleteUploadFunc is an instance of a mock function object controlling
-	// the behavior of the method DeleteUpload.
-	DeleteUploadFunc *BundleManagerClientDeleteUploadFunc
-	// ExistsFunc is an instance of a mock function object controlling the
-	// behavior of the method Exists.
-	ExistsFunc *BundleManagerClientExistsFunc
-	// GetUploadFunc is an instance of a mock function object controlling
-	// the behavior of the method GetUpload.
-	GetUploadFunc *BundleManagerClientGetUploadFunc
-	// SendDBFunc is an instance of a mock function object controlling the
-	// behavior of the method SendDB.
-	SendDBFunc *BundleManagerClientSendDBFunc
-	// SendUploadFunc is an instance of a mock function object controlling
-	// the behavior of the method SendUpload.
-	SendUploadFunc *BundleManagerClientSendUploadFunc
-	// SendUploadPartFunc is an instance of a mock function object
-	// controlling the behavior of the method SendUploadPart.
-	SendUploadPartFunc *BundleManagerClientSendUploadPartFunc
-	// StitchPartsFunc is an instance of a mock function object controlling
-	// the behavior of the method StitchParts.
-	StitchPartsFunc *BundleManagerClientStitchPartsFunc
-}
+type MockBundleManagerClient struct { /* all structs must go */ }
 
 // NewMockBundleManagerClient creates a new mock of the BundleManagerClient
 // interface. All methods return zero values for all results, unless
@@ -123,12 +98,7 @@ func NewMockBundleManagerClientFrom(i client.BundleManagerClient) *MockBundleMan
 // BundleManagerClientBundleClientFunc describes the behavior when the
 // BundleClient method of the parent MockBundleManagerClient instance is
 // invoked.
-type BundleManagerClientBundleClientFunc struct {
-	defaultHook func(int) client.BundleClient
-	hooks       []func(int) client.BundleClient
-	history     []BundleManagerClientBundleClientFuncCall
-	mutex       sync.Mutex
-}
+type BundleManagerClientBundleClientFunc struct { /* all structs must go */ }
 
 // BundleClient delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -205,14 +175,7 @@ func (f *BundleManagerClientBundleClientFunc) History() []BundleManagerClientBun
 // BundleManagerClientBundleClientFuncCall is an object that describes an
 // invocation of method BundleClient on an instance of
 // MockBundleManagerClient.
-type BundleManagerClientBundleClientFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 client.BundleClient
-}
+type BundleManagerClientBundleClientFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -229,12 +192,7 @@ func (c BundleManagerClientBundleClientFuncCall) Results() []interface{} {
 // BundleManagerClientDeleteUploadFunc describes the behavior when the
 // DeleteUpload method of the parent MockBundleManagerClient instance is
 // invoked.
-type BundleManagerClientDeleteUploadFunc struct {
-	defaultHook func(context.Context, int) error
-	hooks       []func(context.Context, int) error
-	history     []BundleManagerClientDeleteUploadFuncCall
-	mutex       sync.Mutex
-}
+type BundleManagerClientDeleteUploadFunc struct { /* all structs must go */ }
 
 // DeleteUpload delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -311,17 +269,7 @@ func (f *BundleManagerClientDeleteUploadFunc) History() []BundleManagerClientDel
 // BundleManagerClientDeleteUploadFuncCall is an object that describes an
 // invocation of method DeleteUpload on an instance of
 // MockBundleManagerClient.
-type BundleManagerClientDeleteUploadFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type BundleManagerClientDeleteUploadFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -337,12 +285,7 @@ func (c BundleManagerClientDeleteUploadFuncCall) Results() []interface{} {
 
 // BundleManagerClientExistsFunc describes the behavior when the Exists
 // method of the parent MockBundleManagerClient instance is invoked.
-type BundleManagerClientExistsFunc struct {
-	defaultHook func(context.Context, []int) (map[int]bool, error)
-	hooks       []func(context.Context, []int) (map[int]bool, error)
-	history     []BundleManagerClientExistsFuncCall
-	mutex       sync.Mutex
-}
+type BundleManagerClientExistsFunc struct { /* all structs must go */ }
 
 // Exists delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -417,20 +360,7 @@ func (f *BundleManagerClientExistsFunc) History() []BundleManagerClientExistsFun
 
 // BundleManagerClientExistsFuncCall is an object that describes an
 // invocation of method Exists on an instance of MockBundleManagerClient.
-type BundleManagerClientExistsFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 []int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 map[int]bool
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type BundleManagerClientExistsFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -447,12 +377,7 @@ func (c BundleManagerClientExistsFuncCall) Results() []interface{} {
 // BundleManagerClientGetUploadFunc describes the behavior when the
 // GetUpload method of the parent MockBundleManagerClient instance is
 // invoked.
-type BundleManagerClientGetUploadFunc struct {
-	defaultHook func(context.Context, int) (io.ReadCloser, error)
-	hooks       []func(context.Context, int) (io.ReadCloser, error)
-	history     []BundleManagerClientGetUploadFuncCall
-	mutex       sync.Mutex
-}
+type BundleManagerClientGetUploadFunc struct { /* all structs must go */ }
 
 // GetUpload delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -527,20 +452,7 @@ func (f *BundleManagerClientGetUploadFunc) History() []BundleManagerClientGetUpl
 
 // BundleManagerClientGetUploadFuncCall is an object that describes an
 // invocation of method GetUpload on an instance of MockBundleManagerClient.
-type BundleManagerClientGetUploadFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 io.ReadCloser
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type BundleManagerClientGetUploadFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -556,12 +468,7 @@ func (c BundleManagerClientGetUploadFuncCall) Results() []interface{} {
 
 // BundleManagerClientSendDBFunc describes the behavior when the SendDB
 // method of the parent MockBundleManagerClient instance is invoked.
-type BundleManagerClientSendDBFunc struct {
-	defaultHook func(context.Context, int, string) error
-	hooks       []func(context.Context, int, string) error
-	history     []BundleManagerClientSendDBFuncCall
-	mutex       sync.Mutex
-}
+type BundleManagerClientSendDBFunc struct { /* all structs must go */ }
 
 // SendDB delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -636,20 +543,7 @@ func (f *BundleManagerClientSendDBFunc) History() []BundleManagerClientSendDBFun
 
 // BundleManagerClientSendDBFuncCall is an object that describes an
 // invocation of method SendDB on an instance of MockBundleManagerClient.
-type BundleManagerClientSendDBFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 string
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type BundleManagerClientSendDBFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -666,12 +560,7 @@ func (c BundleManagerClientSendDBFuncCall) Results() []interface{} {
 // BundleManagerClientSendUploadFunc describes the behavior when the
 // SendUpload method of the parent MockBundleManagerClient instance is
 // invoked.
-type BundleManagerClientSendUploadFunc struct {
-	defaultHook func(context.Context, int, io.Reader) (int, error)
-	hooks       []func(context.Context, int, io.Reader) (int, error)
-	history     []BundleManagerClientSendUploadFuncCall
-	mutex       sync.Mutex
-}
+type BundleManagerClientSendUploadFunc struct { /* all structs must go */ }
 
 // SendUpload delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -747,23 +636,7 @@ func (f *BundleManagerClientSendUploadFunc) History() []BundleManagerClientSendU
 // BundleManagerClientSendUploadFuncCall is an object that describes an
 // invocation of method SendUpload on an instance of
 // MockBundleManagerClient.
-type BundleManagerClientSendUploadFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 io.Reader
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 int
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type BundleManagerClientSendUploadFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -780,12 +653,7 @@ func (c BundleManagerClientSendUploadFuncCall) Results() []interface{} {
 // BundleManagerClientSendUploadPartFunc describes the behavior when the
 // SendUploadPart method of the parent MockBundleManagerClient instance is
 // invoked.
-type BundleManagerClientSendUploadPartFunc struct {
-	defaultHook func(context.Context, int, int, io.Reader) error
-	hooks       []func(context.Context, int, int, io.Reader) error
-	history     []BundleManagerClientSendUploadPartFuncCall
-	mutex       sync.Mutex
-}
+type BundleManagerClientSendUploadPartFunc struct { /* all structs must go */ }
 
 // SendUploadPart delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -862,23 +730,7 @@ func (f *BundleManagerClientSendUploadPartFunc) History() []BundleManagerClientS
 // BundleManagerClientSendUploadPartFuncCall is an object that describes an
 // invocation of method SendUploadPart on an instance of
 // MockBundleManagerClient.
-type BundleManagerClientSendUploadPartFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 int
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 io.Reader
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type BundleManagerClientSendUploadPartFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -895,12 +747,7 @@ func (c BundleManagerClientSendUploadPartFuncCall) Results() []interface{} {
 // BundleManagerClientStitchPartsFunc describes the behavior when the
 // StitchParts method of the parent MockBundleManagerClient instance is
 // invoked.
-type BundleManagerClientStitchPartsFunc struct {
-	defaultHook func(context.Context, int) (int, error)
-	hooks       []func(context.Context, int) (int, error)
-	history     []BundleManagerClientStitchPartsFuncCall
-	mutex       sync.Mutex
-}
+type BundleManagerClientStitchPartsFunc struct { /* all structs must go */ }
 
 // StitchParts delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -976,20 +823,7 @@ func (f *BundleManagerClientStitchPartsFunc) History() []BundleManagerClientStit
 // BundleManagerClientStitchPartsFuncCall is an object that describes an
 // invocation of method StitchParts on an instance of
 // MockBundleManagerClient.
-type BundleManagerClientStitchPartsFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 int
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type BundleManagerClientStitchPartsFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
diff --git a/enterprise/internal/codeintel/bundles/client/types.go b/enterprise/internal/codeintel/bundles/client/types.go
index 74d367d..3dbd090 100644
--- a/enterprise/internal/codeintel/bundles/client/types.go
+++ b/enterprise/internal/codeintel/bundles/client/types.go
@@ -1,57 +1,23 @@
 package client
 
 // Location is an LSP-like location scoped to a dump.
-type Location struct {
-	DumpID int
-	Path   string `json:"path"`
-	Range  Range  `json:"range"`
-}
+type Location struct { /* all structs must go */ }
 
 // Range is an inclusive bounds within a file.
-type Range struct {
-	Start Position `json:"start"`
-	End   Position `json:"end"`
-}
+type Range struct { /* all structs must go */ }
 
 // Position is a unique position within a file.
-type Position struct {
-	Line      int `json:"line"`
-	Character int `json:"character"`
-}
+type Position struct { /* all structs must go */ }
 
 // MonikerData describes a moniker within a dump.
-type MonikerData struct {
-	Kind                 string `json:"kind"`
-	Scheme               string `json:"scheme"`
-	Identifier           string `json:"identifier"`
-	PackageInformationID string `json:"packageInformationId"`
-}
+type MonikerData struct { /* all structs must go */ }
 
 // PackageInformationData describes a package within a package manager system.
-type PackageInformationData struct {
-	Name    string `json:"name"`
-	Version string `json:"version"`
-}
+type PackageInformationData struct { /* all structs must go */ }
 
 // Diagnostic describes diagnostic information attached to a location within a
 // particular dump.
-type Diagnostic struct {
-	DumpID         int
-	Path           string `json:"path"`
-	Severity       int    `json:"severity"`
-	Code           string `json:"code"`
-	Message        string `json:"message"`
-	Source         string `json:"source"`
-	StartLine      int    `json:"startLine"`
-	StartCharacter int    `json:"startCharacter"`
-	EndLine        int    `json:"endLine"`
-	EndCharacter   int    `json:"endCharacter"`
-}
+type Diagnostic struct { /* all structs must go */ }
 
 // CodeIntelligenceRange pairs a range with its definitions, reference, and hover text.
-type CodeIntelligenceRange struct {
-	Range       Range      `json:"range"`
-	Definitions []Location `json:"definitions"`
-	References  []Location `json:"references"`
-	HoverText   string     `json:"hoverText"`
-}
+type CodeIntelligenceRange struct { /* all structs must go */ }
diff --git a/enterprise/internal/codeintel/bundles/persistence/cache/data_cache_test.go b/enterprise/internal/codeintel/bundles/persistence/cache/data_cache_test.go
index 8fb8226..59993a9 100644
--- a/enterprise/internal/codeintel/bundles/persistence/cache/data_cache_test.go
+++ b/enterprise/internal/codeintel/bundles/persistence/cache/data_cache_test.go
@@ -4,10 +4,7 @@ import (
 	"testing"
 )
 
-type dataCacheTestCase struct {
-	key   string
-	value interface{}
-}
+type dataCacheTestCase struct { /* all structs must go */ }
 
 func TestDataCache(t *testing.T) {
 	cache, err := NewDataCache(10)
diff --git a/enterprise/internal/codeintel/bundles/persistence/cache/reader_cache.go b/enterprise/internal/codeintel/bundles/persistence/cache/reader_cache.go
index 2eac91a..f085cbb 100644
--- a/enterprise/internal/codeintel/bundles/persistence/cache/reader_cache.go
+++ b/enterprise/internal/codeintel/bundles/persistence/cache/reader_cache.go
@@ -32,12 +32,7 @@ type ReaderOpener func(key string) (persistence.Reader, error)
 // locks the given reader argument so that it is not closed while in use.
 type HandlerFunc func(reader persistence.Reader) error
 
-type readerCache struct {
-	opener ReaderOpener
-
-	m       sync.RWMutex
-	readers map[string]*readerCacheEntry
-}
+type readerCache struct { /* all structs must go */ }
 
 // NewReaderCache creates a new reader cache with the given reader opener.
 func NewReaderCache(opener ReaderOpener) ReaderCache {
@@ -163,19 +158,7 @@ func makeInitChannel(entry *readerCacheEntry) <-chan struct{} {
 }
 
 // readerCacheEntry wraps a reader with its initialization state and its ref count.
-type readerCacheEntry struct {
-	m           *sync.Mutex        // protects all fields
-	reader      persistence.Reader // shared reader instance
-	err         error              // construction error
-	initialized bool               // set when reader/err fields are set
-	disposed    bool               // set when entry is no longer usable
-	refCount    uint32             // number of references to entry
-
-	// cond wraps the entry's mutex and broadcasts to waiting
-	// goroutines when initialized is first set to true and when
-	// refCount is decremented.
-	cond *sync.Cond
-}
+type readerCacheEntry struct { /* all structs must go */ }
 
 // newReaderCacheEntry creates a new cache entry with a refcount of one.
 func newReaderCacheEntry() *readerCacheEntry {
diff --git a/enterprise/internal/codeintel/bundles/persistence/mocks/mock_reader.go b/enterprise/internal/codeintel/bundles/persistence/mocks/mock_reader.go
index 63998a4..87434f0 100644
--- a/enterprise/internal/codeintel/bundles/persistence/mocks/mock_reader.go
+++ b/enterprise/internal/codeintel/bundles/persistence/mocks/mock_reader.go
@@ -13,29 +13,7 @@ import (
 // package
 // github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/bundles/persistence)
 // used for unit testing.
-type MockReader struct {
-	// CloseFunc is an instance of a mock function object controlling the
-	// behavior of the method Close.
-	CloseFunc *ReaderCloseFunc
-	// PathsWithPrefixFunc is an instance of a mock function object
-	// controlling the behavior of the method PathsWithPrefix.
-	PathsWithPrefixFunc *ReaderPathsWithPrefixFunc
-	// ReadDefinitionsFunc is an instance of a mock function object
-	// controlling the behavior of the method ReadDefinitions.
-	ReadDefinitionsFunc *ReaderReadDefinitionsFunc
-	// ReadDocumentFunc is an instance of a mock function object controlling
-	// the behavior of the method ReadDocument.
-	ReadDocumentFunc *ReaderReadDocumentFunc
-	// ReadMetaFunc is an instance of a mock function object controlling the
-	// behavior of the method ReadMeta.
-	ReadMetaFunc *ReaderReadMetaFunc
-	// ReadReferencesFunc is an instance of a mock function object
-	// controlling the behavior of the method ReadReferences.
-	ReadReferencesFunc *ReaderReadReferencesFunc
-	// ReadResultChunkFunc is an instance of a mock function object
-	// controlling the behavior of the method ReadResultChunk.
-	ReadResultChunkFunc *ReaderReadResultChunkFunc
-}
+type MockReader struct { /* all structs must go */ }
 
 // NewMockReader creates a new mock of the Reader interface. All methods
 // return zero values for all results, unless overwritten.
@@ -109,12 +87,7 @@ func NewMockReaderFrom(i persistence.Reader) *MockReader {
 
 // ReaderCloseFunc describes the behavior when the Close method of the
 // parent MockReader instance is invoked.
-type ReaderCloseFunc struct {
-	defaultHook func() error
-	hooks       []func() error
-	history     []ReaderCloseFuncCall
-	mutex       sync.Mutex
-}
+type ReaderCloseFunc struct { /* all structs must go */ }
 
 // Close delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -188,11 +161,7 @@ func (f *ReaderCloseFunc) History() []ReaderCloseFuncCall {
 
 // ReaderCloseFuncCall is an object that describes an invocation of method
 // Close on an instance of MockReader.
-type ReaderCloseFuncCall struct {
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type ReaderCloseFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -208,12 +177,7 @@ func (c ReaderCloseFuncCall) Results() []interface{} {
 
 // ReaderPathsWithPrefixFunc describes the behavior when the PathsWithPrefix
 // method of the parent MockReader instance is invoked.
-type ReaderPathsWithPrefixFunc struct {
-	defaultHook func(context.Context, string) ([]string, error)
-	hooks       []func(context.Context, string) ([]string, error)
-	history     []ReaderPathsWithPrefixFuncCall
-	mutex       sync.Mutex
-}
+type ReaderPathsWithPrefixFunc struct { /* all structs must go */ }
 
 // PathsWithPrefix delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -288,20 +252,7 @@ func (f *ReaderPathsWithPrefixFunc) History() []ReaderPathsWithPrefixFuncCall {
 
 // ReaderPathsWithPrefixFuncCall is an object that describes an invocation
 // of method PathsWithPrefix on an instance of MockReader.
-type ReaderPathsWithPrefixFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []string
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type ReaderPathsWithPrefixFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -317,12 +268,7 @@ func (c ReaderPathsWithPrefixFuncCall) Results() []interface{} {
 
 // ReaderReadDefinitionsFunc describes the behavior when the ReadDefinitions
 // method of the parent MockReader instance is invoked.
-type ReaderReadDefinitionsFunc struct {
-	defaultHook func(context.Context, string, string, int, int) ([]types.Location, int, error)
-	hooks       []func(context.Context, string, string, int, int) ([]types.Location, int, error)
-	history     []ReaderReadDefinitionsFuncCall
-	mutex       sync.Mutex
-}
+type ReaderReadDefinitionsFunc struct { /* all structs must go */ }
 
 // ReadDefinitions delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -397,32 +343,7 @@ func (f *ReaderReadDefinitionsFunc) History() []ReaderReadDefinitionsFuncCall {
 
 // ReaderReadDefinitionsFuncCall is an object that describes an invocation
 // of method ReadDefinitions on an instance of MockReader.
-type ReaderReadDefinitionsFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 string
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 int
-	// Arg4 is the value of the 5th argument passed to this method
-	// invocation.
-	Arg4 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []types.Location
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 int
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type ReaderReadDefinitionsFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -438,12 +359,7 @@ func (c ReaderReadDefinitionsFuncCall) Results() []interface{} {
 
 // ReaderReadDocumentFunc describes the behavior when the ReadDocument
 // method of the parent MockReader instance is invoked.
-type ReaderReadDocumentFunc struct {
-	defaultHook func(context.Context, string) (types.DocumentData, bool, error)
-	hooks       []func(context.Context, string) (types.DocumentData, bool, error)
-	history     []ReaderReadDocumentFuncCall
-	mutex       sync.Mutex
-}
+type ReaderReadDocumentFunc struct { /* all structs must go */ }
 
 // ReadDocument delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -517,23 +433,7 @@ func (f *ReaderReadDocumentFunc) History() []ReaderReadDocumentFuncCall {
 
 // ReaderReadDocumentFuncCall is an object that describes an invocation of
 // method ReadDocument on an instance of MockReader.
-type ReaderReadDocumentFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 types.DocumentData
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 bool
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type ReaderReadDocumentFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -549,12 +449,7 @@ func (c ReaderReadDocumentFuncCall) Results() []interface{} {
 
 // ReaderReadMetaFunc describes the behavior when the ReadMeta method of the
 // parent MockReader instance is invoked.
-type ReaderReadMetaFunc struct {
-	defaultHook func(context.Context) (types.MetaData, error)
-	hooks       []func(context.Context) (types.MetaData, error)
-	history     []ReaderReadMetaFuncCall
-	mutex       sync.Mutex
-}
+type ReaderReadMetaFunc struct { /* all structs must go */ }
 
 // ReadMeta delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -628,17 +523,7 @@ func (f *ReaderReadMetaFunc) History() []ReaderReadMetaFuncCall {
 
 // ReaderReadMetaFuncCall is an object that describes an invocation of
 // method ReadMeta on an instance of MockReader.
-type ReaderReadMetaFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 types.MetaData
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type ReaderReadMetaFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -654,12 +539,7 @@ func (c ReaderReadMetaFuncCall) Results() []interface{} {
 
 // ReaderReadReferencesFunc describes the behavior when the ReadReferences
 // method of the parent MockReader instance is invoked.
-type ReaderReadReferencesFunc struct {
-	defaultHook func(context.Context, string, string, int, int) ([]types.Location, int, error)
-	hooks       []func(context.Context, string, string, int, int) ([]types.Location, int, error)
-	history     []ReaderReadReferencesFuncCall
-	mutex       sync.Mutex
-}
+type ReaderReadReferencesFunc struct { /* all structs must go */ }
 
 // ReadReferences delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -734,32 +614,7 @@ func (f *ReaderReadReferencesFunc) History() []ReaderReadReferencesFuncCall {
 
 // ReaderReadReferencesFuncCall is an object that describes an invocation of
 // method ReadReferences on an instance of MockReader.
-type ReaderReadReferencesFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 string
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 int
-	// Arg4 is the value of the 5th argument passed to this method
-	// invocation.
-	Arg4 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []types.Location
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 int
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type ReaderReadReferencesFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -775,12 +630,7 @@ func (c ReaderReadReferencesFuncCall) Results() []interface{} {
 
 // ReaderReadResultChunkFunc describes the behavior when the ReadResultChunk
 // method of the parent MockReader instance is invoked.
-type ReaderReadResultChunkFunc struct {
-	defaultHook func(context.Context, int) (types.ResultChunkData, bool, error)
-	hooks       []func(context.Context, int) (types.ResultChunkData, bool, error)
-	history     []ReaderReadResultChunkFuncCall
-	mutex       sync.Mutex
-}
+type ReaderReadResultChunkFunc struct { /* all structs must go */ }
 
 // ReadResultChunk delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -855,23 +705,7 @@ func (f *ReaderReadResultChunkFunc) History() []ReaderReadResultChunkFuncCall {
 
 // ReaderReadResultChunkFuncCall is an object that describes an invocation
 // of method ReadResultChunk on an instance of MockReader.
-type ReaderReadResultChunkFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 types.ResultChunkData
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 bool
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type ReaderReadResultChunkFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
diff --git a/enterprise/internal/codeintel/bundles/persistence/mocks/mock_writer.go b/enterprise/internal/codeintel/bundles/persistence/mocks/mock_writer.go
index a9dbc69..1abe908 100644
--- a/enterprise/internal/codeintel/bundles/persistence/mocks/mock_writer.go
+++ b/enterprise/internal/codeintel/bundles/persistence/mocks/mock_writer.go
@@ -13,26 +13,7 @@ import (
 // package
 // github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/bundles/persistence)
 // used for unit testing.
-type MockWriter struct {
-	// CloseFunc is an instance of a mock function object controlling the
-	// behavior of the method Close.
-	CloseFunc *WriterCloseFunc
-	// WriteDefinitionsFunc is an instance of a mock function object
-	// controlling the behavior of the method WriteDefinitions.
-	WriteDefinitionsFunc *WriterWriteDefinitionsFunc
-	// WriteDocumentsFunc is an instance of a mock function object
-	// controlling the behavior of the method WriteDocuments.
-	WriteDocumentsFunc *WriterWriteDocumentsFunc
-	// WriteMetaFunc is an instance of a mock function object controlling
-	// the behavior of the method WriteMeta.
-	WriteMetaFunc *WriterWriteMetaFunc
-	// WriteReferencesFunc is an instance of a mock function object
-	// controlling the behavior of the method WriteReferences.
-	WriteReferencesFunc *WriterWriteReferencesFunc
-	// WriteResultChunksFunc is an instance of a mock function object
-	// controlling the behavior of the method WriteResultChunks.
-	WriteResultChunksFunc *WriterWriteResultChunksFunc
-}
+type MockWriter struct { /* all structs must go */ }
 
 // NewMockWriter creates a new mock of the Writer interface. All methods
 // return zero values for all results, unless overwritten.
@@ -98,12 +79,7 @@ func NewMockWriterFrom(i persistence.Writer) *MockWriter {
 
 // WriterCloseFunc describes the behavior when the Close method of the
 // parent MockWriter instance is invoked.
-type WriterCloseFunc struct {
-	defaultHook func(error) error
-	hooks       []func(error) error
-	history     []WriterCloseFuncCall
-	mutex       sync.Mutex
-}
+type WriterCloseFunc struct { /* all structs must go */ }
 
 // Close delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -177,14 +153,7 @@ func (f *WriterCloseFunc) History() []WriterCloseFuncCall {
 
 // WriterCloseFuncCall is an object that describes an invocation of method
 // Close on an instance of MockWriter.
-type WriterCloseFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 error
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type WriterCloseFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -200,12 +169,7 @@ func (c WriterCloseFuncCall) Results() []interface{} {
 
 // WriterWriteDefinitionsFunc describes the behavior when the
 // WriteDefinitions method of the parent MockWriter instance is invoked.
-type WriterWriteDefinitionsFunc struct {
-	defaultHook func(context.Context, []types.MonikerLocations) error
-	hooks       []func(context.Context, []types.MonikerLocations) error
-	history     []WriterWriteDefinitionsFuncCall
-	mutex       sync.Mutex
-}
+type WriterWriteDefinitionsFunc struct { /* all structs must go */ }
 
 // WriteDefinitions delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -280,17 +244,7 @@ func (f *WriterWriteDefinitionsFunc) History() []WriterWriteDefinitionsFuncCall
 
 // WriterWriteDefinitionsFuncCall is an object that describes an invocation
 // of method WriteDefinitions on an instance of MockWriter.
-type WriterWriteDefinitionsFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 []types.MonikerLocations
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type WriterWriteDefinitionsFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -306,12 +260,7 @@ func (c WriterWriteDefinitionsFuncCall) Results() []interface{} {
 
 // WriterWriteDocumentsFunc describes the behavior when the WriteDocuments
 // method of the parent MockWriter instance is invoked.
-type WriterWriteDocumentsFunc struct {
-	defaultHook func(context.Context, map[string]types.DocumentData) error
-	hooks       []func(context.Context, map[string]types.DocumentData) error
-	history     []WriterWriteDocumentsFuncCall
-	mutex       sync.Mutex
-}
+type WriterWriteDocumentsFunc struct { /* all structs must go */ }
 
 // WriteDocuments delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -386,17 +335,7 @@ func (f *WriterWriteDocumentsFunc) History() []WriterWriteDocumentsFuncCall {
 
 // WriterWriteDocumentsFuncCall is an object that describes an invocation of
 // method WriteDocuments on an instance of MockWriter.
-type WriterWriteDocumentsFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 map[string]types.DocumentData
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type WriterWriteDocumentsFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -412,12 +351,7 @@ func (c WriterWriteDocumentsFuncCall) Results() []interface{} {
 
 // WriterWriteMetaFunc describes the behavior when the WriteMeta method of
 // the parent MockWriter instance is invoked.
-type WriterWriteMetaFunc struct {
-	defaultHook func(context.Context, types.MetaData) error
-	hooks       []func(context.Context, types.MetaData) error
-	history     []WriterWriteMetaFuncCall
-	mutex       sync.Mutex
-}
+type WriterWriteMetaFunc struct { /* all structs must go */ }
 
 // WriteMeta delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -491,17 +425,7 @@ func (f *WriterWriteMetaFunc) History() []WriterWriteMetaFuncCall {
 
 // WriterWriteMetaFuncCall is an object that describes an invocation of
 // method WriteMeta on an instance of MockWriter.
-type WriterWriteMetaFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 types.MetaData
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type WriterWriteMetaFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -517,12 +441,7 @@ func (c WriterWriteMetaFuncCall) Results() []interface{} {
 
 // WriterWriteReferencesFunc describes the behavior when the WriteReferences
 // method of the parent MockWriter instance is invoked.
-type WriterWriteReferencesFunc struct {
-	defaultHook func(context.Context, []types.MonikerLocations) error
-	hooks       []func(context.Context, []types.MonikerLocations) error
-	history     []WriterWriteReferencesFuncCall
-	mutex       sync.Mutex
-}
+type WriterWriteReferencesFunc struct { /* all structs must go */ }
 
 // WriteReferences delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -597,17 +516,7 @@ func (f *WriterWriteReferencesFunc) History() []WriterWriteReferencesFuncCall {
 
 // WriterWriteReferencesFuncCall is an object that describes an invocation
 // of method WriteReferences on an instance of MockWriter.
-type WriterWriteReferencesFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 []types.MonikerLocations
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type WriterWriteReferencesFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -623,12 +532,7 @@ func (c WriterWriteReferencesFuncCall) Results() []interface{} {
 
 // WriterWriteResultChunksFunc describes the behavior when the
 // WriteResultChunks method of the parent MockWriter instance is invoked.
-type WriterWriteResultChunksFunc struct {
-	defaultHook func(context.Context, map[int]types.ResultChunkData) error
-	hooks       []func(context.Context, map[int]types.ResultChunkData) error
-	history     []WriterWriteResultChunksFuncCall
-	mutex       sync.Mutex
-}
+type WriterWriteResultChunksFunc struct { /* all structs must go */ }
 
 // WriteResultChunks delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -703,17 +607,7 @@ func (f *WriterWriteResultChunksFunc) History() []WriterWriteResultChunksFuncCal
 
 // WriterWriteResultChunksFuncCall is an object that describes an invocation
 // of method WriteResultChunks on an instance of MockWriter.
-type WriterWriteResultChunksFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 map[int]types.ResultChunkData
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type WriterWriteResultChunksFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
diff --git a/enterprise/internal/codeintel/bundles/persistence/observability.go b/enterprise/internal/codeintel/bundles/persistence/observability.go
index 0a201b1..21222d7 100644
--- a/enterprise/internal/codeintel/bundles/persistence/observability.go
+++ b/enterprise/internal/codeintel/bundles/persistence/observability.go
@@ -9,15 +9,7 @@ import (
 )
 
 // An ObservedReader wraps another Reader with error logging, Prometheus metrics, and tracing.
-type ObservedReader struct {
-	reader                   Reader
-	readMetaOperation        *observation.Operation
-	pathsWithPrefixOperation *observation.Operation
-	readDocumentOperation    *observation.Operation
-	readResultChunkOperation *observation.Operation
-	readDefinitionsOperation *observation.Operation
-	readReferencesOperation  *observation.Operation
-}
+type ObservedReader struct { /* all structs must go */ }
 
 var _ Reader = &ObservedReader{}
 
diff --git a/enterprise/internal/codeintel/bundles/persistence/serialization/gob/serializer.go b/enterprise/internal/codeintel/bundles/persistence/serialization/gob/serializer.go
index 9904a5e..d6dc6f6 100644
--- a/enterprise/internal/codeintel/bundles/persistence/serialization/gob/serializer.go
+++ b/enterprise/internal/codeintel/bundles/persistence/serialization/gob/serializer.go
@@ -18,10 +18,7 @@ func init() {
 	gob.Register(&types.Location{})
 }
 
-type gobSerializer struct {
-	readers sync.Pool
-	writers sync.Pool
-}
+type gobSerializer struct { /* all structs must go */ }
 
 var _ serialization.Serializer = &gobSerializer{}
 
diff --git a/enterprise/internal/codeintel/bundles/persistence/serialization/json/types.go b/enterprise/internal/codeintel/bundles/persistence/serialization/json/types.go
index 6f03d84..8f8b78c 100644
--- a/enterprise/internal/codeintel/bundles/persistence/serialization/json/types.go
+++ b/enterprise/internal/codeintel/bundles/persistence/serialization/json/types.go
@@ -9,88 +9,31 @@ import (
 //
 // The following types are used during marshalling
 
-type SerializingTaggedValue struct {
-	Type  string      `json:"type"`
-	Value interface{} `json:"value"`
-}
-
-type SerializingRange struct {
-	StartLine          int                    `json:"startLine"`
-	StartCharacter     int                    `json:"startCharacter"`
-	EndLine            int                    `json:"endLine"`
-	EndCharacter       int                    `json:"endCharacter"`
-	DefinitionResultID types.ID               `json:"definitionResultId"`
-	ReferenceResultID  types.ID               `json:"referenceResultId"`
-	HoverResultID      types.ID               `json:"hoverResultId"`
-	MonikerIDs         SerializingTaggedValue `json:"monikerIds"`
-}
-
-type SerializingDocument struct {
-	Ranges             SerializingTaggedValue `json:"ranges"`
-	HoverResults       SerializingTaggedValue `json:"hoverResults"`
-	Monikers           SerializingTaggedValue `json:"monikers"`
-	PackageInformation SerializingTaggedValue `json:"packageInformation"`
-}
-
-type SerializingResultChunk struct {
-	DocumentPaths      SerializingTaggedValue `json:"documentPaths"`
-	DocumentIDRangeIDs SerializingTaggedValue `json:"documentIdRangeIds"`
-}
-
-type SerializingLocation struct {
-	URI            string `json:"uri"`
-	StartLine      int    `json:"startLine"`
-	StartCharacter int    `json:"startCharacter"`
-	EndLine        int    `json:"endLine"`
-	EndCharacter   int    `json:"endCharacter"`
-}
+type SerializingTaggedValue struct { /* all structs must go */ }
+
+type SerializingRange struct { /* all structs must go */ }
+
+type SerializingDocument struct { /* all structs must go */ }
+
+type SerializingResultChunk struct { /* all structs must go */ }
+
+type SerializingLocation struct { /* all structs must go */ }
 
 //
 // The following types are used during unmarshalling
 
-type SerializedTaggedValue struct {
-	Type  string            `json:"type"`
-	Value []json.RawMessage `json:"value"`
-}
-
-type SerializedRange struct {
-	StartLine          int                   `json:"startLine"`
-	StartCharacter     int                   `json:"startCharacter"`
-	EndLine            int                   `json:"endLine"`
-	EndCharacter       int                   `json:"endCharacter"`
-	DefinitionResultID ID                    `json:"definitionResultId"`
-	ReferenceResultID  ID                    `json:"referenceResultId"`
-	HoverResultID      ID                    `json:"hoverResultId"`
-	MonikerIDs         SerializedTaggedValue `json:"monikerIds"`
-}
-
-type SerializedDocument struct {
-	Ranges             SerializedTaggedValue `json:"ranges"`
-	HoverResults       SerializedTaggedValue `json:"hoverResults"`
-	Monikers           SerializedTaggedValue `json:"monikers"`
-	PackageInformation SerializedTaggedValue `json:"packageInformation"`
-}
-
-type SerializedResultChunk struct {
-	DocumentPaths      SerializedTaggedValue `json:"documentPaths"`
-	DocumentIDRangeIDs SerializedTaggedValue `json:"documentIdRangeIds"`
-}
+type SerializedTaggedValue struct { /* all structs must go */ }
+
+type SerializedRange struct { /* all structs must go */ }
+
+type SerializedDocument struct { /* all structs must go */ }
+
+type SerializedResultChunk struct { /* all structs must go */ }
 
 type SerializedLocation = SerializingLocation
 
-type SerializedMoniker struct {
-	Kind                 string `json:"kind"`
-	Scheme               string `json:"scheme"`
-	Identifier           string `json:"identifier"`
-	PackageInformationID ID     `json:"packageInformationId"`
-}
-
-type SerializedPackageInformation struct {
-	Name    string `json:"name"`
-	Version string `json:"version"`
-}
-
-type SerializedDocumentIDRangeID struct {
-	DocumentID ID `json:"documentId"`
-	RangeID    ID `json:"rangeId"`
-}
+type SerializedMoniker struct { /* all structs must go */ }
+
+type SerializedPackageInformation struct { /* all structs must go */ }
+
+type SerializedDocumentIDRangeID struct { /* all structs must go */ }
diff --git a/enterprise/internal/codeintel/bundles/persistence/serialization/mocks/mock_serializer.go b/enterprise/internal/codeintel/bundles/persistence/serialization/mocks/mock_serializer.go
index 7d0c5ff..cc515aa 100644
--- a/enterprise/internal/codeintel/bundles/persistence/serialization/mocks/mock_serializer.go
+++ b/enterprise/internal/codeintel/bundles/persistence/serialization/mocks/mock_serializer.go
@@ -12,26 +12,7 @@ import (
 // the package
 // github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/bundles/persistence/serialization)
 // used for unit testing.
-type MockSerializer struct {
-	// MarshalDocumentDataFunc is an instance of a mock function object
-	// controlling the behavior of the method MarshalDocumentData.
-	MarshalDocumentDataFunc *SerializerMarshalDocumentDataFunc
-	// MarshalLocationsFunc is an instance of a mock function object
-	// controlling the behavior of the method MarshalLocations.
-	MarshalLocationsFunc *SerializerMarshalLocationsFunc
-	// MarshalResultChunkDataFunc is an instance of a mock function object
-	// controlling the behavior of the method MarshalResultChunkData.
-	MarshalResultChunkDataFunc *SerializerMarshalResultChunkDataFunc
-	// UnmarshalDocumentDataFunc is an instance of a mock function object
-	// controlling the behavior of the method UnmarshalDocumentData.
-	UnmarshalDocumentDataFunc *SerializerUnmarshalDocumentDataFunc
-	// UnmarshalLocationsFunc is an instance of a mock function object
-	// controlling the behavior of the method UnmarshalLocations.
-	UnmarshalLocationsFunc *SerializerUnmarshalLocationsFunc
-	// UnmarshalResultChunkDataFunc is an instance of a mock function object
-	// controlling the behavior of the method UnmarshalResultChunkData.
-	UnmarshalResultChunkDataFunc *SerializerUnmarshalResultChunkDataFunc
-}
+type MockSerializer struct { /* all structs must go */ }
 
 // NewMockSerializer creates a new mock of the Serializer interface. All
 // methods return zero values for all results, unless overwritten.
@@ -98,12 +79,7 @@ func NewMockSerializerFrom(i serialization.Serializer) *MockSerializer {
 // SerializerMarshalDocumentDataFunc describes the behavior when the
 // MarshalDocumentData method of the parent MockSerializer instance is
 // invoked.
-type SerializerMarshalDocumentDataFunc struct {
-	defaultHook func(types.DocumentData) ([]byte, error)
-	hooks       []func(types.DocumentData) ([]byte, error)
-	history     []SerializerMarshalDocumentDataFuncCall
-	mutex       sync.Mutex
-}
+type SerializerMarshalDocumentDataFunc struct { /* all structs must go */ }
 
 // MarshalDocumentData delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -179,17 +155,7 @@ func (f *SerializerMarshalDocumentDataFunc) History() []SerializerMarshalDocumen
 // SerializerMarshalDocumentDataFuncCall is an object that describes an
 // invocation of method MarshalDocumentData on an instance of
 // MockSerializer.
-type SerializerMarshalDocumentDataFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 types.DocumentData
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []byte
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type SerializerMarshalDocumentDataFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -205,12 +171,7 @@ func (c SerializerMarshalDocumentDataFuncCall) Results() []interface{} {
 
 // SerializerMarshalLocationsFunc describes the behavior when the
 // MarshalLocations method of the parent MockSerializer instance is invoked.
-type SerializerMarshalLocationsFunc struct {
-	defaultHook func([]types.Location) ([]byte, error)
-	hooks       []func([]types.Location) ([]byte, error)
-	history     []SerializerMarshalLocationsFuncCall
-	mutex       sync.Mutex
-}
+type SerializerMarshalLocationsFunc struct { /* all structs must go */ }
 
 // MarshalLocations delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -285,17 +246,7 @@ func (f *SerializerMarshalLocationsFunc) History() []SerializerMarshalLocationsF
 
 // SerializerMarshalLocationsFuncCall is an object that describes an
 // invocation of method MarshalLocations on an instance of MockSerializer.
-type SerializerMarshalLocationsFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 []types.Location
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []byte
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type SerializerMarshalLocationsFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -312,12 +263,7 @@ func (c SerializerMarshalLocationsFuncCall) Results() []interface{} {
 // SerializerMarshalResultChunkDataFunc describes the behavior when the
 // MarshalResultChunkData method of the parent MockSerializer instance is
 // invoked.
-type SerializerMarshalResultChunkDataFunc struct {
-	defaultHook func(types.ResultChunkData) ([]byte, error)
-	hooks       []func(types.ResultChunkData) ([]byte, error)
-	history     []SerializerMarshalResultChunkDataFuncCall
-	mutex       sync.Mutex
-}
+type SerializerMarshalResultChunkDataFunc struct { /* all structs must go */ }
 
 // MarshalResultChunkData delegates to the next hook function in the queue
 // and stores the parameter and result values of this invocation.
@@ -394,17 +340,7 @@ func (f *SerializerMarshalResultChunkDataFunc) History() []SerializerMarshalResu
 // SerializerMarshalResultChunkDataFuncCall is an object that describes an
 // invocation of method MarshalResultChunkData on an instance of
 // MockSerializer.
-type SerializerMarshalResultChunkDataFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 types.ResultChunkData
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []byte
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type SerializerMarshalResultChunkDataFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -421,12 +357,7 @@ func (c SerializerMarshalResultChunkDataFuncCall) Results() []interface{} {
 // SerializerUnmarshalDocumentDataFunc describes the behavior when the
 // UnmarshalDocumentData method of the parent MockSerializer instance is
 // invoked.
-type SerializerUnmarshalDocumentDataFunc struct {
-	defaultHook func([]byte) (types.DocumentData, error)
-	hooks       []func([]byte) (types.DocumentData, error)
-	history     []SerializerUnmarshalDocumentDataFuncCall
-	mutex       sync.Mutex
-}
+type SerializerUnmarshalDocumentDataFunc struct { /* all structs must go */ }
 
 // UnmarshalDocumentData delegates to the next hook function in the queue
 // and stores the parameter and result values of this invocation.
@@ -503,17 +434,7 @@ func (f *SerializerUnmarshalDocumentDataFunc) History() []SerializerUnmarshalDoc
 // SerializerUnmarshalDocumentDataFuncCall is an object that describes an
 // invocation of method UnmarshalDocumentData on an instance of
 // MockSerializer.
-type SerializerUnmarshalDocumentDataFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 []byte
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 types.DocumentData
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type SerializerUnmarshalDocumentDataFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -530,12 +451,7 @@ func (c SerializerUnmarshalDocumentDataFuncCall) Results() []interface{} {
 // SerializerUnmarshalLocationsFunc describes the behavior when the
 // UnmarshalLocations method of the parent MockSerializer instance is
 // invoked.
-type SerializerUnmarshalLocationsFunc struct {
-	defaultHook func([]byte) ([]types.Location, error)
-	hooks       []func([]byte) ([]types.Location, error)
-	history     []SerializerUnmarshalLocationsFuncCall
-	mutex       sync.Mutex
-}
+type SerializerUnmarshalLocationsFunc struct { /* all structs must go */ }
 
 // UnmarshalLocations delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -610,17 +526,7 @@ func (f *SerializerUnmarshalLocationsFunc) History() []SerializerUnmarshalLocati
 
 // SerializerUnmarshalLocationsFuncCall is an object that describes an
 // invocation of method UnmarshalLocations on an instance of MockSerializer.
-type SerializerUnmarshalLocationsFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 []byte
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []types.Location
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type SerializerUnmarshalLocationsFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -637,12 +543,7 @@ func (c SerializerUnmarshalLocationsFuncCall) Results() []interface{} {
 // SerializerUnmarshalResultChunkDataFunc describes the behavior when the
 // UnmarshalResultChunkData method of the parent MockSerializer instance is
 // invoked.
-type SerializerUnmarshalResultChunkDataFunc struct {
-	defaultHook func([]byte) (types.ResultChunkData, error)
-	hooks       []func([]byte) (types.ResultChunkData, error)
-	history     []SerializerUnmarshalResultChunkDataFuncCall
-	mutex       sync.Mutex
-}
+type SerializerUnmarshalResultChunkDataFunc struct { /* all structs must go */ }
 
 // UnmarshalResultChunkData delegates to the next hook function in the queue
 // and stores the parameter and result values of this invocation.
@@ -719,17 +620,7 @@ func (f *SerializerUnmarshalResultChunkDataFunc) History() []SerializerUnmarshal
 // SerializerUnmarshalResultChunkDataFuncCall is an object that describes an
 // invocation of method UnmarshalResultChunkData on an instance of
 // MockSerializer.
-type SerializerUnmarshalResultChunkDataFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 []byte
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 types.ResultChunkData
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type SerializerUnmarshalResultChunkDataFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
diff --git a/enterprise/internal/codeintel/bundles/persistence/sqlite/batch/write.go b/enterprise/internal/codeintel/bundles/persistence/sqlite/batch/write.go
index b4c84cf..b9916a1 100644
--- a/enterprise/internal/codeintel/bundles/persistence/sqlite/batch/write.go
+++ b/enterprise/internal/codeintel/bundles/persistence/sqlite/batch/write.go
@@ -15,16 +15,10 @@ import (
 var NumWriterRoutines = runtime.NumCPU() * 2
 
 // KeyedDocument pairs a document with its path.
-type KeyedDocument struct {
-	Path     string
-	Document types.DocumentData
-}
+type KeyedDocument struct { /* all structs must go */ }
 
 // IndexedResultChunk pairs a result chunk with its index.
-type IndexedResultChunk struct {
-	Index       int
-	ResultChunk types.ResultChunkData
-}
+type IndexedResultChunk struct { /* all structs must go */ }
 
 // WriteDocuments serializes the given documents and writes them in batch to the given execable.
 func WriteDocuments(ctx context.Context, s sqliteutil.Execable, tableName string, serializer serialization.Serializer, documents map[string]types.DocumentData) error {
diff --git a/enterprise/internal/codeintel/bundles/persistence/sqlite/migrate/migrate.go b/enterprise/internal/codeintel/bundles/persistence/sqlite/migrate/migrate.go
index 715c767..455f71f 100644
--- a/enterprise/internal/codeintel/bundles/persistence/sqlite/migrate/migrate.go
+++ b/enterprise/internal/codeintel/bundles/persistence/sqlite/migrate/migrate.go
@@ -24,10 +24,7 @@ var ErrNoVersion = errors.New("no rows in schema_version")
 // introduced.
 type MigrationFunc func(ctx context.Context, s *store.Store, serializer serialization.Serializer) error
 
-var migrations = []struct {
-	MigrationFunc MigrationFunc
-	ShouldVacuum  bool
-}{
+var migrations = []struct { /* all structs must go */ }{
 	{v0.Migrate, false},
 	{v1.Migrate, false},
 	{v2.Migrate, false},
diff --git a/enterprise/internal/codeintel/bundles/persistence/sqlite/migrate/v4/migrate.go b/enterprise/internal/codeintel/bundles/persistence/sqlite/migrate/v4/migrate.go
index d0133f0..d3c61cf 100644
--- a/enterprise/internal/codeintel/bundles/persistence/sqlite/migrate/v4/migrate.go
+++ b/enterprise/internal/codeintel/bundles/persistence/sqlite/migrate/v4/migrate.go
@@ -123,15 +123,7 @@ const Delimiter = ":"
 
 // GroupedDefinitionReferenceRow is a row of all moniker locations grouped by scheme and identifier. The
 // remaining columns are string values concatenated by the delimiter defined above.
-type GroupedDefinitionReferenceRow struct {
-	Scheme          string
-	Identifier      string
-	URIs            string
-	StartLines      string
-	StartCharacters string
-	EndLines        string
-	EndCharacters   string
-}
+type GroupedDefinitionReferenceRow struct { /* all structs must go */ }
 
 // scanDefinitionReferenceRow reads a row that describes the GroupedDefinitionReferenceRow and converts it
 // into a moniker location. The uri and range data for each location is extracted by splitting the concatenated
diff --git a/enterprise/internal/codeintel/bundles/persistence/sqlite/reader.go b/enterprise/internal/codeintel/bundles/persistence/sqlite/reader.go
index ee73120..2f79889 100644
--- a/enterprise/internal/codeintel/bundles/persistence/sqlite/reader.go
+++ b/enterprise/internal/codeintel/bundles/persistence/sqlite/reader.go
@@ -21,13 +21,7 @@ import (
 // ErrNoMetadata occurs when there are no rows in the meta table.
 var ErrNoMetadata = errors.New("no rows in meta table")
 
-type sqliteReader struct {
-	filename   string
-	cache      cache.DataCache
-	store      *store.Store
-	closer     func() error
-	serializer serialization.Serializer
-}
+type sqliteReader struct { /* all structs must go */ }
 
 var _ persistence.Reader = &sqliteReader{}
 
diff --git a/enterprise/internal/codeintel/bundles/persistence/sqlite/store/store.go b/enterprise/internal/codeintel/bundles/persistence/sqlite/store/store.go
index 4b42994..91608da 100644
--- a/enterprise/internal/codeintel/bundles/persistence/sqlite/store/store.go
+++ b/enterprise/internal/codeintel/bundles/persistence/sqlite/store/store.go
@@ -21,9 +21,7 @@ type ExecableDB interface {
 }
 
 // Store wraps a SQLite connection.
-type Store struct {
-	db ExecableDB
-}
+type Store struct { /* all structs must go */ }
 
 var _ sqliteutil.Execable = &Store{}
 
diff --git a/enterprise/internal/codeintel/bundles/persistence/sqlite/writer.go b/enterprise/internal/codeintel/bundles/persistence/sqlite/writer.go
index 8af4565..4b58967 100644
--- a/enterprise/internal/codeintel/bundles/persistence/sqlite/writer.go
+++ b/enterprise/internal/codeintel/bundles/persistence/sqlite/writer.go
@@ -14,11 +14,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/bundles/types"
 )
 
-type sqliteWriter struct {
-	store      *store.Store
-	closer     func() error
-	serializer serialization.Serializer
-}
+type sqliteWriter struct { /* all structs must go */ }
 
 var _ persistence.Writer = &sqliteWriter{}
 
diff --git a/enterprise/internal/codeintel/bundles/types/types.go b/enterprise/internal/codeintel/bundles/types/types.go
index 9c40a41..3724fbf 100644
--- a/enterprise/internal/codeintel/bundles/types/types.go
+++ b/enterprise/internal/codeintel/bundles/types/types.go
@@ -3,123 +3,48 @@ package types
 type ID string
 
 // MetaData contains data describing the overall structure of a bundle.
-type MetaData struct {
-	NumResultChunks int
-}
+type MetaData struct { /* all structs must go */ }
 
 // DocumentData represents a single document within an index. The data here can answer
 // definitions, references, and hover queries if the results are all contained in the
 // same document.
-type DocumentData struct {
-	Ranges             map[ID]RangeData
-	HoverResults       map[ID]string // hover text normalized to markdown string
-	Monikers           map[ID]MonikerData
-	PackageInformation map[ID]PackageInformationData
-	Diagnostics        []DiagnosticData
-}
+type DocumentData struct { /* all structs must go */ }
 
 // RangeData represents a range vertex within an index. It contains the same relevant
 // edge data, which can be subsequently queried in the containing document. The data
 // that was reachable via a result set has been collapsed into this object during
 // conversion.
-type RangeData struct {
-	StartLine          int  // 0-indexed, inclusive
-	StartCharacter     int  // 0-indexed, inclusive
-	EndLine            int  // 0-indexed, inclusive
-	EndCharacter       int  // 0-indexed, inclusive
-	DefinitionResultID ID   // possibly empty
-	ReferenceResultID  ID   // possibly empty
-	HoverResultID      ID   // possibly empty
-	MonikerIDs         []ID // possibly empty
-}
+type RangeData struct { /* all structs must go */ }
 
 // MonikerData represent a unique name (eventually) attached to a range.
-type MonikerData struct {
-	Kind                 string // local, import, export
-	Scheme               string // name of the package manager type
-	Identifier           string // unique identifier
-	PackageInformationID ID     // possibly empty
-}
+type MonikerData struct { /* all structs must go */ }
 
 // PackageInformationData indicates a globally unique namespace for a moniker.
-type PackageInformationData struct {
-	// Name of the package that contains the moniker.
-	Name string
-
-	// Version of the package.
-	Version string
-}
+type PackageInformationData struct { /* all structs must go */ }
 
 // DiagnosticData carries diagnostic information attached to a range within its
 // containing document.
-type DiagnosticData struct {
-	Severity       int
-	Code           string
-	Message        string
-	Source         string
-	StartLine      int // 0-indexed, inclusive
-	StartCharacter int // 0-indexed, inclusive
-	EndLine        int // 0-indexed, inclusive
-	EndCharacter   int // 0-indexed, inclusive
-}
+type DiagnosticData struct { /* all structs must go */ }
 
 // ResultChunkData represents a row of the resultChunk table. Each row is a subset
 // of definition and reference result data in the index. Results are inserted into
 // chunks based on the hash of their identifier, thus every chunk has a roughly
 // proportional amount of data.
-type ResultChunkData struct {
-	// DocumentPaths is a mapping from document identifiers to their paths. This
-	// must be used to convert a document identifier in DocumentIDRangeIDs into
-	// a key that can be used to fetch document data.
-	DocumentPaths map[ID]string
-
-	// DocumentIDRangeIDs is a mapping from a definition or result reference
-	// identifier to the set of ranges that compose that result set. Each range
-	// is paired with the identifier of the document in which it can found.
-	DocumentIDRangeIDs map[ID][]DocumentIDRangeID
-}
+type ResultChunkData struct { /* all structs must go */ }
 
 // DocumentIDRangeID is a pair of document and range identifiers.
-type DocumentIDRangeID struct {
-	// The identifier of the document to which the range belongs. This id is only
-	// relevant within the containing result chunk.
-	DocumentID ID
-
-	// The identifier of the range.
-	RangeID ID
-}
+type DocumentIDRangeID struct { /* all structs must go */ }
 
 // Loocation represents a range within a particular document relative to its
 // containing bundle.
-type Location struct {
-	URI            string
-	StartLine      int
-	StartCharacter int
-	EndLine        int
-	EndCharacter   int
-}
+type Location struct { /* all structs must go */ }
 
 // MonikerLocations pairs a moniker scheme and identifier with the set of locations
 // with that within a particular bundle.
-type MonikerLocations struct {
-	Scheme     string
-	Identifier string
-	Locations  []Location
-}
+type MonikerLocations struct { /* all structs must go */ }
 
 // Package pairs a package name and the dump that provides it.
-type Package struct {
-	DumpID  int
-	Scheme  string
-	Name    string
-	Version string
-}
+type Package struct { /* all structs must go */ }
 
 // PackageReferences pairs a package name/version with a dump that depends on it.
-type PackageReference struct {
-	DumpID  int
-	Scheme  string
-	Name    string
-	Version string
-	Filter  []byte // a bloom filter of identifiers imported by this dependent
-}
+type PackageReference struct { /* all structs must go */ }
diff --git a/enterprise/internal/codeintel/gitserver/mocks/mock_client.go b/enterprise/internal/codeintel/gitserver/mocks/mock_client.go
index 6503fb8..9368a24 100644
--- a/enterprise/internal/codeintel/gitserver/mocks/mock_client.go
+++ b/enterprise/internal/codeintel/gitserver/mocks/mock_client.go
@@ -14,29 +14,7 @@ import (
 // package
 // github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/gitserver)
 // used for unit testing.
-type MockClient struct {
-	// ArchiveFunc is an instance of a mock function object controlling the
-	// behavior of the method Archive.
-	ArchiveFunc *ClientArchiveFunc
-	// CommitGraphFunc is an instance of a mock function object controlling
-	// the behavior of the method CommitGraph.
-	CommitGraphFunc *ClientCommitGraphFunc
-	// CommitsNearFunc is an instance of a mock function object controlling
-	// the behavior of the method CommitsNear.
-	CommitsNearFunc *ClientCommitsNearFunc
-	// DirectoryChildrenFunc is an instance of a mock function object
-	// controlling the behavior of the method DirectoryChildren.
-	DirectoryChildrenFunc *ClientDirectoryChildrenFunc
-	// FileExistsFunc is an instance of a mock function object controlling
-	// the behavior of the method FileExists.
-	FileExistsFunc *ClientFileExistsFunc
-	// HeadFunc is an instance of a mock function object controlling the
-	// behavior of the method Head.
-	HeadFunc *ClientHeadFunc
-	// TagsFunc is an instance of a mock function object controlling the
-	// behavior of the method Tags.
-	TagsFunc *ClientTagsFunc
-}
+type MockClient struct { /* all structs must go */ }
 
 // NewMockClient creates a new mock of the Client interface. All methods
 // return zero values for all results, unless overwritten.
@@ -110,12 +88,7 @@ func NewMockClientFrom(i gitserver.Client) *MockClient {
 
 // ClientArchiveFunc describes the behavior when the Archive method of the
 // parent MockClient instance is invoked.
-type ClientArchiveFunc struct {
-	defaultHook func(context.Context, store.Store, int, string) (io.Reader, error)
-	hooks       []func(context.Context, store.Store, int, string) (io.Reader, error)
-	history     []ClientArchiveFuncCall
-	mutex       sync.Mutex
-}
+type ClientArchiveFunc struct { /* all structs must go */ }
 
 // Archive delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -189,26 +162,7 @@ func (f *ClientArchiveFunc) History() []ClientArchiveFuncCall {
 
 // ClientArchiveFuncCall is an object that describes an invocation of method
 // Archive on an instance of MockClient.
-type ClientArchiveFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 store.Store
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 int
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 string
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 io.Reader
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type ClientArchiveFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -224,12 +178,7 @@ func (c ClientArchiveFuncCall) Results() []interface{} {
 
 // ClientCommitGraphFunc describes the behavior when the CommitGraph method
 // of the parent MockClient instance is invoked.
-type ClientCommitGraphFunc struct {
-	defaultHook func(context.Context, store.Store, int) (map[string][]string, error)
-	hooks       []func(context.Context, store.Store, int) (map[string][]string, error)
-	history     []ClientCommitGraphFuncCall
-	mutex       sync.Mutex
-}
+type ClientCommitGraphFunc struct { /* all structs must go */ }
 
 // CommitGraph delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -303,23 +252,7 @@ func (f *ClientCommitGraphFunc) History() []ClientCommitGraphFuncCall {
 
 // ClientCommitGraphFuncCall is an object that describes an invocation of
 // method CommitGraph on an instance of MockClient.
-type ClientCommitGraphFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 store.Store
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 map[string][]string
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type ClientCommitGraphFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -335,12 +268,7 @@ func (c ClientCommitGraphFuncCall) Results() []interface{} {
 
 // ClientCommitsNearFunc describes the behavior when the CommitsNear method
 // of the parent MockClient instance is invoked.
-type ClientCommitsNearFunc struct {
-	defaultHook func(context.Context, store.Store, int, string) (map[string][]string, error)
-	hooks       []func(context.Context, store.Store, int, string) (map[string][]string, error)
-	history     []ClientCommitsNearFuncCall
-	mutex       sync.Mutex
-}
+type ClientCommitsNearFunc struct { /* all structs must go */ }
 
 // CommitsNear delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -414,26 +342,7 @@ func (f *ClientCommitsNearFunc) History() []ClientCommitsNearFuncCall {
 
 // ClientCommitsNearFuncCall is an object that describes an invocation of
 // method CommitsNear on an instance of MockClient.
-type ClientCommitsNearFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 store.Store
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 int
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 string
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 map[string][]string
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type ClientCommitsNearFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -449,12 +358,7 @@ func (c ClientCommitsNearFuncCall) Results() []interface{} {
 
 // ClientDirectoryChildrenFunc describes the behavior when the
 // DirectoryChildren method of the parent MockClient instance is invoked.
-type ClientDirectoryChildrenFunc struct {
-	defaultHook func(context.Context, store.Store, int, string, []string) (map[string][]string, error)
-	hooks       []func(context.Context, store.Store, int, string, []string) (map[string][]string, error)
-	history     []ClientDirectoryChildrenFuncCall
-	mutex       sync.Mutex
-}
+type ClientDirectoryChildrenFunc struct { /* all structs must go */ }
 
 // DirectoryChildren delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -529,29 +433,7 @@ func (f *ClientDirectoryChildrenFunc) History() []ClientDirectoryChildrenFuncCal
 
 // ClientDirectoryChildrenFuncCall is an object that describes an invocation
 // of method DirectoryChildren on an instance of MockClient.
-type ClientDirectoryChildrenFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 store.Store
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 int
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 string
-	// Arg4 is the value of the 5th argument passed to this method
-	// invocation.
-	Arg4 []string
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 map[string][]string
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type ClientDirectoryChildrenFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -567,12 +449,7 @@ func (c ClientDirectoryChildrenFuncCall) Results() []interface{} {
 
 // ClientFileExistsFunc describes the behavior when the FileExists method of
 // the parent MockClient instance is invoked.
-type ClientFileExistsFunc struct {
-	defaultHook func(context.Context, store.Store, int, string, string) (bool, error)
-	hooks       []func(context.Context, store.Store, int, string, string) (bool, error)
-	history     []ClientFileExistsFuncCall
-	mutex       sync.Mutex
-}
+type ClientFileExistsFunc struct { /* all structs must go */ }
 
 // FileExists delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -646,29 +523,7 @@ func (f *ClientFileExistsFunc) History() []ClientFileExistsFuncCall {
 
 // ClientFileExistsFuncCall is an object that describes an invocation of
 // method FileExists on an instance of MockClient.
-type ClientFileExistsFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 store.Store
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 int
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 string
-	// Arg4 is the value of the 5th argument passed to this method
-	// invocation.
-	Arg4 string
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 bool
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type ClientFileExistsFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -684,12 +539,7 @@ func (c ClientFileExistsFuncCall) Results() []interface{} {
 
 // ClientHeadFunc describes the behavior when the Head method of the parent
 // MockClient instance is invoked.
-type ClientHeadFunc struct {
-	defaultHook func(context.Context, store.Store, int) (string, error)
-	hooks       []func(context.Context, store.Store, int) (string, error)
-	history     []ClientHeadFuncCall
-	mutex       sync.Mutex
-}
+type ClientHeadFunc struct { /* all structs must go */ }
 
 // Head delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -763,23 +613,7 @@ func (f *ClientHeadFunc) History() []ClientHeadFuncCall {
 
 // ClientHeadFuncCall is an object that describes an invocation of method
 // Head on an instance of MockClient.
-type ClientHeadFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 store.Store
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 string
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type ClientHeadFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -795,12 +629,7 @@ func (c ClientHeadFuncCall) Results() []interface{} {
 
 // ClientTagsFunc describes the behavior when the Tags method of the parent
 // MockClient instance is invoked.
-type ClientTagsFunc struct {
-	defaultHook func(context.Context, store.Store, int, string) (string, bool, error)
-	hooks       []func(context.Context, store.Store, int, string) (string, bool, error)
-	history     []ClientTagsFuncCall
-	mutex       sync.Mutex
-}
+type ClientTagsFunc struct { /* all structs must go */ }
 
 // Tags delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -874,29 +703,7 @@ func (f *ClientTagsFunc) History() []ClientTagsFuncCall {
 
 // ClientTagsFuncCall is an object that describes an invocation of method
 // Tags on an instance of MockClient.
-type ClientTagsFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 store.Store
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 int
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 string
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 string
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 bool
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type ClientTagsFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
diff --git a/enterprise/internal/codeintel/httpapi/errors.go b/enterprise/internal/codeintel/httpapi/errors.go
index 87c5436..6996bef 100644
--- a/enterprise/internal/codeintel/httpapi/errors.go
+++ b/enterprise/internal/codeintel/httpapi/errors.go
@@ -2,9 +2,7 @@ package httpapi
 
 import "fmt"
 
-type ClientError struct {
-	err error
-}
+type ClientError struct { /* all structs must go */ }
 
 func (e *ClientError) Error() string {
 	return e.err.Error()
diff --git a/enterprise/internal/codeintel/httpapi/upload_handler.go b/enterprise/internal/codeintel/httpapi/upload_handler.go
index 915e02b..ab10675 100644
--- a/enterprise/internal/codeintel/httpapi/upload_handler.go
+++ b/enterprise/internal/codeintel/httpapi/upload_handler.go
@@ -22,11 +22,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/vcs"
 )
 
-type UploadHandler struct {
-	store               store.Store
-	bundleManagerClient bundles.BundleManagerClient
-	internal            bool
-}
+type UploadHandler struct { /* all structs must go */ }
 
 func NewUploadHandler(store store.Store, bundleManagerClient bundles.BundleManagerClient, internal bool) http.Handler {
 	handler := &UploadHandler{
@@ -88,16 +84,9 @@ func (h *UploadHandler) handleEnqueue(w http.ResponseWriter, r *http.Request) {
 
 // UploadArgs are common arguments required to enqueue an upload for both
 // single-payload and multipart uploads.
-type UploadArgs struct {
-	Commit       string
-	Root         string
-	RepositoryID int
-	Indexer      string
-}
+type UploadArgs struct { /* all structs must go */ }
 
-type enqueuePayload struct {
-	ID string `json:"id"`
-}
+type enqueuePayload struct { /* all structs must go */ }
 
 // handleEnqueueErr dispatches to the correct handler function based on query args. Running the
 // `src lsif upload` command will cause one of two sequences of requests to occur. For uploads that
diff --git a/enterprise/internal/codeintel/resolvers/graphql/diagnostic.go b/enterprise/internal/codeintel/resolvers/graphql/diagnostic.go
index f391801..5ed180c 100644
--- a/enterprise/internal/codeintel/resolvers/graphql/diagnostic.go
+++ b/enterprise/internal/codeintel/resolvers/graphql/diagnostic.go
@@ -8,10 +8,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/resolvers"
 )
 
-type DiagnosticResolver struct {
-	diagnostic       resolvers.AdjustedDiagnostic
-	locationResolver *CachedLocationResolver
-}
+type DiagnosticResolver struct { /* all structs must go */ }
 
 func NewDiagnosticResolver(diagnostic resolvers.AdjustedDiagnostic, locationResolver *CachedLocationResolver) gql.DiagnosticResolver {
 	return &DiagnosticResolver{
diff --git a/enterprise/internal/codeintel/resolvers/graphql/diagnostic_connection.go b/enterprise/internal/codeintel/resolvers/graphql/diagnostic_connection.go
index c3d2853..8721e38 100644
--- a/enterprise/internal/codeintel/resolvers/graphql/diagnostic_connection.go
+++ b/enterprise/internal/codeintel/resolvers/graphql/diagnostic_connection.go
@@ -8,11 +8,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/resolvers"
 )
 
-type DiagnosticConnectionResolver struct {
-	diagnostics      []resolvers.AdjustedDiagnostic
-	totalCount       int
-	locationResolver *CachedLocationResolver
-}
+type DiagnosticConnectionResolver struct { /* all structs must go */ }
 
 func NewDiagnosticConnectionResolver(diagnostics []resolvers.AdjustedDiagnostic, totalCount int, locationResolver *CachedLocationResolver) gql.DiagnosticConnectionResolver {
 	return &DiagnosticConnectionResolver{
diff --git a/enterprise/internal/codeintel/resolvers/graphql/hover.go b/enterprise/internal/codeintel/resolvers/graphql/hover.go
index 02efb7b..b8b057f 100644
--- a/enterprise/internal/codeintel/resolvers/graphql/hover.go
+++ b/enterprise/internal/codeintel/resolvers/graphql/hover.go
@@ -5,10 +5,7 @@ import (
 	gql "github.com/sourcegraph/sourcegraph/cmd/frontend/graphqlbackend"
 )
 
-type HoverResolver struct {
-	text     string
-	lspRange lsp.Range
-}
+type HoverResolver struct { /* all structs must go */ }
 
 func NewHoverResolver(text string, lspRange lsp.Range) gql.HoverResolver {
 	return &HoverResolver{
diff --git a/enterprise/internal/codeintel/resolvers/graphql/index.go b/enterprise/internal/codeintel/resolvers/graphql/index.go
index 1d1d5c0..06672e1 100644
--- a/enterprise/internal/codeintel/resolvers/graphql/index.go
+++ b/enterprise/internal/codeintel/resolvers/graphql/index.go
@@ -10,10 +10,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/api"
 )
 
-type IndexResolver struct {
-	index            store.Index
-	locationResolver *CachedLocationResolver
-}
+type IndexResolver struct { /* all structs must go */ }
 
 func NewIndexResolver(index store.Index, locationResolver *CachedLocationResolver) gql.LSIFIndexResolver {
 	return &IndexResolver{
diff --git a/enterprise/internal/codeintel/resolvers/graphql/index_connection.go b/enterprise/internal/codeintel/resolvers/graphql/index_connection.go
index 2f5651b..d66cd2e 100644
--- a/enterprise/internal/codeintel/resolvers/graphql/index_connection.go
+++ b/enterprise/internal/codeintel/resolvers/graphql/index_connection.go
@@ -8,10 +8,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/resolvers"
 )
 
-type IndexConnectionResolver struct {
-	resolver         *resolvers.IndexesResolver
-	locationResolver *CachedLocationResolver
-}
+type IndexConnectionResolver struct { /* all structs must go */ }
 
 func NewIndexConnectionResolver(resolver *resolvers.IndexesResolver, locationResolver *CachedLocationResolver) gql.LSIFIndexConnectionResolver {
 	return &IndexConnectionResolver{
diff --git a/enterprise/internal/codeintel/resolvers/graphql/location_connection.go b/enterprise/internal/codeintel/resolvers/graphql/location_connection.go
index 6e77018..16763ef 100644
--- a/enterprise/internal/codeintel/resolvers/graphql/location_connection.go
+++ b/enterprise/internal/codeintel/resolvers/graphql/location_connection.go
@@ -8,11 +8,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/resolvers"
 )
 
-type LocationConnectionResolver struct {
-	locations        []resolvers.AdjustedLocation
-	cursor           *string
-	locationResolver *CachedLocationResolver
-}
+type LocationConnectionResolver struct { /* all structs must go */ }
 
 func NewLocationConnectionResolver(locations []resolvers.AdjustedLocation, cursor *string, locationResolver *CachedLocationResolver) gql.LocationConnectionResolver {
 	return &LocationConnectionResolver{
diff --git a/enterprise/internal/codeintel/resolvers/graphql/locations.go b/enterprise/internal/codeintel/resolvers/graphql/locations.go
index b3db9a1..92776b2 100644
--- a/enterprise/internal/codeintel/resolvers/graphql/locations.go
+++ b/enterprise/internal/codeintel/resolvers/graphql/locations.go
@@ -22,22 +22,11 @@ import (
 // This resolver maintains a hierarchy of caches as a way to decrease lock contention. Resolution of a
 // repository holds the top-level lock. Resolution of a commit holds a lock associated with the parent
 // repository. Similarly, resolution of a path holds a lock associated with the parent commit.
-type CachedLocationResolver struct {
-	sync.RWMutex
-	children map[api.RepoID]*cachedRepositoryResolver
-}
+type CachedLocationResolver struct { /* all structs must go */ }
 
-type cachedRepositoryResolver struct {
-	sync.RWMutex
-	resolver *gql.RepositoryResolver
-	children map[string]*cachedCommitResolver
-}
+type cachedRepositoryResolver struct { /* all structs must go */ }
 
-type cachedCommitResolver struct {
-	sync.RWMutex
-	resolver *gql.GitCommitResolver
-	children map[string]*gql.GitTreeEntryResolver
-}
+type cachedCommitResolver struct { /* all structs must go */ }
 
 // NewCachedLocationResolver creates a location resolver with an empty cache.
 func NewCachedLocationResolver() *CachedLocationResolver {
diff --git a/enterprise/internal/codeintel/resolvers/graphql/locations_test.go b/enterprise/internal/codeintel/resolvers/graphql/locations_test.go
index 0a14296..5efffed 100644
--- a/enterprise/internal/codeintel/resolvers/graphql/locations_test.go
+++ b/enterprise/internal/codeintel/resolvers/graphql/locations_test.go
@@ -65,10 +65,7 @@ func TestCachedLocationResolver(t *testing.T) {
 		paths = append(paths, fmt.Sprintf("/foo/%d/bar/baz.go", i))
 	}
 
-	type resolverPair struct {
-		key      string
-		resolver *gql.GitTreeEntryResolver
-	}
+	type resolverPair struct { /* all structs must go */ }
 	resolvers := make(chan resolverPair, numRoutines*len(repositoryIDs)*len(commits)*len(paths))
 
 	var wg sync.WaitGroup
diff --git a/enterprise/internal/codeintel/resolvers/graphql/query.go b/enterprise/internal/codeintel/resolvers/graphql/query.go
index 1b20c10..89db7c3 100644
--- a/enterprise/internal/codeintel/resolvers/graphql/query.go
+++ b/enterprise/internal/codeintel/resolvers/graphql/query.go
@@ -24,10 +24,7 @@ var ErrIllegalBounds = errors.New("illegal bounds")
 // resolver concerns itself with GraphQL/API-specific behaviors (auth, validation, marshaling, etc.).
 // All code intel-specific behavior is delegated to the underlying resolver instance, which is defined
 // in the parent package.
-type QueryResolver struct {
-	resolver         resolvers.QueryResolver
-	locationResolver *CachedLocationResolver
-}
+type QueryResolver struct { /* all structs must go */ }
 
 // NewQueryResolver creates a new QueryResolver with the given resolver that defines all code intel-specific
 // behavior. A cached location resolver instance is also given to the query resolver, which should be used
diff --git a/enterprise/internal/codeintel/resolvers/graphql/ranges.go b/enterprise/internal/codeintel/resolvers/graphql/ranges.go
index 108bf55..f31eb23 100644
--- a/enterprise/internal/codeintel/resolvers/graphql/ranges.go
+++ b/enterprise/internal/codeintel/resolvers/graphql/ranges.go
@@ -7,10 +7,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/resolvers"
 )
 
-type CodeIntelligenceRangeResolver struct {
-	r                resolvers.AdjustedCodeIntelligenceRange
-	locationResolver *CachedLocationResolver
-}
+type CodeIntelligenceRangeResolver struct { /* all structs must go */ }
 
 func (r *CodeIntelligenceRangeResolver) Range(ctx context.Context) (gql.RangeResolver, error) {
 	return gql.NewRangeResolver(convertRange(r.r.Range)), nil
diff --git a/enterprise/internal/codeintel/resolvers/graphql/ranges_connection.go b/enterprise/internal/codeintel/resolvers/graphql/ranges_connection.go
index b344153..9d43316 100644
--- a/enterprise/internal/codeintel/resolvers/graphql/ranges_connection.go
+++ b/enterprise/internal/codeintel/resolvers/graphql/ranges_connection.go
@@ -7,10 +7,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/resolvers"
 )
 
-type CodeIntelligenceRangeConnectionResolver struct {
-	ranges           []resolvers.AdjustedCodeIntelligenceRange
-	locationResolver *CachedLocationResolver
-}
+type CodeIntelligenceRangeConnectionResolver struct { /* all structs must go */ }
 
 func (r *CodeIntelligenceRangeConnectionResolver) Nodes(ctx context.Context) ([]gql.CodeIntelligenceRangeResolver, error) {
 	var resolvers []gql.CodeIntelligenceRangeResolver
diff --git a/enterprise/internal/codeintel/resolvers/graphql/resolver.go b/enterprise/internal/codeintel/resolvers/graphql/resolver.go
index 17b9d70..a0e7af8 100644
--- a/enterprise/internal/codeintel/resolvers/graphql/resolver.go
+++ b/enterprise/internal/codeintel/resolvers/graphql/resolver.go
@@ -18,10 +18,7 @@ const DefaultIndexPageSize = 50
 // resolver concerns itself with GraphQL/API-specific behaviors (auth, validation, marshaling, etc.).
 // All code intel-specific behavior is delegated to the underlying resolver instance, which is defined
 // in the parent package.
-type Resolver struct {
-	resolver         resolvers.Resolver
-	locationResolver *CachedLocationResolver
-}
+type Resolver struct { /* all structs must go */ }
 
 // NewResolver creates a new Resolver with the given resolver that defines all code intel-specific behavior.
 func NewResolver(resolver resolvers.Resolver) gql.CodeIntelResolver {
diff --git a/enterprise/internal/codeintel/resolvers/graphql/upload.go b/enterprise/internal/codeintel/resolvers/graphql/upload.go
index 49df566..b8ce8fc 100644
--- a/enterprise/internal/codeintel/resolvers/graphql/upload.go
+++ b/enterprise/internal/codeintel/resolvers/graphql/upload.go
@@ -10,10 +10,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/api"
 )
 
-type UploadResolver struct {
-	upload           store.Upload
-	locationResolver *CachedLocationResolver
-}
+type UploadResolver struct { /* all structs must go */ }
 
 func NewUploadResolver(upload store.Upload, locationResolver *CachedLocationResolver) gql.LSIFUploadResolver {
 	return &UploadResolver{
diff --git a/enterprise/internal/codeintel/resolvers/graphql/upload_connection.go b/enterprise/internal/codeintel/resolvers/graphql/upload_connection.go
index 6412bd7..826499e 100644
--- a/enterprise/internal/codeintel/resolvers/graphql/upload_connection.go
+++ b/enterprise/internal/codeintel/resolvers/graphql/upload_connection.go
@@ -8,10 +8,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/resolvers"
 )
 
-type UploadConnectionResolver struct {
-	resolver         *resolvers.UploadsResolver
-	locationResolver *CachedLocationResolver
-}
+type UploadConnectionResolver struct { /* all structs must go */ }
 
 func NewUploadConnectionResolver(resolver *resolvers.UploadsResolver, locationResolver *CachedLocationResolver) gql.LSIFUploadConnectionResolver {
 	return &UploadConnectionResolver{
diff --git a/enterprise/internal/codeintel/resolvers/indexes.go b/enterprise/internal/codeintel/resolvers/indexes.go
index 3788ecd..67e0975 100644
--- a/enterprise/internal/codeintel/resolvers/indexes.go
+++ b/enterprise/internal/codeintel/resolvers/indexes.go
@@ -9,16 +9,7 @@ import (
 
 // IndexesResolver wraps store.GetIndexes so that the underlying function can be
 // invoked lazily and its results memoized.
-type IndexesResolver struct {
-	store store.Store
-	opts  store.GetIndexesOptions
-	once  sync.Once
-	//
-	Indexes    []store.Index
-	TotalCount int
-	NextOffset *int
-	err        error
-}
+type IndexesResolver struct { /* all structs must go */ }
 
 // NewIndexesResolver creates a new IndexesResolver which wil invoke store.GetIndexes
 // with the given options.
diff --git a/enterprise/internal/codeintel/resolvers/mock_position_adjuster_test.go b/enterprise/internal/codeintel/resolvers/mock_position_adjuster_test.go
index 474d060..38efa0d 100644
--- a/enterprise/internal/codeintel/resolvers/mock_position_adjuster_test.go
+++ b/enterprise/internal/codeintel/resolvers/mock_position_adjuster_test.go
@@ -12,17 +12,7 @@ import (
 // interface (from the package
 // github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/resolvers)
 // used for unit testing.
-type MockPositionAdjuster struct {
-	// AdjustPathFunc is an instance of a mock function object controlling
-	// the behavior of the method AdjustPath.
-	AdjustPathFunc *PositionAdjusterAdjustPathFunc
-	// AdjustPositionFunc is an instance of a mock function object
-	// controlling the behavior of the method AdjustPosition.
-	AdjustPositionFunc *PositionAdjusterAdjustPositionFunc
-	// AdjustRangeFunc is an instance of a mock function object controlling
-	// the behavior of the method AdjustRange.
-	AdjustRangeFunc *PositionAdjusterAdjustRangeFunc
-}
+type MockPositionAdjuster struct { /* all structs must go */ }
 
 // NewMockPositionAdjuster creates a new mock of the PositionAdjuster
 // interface. All methods return zero values for all results, unless
@@ -66,12 +56,7 @@ func NewMockPositionAdjusterFrom(i PositionAdjuster) *MockPositionAdjuster {
 
 // PositionAdjusterAdjustPathFunc describes the behavior when the AdjustPath
 // method of the parent MockPositionAdjuster instance is invoked.
-type PositionAdjusterAdjustPathFunc struct {
-	defaultHook func(context.Context, string, string, bool) (string, bool, error)
-	hooks       []func(context.Context, string, string, bool) (string, bool, error)
-	history     []PositionAdjusterAdjustPathFuncCall
-	mutex       sync.Mutex
-}
+type PositionAdjusterAdjustPathFunc struct { /* all structs must go */ }
 
 // AdjustPath delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -146,29 +131,7 @@ func (f *PositionAdjusterAdjustPathFunc) History() []PositionAdjusterAdjustPathF
 
 // PositionAdjusterAdjustPathFuncCall is an object that describes an
 // invocation of method AdjustPath on an instance of MockPositionAdjuster.
-type PositionAdjusterAdjustPathFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 string
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 bool
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 string
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 bool
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type PositionAdjusterAdjustPathFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -185,12 +148,7 @@ func (c PositionAdjusterAdjustPathFuncCall) Results() []interface{} {
 // PositionAdjusterAdjustPositionFunc describes the behavior when the
 // AdjustPosition method of the parent MockPositionAdjuster instance is
 // invoked.
-type PositionAdjusterAdjustPositionFunc struct {
-	defaultHook func(context.Context, string, string, client.Position, bool) (string, client.Position, bool, error)
-	hooks       []func(context.Context, string, string, client.Position, bool) (string, client.Position, bool, error)
-	history     []PositionAdjusterAdjustPositionFuncCall
-	mutex       sync.Mutex
-}
+type PositionAdjusterAdjustPositionFunc struct { /* all structs must go */ }
 
 // AdjustPosition delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -266,35 +224,7 @@ func (f *PositionAdjusterAdjustPositionFunc) History() []PositionAdjusterAdjustP
 // PositionAdjusterAdjustPositionFuncCall is an object that describes an
 // invocation of method AdjustPosition on an instance of
 // MockPositionAdjuster.
-type PositionAdjusterAdjustPositionFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 string
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 client.Position
-	// Arg4 is the value of the 5th argument passed to this method
-	// invocation.
-	Arg4 bool
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 string
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 client.Position
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 bool
-	// Result3 is the value of the 4th result returned from this method
-	// invocation.
-	Result3 error
-}
+type PositionAdjusterAdjustPositionFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -311,12 +241,7 @@ func (c PositionAdjusterAdjustPositionFuncCall) Results() []interface{} {
 // PositionAdjusterAdjustRangeFunc describes the behavior when the
 // AdjustRange method of the parent MockPositionAdjuster instance is
 // invoked.
-type PositionAdjusterAdjustRangeFunc struct {
-	defaultHook func(context.Context, string, string, client.Range, bool) (string, client.Range, bool, error)
-	hooks       []func(context.Context, string, string, client.Range, bool) (string, client.Range, bool, error)
-	history     []PositionAdjusterAdjustRangeFuncCall
-	mutex       sync.Mutex
-}
+type PositionAdjusterAdjustRangeFunc struct { /* all structs must go */ }
 
 // AdjustRange delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -391,35 +316,7 @@ func (f *PositionAdjusterAdjustRangeFunc) History() []PositionAdjusterAdjustRang
 
 // PositionAdjusterAdjustRangeFuncCall is an object that describes an
 // invocation of method AdjustRange on an instance of MockPositionAdjuster.
-type PositionAdjusterAdjustRangeFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 string
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 client.Range
-	// Arg4 is the value of the 5th argument passed to this method
-	// invocation.
-	Arg4 bool
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 string
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 client.Range
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 bool
-	// Result3 is the value of the 4th result returned from this method
-	// invocation.
-	Result3 error
-}
+type PositionAdjusterAdjustRangeFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
diff --git a/enterprise/internal/codeintel/resolvers/mocks/mock_query.go b/enterprise/internal/codeintel/resolvers/mocks/mock_query.go
index a651693..42e912b 100644
--- a/enterprise/internal/codeintel/resolvers/mocks/mock_query.go
+++ b/enterprise/internal/codeintel/resolvers/mocks/mock_query.go
@@ -13,23 +13,7 @@ import (
 // (from the package
 // github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/resolvers)
 // used for unit testing.
-type MockQueryResolver struct {
-	// DefinitionsFunc is an instance of a mock function object controlling
-	// the behavior of the method Definitions.
-	DefinitionsFunc *QueryResolverDefinitionsFunc
-	// DiagnosticsFunc is an instance of a mock function object controlling
-	// the behavior of the method Diagnostics.
-	DiagnosticsFunc *QueryResolverDiagnosticsFunc
-	// HoverFunc is an instance of a mock function object controlling the
-	// behavior of the method Hover.
-	HoverFunc *QueryResolverHoverFunc
-	// RangesFunc is an instance of a mock function object controlling the
-	// behavior of the method Ranges.
-	RangesFunc *QueryResolverRangesFunc
-	// ReferencesFunc is an instance of a mock function object controlling
-	// the behavior of the method References.
-	ReferencesFunc *QueryResolverReferencesFunc
-}
+type MockQueryResolver struct { /* all structs must go */ }
 
 // NewMockQueryResolver creates a new mock of the QueryResolver interface.
 // All methods return zero values for all results, unless overwritten.
@@ -88,12 +72,7 @@ func NewMockQueryResolverFrom(i resolvers.QueryResolver) *MockQueryResolver {
 
 // QueryResolverDefinitionsFunc describes the behavior when the Definitions
 // method of the parent MockQueryResolver instance is invoked.
-type QueryResolverDefinitionsFunc struct {
-	defaultHook func(context.Context, int, int) ([]resolvers.AdjustedLocation, error)
-	hooks       []func(context.Context, int, int) ([]resolvers.AdjustedLocation, error)
-	history     []QueryResolverDefinitionsFuncCall
-	mutex       sync.Mutex
-}
+type QueryResolverDefinitionsFunc struct { /* all structs must go */ }
 
 // Definitions delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -168,23 +147,7 @@ func (f *QueryResolverDefinitionsFunc) History() []QueryResolverDefinitionsFuncC
 
 // QueryResolverDefinitionsFuncCall is an object that describes an
 // invocation of method Definitions on an instance of MockQueryResolver.
-type QueryResolverDefinitionsFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []resolvers.AdjustedLocation
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type QueryResolverDefinitionsFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -200,12 +163,7 @@ func (c QueryResolverDefinitionsFuncCall) Results() []interface{} {
 
 // QueryResolverDiagnosticsFunc describes the behavior when the Diagnostics
 // method of the parent MockQueryResolver instance is invoked.
-type QueryResolverDiagnosticsFunc struct {
-	defaultHook func(context.Context, int) ([]resolvers.AdjustedDiagnostic, int, error)
-	hooks       []func(context.Context, int) ([]resolvers.AdjustedDiagnostic, int, error)
-	history     []QueryResolverDiagnosticsFuncCall
-	mutex       sync.Mutex
-}
+type QueryResolverDiagnosticsFunc struct { /* all structs must go */ }
 
 // Diagnostics delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -280,23 +238,7 @@ func (f *QueryResolverDiagnosticsFunc) History() []QueryResolverDiagnosticsFuncC
 
 // QueryResolverDiagnosticsFuncCall is an object that describes an
 // invocation of method Diagnostics on an instance of MockQueryResolver.
-type QueryResolverDiagnosticsFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []resolvers.AdjustedDiagnostic
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 int
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type QueryResolverDiagnosticsFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -312,12 +254,7 @@ func (c QueryResolverDiagnosticsFuncCall) Results() []interface{} {
 
 // QueryResolverHoverFunc describes the behavior when the Hover method of
 // the parent MockQueryResolver instance is invoked.
-type QueryResolverHoverFunc struct {
-	defaultHook func(context.Context, int, int) (string, client.Range, bool, error)
-	hooks       []func(context.Context, int, int) (string, client.Range, bool, error)
-	history     []QueryResolverHoverFuncCall
-	mutex       sync.Mutex
-}
+type QueryResolverHoverFunc struct { /* all structs must go */ }
 
 // Hover delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -391,29 +328,7 @@ func (f *QueryResolverHoverFunc) History() []QueryResolverHoverFuncCall {
 
 // QueryResolverHoverFuncCall is an object that describes an invocation of
 // method Hover on an instance of MockQueryResolver.
-type QueryResolverHoverFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 string
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 client.Range
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 bool
-	// Result3 is the value of the 4th result returned from this method
-	// invocation.
-	Result3 error
-}
+type QueryResolverHoverFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -429,12 +344,7 @@ func (c QueryResolverHoverFuncCall) Results() []interface{} {
 
 // QueryResolverRangesFunc describes the behavior when the Ranges method of
 // the parent MockQueryResolver instance is invoked.
-type QueryResolverRangesFunc struct {
-	defaultHook func(context.Context, int, int) ([]resolvers.AdjustedCodeIntelligenceRange, error)
-	hooks       []func(context.Context, int, int) ([]resolvers.AdjustedCodeIntelligenceRange, error)
-	history     []QueryResolverRangesFuncCall
-	mutex       sync.Mutex
-}
+type QueryResolverRangesFunc struct { /* all structs must go */ }
 
 // Ranges delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -508,23 +418,7 @@ func (f *QueryResolverRangesFunc) History() []QueryResolverRangesFuncCall {
 
 // QueryResolverRangesFuncCall is an object that describes an invocation of
 // method Ranges on an instance of MockQueryResolver.
-type QueryResolverRangesFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []resolvers.AdjustedCodeIntelligenceRange
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type QueryResolverRangesFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -540,12 +434,7 @@ func (c QueryResolverRangesFuncCall) Results() []interface{} {
 
 // QueryResolverReferencesFunc describes the behavior when the References
 // method of the parent MockQueryResolver instance is invoked.
-type QueryResolverReferencesFunc struct {
-	defaultHook func(context.Context, int, int, int, string) ([]resolvers.AdjustedLocation, string, error)
-	hooks       []func(context.Context, int, int, int, string) ([]resolvers.AdjustedLocation, string, error)
-	history     []QueryResolverReferencesFuncCall
-	mutex       sync.Mutex
-}
+type QueryResolverReferencesFunc struct { /* all structs must go */ }
 
 // References delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -620,32 +509,7 @@ func (f *QueryResolverReferencesFunc) History() []QueryResolverReferencesFuncCal
 
 // QueryResolverReferencesFuncCall is an object that describes an invocation
 // of method References on an instance of MockQueryResolver.
-type QueryResolverReferencesFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 int
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 int
-	// Arg4 is the value of the 5th argument passed to this method
-	// invocation.
-	Arg4 string
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []resolvers.AdjustedLocation
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 string
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type QueryResolverReferencesFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
diff --git a/enterprise/internal/codeintel/resolvers/mocks/mock_resolver.go b/enterprise/internal/codeintel/resolvers/mocks/mock_resolver.go
index eab33bb..3d8b58d 100644
--- a/enterprise/internal/codeintel/resolvers/mocks/mock_resolver.go
+++ b/enterprise/internal/codeintel/resolvers/mocks/mock_resolver.go
@@ -14,29 +14,7 @@ import (
 // package
 // github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/resolvers)
 // used for unit testing.
-type MockResolver struct {
-	// DeleteIndexByIDFunc is an instance of a mock function object
-	// controlling the behavior of the method DeleteIndexByID.
-	DeleteIndexByIDFunc *ResolverDeleteIndexByIDFunc
-	// DeleteUploadByIDFunc is an instance of a mock function object
-	// controlling the behavior of the method DeleteUploadByID.
-	DeleteUploadByIDFunc *ResolverDeleteUploadByIDFunc
-	// GetIndexByIDFunc is an instance of a mock function object controlling
-	// the behavior of the method GetIndexByID.
-	GetIndexByIDFunc *ResolverGetIndexByIDFunc
-	// GetUploadByIDFunc is an instance of a mock function object
-	// controlling the behavior of the method GetUploadByID.
-	GetUploadByIDFunc *ResolverGetUploadByIDFunc
-	// IndexConnectionResolverFunc is an instance of a mock function object
-	// controlling the behavior of the method IndexConnectionResolver.
-	IndexConnectionResolverFunc *ResolverIndexConnectionResolverFunc
-	// QueryResolverFunc is an instance of a mock function object
-	// controlling the behavior of the method QueryResolver.
-	QueryResolverFunc *ResolverQueryResolverFunc
-	// UploadConnectionResolverFunc is an instance of a mock function object
-	// controlling the behavior of the method UploadConnectionResolver.
-	UploadConnectionResolverFunc *ResolverUploadConnectionResolverFunc
-}
+type MockResolver struct { /* all structs must go */ }
 
 // NewMockResolver creates a new mock of the Resolver interface. All methods
 // return zero values for all results, unless overwritten.
@@ -110,12 +88,7 @@ func NewMockResolverFrom(i resolvers.Resolver) *MockResolver {
 
 // ResolverDeleteIndexByIDFunc describes the behavior when the
 // DeleteIndexByID method of the parent MockResolver instance is invoked.
-type ResolverDeleteIndexByIDFunc struct {
-	defaultHook func(context.Context, int) error
-	hooks       []func(context.Context, int) error
-	history     []ResolverDeleteIndexByIDFuncCall
-	mutex       sync.Mutex
-}
+type ResolverDeleteIndexByIDFunc struct { /* all structs must go */ }
 
 // DeleteIndexByID delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -190,17 +163,7 @@ func (f *ResolverDeleteIndexByIDFunc) History() []ResolverDeleteIndexByIDFuncCal
 
 // ResolverDeleteIndexByIDFuncCall is an object that describes an invocation
 // of method DeleteIndexByID on an instance of MockResolver.
-type ResolverDeleteIndexByIDFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type ResolverDeleteIndexByIDFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -216,12 +179,7 @@ func (c ResolverDeleteIndexByIDFuncCall) Results() []interface{} {
 
 // ResolverDeleteUploadByIDFunc describes the behavior when the
 // DeleteUploadByID method of the parent MockResolver instance is invoked.
-type ResolverDeleteUploadByIDFunc struct {
-	defaultHook func(context.Context, int) error
-	hooks       []func(context.Context, int) error
-	history     []ResolverDeleteUploadByIDFuncCall
-	mutex       sync.Mutex
-}
+type ResolverDeleteUploadByIDFunc struct { /* all structs must go */ }
 
 // DeleteUploadByID delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -296,17 +254,7 @@ func (f *ResolverDeleteUploadByIDFunc) History() []ResolverDeleteUploadByIDFuncC
 
 // ResolverDeleteUploadByIDFuncCall is an object that describes an
 // invocation of method DeleteUploadByID on an instance of MockResolver.
-type ResolverDeleteUploadByIDFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type ResolverDeleteUploadByIDFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -322,12 +270,7 @@ func (c ResolverDeleteUploadByIDFuncCall) Results() []interface{} {
 
 // ResolverGetIndexByIDFunc describes the behavior when the GetIndexByID
 // method of the parent MockResolver instance is invoked.
-type ResolverGetIndexByIDFunc struct {
-	defaultHook func(context.Context, int) (store.Index, bool, error)
-	hooks       []func(context.Context, int) (store.Index, bool, error)
-	history     []ResolverGetIndexByIDFuncCall
-	mutex       sync.Mutex
-}
+type ResolverGetIndexByIDFunc struct { /* all structs must go */ }
 
 // GetIndexByID delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -402,23 +345,7 @@ func (f *ResolverGetIndexByIDFunc) History() []ResolverGetIndexByIDFuncCall {
 
 // ResolverGetIndexByIDFuncCall is an object that describes an invocation of
 // method GetIndexByID on an instance of MockResolver.
-type ResolverGetIndexByIDFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 store.Index
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 bool
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type ResolverGetIndexByIDFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -434,12 +361,7 @@ func (c ResolverGetIndexByIDFuncCall) Results() []interface{} {
 
 // ResolverGetUploadByIDFunc describes the behavior when the GetUploadByID
 // method of the parent MockResolver instance is invoked.
-type ResolverGetUploadByIDFunc struct {
-	defaultHook func(context.Context, int) (store.Upload, bool, error)
-	hooks       []func(context.Context, int) (store.Upload, bool, error)
-	history     []ResolverGetUploadByIDFuncCall
-	mutex       sync.Mutex
-}
+type ResolverGetUploadByIDFunc struct { /* all structs must go */ }
 
 // GetUploadByID delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -514,23 +436,7 @@ func (f *ResolverGetUploadByIDFunc) History() []ResolverGetUploadByIDFuncCall {
 
 // ResolverGetUploadByIDFuncCall is an object that describes an invocation
 // of method GetUploadByID on an instance of MockResolver.
-type ResolverGetUploadByIDFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 store.Upload
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 bool
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type ResolverGetUploadByIDFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -547,12 +453,7 @@ func (c ResolverGetUploadByIDFuncCall) Results() []interface{} {
 // ResolverIndexConnectionResolverFunc describes the behavior when the
 // IndexConnectionResolver method of the parent MockResolver instance is
 // invoked.
-type ResolverIndexConnectionResolverFunc struct {
-	defaultHook func(store.GetIndexesOptions) *resolvers.IndexesResolver
-	hooks       []func(store.GetIndexesOptions) *resolvers.IndexesResolver
-	history     []ResolverIndexConnectionResolverFuncCall
-	mutex       sync.Mutex
-}
+type ResolverIndexConnectionResolverFunc struct { /* all structs must go */ }
 
 // IndexConnectionResolver delegates to the next hook function in the queue
 // and stores the parameter and result values of this invocation.
@@ -629,14 +530,7 @@ func (f *ResolverIndexConnectionResolverFunc) History() []ResolverIndexConnectio
 // ResolverIndexConnectionResolverFuncCall is an object that describes an
 // invocation of method IndexConnectionResolver on an instance of
 // MockResolver.
-type ResolverIndexConnectionResolverFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 store.GetIndexesOptions
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 *resolvers.IndexesResolver
-}
+type ResolverIndexConnectionResolverFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -652,12 +546,7 @@ func (c ResolverIndexConnectionResolverFuncCall) Results() []interface{} {
 
 // ResolverQueryResolverFunc describes the behavior when the QueryResolver
 // method of the parent MockResolver instance is invoked.
-type ResolverQueryResolverFunc struct {
-	defaultHook func(context.Context, *graphqlbackend.GitBlobLSIFDataArgs) (resolvers.QueryResolver, error)
-	hooks       []func(context.Context, *graphqlbackend.GitBlobLSIFDataArgs) (resolvers.QueryResolver, error)
-	history     []ResolverQueryResolverFuncCall
-	mutex       sync.Mutex
-}
+type ResolverQueryResolverFunc struct { /* all structs must go */ }
 
 // QueryResolver delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -732,20 +621,7 @@ func (f *ResolverQueryResolverFunc) History() []ResolverQueryResolverFuncCall {
 
 // ResolverQueryResolverFuncCall is an object that describes an invocation
 // of method QueryResolver on an instance of MockResolver.
-type ResolverQueryResolverFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 *graphqlbackend.GitBlobLSIFDataArgs
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 resolvers.QueryResolver
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type ResolverQueryResolverFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -762,12 +638,7 @@ func (c ResolverQueryResolverFuncCall) Results() []interface{} {
 // ResolverUploadConnectionResolverFunc describes the behavior when the
 // UploadConnectionResolver method of the parent MockResolver instance is
 // invoked.
-type ResolverUploadConnectionResolverFunc struct {
-	defaultHook func(store.GetUploadsOptions) *resolvers.UploadsResolver
-	hooks       []func(store.GetUploadsOptions) *resolvers.UploadsResolver
-	history     []ResolverUploadConnectionResolverFuncCall
-	mutex       sync.Mutex
-}
+type ResolverUploadConnectionResolverFunc struct { /* all structs must go */ }
 
 // UploadConnectionResolver delegates to the next hook function in the queue
 // and stores the parameter and result values of this invocation.
@@ -844,14 +715,7 @@ func (f *ResolverUploadConnectionResolverFunc) History() []ResolverUploadConnect
 // ResolverUploadConnectionResolverFuncCall is an object that describes an
 // invocation of method UploadConnectionResolver on an instance of
 // MockResolver.
-type ResolverUploadConnectionResolverFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 store.GetUploadsOptions
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 *resolvers.UploadsResolver
-}
+type ResolverUploadConnectionResolverFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
diff --git a/enterprise/internal/codeintel/resolvers/position.go b/enterprise/internal/codeintel/resolvers/position.go
index 5e2248a..93e1559 100644
--- a/enterprise/internal/codeintel/resolvers/position.go
+++ b/enterprise/internal/codeintel/resolvers/position.go
@@ -35,11 +35,7 @@ type PositionAdjuster interface {
 	AdjustRange(ctx context.Context, commit, path string, rx bundles.Range, reverse bool) (string, bundles.Range, bool, error)
 }
 
-type positionAdjuster struct {
-	repo      *types.Repo
-	commit    string
-	hunkCache HunkCache
-}
+type positionAdjuster struct { /* all structs must go */ }
 
 // NewPositionAdjuster creates a new PositionAdjuster with the given repository and source commit.
 func NewPositionAdjuster(repo *types.Repo, commit string, hunkCache HunkCache) PositionAdjuster {
diff --git a/enterprise/internal/codeintel/resolvers/position_test.go b/enterprise/internal/codeintel/resolvers/position_test.go
index ac724fd..c8f11bd 100644
--- a/enterprise/internal/codeintel/resolvers/position_test.go
+++ b/enterprise/internal/codeintel/resolvers/position_test.go
@@ -235,14 +235,7 @@ func TestAdjustRangeReverse(t *testing.T) {
 	}
 }
 
-type adjustPositionTestCase struct {
-	diff         string // The git diff output
-	diffName     string // The git diff output name
-	description  string // The description of the test
-	line         int    // The target line (one-indexed)
-	expectedOk   bool   // Whether the operation should succeed
-	expectedLine int    // The expected adjusted line (one-indexed)
-}
+type adjustPositionTestCase struct { /* all structs must go */ }
 
 // hugoDiff is a diff from github.com/gohugoio/hugo generated via the following command.
 // git diff 8947c3fa0beec021e14b3f8040857335e1ecd473 3e9db2ad951dbb1000cd0f8f25e4a95445046679 -- resources/image.go
diff --git a/enterprise/internal/codeintel/resolvers/query.go b/enterprise/internal/codeintel/resolvers/query.go
index 8109e3f..bfe7575 100644
--- a/enterprise/internal/codeintel/resolvers/query.go
+++ b/enterprise/internal/codeintel/resolvers/query.go
@@ -11,30 +11,15 @@ import (
 
 // AdjustedLocation is similar to a codeintelapi.ResolvedLocation, but with fields denoting
 // the commit and range adjusted for the target commit (when the requested commit is not indexed).
-type AdjustedLocation struct {
-	Dump           store.Dump
-	Path           string
-	AdjustedCommit string
-	AdjustedRange  bundles.Range
-}
+type AdjustedLocation struct { /* all structs must go */ }
 
 // AdjustedDiagnostic is similar to a codeintelapi.ResolvedDiagnostic, but with fields denoting
 // the commit and range adjusted for the target commit (when the requested commit is not indexed).
-type AdjustedDiagnostic struct {
-	bundles.Diagnostic
-	Dump           store.Dump
-	AdjustedCommit string
-	AdjustedRange  bundles.Range
-}
+type AdjustedDiagnostic struct { /* all structs must go */ }
 
 // AdjustedCodeIntelligenceRange is similar to a codeintelapi.CodeIntelligenceRange,
 // but with adjusted definition and reference locations.
-type AdjustedCodeIntelligenceRange struct {
-	Range       bundles.Range
-	Definitions []AdjustedLocation
-	References  []AdjustedLocation
-	HoverText   string
-}
+type AdjustedCodeIntelligenceRange struct { /* all structs must go */ }
 
 // QueryResolver is the main interface to bundle-related operations exposed to the GraphQL API. This
 // resolver consolidates the logic for bundle operations and is not itself concerned with GraphQL/API
@@ -48,16 +33,7 @@ type QueryResolver interface {
 	Diagnostics(ctx context.Context, limit int) ([]AdjustedDiagnostic, int, error)
 }
 
-type queryResolver struct {
-	store               store.Store
-	bundleManagerClient bundles.BundleManagerClient
-	codeIntelAPI        codeintelapi.CodeIntelAPI
-	positionAdjuster    PositionAdjuster
-	repositoryID        int
-	commit              string
-	path                string
-	uploads             []store.Dump
-}
+type queryResolver struct { /* all structs must go */ }
 
 // NewQueryResolver create a new query resolver with the given services. The methods of this
 // struct return queries for the given repository, commit, and path, and will query only the
diff --git a/enterprise/internal/codeintel/resolvers/resolver.go b/enterprise/internal/codeintel/resolvers/resolver.go
index 4da2043..4ef90ac 100644
--- a/enterprise/internal/codeintel/resolvers/resolver.go
+++ b/enterprise/internal/codeintel/resolvers/resolver.go
@@ -26,12 +26,7 @@ type Resolver interface {
 	QueryResolver(ctx context.Context, args *gql.GitBlobLSIFDataArgs) (QueryResolver, error)
 }
 
-type resolver struct {
-	store               store.Store
-	bundleManagerClient bundles.BundleManagerClient
-	codeIntelAPI        codeintelapi.CodeIntelAPI
-	hunkCache           HunkCache
-}
+type resolver struct { /* all structs must go */ }
 
 // NewResolver creates a new resolver with the given services.
 func NewResolver(store store.Store, bundleManagerClient bundles.BundleManagerClient, codeIntelAPI codeintelapi.CodeIntelAPI, hunkCache HunkCache) Resolver {
diff --git a/enterprise/internal/codeintel/resolvers/uploads.go b/enterprise/internal/codeintel/resolvers/uploads.go
index 0cc6a9e..993b555 100644
--- a/enterprise/internal/codeintel/resolvers/uploads.go
+++ b/enterprise/internal/codeintel/resolvers/uploads.go
@@ -9,16 +9,7 @@ import (
 
 // UploadsResolver wraps store.GetUploads so that the underlying function can be
 // invoked lazily and its results memoized.
-type UploadsResolver struct {
-	store store.Store
-	opts  store.GetUploadsOptions
-	once  sync.Once
-	//
-	Uploads    []store.Upload
-	TotalCount int
-	NextOffset *int
-	err        error
-}
+type UploadsResolver struct { /* all structs must go */ }
 
 // NewUploadsResolver creates a new UploadsResolver which wil invoke store.GetUploads
 // with the given options.
diff --git a/enterprise/internal/codeintel/store/commit_graph.go b/enterprise/internal/codeintel/store/commit_graph.go
index 06857d7..db84528 100644
--- a/enterprise/internal/codeintel/store/commit_graph.go
+++ b/enterprise/internal/codeintel/store/commit_graph.go
@@ -6,14 +6,7 @@ import (
 
 // UploadMeta contains the subset of fields from the lsif_uploads table that are used
 // to determine visibility of an upload from a particular commit.
-type UploadMeta struct {
-	UploadID int
-	Root     string
-	Indexer  string
-
-	// Distance is the number of commits between the reference to definition commits.
-	Distance int
-}
+type UploadMeta struct { /* all structs must go */ }
 
 // calculateVisibleUploads transforms the given commit graph and the set of LSIF uploads
 // defined on each commit with LSIF upload into a map from a commit to the set of uploads
diff --git a/enterprise/internal/codeintel/store/commits_test.go b/enterprise/internal/codeintel/store/commits_test.go
index 7f76033..0f2b537 100644
--- a/enterprise/internal/codeintel/store/commits_test.go
+++ b/enterprise/internal/codeintel/store/commits_test.go
@@ -17,11 +17,7 @@ func TestHasCommit(t *testing.T) {
 	dbtesting.SetupGlobalTestDB(t)
 	store := rawTestStore()
 
-	testCases := []struct {
-		repositoryID int
-		commit       string
-		exists       bool
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{50, makeCommit(1), true},
 		{50, makeCommit(2), false},
 		{51, makeCommit(1), false},
@@ -77,10 +73,7 @@ func TestUpdateCommits(t *testing.T) {
 	}
 	defer rows.Close()
 
-	type commitPair struct {
-		Commit       string
-		ParentCommit *string
-	}
+	type commitPair struct { /* all structs must go */ }
 
 	var commitPairs []commitPair
 	for rows.Next() {
@@ -142,10 +135,7 @@ func TestUpdateCommitsWithOverlap(t *testing.T) {
 	}
 	defer rows.Close()
 
-	type commitPair struct {
-		Commit       string
-		ParentCommit *string
-	}
+	type commitPair struct { /* all structs must go */ }
 
 	var commitPairs []commitPair
 	for rows.Next() {
diff --git a/enterprise/internal/codeintel/store/dumps.go b/enterprise/internal/codeintel/store/dumps.go
index 99ef607..5404473 100644
--- a/enterprise/internal/codeintel/store/dumps.go
+++ b/enterprise/internal/codeintel/store/dumps.go
@@ -10,22 +10,7 @@ import (
 
 // Dump is a subset of the lsif_uploads table (queried via the lsif_dumps_with_repository_name view)
 // and stores only processed records.
-type Dump struct {
-	ID             int        `json:"id"`
-	Commit         string     `json:"commit"`
-	Root           string     `json:"root"`
-	VisibleAtTip   bool       `json:"visibleAtTip"`
-	UploadedAt     time.Time  `json:"uploadedAt"`
-	State          string     `json:"state"`
-	FailureMessage *string    `json:"failureMessage"`
-	StartedAt      *time.Time `json:"startedAt"`
-	FinishedAt     *time.Time `json:"finishedAt"`
-	ProcessAfter   *time.Time `json:"processAfter"`
-	NumResets      int        `json:"numResets"`
-	RepositoryID   int        `json:"repositoryId"`
-	RepositoryName string     `json:"repositoryName"`
-	Indexer        string     `json:"indexer"`
-}
+type Dump struct { /* all structs must go */ }
 
 // scanDumps scans a slice of dumps from the return value of `*store.query`.
 func scanDumps(rows *sql.Rows, queryErr error) (_ []Dump, err error) {
diff --git a/enterprise/internal/codeintel/store/dumps_test.go b/enterprise/internal/codeintel/store/dumps_test.go
index 81de711..aade7d4 100644
--- a/enterprise/internal/codeintel/store/dumps_test.go
+++ b/enterprise/internal/codeintel/store/dumps_test.go
@@ -406,14 +406,7 @@ func TestDeleteOldestDump(t *testing.T) {
 	}
 }
 
-type FindClosestDumpsTestCase struct {
-	commit              string
-	file                string
-	rootMustEnclosePath bool
-	indexer             string
-	anyOfIDs            []int
-	allOfIDs            []int
-}
+type FindClosestDumpsTestCase struct { /* all structs must go */ }
 
 func testFindClosestDumps(t *testing.T, store Store, testCases []FindClosestDumpsTestCase) {
 	for _, testCase := range testCases {
@@ -726,11 +719,7 @@ func TestDeleteOverlappingDumpsNoMatches(t *testing.T) {
 		Indexer: "lsif-go",
 	})
 
-	testCases := []struct {
-		commit  string
-		root    string
-		indexer string
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{makeCommit(2), "cmd/", "lsif-go"},
 		{makeCommit(1), "cmds/", "lsif-go"},
 		{makeCommit(1), "cmd/", "lsif-tsc"},
diff --git a/enterprise/internal/codeintel/store/indexable_repos.go b/enterprise/internal/codeintel/store/indexable_repos.go
index 2c4b1ae..adadc70 100644
--- a/enterprise/internal/codeintel/store/indexable_repos.go
+++ b/enterprise/internal/codeintel/store/indexable_repos.go
@@ -9,33 +9,14 @@ import (
 )
 
 // IndexableRepository marks a repository for eligibility to be index automatically.
-type IndexableRepository struct {
-	RepositoryID        int
-	SearchCount         int
-	PreciseCount        int
-	LastIndexEnqueuedAt *time.Time
-	Enabled             *bool
-}
+type IndexableRepository struct { /* all structs must go */ }
 
 // UpdateableIndexableRepository is a version of IndexableRepository with pointer
 // fields used to indicate which values should be updated on an upsert operation.
-type UpdateableIndexableRepository struct {
-	RepositoryID        int
-	SearchCount         *int
-	PreciseCount        *int
-	LastIndexEnqueuedAt *time.Time
-	Enabled             *bool
-}
+type UpdateableIndexableRepository struct { /* all structs must go */ }
 
 // IndexableRepositoryQueryOptions controls the result filter for IndexableRepositories.
-type IndexableRepositoryQueryOptions struct {
-	Limit                       int
-	MinimumSearchCount          int           // number of events needed to begin indexing
-	MinimumSearchRatio          float64       // ratio of search/total events needed to begin indexing
-	MinimumPreciseCount         int           // number of events needed to continue indexing
-	MinimumTimeSinceLastEnqueue time.Duration // time between enqueues
-	now                         time.Time
-}
+type IndexableRepositoryQueryOptions struct { /* all structs must go */ }
 
 // scanIndexableRepositories scans a slice of indexable repositories from the return value of `*store.query`.
 func scanIndexableRepositories(rows *sql.Rows, queryErr error) (_ []IndexableRepository, err error) {
diff --git a/enterprise/internal/codeintel/store/indexes.go b/enterprise/internal/codeintel/store/indexes.go
index e6742ee..57539f4 100644
--- a/enterprise/internal/codeintel/store/indexes.go
+++ b/enterprise/internal/codeintel/store/indexes.go
@@ -11,20 +11,7 @@ import (
 
 // Index is a subset of the lsif_indexes table and stores both processed and unprocessed
 // records.
-type Index struct {
-	ID             int        `json:"id"`
-	Commit         string     `json:"commit"`
-	QueuedAt       time.Time  `json:"queuedAt"`
-	State          string     `json:"state"`
-	FailureMessage *string    `json:"failureMessage"`
-	StartedAt      *time.Time `json:"startedAt"`
-	FinishedAt     *time.Time `json:"finishedAt"`
-	ProcessAfter   *time.Time `json:"processAfter"`
-	NumResets      int        `json:"numResets"`
-	RepositoryID   int        `json:"repositoryId"`
-	RepositoryName string     `json:"repositoryName"`
-	Rank           *int       `json:"placeInQueue"`
-}
+type Index struct { /* all structs must go */ }
 
 func (i Index) RecordID() int {
 	return i.ID
@@ -109,13 +96,7 @@ func (s *store) GetIndexByID(ctx context.Context, id int) (Index, bool, error) {
 	`, id)))
 }
 
-type GetIndexesOptions struct {
-	RepositoryID int
-	State        string
-	Term         string
-	Limit        int
-	Offset       int
-}
+type GetIndexesOptions struct { /* all structs must go */ }
 
 // GetIndexes returns a list of indexes and the total count of records matching the given conditions.
 func (s *store) GetIndexes(ctx context.Context, opts GetIndexesOptions) (_ []Index, _ int, err error) {
diff --git a/enterprise/internal/codeintel/store/indexes_test.go b/enterprise/internal/codeintel/store/indexes_test.go
index bafc6d9..0dadc8d 100644
--- a/enterprise/internal/codeintel/store/indexes_test.go
+++ b/enterprise/internal/codeintel/store/indexes_test.go
@@ -137,12 +137,7 @@ func TestGetIndexes(t *testing.T) {
 		Index{ID: 10, QueuedAt: t10},
 	)
 
-	testCases := []struct {
-		repositoryID int
-		state        string
-		term         string
-		expectedIDs  []int
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{expectedIDs: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}},
 		{repositoryID: 50, expectedIDs: []int{1, 2, 3, 5, 7, 8, 9, 10}},
 		{state: "completed", expectedIDs: []int{7, 8, 10}},
@@ -234,11 +229,7 @@ func TestIsQueued(t *testing.T) {
 	insertIndexes(t, dbconn.Global, Index{ID: 1, RepositoryID: 1, Commit: makeCommit(1)})
 	insertUploads(t, dbconn.Global, Upload{ID: 2, RepositoryID: 2, Commit: makeCommit(2)})
 
-	testCases := []struct {
-		repositoryID int
-		commit       string
-		expected     bool
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{1, makeCommit(1), true},
 		{1, makeCommit(2), false},
 		{2, makeCommit(1), false},
diff --git a/enterprise/internal/codeintel/store/mocks/mock_reference_pager.go b/enterprise/internal/codeintel/store/mocks/mock_reference_pager.go
index 08a2091..2df93ae 100644
--- a/enterprise/internal/codeintel/store/mocks/mock_reference_pager.go
+++ b/enterprise/internal/codeintel/store/mocks/mock_reference_pager.go
@@ -13,14 +13,7 @@ import (
 // interface (from the package
 // github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/store)
 // used for unit testing.
-type MockReferencePager struct {
-	// DoneFunc is an instance of a mock function object controlling the
-	// behavior of the method Done.
-	DoneFunc *ReferencePagerDoneFunc
-	// PageFromOffsetFunc is an instance of a mock function object
-	// controlling the behavior of the method PageFromOffset.
-	PageFromOffsetFunc *ReferencePagerPageFromOffsetFunc
-}
+type MockReferencePager struct { /* all structs must go */ }
 
 // NewMockReferencePager creates a new mock of the ReferencePager interface.
 // All methods return zero values for all results, unless overwritten.
@@ -55,12 +48,7 @@ func NewMockReferencePagerFrom(i store.ReferencePager) *MockReferencePager {
 
 // ReferencePagerDoneFunc describes the behavior when the Done method of the
 // parent MockReferencePager instance is invoked.
-type ReferencePagerDoneFunc struct {
-	defaultHook func(error) error
-	hooks       []func(error) error
-	history     []ReferencePagerDoneFuncCall
-	mutex       sync.Mutex
-}
+type ReferencePagerDoneFunc struct { /* all structs must go */ }
 
 // Done delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -135,14 +123,7 @@ func (f *ReferencePagerDoneFunc) History() []ReferencePagerDoneFuncCall {
 
 // ReferencePagerDoneFuncCall is an object that describes an invocation of
 // method Done on an instance of MockReferencePager.
-type ReferencePagerDoneFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 error
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type ReferencePagerDoneFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -159,12 +140,7 @@ func (c ReferencePagerDoneFuncCall) Results() []interface{} {
 // ReferencePagerPageFromOffsetFunc describes the behavior when the
 // PageFromOffset method of the parent MockReferencePager instance is
 // invoked.
-type ReferencePagerPageFromOffsetFunc struct {
-	defaultHook func(context.Context, int) ([]types.PackageReference, error)
-	hooks       []func(context.Context, int) ([]types.PackageReference, error)
-	history     []ReferencePagerPageFromOffsetFuncCall
-	mutex       sync.Mutex
-}
+type ReferencePagerPageFromOffsetFunc struct { /* all structs must go */ }
 
 // PageFromOffset delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -239,20 +215,7 @@ func (f *ReferencePagerPageFromOffsetFunc) History() []ReferencePagerPageFromOff
 
 // ReferencePagerPageFromOffsetFuncCall is an object that describes an
 // invocation of method PageFromOffset on an instance of MockReferencePager.
-type ReferencePagerPageFromOffsetFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []types.PackageReference
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type ReferencePagerPageFromOffsetFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
diff --git a/enterprise/internal/codeintel/store/mocks/mock_store.go b/enterprise/internal/codeintel/store/mocks/mock_store.go
index 88b01df..23b9538 100644
--- a/enterprise/internal/codeintel/store/mocks/mock_store.go
+++ b/enterprise/internal/codeintel/store/mocks/mock_store.go
@@ -15,157 +15,7 @@ import (
 // package
 // github.com/sourcegraph/sourcegraph/enterprise/internal/codeintel/store)
 // used for unit testing.
-type MockStore struct {
-	// AddUploadPartFunc is an instance of a mock function object
-	// controlling the behavior of the method AddUploadPart.
-	AddUploadPartFunc *StoreAddUploadPartFunc
-	// DeleteIndexByIDFunc is an instance of a mock function object
-	// controlling the behavior of the method DeleteIndexByID.
-	DeleteIndexByIDFunc *StoreDeleteIndexByIDFunc
-	// DeleteIndexesWithoutRepositoryFunc is an instance of a mock function
-	// object controlling the behavior of the method
-	// DeleteIndexesWithoutRepository.
-	DeleteIndexesWithoutRepositoryFunc *StoreDeleteIndexesWithoutRepositoryFunc
-	// DeleteOldestDumpFunc is an instance of a mock function object
-	// controlling the behavior of the method DeleteOldestDump.
-	DeleteOldestDumpFunc *StoreDeleteOldestDumpFunc
-	// DeleteOverlappingDumpsFunc is an instance of a mock function object
-	// controlling the behavior of the method DeleteOverlappingDumps.
-	DeleteOverlappingDumpsFunc *StoreDeleteOverlappingDumpsFunc
-	// DeleteUploadByIDFunc is an instance of a mock function object
-	// controlling the behavior of the method DeleteUploadByID.
-	DeleteUploadByIDFunc *StoreDeleteUploadByIDFunc
-	// DeleteUploadsWithoutRepositoryFunc is an instance of a mock function
-	// object controlling the behavior of the method
-	// DeleteUploadsWithoutRepository.
-	DeleteUploadsWithoutRepositoryFunc *StoreDeleteUploadsWithoutRepositoryFunc
-	// DequeueFunc is an instance of a mock function object controlling the
-	// behavior of the method Dequeue.
-	DequeueFunc *StoreDequeueFunc
-	// DequeueIndexFunc is an instance of a mock function object controlling
-	// the behavior of the method DequeueIndex.
-	DequeueIndexFunc *StoreDequeueIndexFunc
-	// DoneFunc is an instance of a mock function object controlling the
-	// behavior of the method Done.
-	DoneFunc *StoreDoneFunc
-	// FindClosestDumpsFunc is an instance of a mock function object
-	// controlling the behavior of the method FindClosestDumps.
-	FindClosestDumpsFunc *StoreFindClosestDumpsFunc
-	// GetDumpByIDFunc is an instance of a mock function object controlling
-	// the behavior of the method GetDumpByID.
-	GetDumpByIDFunc *StoreGetDumpByIDFunc
-	// GetIndexByIDFunc is an instance of a mock function object controlling
-	// the behavior of the method GetIndexByID.
-	GetIndexByIDFunc *StoreGetIndexByIDFunc
-	// GetIndexesFunc is an instance of a mock function object controlling
-	// the behavior of the method GetIndexes.
-	GetIndexesFunc *StoreGetIndexesFunc
-	// GetPackageFunc is an instance of a mock function object controlling
-	// the behavior of the method GetPackage.
-	GetPackageFunc *StoreGetPackageFunc
-	// GetStatesFunc is an instance of a mock function object controlling
-	// the behavior of the method GetStates.
-	GetStatesFunc *StoreGetStatesFunc
-	// GetUploadByIDFunc is an instance of a mock function object
-	// controlling the behavior of the method GetUploadByID.
-	GetUploadByIDFunc *StoreGetUploadByIDFunc
-	// GetUploadsFunc is an instance of a mock function object controlling
-	// the behavior of the method GetUploads.
-	GetUploadsFunc *StoreGetUploadsFunc
-	// HandleFunc is an instance of a mock function object controlling the
-	// behavior of the method Handle.
-	HandleFunc *StoreHandleFunc
-	// HasCommitFunc is an instance of a mock function object controlling
-	// the behavior of the method HasCommit.
-	HasCommitFunc *StoreHasCommitFunc
-	// IndexQueueSizeFunc is an instance of a mock function object
-	// controlling the behavior of the method IndexQueueSize.
-	IndexQueueSizeFunc *StoreIndexQueueSizeFunc
-	// IndexableRepositoriesFunc is an instance of a mock function object
-	// controlling the behavior of the method IndexableRepositories.
-	IndexableRepositoriesFunc *StoreIndexableRepositoriesFunc
-	// InsertIndexFunc is an instance of a mock function object controlling
-	// the behavior of the method InsertIndex.
-	InsertIndexFunc *StoreInsertIndexFunc
-	// InsertUploadFunc is an instance of a mock function object controlling
-	// the behavior of the method InsertUpload.
-	InsertUploadFunc *StoreInsertUploadFunc
-	// IsQueuedFunc is an instance of a mock function object controlling the
-	// behavior of the method IsQueued.
-	IsQueuedFunc *StoreIsQueuedFunc
-	// LockFunc is an instance of a mock function object controlling the
-	// behavior of the method Lock.
-	LockFunc *StoreLockFunc
-	// MarkCompleteFunc is an instance of a mock function object controlling
-	// the behavior of the method MarkComplete.
-	MarkCompleteFunc *StoreMarkCompleteFunc
-	// MarkErroredFunc is an instance of a mock function object controlling
-	// the behavior of the method MarkErrored.
-	MarkErroredFunc *StoreMarkErroredFunc
-	// MarkIndexCompleteFunc is an instance of a mock function object
-	// controlling the behavior of the method MarkIndexComplete.
-	MarkIndexCompleteFunc *StoreMarkIndexCompleteFunc
-	// MarkIndexErroredFunc is an instance of a mock function object
-	// controlling the behavior of the method MarkIndexErrored.
-	MarkIndexErroredFunc *StoreMarkIndexErroredFunc
-	// MarkQueuedFunc is an instance of a mock function object controlling
-	// the behavior of the method MarkQueued.
-	MarkQueuedFunc *StoreMarkQueuedFunc
-	// PackageReferencePagerFunc is an instance of a mock function object
-	// controlling the behavior of the method PackageReferencePager.
-	PackageReferencePagerFunc *StorePackageReferencePagerFunc
-	// QueueSizeFunc is an instance of a mock function object controlling
-	// the behavior of the method QueueSize.
-	QueueSizeFunc *StoreQueueSizeFunc
-	// RepoNameFunc is an instance of a mock function object controlling the
-	// behavior of the method RepoName.
-	RepoNameFunc *StoreRepoNameFunc
-	// RepoUsageStatisticsFunc is an instance of a mock function object
-	// controlling the behavior of the method RepoUsageStatistics.
-	RepoUsageStatisticsFunc *StoreRepoUsageStatisticsFunc
-	// RequeueFunc is an instance of a mock function object controlling the
-	// behavior of the method Requeue.
-	RequeueFunc *StoreRequeueFunc
-	// RequeueIndexFunc is an instance of a mock function object controlling
-	// the behavior of the method RequeueIndex.
-	RequeueIndexFunc *StoreRequeueIndexFunc
-	// ResetIndexableRepositoriesFunc is an instance of a mock function
-	// object controlling the behavior of the method
-	// ResetIndexableRepositories.
-	ResetIndexableRepositoriesFunc *StoreResetIndexableRepositoriesFunc
-	// ResetStalledFunc is an instance of a mock function object controlling
-	// the behavior of the method ResetStalled.
-	ResetStalledFunc *StoreResetStalledFunc
-	// ResetStalledIndexesFunc is an instance of a mock function object
-	// controlling the behavior of the method ResetStalledIndexes.
-	ResetStalledIndexesFunc *StoreResetStalledIndexesFunc
-	// SameRepoPagerFunc is an instance of a mock function object
-	// controlling the behavior of the method SameRepoPager.
-	SameRepoPagerFunc *StoreSameRepoPagerFunc
-	// TransactFunc is an instance of a mock function object controlling the
-	// behavior of the method Transact.
-	TransactFunc *StoreTransactFunc
-	// UpdateCommitsFunc is an instance of a mock function object
-	// controlling the behavior of the method UpdateCommits.
-	UpdateCommitsFunc *StoreUpdateCommitsFunc
-	// UpdateDumpsVisibleFromTipFunc is an instance of a mock function
-	// object controlling the behavior of the method
-	// UpdateDumpsVisibleFromTip.
-	UpdateDumpsVisibleFromTipFunc *StoreUpdateDumpsVisibleFromTipFunc
-	// UpdateIndexableRepositoryFunc is an instance of a mock function
-	// object controlling the behavior of the method
-	// UpdateIndexableRepository.
-	UpdateIndexableRepositoryFunc *StoreUpdateIndexableRepositoryFunc
-	// UpdatePackageReferencesFunc is an instance of a mock function object
-	// controlling the behavior of the method UpdatePackageReferences.
-	UpdatePackageReferencesFunc *StoreUpdatePackageReferencesFunc
-	// UpdatePackagesFunc is an instance of a mock function object
-	// controlling the behavior of the method UpdatePackages.
-	UpdatePackagesFunc *StoreUpdatePackagesFunc
-	// WithFunc is an instance of a mock function object controlling the
-	// behavior of the method With.
-	WithFunc *StoreWithFunc
-}
+type MockStore struct { /* all structs must go */ }
 
 // NewMockStore creates a new mock of the Store interface. All methods
 // return zero values for all results, unless overwritten.
@@ -567,12 +417,7 @@ func NewMockStoreFrom(i store.Store) *MockStore {
 
 // StoreAddUploadPartFunc describes the behavior when the AddUploadPart
 // method of the parent MockStore instance is invoked.
-type StoreAddUploadPartFunc struct {
-	defaultHook func(context.Context, int, int) error
-	hooks       []func(context.Context, int, int) error
-	history     []StoreAddUploadPartFuncCall
-	mutex       sync.Mutex
-}
+type StoreAddUploadPartFunc struct { /* all structs must go */ }
 
 // AddUploadPart delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -646,20 +491,7 @@ func (f *StoreAddUploadPartFunc) History() []StoreAddUploadPartFuncCall {
 
 // StoreAddUploadPartFuncCall is an object that describes an invocation of
 // method AddUploadPart on an instance of MockStore.
-type StoreAddUploadPartFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type StoreAddUploadPartFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -675,12 +507,7 @@ func (c StoreAddUploadPartFuncCall) Results() []interface{} {
 
 // StoreDeleteIndexByIDFunc describes the behavior when the DeleteIndexByID
 // method of the parent MockStore instance is invoked.
-type StoreDeleteIndexByIDFunc struct {
-	defaultHook func(context.Context, int) (bool, error)
-	hooks       []func(context.Context, int) (bool, error)
-	history     []StoreDeleteIndexByIDFuncCall
-	mutex       sync.Mutex
-}
+type StoreDeleteIndexByIDFunc struct { /* all structs must go */ }
 
 // DeleteIndexByID delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -755,20 +582,7 @@ func (f *StoreDeleteIndexByIDFunc) History() []StoreDeleteIndexByIDFuncCall {
 
 // StoreDeleteIndexByIDFuncCall is an object that describes an invocation of
 // method DeleteIndexByID on an instance of MockStore.
-type StoreDeleteIndexByIDFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 bool
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type StoreDeleteIndexByIDFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -785,12 +599,7 @@ func (c StoreDeleteIndexByIDFuncCall) Results() []interface{} {
 // StoreDeleteIndexesWithoutRepositoryFunc describes the behavior when the
 // DeleteIndexesWithoutRepository method of the parent MockStore instance is
 // invoked.
-type StoreDeleteIndexesWithoutRepositoryFunc struct {
-	defaultHook func(context.Context, time.Time) (map[int]int, error)
-	hooks       []func(context.Context, time.Time) (map[int]int, error)
-	history     []StoreDeleteIndexesWithoutRepositoryFuncCall
-	mutex       sync.Mutex
-}
+type StoreDeleteIndexesWithoutRepositoryFunc struct { /* all structs must go */ }
 
 // DeleteIndexesWithoutRepository delegates to the next hook function in the
 // queue and stores the parameter and result values of this invocation.
@@ -867,20 +676,7 @@ func (f *StoreDeleteIndexesWithoutRepositoryFunc) History() []StoreDeleteIndexes
 // StoreDeleteIndexesWithoutRepositoryFuncCall is an object that describes
 // an invocation of method DeleteIndexesWithoutRepository on an instance of
 // MockStore.
-type StoreDeleteIndexesWithoutRepositoryFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 time.Time
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 map[int]int
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type StoreDeleteIndexesWithoutRepositoryFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -896,12 +692,7 @@ func (c StoreDeleteIndexesWithoutRepositoryFuncCall) Results() []interface{} {
 
 // StoreDeleteOldestDumpFunc describes the behavior when the
 // DeleteOldestDump method of the parent MockStore instance is invoked.
-type StoreDeleteOldestDumpFunc struct {
-	defaultHook func(context.Context) (int, bool, error)
-	hooks       []func(context.Context) (int, bool, error)
-	history     []StoreDeleteOldestDumpFuncCall
-	mutex       sync.Mutex
-}
+type StoreDeleteOldestDumpFunc struct { /* all structs must go */ }
 
 // DeleteOldestDump delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -976,20 +767,7 @@ func (f *StoreDeleteOldestDumpFunc) History() []StoreDeleteOldestDumpFuncCall {
 
 // StoreDeleteOldestDumpFuncCall is an object that describes an invocation
 // of method DeleteOldestDump on an instance of MockStore.
-type StoreDeleteOldestDumpFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 int
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 bool
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type StoreDeleteOldestDumpFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -1006,12 +784,7 @@ func (c StoreDeleteOldestDumpFuncCall) Results() []interface{} {
 // StoreDeleteOverlappingDumpsFunc describes the behavior when the
 // DeleteOverlappingDumps method of the parent MockStore instance is
 // invoked.
-type StoreDeleteOverlappingDumpsFunc struct {
-	defaultHook func(context.Context, int, string, string, string) error
-	hooks       []func(context.Context, int, string, string, string) error
-	history     []StoreDeleteOverlappingDumpsFuncCall
-	mutex       sync.Mutex
-}
+type StoreDeleteOverlappingDumpsFunc struct { /* all structs must go */ }
 
 // DeleteOverlappingDumps delegates to the next hook function in the queue
 // and stores the parameter and result values of this invocation.
@@ -1086,26 +859,7 @@ func (f *StoreDeleteOverlappingDumpsFunc) History() []StoreDeleteOverlappingDump
 
 // StoreDeleteOverlappingDumpsFuncCall is an object that describes an
 // invocation of method DeleteOverlappingDumps on an instance of MockStore.
-type StoreDeleteOverlappingDumpsFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 string
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 string
-	// Arg4 is the value of the 5th argument passed to this method
-	// invocation.
-	Arg4 string
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type StoreDeleteOverlappingDumpsFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -1121,12 +875,7 @@ func (c StoreDeleteOverlappingDumpsFuncCall) Results() []interface{} {
 
 // StoreDeleteUploadByIDFunc describes the behavior when the
 // DeleteUploadByID method of the parent MockStore instance is invoked.
-type StoreDeleteUploadByIDFunc struct {
-	defaultHook func(context.Context, int, store.GetTipCommitFunc) (bool, error)
-	hooks       []func(context.Context, int, store.GetTipCommitFunc) (bool, error)
-	history     []StoreDeleteUploadByIDFuncCall
-	mutex       sync.Mutex
-}
+type StoreDeleteUploadByIDFunc struct { /* all structs must go */ }
 
 // DeleteUploadByID delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -1201,23 +950,7 @@ func (f *StoreDeleteUploadByIDFunc) History() []StoreDeleteUploadByIDFuncCall {
 
 // StoreDeleteUploadByIDFuncCall is an object that describes an invocation
 // of method DeleteUploadByID on an instance of MockStore.
-type StoreDeleteUploadByIDFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 store.GetTipCommitFunc
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 bool
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type StoreDeleteUploadByIDFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -1234,12 +967,7 @@ func (c StoreDeleteUploadByIDFuncCall) Results() []interface{} {
 // StoreDeleteUploadsWithoutRepositoryFunc describes the behavior when the
 // DeleteUploadsWithoutRepository method of the parent MockStore instance is
 // invoked.
-type StoreDeleteUploadsWithoutRepositoryFunc struct {
-	defaultHook func(context.Context, time.Time) (map[int]int, error)
-	hooks       []func(context.Context, time.Time) (map[int]int, error)
-	history     []StoreDeleteUploadsWithoutRepositoryFuncCall
-	mutex       sync.Mutex
-}
+type StoreDeleteUploadsWithoutRepositoryFunc struct { /* all structs must go */ }
 
 // DeleteUploadsWithoutRepository delegates to the next hook function in the
 // queue and stores the parameter and result values of this invocation.
@@ -1316,20 +1044,7 @@ func (f *StoreDeleteUploadsWithoutRepositoryFunc) History() []StoreDeleteUploads
 // StoreDeleteUploadsWithoutRepositoryFuncCall is an object that describes
 // an invocation of method DeleteUploadsWithoutRepository on an instance of
 // MockStore.
-type StoreDeleteUploadsWithoutRepositoryFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 time.Time
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 map[int]int
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type StoreDeleteUploadsWithoutRepositoryFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -1345,12 +1060,7 @@ func (c StoreDeleteUploadsWithoutRepositoryFuncCall) Results() []interface{} {
 
 // StoreDequeueFunc describes the behavior when the Dequeue method of the
 // parent MockStore instance is invoked.
-type StoreDequeueFunc struct {
-	defaultHook func(context.Context, int64) (store.Upload, store.Store, bool, error)
-	hooks       []func(context.Context, int64) (store.Upload, store.Store, bool, error)
-	history     []StoreDequeueFuncCall
-	mutex       sync.Mutex
-}
+type StoreDequeueFunc struct { /* all structs must go */ }
 
 // Dequeue delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -1424,26 +1134,7 @@ func (f *StoreDequeueFunc) History() []StoreDequeueFuncCall {
 
 // StoreDequeueFuncCall is an object that describes an invocation of method
 // Dequeue on an instance of MockStore.
-type StoreDequeueFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int64
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 store.Upload
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 store.Store
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 bool
-	// Result3 is the value of the 4th result returned from this method
-	// invocation.
-	Result3 error
-}
+type StoreDequeueFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -1459,12 +1150,7 @@ func (c StoreDequeueFuncCall) Results() []interface{} {
 
 // StoreDequeueIndexFunc describes the behavior when the DequeueIndex method
 // of the parent MockStore instance is invoked.
-type StoreDequeueIndexFunc struct {
-	defaultHook func(context.Context) (store.Index, store.Store, bool, error)
-	hooks       []func(context.Context) (store.Index, store.Store, bool, error)
-	history     []StoreDequeueIndexFuncCall
-	mutex       sync.Mutex
-}
+type StoreDequeueIndexFunc struct { /* all structs must go */ }
 
 // DequeueIndex delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -1538,23 +1224,7 @@ func (f *StoreDequeueIndexFunc) History() []StoreDequeueIndexFuncCall {
 
 // StoreDequeueIndexFuncCall is an object that describes an invocation of
 // method DequeueIndex on an instance of MockStore.
-type StoreDequeueIndexFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 store.Index
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 store.Store
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 bool
-	// Result3 is the value of the 4th result returned from this method
-	// invocation.
-	Result3 error
-}
+type StoreDequeueIndexFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -1570,12 +1240,7 @@ func (c StoreDequeueIndexFuncCall) Results() []interface{} {
 
 // StoreDoneFunc describes the behavior when the Done method of the parent
 // MockStore instance is invoked.
-type StoreDoneFunc struct {
-	defaultHook func(error) error
-	hooks       []func(error) error
-	history     []StoreDoneFuncCall
-	mutex       sync.Mutex
-}
+type StoreDoneFunc struct { /* all structs must go */ }
 
 // Done delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -1649,14 +1314,7 @@ func (f *StoreDoneFunc) History() []StoreDoneFuncCall {
 
 // StoreDoneFuncCall is an object that describes an invocation of method
 // Done on an instance of MockStore.
-type StoreDoneFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 error
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type StoreDoneFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -1672,12 +1330,7 @@ func (c StoreDoneFuncCall) Results() []interface{} {
 
 // StoreFindClosestDumpsFunc describes the behavior when the
 // FindClosestDumps method of the parent MockStore instance is invoked.
-type StoreFindClosestDumpsFunc struct {
-	defaultHook func(context.Context, int, string, string, bool, string) ([]store.Dump, error)
-	hooks       []func(context.Context, int, string, string, bool, string) ([]store.Dump, error)
-	history     []StoreFindClosestDumpsFuncCall
-	mutex       sync.Mutex
-}
+type StoreFindClosestDumpsFunc struct { /* all structs must go */ }
 
 // FindClosestDumps delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -1752,32 +1405,7 @@ func (f *StoreFindClosestDumpsFunc) History() []StoreFindClosestDumpsFuncCall {
 
 // StoreFindClosestDumpsFuncCall is an object that describes an invocation
 // of method FindClosestDumps on an instance of MockStore.
-type StoreFindClosestDumpsFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 string
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 string
-	// Arg4 is the value of the 5th argument passed to this method
-	// invocation.
-	Arg4 bool
-	// Arg5 is the value of the 6th argument passed to this method
-	// invocation.
-	Arg5 string
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []store.Dump
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type StoreFindClosestDumpsFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -1793,12 +1421,7 @@ func (c StoreFindClosestDumpsFuncCall) Results() []interface{} {
 
 // StoreGetDumpByIDFunc describes the behavior when the GetDumpByID method
 // of the parent MockStore instance is invoked.
-type StoreGetDumpByIDFunc struct {
-	defaultHook func(context.Context, int) (store.Dump, bool, error)
-	hooks       []func(context.Context, int) (store.Dump, bool, error)
-	history     []StoreGetDumpByIDFuncCall
-	mutex       sync.Mutex
-}
+type StoreGetDumpByIDFunc struct { /* all structs must go */ }
 
 // GetDumpByID delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -1872,23 +1495,7 @@ func (f *StoreGetDumpByIDFunc) History() []StoreGetDumpByIDFuncCall {
 
 // StoreGetDumpByIDFuncCall is an object that describes an invocation of
 // method GetDumpByID on an instance of MockStore.
-type StoreGetDumpByIDFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 store.Dump
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 bool
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type StoreGetDumpByIDFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -1904,12 +1511,7 @@ func (c StoreGetDumpByIDFuncCall) Results() []interface{} {
 
 // StoreGetIndexByIDFunc describes the behavior when the GetIndexByID method
 // of the parent MockStore instance is invoked.
-type StoreGetIndexByIDFunc struct {
-	defaultHook func(context.Context, int) (store.Index, bool, error)
-	hooks       []func(context.Context, int) (store.Index, bool, error)
-	history     []StoreGetIndexByIDFuncCall
-	mutex       sync.Mutex
-}
+type StoreGetIndexByIDFunc struct { /* all structs must go */ }
 
 // GetIndexByID delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -1983,23 +1585,7 @@ func (f *StoreGetIndexByIDFunc) History() []StoreGetIndexByIDFuncCall {
 
 // StoreGetIndexByIDFuncCall is an object that describes an invocation of
 // method GetIndexByID on an instance of MockStore.
-type StoreGetIndexByIDFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 store.Index
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 bool
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type StoreGetIndexByIDFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -2015,12 +1601,7 @@ func (c StoreGetIndexByIDFuncCall) Results() []interface{} {
 
 // StoreGetIndexesFunc describes the behavior when the GetIndexes method of
 // the parent MockStore instance is invoked.
-type StoreGetIndexesFunc struct {
-	defaultHook func(context.Context, store.GetIndexesOptions) ([]store.Index, int, error)
-	hooks       []func(context.Context, store.GetIndexesOptions) ([]store.Index, int, error)
-	history     []StoreGetIndexesFuncCall
-	mutex       sync.Mutex
-}
+type StoreGetIndexesFunc struct { /* all structs must go */ }
 
 // GetIndexes delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -2094,23 +1675,7 @@ func (f *StoreGetIndexesFunc) History() []StoreGetIndexesFuncCall {
 
 // StoreGetIndexesFuncCall is an object that describes an invocation of
 // method GetIndexes on an instance of MockStore.
-type StoreGetIndexesFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 store.GetIndexesOptions
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []store.Index
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 int
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type StoreGetIndexesFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -2126,12 +1691,7 @@ func (c StoreGetIndexesFuncCall) Results() []interface{} {
 
 // StoreGetPackageFunc describes the behavior when the GetPackage method of
 // the parent MockStore instance is invoked.
-type StoreGetPackageFunc struct {
-	defaultHook func(context.Context, string, string, string) (store.Dump, bool, error)
-	hooks       []func(context.Context, string, string, string) (store.Dump, bool, error)
-	history     []StoreGetPackageFuncCall
-	mutex       sync.Mutex
-}
+type StoreGetPackageFunc struct { /* all structs must go */ }
 
 // GetPackage delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -2205,29 +1765,7 @@ func (f *StoreGetPackageFunc) History() []StoreGetPackageFuncCall {
 
 // StoreGetPackageFuncCall is an object that describes an invocation of
 // method GetPackage on an instance of MockStore.
-type StoreGetPackageFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 string
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 string
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 store.Dump
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 bool
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type StoreGetPackageFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -2243,12 +1781,7 @@ func (c StoreGetPackageFuncCall) Results() []interface{} {
 
 // StoreGetStatesFunc describes the behavior when the GetStates method of
 // the parent MockStore instance is invoked.
-type StoreGetStatesFunc struct {
-	defaultHook func(context.Context, []int) (map[int]string, error)
-	hooks       []func(context.Context, []int) (map[int]string, error)
-	history     []StoreGetStatesFuncCall
-	mutex       sync.Mutex
-}
+type StoreGetStatesFunc struct { /* all structs must go */ }
 
 // GetStates delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -2322,20 +1855,7 @@ func (f *StoreGetStatesFunc) History() []StoreGetStatesFuncCall {
 
 // StoreGetStatesFuncCall is an object that describes an invocation of
 // method GetStates on an instance of MockStore.
-type StoreGetStatesFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 []int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 map[int]string
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type StoreGetStatesFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -2351,12 +1871,7 @@ func (c StoreGetStatesFuncCall) Results() []interface{} {
 
 // StoreGetUploadByIDFunc describes the behavior when the GetUploadByID
 // method of the parent MockStore instance is invoked.
-type StoreGetUploadByIDFunc struct {
-	defaultHook func(context.Context, int) (store.Upload, bool, error)
-	hooks       []func(context.Context, int) (store.Upload, bool, error)
-	history     []StoreGetUploadByIDFuncCall
-	mutex       sync.Mutex
-}
+type StoreGetUploadByIDFunc struct { /* all structs must go */ }
 
 // GetUploadByID delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -2430,23 +1945,7 @@ func (f *StoreGetUploadByIDFunc) History() []StoreGetUploadByIDFuncCall {
 
 // StoreGetUploadByIDFuncCall is an object that describes an invocation of
 // method GetUploadByID on an instance of MockStore.
-type StoreGetUploadByIDFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 store.Upload
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 bool
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type StoreGetUploadByIDFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -2462,12 +1961,7 @@ func (c StoreGetUploadByIDFuncCall) Results() []interface{} {
 
 // StoreGetUploadsFunc describes the behavior when the GetUploads method of
 // the parent MockStore instance is invoked.
-type StoreGetUploadsFunc struct {
-	defaultHook func(context.Context, store.GetUploadsOptions) ([]store.Upload, int, error)
-	hooks       []func(context.Context, store.GetUploadsOptions) ([]store.Upload, int, error)
-	history     []StoreGetUploadsFuncCall
-	mutex       sync.Mutex
-}
+type StoreGetUploadsFunc struct { /* all structs must go */ }
 
 // GetUploads delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -2541,23 +2035,7 @@ func (f *StoreGetUploadsFunc) History() []StoreGetUploadsFuncCall {
 
 // StoreGetUploadsFuncCall is an object that describes an invocation of
 // method GetUploads on an instance of MockStore.
-type StoreGetUploadsFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 store.GetUploadsOptions
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []store.Upload
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 int
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type StoreGetUploadsFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -2573,12 +2051,7 @@ func (c StoreGetUploadsFuncCall) Results() []interface{} {
 
 // StoreHandleFunc describes the behavior when the Handle method of the
 // parent MockStore instance is invoked.
-type StoreHandleFunc struct {
-	defaultHook func() *basestore.TransactableHandle
-	hooks       []func() *basestore.TransactableHandle
-	history     []StoreHandleFuncCall
-	mutex       sync.Mutex
-}
+type StoreHandleFunc struct { /* all structs must go */ }
 
 // Handle delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -2652,11 +2125,7 @@ func (f *StoreHandleFunc) History() []StoreHandleFuncCall {
 
 // StoreHandleFuncCall is an object that describes an invocation of method
 // Handle on an instance of MockStore.
-type StoreHandleFuncCall struct {
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 *basestore.TransactableHandle
-}
+type StoreHandleFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -2672,12 +2141,7 @@ func (c StoreHandleFuncCall) Results() []interface{} {
 
 // StoreHasCommitFunc describes the behavior when the HasCommit method of
 // the parent MockStore instance is invoked.
-type StoreHasCommitFunc struct {
-	defaultHook func(context.Context, int, string) (bool, error)
-	hooks       []func(context.Context, int, string) (bool, error)
-	history     []StoreHasCommitFuncCall
-	mutex       sync.Mutex
-}
+type StoreHasCommitFunc struct { /* all structs must go */ }
 
 // HasCommit delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -2751,23 +2215,7 @@ func (f *StoreHasCommitFunc) History() []StoreHasCommitFuncCall {
 
 // StoreHasCommitFuncCall is an object that describes an invocation of
 // method HasCommit on an instance of MockStore.
-type StoreHasCommitFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 string
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 bool
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type StoreHasCommitFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -2783,12 +2231,7 @@ func (c StoreHasCommitFuncCall) Results() []interface{} {
 
 // StoreIndexQueueSizeFunc describes the behavior when the IndexQueueSize
 // method of the parent MockStore instance is invoked.
-type StoreIndexQueueSizeFunc struct {
-	defaultHook func(context.Context) (int, error)
-	hooks       []func(context.Context) (int, error)
-	history     []StoreIndexQueueSizeFuncCall
-	mutex       sync.Mutex
-}
+type StoreIndexQueueSizeFunc struct { /* all structs must go */ }
 
 // IndexQueueSize delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -2863,17 +2306,7 @@ func (f *StoreIndexQueueSizeFunc) History() []StoreIndexQueueSizeFuncCall {
 
 // StoreIndexQueueSizeFuncCall is an object that describes an invocation of
 // method IndexQueueSize on an instance of MockStore.
-type StoreIndexQueueSizeFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 int
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type StoreIndexQueueSizeFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -2889,12 +2322,7 @@ func (c StoreIndexQueueSizeFuncCall) Results() []interface{} {
 
 // StoreIndexableRepositoriesFunc describes the behavior when the
 // IndexableRepositories method of the parent MockStore instance is invoked.
-type StoreIndexableRepositoriesFunc struct {
-	defaultHook func(context.Context, store.IndexableRepositoryQueryOptions) ([]store.IndexableRepository, error)
-	hooks       []func(context.Context, store.IndexableRepositoryQueryOptions) ([]store.IndexableRepository, error)
-	history     []StoreIndexableRepositoriesFuncCall
-	mutex       sync.Mutex
-}
+type StoreIndexableRepositoriesFunc struct { /* all structs must go */ }
 
 // IndexableRepositories delegates to the next hook function in the queue
 // and stores the parameter and result values of this invocation.
@@ -2969,20 +2397,7 @@ func (f *StoreIndexableRepositoriesFunc) History() []StoreIndexableRepositoriesF
 
 // StoreIndexableRepositoriesFuncCall is an object that describes an
 // invocation of method IndexableRepositories on an instance of MockStore.
-type StoreIndexableRepositoriesFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 store.IndexableRepositoryQueryOptions
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []store.IndexableRepository
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type StoreIndexableRepositoriesFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -2998,12 +2413,7 @@ func (c StoreIndexableRepositoriesFuncCall) Results() []interface{} {
 
 // StoreInsertIndexFunc describes the behavior when the InsertIndex method
 // of the parent MockStore instance is invoked.
-type StoreInsertIndexFunc struct {
-	defaultHook func(context.Context, store.Index) (int, error)
-	hooks       []func(context.Context, store.Index) (int, error)
-	history     []StoreInsertIndexFuncCall
-	mutex       sync.Mutex
-}
+type StoreInsertIndexFunc struct { /* all structs must go */ }
 
 // InsertIndex delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -3077,20 +2487,7 @@ func (f *StoreInsertIndexFunc) History() []StoreInsertIndexFuncCall {
 
 // StoreInsertIndexFuncCall is an object that describes an invocation of
 // method InsertIndex on an instance of MockStore.
-type StoreInsertIndexFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 store.Index
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 int
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type StoreInsertIndexFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -3106,12 +2503,7 @@ func (c StoreInsertIndexFuncCall) Results() []interface{} {
 
 // StoreInsertUploadFunc describes the behavior when the InsertUpload method
 // of the parent MockStore instance is invoked.
-type StoreInsertUploadFunc struct {
-	defaultHook func(context.Context, store.Upload) (int, error)
-	hooks       []func(context.Context, store.Upload) (int, error)
-	history     []StoreInsertUploadFuncCall
-	mutex       sync.Mutex
-}
+type StoreInsertUploadFunc struct { /* all structs must go */ }
 
 // InsertUpload delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -3185,20 +2577,7 @@ func (f *StoreInsertUploadFunc) History() []StoreInsertUploadFuncCall {
 
 // StoreInsertUploadFuncCall is an object that describes an invocation of
 // method InsertUpload on an instance of MockStore.
-type StoreInsertUploadFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 store.Upload
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 int
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type StoreInsertUploadFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -3214,12 +2593,7 @@ func (c StoreInsertUploadFuncCall) Results() []interface{} {
 
 // StoreIsQueuedFunc describes the behavior when the IsQueued method of the
 // parent MockStore instance is invoked.
-type StoreIsQueuedFunc struct {
-	defaultHook func(context.Context, int, string) (bool, error)
-	hooks       []func(context.Context, int, string) (bool, error)
-	history     []StoreIsQueuedFuncCall
-	mutex       sync.Mutex
-}
+type StoreIsQueuedFunc struct { /* all structs must go */ }
 
 // IsQueued delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -3293,23 +2667,7 @@ func (f *StoreIsQueuedFunc) History() []StoreIsQueuedFuncCall {
 
 // StoreIsQueuedFuncCall is an object that describes an invocation of method
 // IsQueued on an instance of MockStore.
-type StoreIsQueuedFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 string
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 bool
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type StoreIsQueuedFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -3325,12 +2683,7 @@ func (c StoreIsQueuedFuncCall) Results() []interface{} {
 
 // StoreLockFunc describes the behavior when the Lock method of the parent
 // MockStore instance is invoked.
-type StoreLockFunc struct {
-	defaultHook func(context.Context, int, bool) (bool, store.UnlockFunc, error)
-	hooks       []func(context.Context, int, bool) (bool, store.UnlockFunc, error)
-	history     []StoreLockFuncCall
-	mutex       sync.Mutex
-}
+type StoreLockFunc struct { /* all structs must go */ }
 
 // Lock delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -3404,26 +2757,7 @@ func (f *StoreLockFunc) History() []StoreLockFuncCall {
 
 // StoreLockFuncCall is an object that describes an invocation of method
 // Lock on an instance of MockStore.
-type StoreLockFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 bool
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 bool
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 store.UnlockFunc
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type StoreLockFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -3439,12 +2773,7 @@ func (c StoreLockFuncCall) Results() []interface{} {
 
 // StoreMarkCompleteFunc describes the behavior when the MarkComplete method
 // of the parent MockStore instance is invoked.
-type StoreMarkCompleteFunc struct {
-	defaultHook func(context.Context, int) error
-	hooks       []func(context.Context, int) error
-	history     []StoreMarkCompleteFuncCall
-	mutex       sync.Mutex
-}
+type StoreMarkCompleteFunc struct { /* all structs must go */ }
 
 // MarkComplete delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -3518,17 +2847,7 @@ func (f *StoreMarkCompleteFunc) History() []StoreMarkCompleteFuncCall {
 
 // StoreMarkCompleteFuncCall is an object that describes an invocation of
 // method MarkComplete on an instance of MockStore.
-type StoreMarkCompleteFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type StoreMarkCompleteFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -3544,12 +2863,7 @@ func (c StoreMarkCompleteFuncCall) Results() []interface{} {
 
 // StoreMarkErroredFunc describes the behavior when the MarkErrored method
 // of the parent MockStore instance is invoked.
-type StoreMarkErroredFunc struct {
-	defaultHook func(context.Context, int, string) error
-	hooks       []func(context.Context, int, string) error
-	history     []StoreMarkErroredFuncCall
-	mutex       sync.Mutex
-}
+type StoreMarkErroredFunc struct { /* all structs must go */ }
 
 // MarkErrored delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -3623,20 +2937,7 @@ func (f *StoreMarkErroredFunc) History() []StoreMarkErroredFuncCall {
 
 // StoreMarkErroredFuncCall is an object that describes an invocation of
 // method MarkErrored on an instance of MockStore.
-type StoreMarkErroredFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 string
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type StoreMarkErroredFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -3652,12 +2953,7 @@ func (c StoreMarkErroredFuncCall) Results() []interface{} {
 
 // StoreMarkIndexCompleteFunc describes the behavior when the
 // MarkIndexComplete method of the parent MockStore instance is invoked.
-type StoreMarkIndexCompleteFunc struct {
-	defaultHook func(context.Context, int) error
-	hooks       []func(context.Context, int) error
-	history     []StoreMarkIndexCompleteFuncCall
-	mutex       sync.Mutex
-}
+type StoreMarkIndexCompleteFunc struct { /* all structs must go */ }
 
 // MarkIndexComplete delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -3732,17 +3028,7 @@ func (f *StoreMarkIndexCompleteFunc) History() []StoreMarkIndexCompleteFuncCall
 
 // StoreMarkIndexCompleteFuncCall is an object that describes an invocation
 // of method MarkIndexComplete on an instance of MockStore.
-type StoreMarkIndexCompleteFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type StoreMarkIndexCompleteFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -3758,12 +3044,7 @@ func (c StoreMarkIndexCompleteFuncCall) Results() []interface{} {
 
 // StoreMarkIndexErroredFunc describes the behavior when the
 // MarkIndexErrored method of the parent MockStore instance is invoked.
-type StoreMarkIndexErroredFunc struct {
-	defaultHook func(context.Context, int, string) error
-	hooks       []func(context.Context, int, string) error
-	history     []StoreMarkIndexErroredFuncCall
-	mutex       sync.Mutex
-}
+type StoreMarkIndexErroredFunc struct { /* all structs must go */ }
 
 // MarkIndexErrored delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -3838,20 +3119,7 @@ func (f *StoreMarkIndexErroredFunc) History() []StoreMarkIndexErroredFuncCall {
 
 // StoreMarkIndexErroredFuncCall is an object that describes an invocation
 // of method MarkIndexErrored on an instance of MockStore.
-type StoreMarkIndexErroredFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 string
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type StoreMarkIndexErroredFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -3867,12 +3135,7 @@ func (c StoreMarkIndexErroredFuncCall) Results() []interface{} {
 
 // StoreMarkQueuedFunc describes the behavior when the MarkQueued method of
 // the parent MockStore instance is invoked.
-type StoreMarkQueuedFunc struct {
-	defaultHook func(context.Context, int, *int) error
-	hooks       []func(context.Context, int, *int) error
-	history     []StoreMarkQueuedFuncCall
-	mutex       sync.Mutex
-}
+type StoreMarkQueuedFunc struct { /* all structs must go */ }
 
 // MarkQueued delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -3946,20 +3209,7 @@ func (f *StoreMarkQueuedFunc) History() []StoreMarkQueuedFuncCall {
 
 // StoreMarkQueuedFuncCall is an object that describes an invocation of
 // method MarkQueued on an instance of MockStore.
-type StoreMarkQueuedFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 *int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type StoreMarkQueuedFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -3975,12 +3225,7 @@ func (c StoreMarkQueuedFuncCall) Results() []interface{} {
 
 // StorePackageReferencePagerFunc describes the behavior when the
 // PackageReferencePager method of the parent MockStore instance is invoked.
-type StorePackageReferencePagerFunc struct {
-	defaultHook func(context.Context, string, string, string, int, int) (int, store.ReferencePager, error)
-	hooks       []func(context.Context, string, string, string, int, int) (int, store.ReferencePager, error)
-	history     []StorePackageReferencePagerFuncCall
-	mutex       sync.Mutex
-}
+type StorePackageReferencePagerFunc struct { /* all structs must go */ }
 
 // PackageReferencePager delegates to the next hook function in the queue
 // and stores the parameter and result values of this invocation.
@@ -4055,35 +3300,7 @@ func (f *StorePackageReferencePagerFunc) History() []StorePackageReferencePagerF
 
 // StorePackageReferencePagerFuncCall is an object that describes an
 // invocation of method PackageReferencePager on an instance of MockStore.
-type StorePackageReferencePagerFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 string
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 string
-	// Arg4 is the value of the 5th argument passed to this method
-	// invocation.
-	Arg4 int
-	// Arg5 is the value of the 6th argument passed to this method
-	// invocation.
-	Arg5 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 int
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 store.ReferencePager
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type StorePackageReferencePagerFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -4099,12 +3316,7 @@ func (c StorePackageReferencePagerFuncCall) Results() []interface{} {
 
 // StoreQueueSizeFunc describes the behavior when the QueueSize method of
 // the parent MockStore instance is invoked.
-type StoreQueueSizeFunc struct {
-	defaultHook func(context.Context) (int, error)
-	hooks       []func(context.Context) (int, error)
-	history     []StoreQueueSizeFuncCall
-	mutex       sync.Mutex
-}
+type StoreQueueSizeFunc struct { /* all structs must go */ }
 
 // QueueSize delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -4178,17 +3390,7 @@ func (f *StoreQueueSizeFunc) History() []StoreQueueSizeFuncCall {
 
 // StoreQueueSizeFuncCall is an object that describes an invocation of
 // method QueueSize on an instance of MockStore.
-type StoreQueueSizeFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 int
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type StoreQueueSizeFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -4204,12 +3406,7 @@ func (c StoreQueueSizeFuncCall) Results() []interface{} {
 
 // StoreRepoNameFunc describes the behavior when the RepoName method of the
 // parent MockStore instance is invoked.
-type StoreRepoNameFunc struct {
-	defaultHook func(context.Context, int) (string, error)
-	hooks       []func(context.Context, int) (string, error)
-	history     []StoreRepoNameFuncCall
-	mutex       sync.Mutex
-}
+type StoreRepoNameFunc struct { /* all structs must go */ }
 
 // RepoName delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -4283,20 +3480,7 @@ func (f *StoreRepoNameFunc) History() []StoreRepoNameFuncCall {
 
 // StoreRepoNameFuncCall is an object that describes an invocation of method
 // RepoName on an instance of MockStore.
-type StoreRepoNameFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 string
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type StoreRepoNameFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -4312,12 +3496,7 @@ func (c StoreRepoNameFuncCall) Results() []interface{} {
 
 // StoreRepoUsageStatisticsFunc describes the behavior when the
 // RepoUsageStatistics method of the parent MockStore instance is invoked.
-type StoreRepoUsageStatisticsFunc struct {
-	defaultHook func(context.Context) ([]store.RepoUsageStatistics, error)
-	hooks       []func(context.Context) ([]store.RepoUsageStatistics, error)
-	history     []StoreRepoUsageStatisticsFuncCall
-	mutex       sync.Mutex
-}
+type StoreRepoUsageStatisticsFunc struct { /* all structs must go */ }
 
 // RepoUsageStatistics delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -4392,17 +3571,7 @@ func (f *StoreRepoUsageStatisticsFunc) History() []StoreRepoUsageStatisticsFuncC
 
 // StoreRepoUsageStatisticsFuncCall is an object that describes an
 // invocation of method RepoUsageStatistics on an instance of MockStore.
-type StoreRepoUsageStatisticsFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []store.RepoUsageStatistics
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type StoreRepoUsageStatisticsFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -4418,12 +3587,7 @@ func (c StoreRepoUsageStatisticsFuncCall) Results() []interface{} {
 
 // StoreRequeueFunc describes the behavior when the Requeue method of the
 // parent MockStore instance is invoked.
-type StoreRequeueFunc struct {
-	defaultHook func(context.Context, int, time.Time) error
-	hooks       []func(context.Context, int, time.Time) error
-	history     []StoreRequeueFuncCall
-	mutex       sync.Mutex
-}
+type StoreRequeueFunc struct { /* all structs must go */ }
 
 // Requeue delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -4497,20 +3661,7 @@ func (f *StoreRequeueFunc) History() []StoreRequeueFuncCall {
 
 // StoreRequeueFuncCall is an object that describes an invocation of method
 // Requeue on an instance of MockStore.
-type StoreRequeueFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 time.Time
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type StoreRequeueFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -4526,12 +3677,7 @@ func (c StoreRequeueFuncCall) Results() []interface{} {
 
 // StoreRequeueIndexFunc describes the behavior when the RequeueIndex method
 // of the parent MockStore instance is invoked.
-type StoreRequeueIndexFunc struct {
-	defaultHook func(context.Context, int, time.Time) error
-	hooks       []func(context.Context, int, time.Time) error
-	history     []StoreRequeueIndexFuncCall
-	mutex       sync.Mutex
-}
+type StoreRequeueIndexFunc struct { /* all structs must go */ }
 
 // RequeueIndex delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -4605,20 +3751,7 @@ func (f *StoreRequeueIndexFunc) History() []StoreRequeueIndexFuncCall {
 
 // StoreRequeueIndexFuncCall is an object that describes an invocation of
 // method RequeueIndex on an instance of MockStore.
-type StoreRequeueIndexFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 time.Time
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type StoreRequeueIndexFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -4635,12 +3768,7 @@ func (c StoreRequeueIndexFuncCall) Results() []interface{} {
 // StoreResetIndexableRepositoriesFunc describes the behavior when the
 // ResetIndexableRepositories method of the parent MockStore instance is
 // invoked.
-type StoreResetIndexableRepositoriesFunc struct {
-	defaultHook func(context.Context, time.Time) error
-	hooks       []func(context.Context, time.Time) error
-	history     []StoreResetIndexableRepositoriesFuncCall
-	mutex       sync.Mutex
-}
+type StoreResetIndexableRepositoriesFunc struct { /* all structs must go */ }
 
 // ResetIndexableRepositories delegates to the next hook function in the
 // queue and stores the parameter and result values of this invocation.
@@ -4717,17 +3845,7 @@ func (f *StoreResetIndexableRepositoriesFunc) History() []StoreResetIndexableRep
 // StoreResetIndexableRepositoriesFuncCall is an object that describes an
 // invocation of method ResetIndexableRepositories on an instance of
 // MockStore.
-type StoreResetIndexableRepositoriesFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 time.Time
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type StoreResetIndexableRepositoriesFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -4743,12 +3861,7 @@ func (c StoreResetIndexableRepositoriesFuncCall) Results() []interface{} {
 
 // StoreResetStalledFunc describes the behavior when the ResetStalled method
 // of the parent MockStore instance is invoked.
-type StoreResetStalledFunc struct {
-	defaultHook func(context.Context, time.Time) ([]int, []int, error)
-	hooks       []func(context.Context, time.Time) ([]int, []int, error)
-	history     []StoreResetStalledFuncCall
-	mutex       sync.Mutex
-}
+type StoreResetStalledFunc struct { /* all structs must go */ }
 
 // ResetStalled delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -4822,23 +3935,7 @@ func (f *StoreResetStalledFunc) History() []StoreResetStalledFuncCall {
 
 // StoreResetStalledFuncCall is an object that describes an invocation of
 // method ResetStalled on an instance of MockStore.
-type StoreResetStalledFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 time.Time
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []int
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 []int
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type StoreResetStalledFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -4854,12 +3951,7 @@ func (c StoreResetStalledFuncCall) Results() []interface{} {
 
 // StoreResetStalledIndexesFunc describes the behavior when the
 // ResetStalledIndexes method of the parent MockStore instance is invoked.
-type StoreResetStalledIndexesFunc struct {
-	defaultHook func(context.Context, time.Time) ([]int, []int, error)
-	hooks       []func(context.Context, time.Time) ([]int, []int, error)
-	history     []StoreResetStalledIndexesFuncCall
-	mutex       sync.Mutex
-}
+type StoreResetStalledIndexesFunc struct { /* all structs must go */ }
 
 // ResetStalledIndexes delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -4934,23 +4026,7 @@ func (f *StoreResetStalledIndexesFunc) History() []StoreResetStalledIndexesFuncC
 
 // StoreResetStalledIndexesFuncCall is an object that describes an
 // invocation of method ResetStalledIndexes on an instance of MockStore.
-type StoreResetStalledIndexesFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 time.Time
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []int
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 []int
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type StoreResetStalledIndexesFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -4966,12 +4042,7 @@ func (c StoreResetStalledIndexesFuncCall) Results() []interface{} {
 
 // StoreSameRepoPagerFunc describes the behavior when the SameRepoPager
 // method of the parent MockStore instance is invoked.
-type StoreSameRepoPagerFunc struct {
-	defaultHook func(context.Context, int, string, string, string, string, int) (int, store.ReferencePager, error)
-	hooks       []func(context.Context, int, string, string, string, string, int) (int, store.ReferencePager, error)
-	history     []StoreSameRepoPagerFuncCall
-	mutex       sync.Mutex
-}
+type StoreSameRepoPagerFunc struct { /* all structs must go */ }
 
 // SameRepoPager delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -5045,38 +4116,7 @@ func (f *StoreSameRepoPagerFunc) History() []StoreSameRepoPagerFuncCall {
 
 // StoreSameRepoPagerFuncCall is an object that describes an invocation of
 // method SameRepoPager on an instance of MockStore.
-type StoreSameRepoPagerFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 string
-	// Arg3 is the value of the 4th argument passed to this method
-	// invocation.
-	Arg3 string
-	// Arg4 is the value of the 5th argument passed to this method
-	// invocation.
-	Arg4 string
-	// Arg5 is the value of the 6th argument passed to this method
-	// invocation.
-	Arg5 string
-	// Arg6 is the value of the 7th argument passed to this method
-	// invocation.
-	Arg6 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 int
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 store.ReferencePager
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type StoreSameRepoPagerFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -5092,12 +4132,7 @@ func (c StoreSameRepoPagerFuncCall) Results() []interface{} {
 
 // StoreTransactFunc describes the behavior when the Transact method of the
 // parent MockStore instance is invoked.
-type StoreTransactFunc struct {
-	defaultHook func(context.Context) (store.Store, error)
-	hooks       []func(context.Context) (store.Store, error)
-	history     []StoreTransactFuncCall
-	mutex       sync.Mutex
-}
+type StoreTransactFunc struct { /* all structs must go */ }
 
 // Transact delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -5171,17 +4206,7 @@ func (f *StoreTransactFunc) History() []StoreTransactFuncCall {
 
 // StoreTransactFuncCall is an object that describes an invocation of method
 // Transact on an instance of MockStore.
-type StoreTransactFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 store.Store
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type StoreTransactFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -5197,12 +4222,7 @@ func (c StoreTransactFuncCall) Results() []interface{} {
 
 // StoreUpdateCommitsFunc describes the behavior when the UpdateCommits
 // method of the parent MockStore instance is invoked.
-type StoreUpdateCommitsFunc struct {
-	defaultHook func(context.Context, int, map[string][]string) error
-	hooks       []func(context.Context, int, map[string][]string) error
-	history     []StoreUpdateCommitsFuncCall
-	mutex       sync.Mutex
-}
+type StoreUpdateCommitsFunc struct { /* all structs must go */ }
 
 // UpdateCommits delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -5276,20 +4296,7 @@ func (f *StoreUpdateCommitsFunc) History() []StoreUpdateCommitsFuncCall {
 
 // StoreUpdateCommitsFuncCall is an object that describes an invocation of
 // method UpdateCommits on an instance of MockStore.
-type StoreUpdateCommitsFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 map[string][]string
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type StoreUpdateCommitsFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -5306,12 +4313,7 @@ func (c StoreUpdateCommitsFuncCall) Results() []interface{} {
 // StoreUpdateDumpsVisibleFromTipFunc describes the behavior when the
 // UpdateDumpsVisibleFromTip method of the parent MockStore instance is
 // invoked.
-type StoreUpdateDumpsVisibleFromTipFunc struct {
-	defaultHook func(context.Context, int, string) error
-	hooks       []func(context.Context, int, string) error
-	history     []StoreUpdateDumpsVisibleFromTipFuncCall
-	mutex       sync.Mutex
-}
+type StoreUpdateDumpsVisibleFromTipFunc struct { /* all structs must go */ }
 
 // UpdateDumpsVisibleFromTip delegates to the next hook function in the
 // queue and stores the parameter and result values of this invocation.
@@ -5387,20 +4389,7 @@ func (f *StoreUpdateDumpsVisibleFromTipFunc) History() []StoreUpdateDumpsVisible
 // StoreUpdateDumpsVisibleFromTipFuncCall is an object that describes an
 // invocation of method UpdateDumpsVisibleFromTip on an instance of
 // MockStore.
-type StoreUpdateDumpsVisibleFromTipFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 string
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type StoreUpdateDumpsVisibleFromTipFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -5417,12 +4406,7 @@ func (c StoreUpdateDumpsVisibleFromTipFuncCall) Results() []interface{} {
 // StoreUpdateIndexableRepositoryFunc describes the behavior when the
 // UpdateIndexableRepository method of the parent MockStore instance is
 // invoked.
-type StoreUpdateIndexableRepositoryFunc struct {
-	defaultHook func(context.Context, store.UpdateableIndexableRepository, time.Time) error
-	hooks       []func(context.Context, store.UpdateableIndexableRepository, time.Time) error
-	history     []StoreUpdateIndexableRepositoryFuncCall
-	mutex       sync.Mutex
-}
+type StoreUpdateIndexableRepositoryFunc struct { /* all structs must go */ }
 
 // UpdateIndexableRepository delegates to the next hook function in the
 // queue and stores the parameter and result values of this invocation.
@@ -5498,20 +4482,7 @@ func (f *StoreUpdateIndexableRepositoryFunc) History() []StoreUpdateIndexableRep
 // StoreUpdateIndexableRepositoryFuncCall is an object that describes an
 // invocation of method UpdateIndexableRepository on an instance of
 // MockStore.
-type StoreUpdateIndexableRepositoryFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 store.UpdateableIndexableRepository
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 time.Time
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type StoreUpdateIndexableRepositoryFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -5528,12 +4499,7 @@ func (c StoreUpdateIndexableRepositoryFuncCall) Results() []interface{} {
 // StoreUpdatePackageReferencesFunc describes the behavior when the
 // UpdatePackageReferences method of the parent MockStore instance is
 // invoked.
-type StoreUpdatePackageReferencesFunc struct {
-	defaultHook func(context.Context, []types.PackageReference) error
-	hooks       []func(context.Context, []types.PackageReference) error
-	history     []StoreUpdatePackageReferencesFuncCall
-	mutex       sync.Mutex
-}
+type StoreUpdatePackageReferencesFunc struct { /* all structs must go */ }
 
 // UpdatePackageReferences delegates to the next hook function in the queue
 // and stores the parameter and result values of this invocation.
@@ -5608,17 +4574,7 @@ func (f *StoreUpdatePackageReferencesFunc) History() []StoreUpdatePackageReferen
 
 // StoreUpdatePackageReferencesFuncCall is an object that describes an
 // invocation of method UpdatePackageReferences on an instance of MockStore.
-type StoreUpdatePackageReferencesFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 []types.PackageReference
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type StoreUpdatePackageReferencesFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -5634,12 +4590,7 @@ func (c StoreUpdatePackageReferencesFuncCall) Results() []interface{} {
 
 // StoreUpdatePackagesFunc describes the behavior when the UpdatePackages
 // method of the parent MockStore instance is invoked.
-type StoreUpdatePackagesFunc struct {
-	defaultHook func(context.Context, []types.Package) error
-	hooks       []func(context.Context, []types.Package) error
-	history     []StoreUpdatePackagesFuncCall
-	mutex       sync.Mutex
-}
+type StoreUpdatePackagesFunc struct { /* all structs must go */ }
 
 // UpdatePackages delegates to the next hook function in the queue and
 // stores the parameter and result values of this invocation.
@@ -5714,17 +4665,7 @@ func (f *StoreUpdatePackagesFunc) History() []StoreUpdatePackagesFuncCall {
 
 // StoreUpdatePackagesFuncCall is an object that describes an invocation of
 // method UpdatePackages on an instance of MockStore.
-type StoreUpdatePackagesFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 []types.Package
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type StoreUpdatePackagesFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -5740,12 +4681,7 @@ func (c StoreUpdatePackagesFuncCall) Results() []interface{} {
 
 // StoreWithFunc describes the behavior when the With method of the parent
 // MockStore instance is invoked.
-type StoreWithFunc struct {
-	defaultHook func(basestore.ShareableStore) store.Store
-	hooks       []func(basestore.ShareableStore) store.Store
-	history     []StoreWithFuncCall
-	mutex       sync.Mutex
-}
+type StoreWithFunc struct { /* all structs must go */ }
 
 // With delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -5819,14 +4755,7 @@ func (f *StoreWithFunc) History() []StoreWithFuncCall {
 
 // StoreWithFuncCall is an object that describes an invocation of method
 // With on an instance of MockStore.
-type StoreWithFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 basestore.ShareableStore
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 store.Store
-}
+type StoreWithFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
diff --git a/enterprise/internal/codeintel/store/observability.go b/enterprise/internal/codeintel/store/observability.go
index 5993d1e..2f92912 100644
--- a/enterprise/internal/codeintel/store/observability.go
+++ b/enterprise/internal/codeintel/store/observability.go
@@ -11,54 +11,7 @@ import (
 )
 
 // An ObservedStore wraps another store with error logging, Prometheus metrics, and tracing.
-type ObservedStore struct {
-	store                                   Store
-	doneOperation                           *observation.Operation
-	lockOperation                           *observation.Operation
-	getUploadByIDOperation                  *observation.Operation
-	getUploadsOperation                     *observation.Operation
-	queueSizeOperation                      *observation.Operation
-	insertUploadOperation                   *observation.Operation
-	addUploadPartOperation                  *observation.Operation
-	markQueuedOperation                     *observation.Operation
-	markCompleteOperation                   *observation.Operation
-	markErroredOperation                    *observation.Operation
-	dequeueOperation                        *observation.Operation
-	requeueOperation                        *observation.Operation
-	getStatesOperation                      *observation.Operation
-	deleteUploadByIDOperation               *observation.Operation
-	deleteUploadsWithoutRepositoryOperation *observation.Operation
-	resetStalledOperation                   *observation.Operation
-	getDumpByIDOperation                    *observation.Operation
-	findClosestDumpsOperation               *observation.Operation
-	deleteOldestDumpOperation               *observation.Operation
-	updateDumpsVisibleFromTipOperation      *observation.Operation
-	deleteOverlappingDumpsOperation         *observation.Operation
-	getPackageOperation                     *observation.Operation
-	updatePackagesOperation                 *observation.Operation
-	sameRepoPagerOperation                  *observation.Operation
-	updatePackageReferencesOperation        *observation.Operation
-	packageReferencePagerOperation          *observation.Operation
-	hasCommitOperation                      *observation.Operation
-	updateCommitsOperation                  *observation.Operation
-	indexableRepositoriesOperation          *observation.Operation
-	updateIndexableRepositoryOperation      *observation.Operation
-	resetIndexableRepositoriesOperation     *observation.Operation
-	getIndexByIDOperation                   *observation.Operation
-	getIndexesOperation                     *observation.Operation
-	indexQueueSizeOperation                 *observation.Operation
-	isQueuedOperation                       *observation.Operation
-	insertIndexOperation                    *observation.Operation
-	markIndexCompleteOperation              *observation.Operation
-	markIndexErroredOperation               *observation.Operation
-	dequeueIndexOperation                   *observation.Operation
-	requeueIndexOperation                   *observation.Operation
-	deleteIndexByIdOperation                *observation.Operation
-	deleteIndexesWithoutRepositoryOperation *observation.Operation
-	resetStalledIndexesOperation            *observation.Operation
-	repoUsageStatisticsOperation            *observation.Operation
-	repoNameOperation                       *observation.Operation
-}
+type ObservedStore struct { /* all structs must go */ }
 
 var _ Store = &ObservedStore{}
 
diff --git a/enterprise/internal/codeintel/store/reference_pager.go b/enterprise/internal/codeintel/store/reference_pager.go
index bef454d..bc1cdcf 100644
--- a/enterprise/internal/codeintel/store/reference_pager.go
+++ b/enterprise/internal/codeintel/store/reference_pager.go
@@ -29,10 +29,7 @@ func noopPageFromOffsetFunc(ctx context.Context, offset int) ([]types.PackageRef
 }
 
 // referencePager is a small struct that conforms to the ReferencePager interface.
-type referencePager struct {
-	pageFromOffset PageFromOffsetFunc
-	done           DoneFunc
-}
+type referencePager struct { /* all structs must go */ }
 
 // PageFromOffset returns the page of package references that starts at the given offset.
 func (rp *referencePager) PageFromOffset(ctx context.Context, offset int) ([]types.PackageReference, error) {
diff --git a/enterprise/internal/codeintel/store/references_test.go b/enterprise/internal/codeintel/store/references_test.go
index 6524a53..d1cd9df 100644
--- a/enterprise/internal/codeintel/store/references_test.go
+++ b/enterprise/internal/codeintel/store/references_test.go
@@ -299,11 +299,7 @@ func TestPackageReferencePagerPages(t *testing.T) {
 		t.Errorf("unexpected dump. want=%d have=%d", 9, totalCount)
 	}
 
-	testCases := []struct {
-		offset int
-		lo     int
-		hi     int
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{0, 0, 3},
 		{1, 1, 4},
 		{2, 2, 5},
diff --git a/enterprise/internal/codeintel/store/repo_usage.go b/enterprise/internal/codeintel/store/repo_usage.go
index e95557c..83cf9ba 100644
--- a/enterprise/internal/codeintel/store/repo_usage.go
+++ b/enterprise/internal/codeintel/store/repo_usage.go
@@ -8,11 +8,7 @@ import (
 )
 
 // RepoUsageStatistics pairs a repository identifier with a count of code intelligence events.
-type RepoUsageStatistics struct {
-	RepositoryID int
-	SearchCount  int
-	PreciseCount int
-}
+type RepoUsageStatistics struct { /* all structs must go */ }
 
 // scanRepoUsageStatisticsSlice scans a slice of repo usage statistics from the return value of `*store.query`.
 func scanRepoUsageStatisticsSlice(rows *sql.Rows, queryErr error) (_ []RepoUsageStatistics, err error) {
diff --git a/enterprise/internal/codeintel/store/repo_usage_test.go b/enterprise/internal/codeintel/store/repo_usage_test.go
index 547e11e..66de16e 100644
--- a/enterprise/internal/codeintel/store/repo_usage_test.go
+++ b/enterprise/internal/codeintel/store/repo_usage_test.go
@@ -31,11 +31,7 @@ func TestRepoUsageStatistics(t *testing.T) {
 		}
 	}
 
-	for _, data := range []struct {
-		URL              string
-		NumSearchEvents  int
-		NumPreciseEvents int
-	}{
+	for _, data := range []struct { /* all structs must go */ }{
 		{"http://localhost:3080/github.com/foo/baz/-/remainder_of_path", 10, 10},
 		{"https://sourcegraph.com/github.com/foo/bar/-/remainder_of_path", 25, 20},
 		{"http://localhost:3080/gitlab.com/bar/baz/-/remainder_of_path", 15, 30},
diff --git a/enterprise/internal/codeintel/store/store.go b/enterprise/internal/codeintel/store/store.go
index f7f3c04..580f778 100644
--- a/enterprise/internal/codeintel/store/store.go
+++ b/enterprise/internal/codeintel/store/store.go
@@ -197,9 +197,7 @@ type Store interface {
 // GetTipCommitFunc returns the head commit for the given repository.
 type GetTipCommitFunc func(ctx context.Context, repositoryID int) (string, error)
 
-type store struct {
-	*basestore.Store
-}
+type store struct { /* all structs must go */ }
 
 var _ Store = &store{}
 
diff --git a/enterprise/internal/codeintel/store/uploads.go b/enterprise/internal/codeintel/store/uploads.go
index a75b5cf..82914ce 100644
--- a/enterprise/internal/codeintel/store/uploads.go
+++ b/enterprise/internal/codeintel/store/uploads.go
@@ -13,26 +13,7 @@ import (
 
 // Upload is a subset of the lsif_uploads table and stores both processed and unprocessed
 // records.
-type Upload struct {
-	ID             int        `json:"id"`
-	Commit         string     `json:"commit"`
-	Root           string     `json:"root"`
-	VisibleAtTip   bool       `json:"visibleAtTip"`
-	UploadedAt     time.Time  `json:"uploadedAt"`
-	State          string     `json:"state"`
-	FailureMessage *string    `json:"failureMessage"`
-	StartedAt      *time.Time `json:"startedAt"`
-	FinishedAt     *time.Time `json:"finishedAt"`
-	ProcessAfter   *time.Time `json:"processAfter"`
-	NumResets      int        `json:"numResets"`
-	RepositoryID   int        `json:"repositoryId"`
-	RepositoryName string     `json:"repositoryName"`
-	Indexer        string     `json:"indexer"`
-	NumParts       int        `json:"numParts"`
-	UploadedParts  []int      `json:"uploadedParts"`
-	UploadSize     *int64     `json:"uploadSize"`
-	Rank           *int       `json:"placeInQueue"`
-}
+type Upload struct { /* all structs must go */ }
 
 func (u Upload) RecordID() int {
 	return u.ID
@@ -199,15 +180,7 @@ func (s *store) GetUploadByID(ctx context.Context, id int) (Upload, bool, error)
 	`, id)))
 }
 
-type GetUploadsOptions struct {
-	RepositoryID   int
-	State          string
-	Term           string
-	VisibleAtTip   bool
-	UploadedBefore *time.Time
-	Limit          int
-	Offset         int
-}
+type GetUploadsOptions struct { /* all structs must go */ }
 
 // GetUploads returns a list of uploads and the total count of records matching the given conditions.
 func (s *store) GetUploads(ctx context.Context, opts GetUploadsOptions) (_ []Upload, _ int, err error) {
diff --git a/enterprise/internal/codeintel/store/uploads_test.go b/enterprise/internal/codeintel/store/uploads_test.go
index cbcf607..d10c7ec 100644
--- a/enterprise/internal/codeintel/store/uploads_test.go
+++ b/enterprise/internal/codeintel/store/uploads_test.go
@@ -142,14 +142,7 @@ func TestGetUploads(t *testing.T) {
 		Upload{ID: 10, UploadedAt: t10, Root: "sub1/", Indexer: "lsif-tsc"},
 	)
 
-	testCases := []struct {
-		repositoryID   int
-		state          string
-		term           string
-		visibleAtTip   bool
-		uploadedBefore *time.Time
-		expectedIDs    []int
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{expectedIDs: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}},
 		{repositoryID: 50, expectedIDs: []int{1, 2, 3, 5, 7, 8, 9, 10}},
 		{state: "completed", expectedIDs: []int{7, 8, 10}},
diff --git a/enterprise/internal/db/authz.go b/enterprise/internal/db/authz.go
index 659b893..efea577 100644
--- a/enterprise/internal/db/authz.go
+++ b/enterprise/internal/db/authz.go
@@ -20,9 +20,7 @@ func NewAuthzStore(db dbutil.DB, clock func() time.Time) db.AuthzStore {
 	}
 }
 
-type authzStore struct {
-	store *PermsStore
-}
+type authzStore struct { /* all structs must go */ }
 
 // GrantPendingPermissions grants pending permissions for a user, which implements the db.AuthzStore interface.
 // It uses provided arguments to retrieve information directly from the database to offload security concerns
diff --git a/enterprise/internal/db/authz_test.go b/enterprise/internal/db/authz_test.go
index 0ea5d9a..7c117c9 100644
--- a/enterprise/internal/db/authz_test.go
+++ b/enterprise/internal/db/authz_test.go
@@ -76,17 +76,8 @@ func TestAuthzStore_GrantPendingPermissions(t *testing.T) {
 	s := NewAuthzStore(dbconn.Global, clock).(*authzStore)
 
 	// Each update corresponds to a SetRepoPendingPermssions call
-	type update struct {
-		accounts *extsvc.Accounts
-		repoID   int32
-	}
-	tests := []struct {
-		name          string
-		config        *schema.PermissionsUserMapping
-		args          *db.GrantPendingPermissionsArgs
-		updates       []update
-		expectRepoIDs []int
-	}{
+	type update struct { /* all structs must go */ }
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "grant by emails",
 			config: &schema.PermissionsUserMapping{
@@ -234,16 +225,8 @@ func TestAuthzStore_AuthorizedRepos(t *testing.T) {
 
 	s := NewAuthzStore(dbconn.Global, clock).(*authzStore)
 
-	type update struct {
-		repoID  int32
-		userIDs []uint32
-	}
-	tests := []struct {
-		name        string
-		args        *db.AuthorizedReposArgs
-		updates     []update
-		expectRepos []*types.Repo
-	}{
+	type update struct { /* all structs must go */ }
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "no repos",
 			args: &db.AuthorizedReposArgs{},
diff --git a/enterprise/internal/db/external_services_test.go b/enterprise/internal/db/external_services_test.go
index 444a2d9..2d5f3e0 100644
--- a/enterprise/internal/db/external_services_test.go
+++ b/enterprise/internal/db/external_services_test.go
@@ -65,13 +65,7 @@ func TestExternalServices_ValidateConfig(t *testing.T) {
 	const bogusPrivateKey = `LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlCUEFJQkFBSkJBUEpIaWprdG1UMUlLYUd0YTVFZXAzQVo5Q2VPZUw4alBESUZUN3dRZ0tabXQzRUZxRGhCCk93bitRVUhKdUs5Zm92UkROSmVWTDJvWTVCT0l6NHJ3L0cwQ0F3RUFBUUpCQU1BK0o5Mks0d2NQVllsbWMrM28KcHU5NmlKTkNwMmp5Nm5hK1pEQlQzK0VvSUo1VFJGdnN3R2kvTHUzZThYUWwxTDNTM21ub0xPSlZNcTF0bUxOMgpIY0VDSVFEK3daeS83RlYxUEFtdmlXeWlYVklETzJnNWJOaUJlbmdKQ3hFa3Nia1VtUUloQVBOMlZaczN6UFFwCk1EVG9vTlJXcnl0RW1URERkamdiOFpzTldYL1JPRGIxQWlCZWNKblNVQ05TQllLMXJ5VTFmNURTbitoQU9ZaDkKWDFBMlVnTDE3bWhsS1FJaEFPK2JMNmRDWktpTGZORWxmVnRkTUtxQnFjNlBIK01heFU2VzlkVlFvR1dkQWlFQQptdGZ5cE9zYTFiS2hFTDg0blovaXZFYkJyaVJHalAya3lERHYzUlg0V0JrPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=`
 
 	// Test table
-	for _, tc := range []struct {
-		kind   string
-		desc   string
-		config string
-		ps     []schema.AuthProviders
-		assert func(testing.TB, []string)
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{
 			kind:   extsvc.KindAWSCodeCommit,
 			desc:   "without region, accessKeyID, secretAccessKey, gitCredentials",
diff --git a/enterprise/internal/db/integration_test.go b/enterprise/internal/db/integration_test.go
index 87a9c4d..ca09e39 100644
--- a/enterprise/internal/db/integration_test.go
+++ b/enterprise/internal/db/integration_test.go
@@ -18,10 +18,7 @@ func TestIntegration_PermsStore(t *testing.T) {
 
 	db := dbtest.NewDB(t, *dsn)
 
-	for _, tc := range []struct {
-		name string
-		test func(*testing.T)
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{"PermsStore/LoadUserPermissions", testPermsStore_LoadUserPermissions(db)},
 		{"PermsStore/LoadRepoPermissions", testPermsStore_LoadRepoPermissions(db)},
 		{"PermsStore/SetUserPermissions", testPermsStore_SetUserPermissions(db)},
diff --git a/enterprise/internal/db/mockstores.go b/enterprise/internal/db/mockstores.go
index 73a169c..ed1acbc 100644
--- a/enterprise/internal/db/mockstores.go
+++ b/enterprise/internal/db/mockstores.go
@@ -3,6 +3,4 @@ package db
 var Mocks MockStores
 
 // MockStores has a field for each store interface with the concrete mock type (to obviate the need for tedious type assertions in test code).
-type MockStores struct {
-	Perms MockPerms
-}
+type MockStores struct { /* all structs must go */ }
diff --git a/enterprise/internal/db/perms_store.go b/enterprise/internal/db/perms_store.go
index d408c45..4a0d092 100644
--- a/enterprise/internal/db/perms_store.go
+++ b/enterprise/internal/db/perms_store.go
@@ -25,10 +25,7 @@ var (
 // PermsStore is the unified interface for managing permissions explicitly in the database.
 // It is concurrency-safe and maintains data consistency over the 'user_permissions',
 // 'repo_permissions', 'user_pending_permissions', and 'repo_pending_permissions' tables.
-type PermsStore struct {
-	db    dbutil.DB
-	clock func() time.Time
-}
+type PermsStore struct { /* all structs must go */ }
 
 // NewPermsStore returns a new PermsStore with given parameters.
 func NewPermsStore(db dbutil.DB, clock func() time.Time) *PermsStore {
@@ -1238,12 +1235,7 @@ func (s *PermsStore) execute(ctx context.Context, q *sqlf.Query, vs ...interface
 }
 
 // permsLoadValues contains return values of (*PermsStore).load method.
-type permsLoadValues struct {
-	id        int32           // An integer ID
-	ids       *roaring.Bitmap // Bitmap of unmarshalled IDs
-	updatedAt time.Time       // Last updated time of the row
-	syncedAt  time.Time       // Last synced time of the row
-}
+type permsLoadValues struct { /* all structs must go */ }
 
 // load is a generic method that scans three values from one database table row, these values must have
 // types and be scanned in the order of int32 (id), []byte (ids), time.Time (updatedAt) and nullable
@@ -1550,16 +1542,7 @@ func (s *PermsStore) loadIDsWithTime(ctx context.Context, q *sqlf.Query) (map[in
 }
 
 // PermsMetrics contains metrics values calculated by querying the database.
-type PermsMetrics struct {
-	// The number of users with stale permissions.
-	UsersWithStalePerms int64
-	// The seconds between users with oldest and the most up-to-date permissions.
-	UsersPermsGapSeconds float64
-	// The number of repositories with stale permissions.
-	ReposWithStalePerms int64
-	// The seconds between repositories with oldest and the most up-to-date permissions.
-	ReposPermsGapSeconds float64
-}
+type PermsMetrics struct { /* all structs must go */ }
 
 // Metrics returns calculated metrics values by querying the database. The "staleDur"
 // argument indicates how long ago was the last update to be considered as stale.
diff --git a/enterprise/internal/db/perms_store_mock.go b/enterprise/internal/db/perms_store_mock.go
index cc39885..1501f22 100644
--- a/enterprise/internal/db/perms_store_mock.go
+++ b/enterprise/internal/db/perms_store_mock.go
@@ -7,15 +7,4 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/extsvc"
 )
 
-type MockPerms struct {
-	Transact                     func(ctx context.Context) (*PermsStore, error)
-	LoadRepoPermissions          func(ctx context.Context, p *authz.RepoPermissions) error
-	LoadUserPermissions          func(ctx context.Context, p *authz.UserPermissions) error
-	LoadUserPendingPermissions   func(ctx context.Context, p *authz.UserPendingPermissions) error
-	SetUserPermissions           func(ctx context.Context, p *authz.UserPermissions) error
-	SetRepoPermissions           func(ctx context.Context, p *authz.RepoPermissions) error
-	SetRepoPendingPermissions    func(ctx context.Context, accounts *extsvc.Accounts, p *authz.RepoPermissions) error
-	ListPendingUsers             func(ctx context.Context) ([]string, error)
-	ListExternalAccounts         func(ctx context.Context, userID int32) ([]*extsvc.Account, error)
-	GetUserIDsByExternalAccounts func(ctx context.Context, accounts *extsvc.Accounts) (map[string]int32, error)
-}
+type MockPerms struct { /* all structs must go */ }
diff --git a/enterprise/internal/db/perms_store_test.go b/enterprise/internal/db/perms_store_test.go
index bbd77c8..b45a860 100644
--- a/enterprise/internal/db/perms_store_test.go
+++ b/enterprise/internal/db/perms_store_test.go
@@ -293,12 +293,7 @@ func checkRegularPermsTable(s *PermsStore, sql string, expects map[int32][]uint3
 }
 
 func testPermsStore_SetUserPermissions(db *sql.DB) func(*testing.T) {
-	tests := []struct {
-		name            string
-		updates         []*authz.UserPermissions
-		expectUserPerms map[int32][]uint32 // user_id -> object_ids
-		expectRepoPerms map[int32][]uint32 // repo_id -> user_ids
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "empty",
 			updates: []*authz.UserPermissions{
@@ -470,12 +465,7 @@ func testPermsStore_SetUserPermissions(db *sql.DB) func(*testing.T) {
 }
 
 func testPermsStore_SetRepoPermissions(db *sql.DB) func(*testing.T) {
-	tests := []struct {
-		name            string
-		updates         []*authz.RepoPermissions
-		expectUserPerms map[int32][]uint32 // user_id -> object_ids
-		expectRepoPerms map[int32][]uint32 // repo_id -> user_ids
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "empty",
 			updates: []*authz.RepoPermissions{
@@ -949,16 +939,8 @@ func testPermsStore_SetRepoPendingPermissions(db *sql.DB) func(*testing.T) {
 		AccountID:   "cindy",
 	}
 
-	type update struct {
-		accounts *extsvc.Accounts
-		perm     *authz.RepoPermissions
-	}
-	tests := []struct {
-		name                   string
-		updates                []update
-		expectUserPendingPerms map[extsvc.AccountSpec][]uint32 // account -> object_ids
-		expectRepoPendingPerms map[int32][]extsvc.AccountSpec  // repo_id -> accounts
-	}{
+	type update struct { /* all structs must go */ }
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "empty",
 			updates: []update{
@@ -1153,15 +1135,8 @@ func testPermsStore_SetRepoPendingPermissions(db *sql.DB) func(*testing.T) {
 }
 
 func testPermsStore_ListPendingUsers(db *sql.DB) func(*testing.T) {
-	type update struct {
-		accounts *extsvc.Accounts
-		perm     *authz.RepoPermissions
-	}
-	tests := []struct {
-		name               string
-		updates            []update
-		expectPendingUsers []string
-	}{
+	type update struct { /* all structs must go */ }
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:               "no user with pending permissions",
 			expectPendingUsers: nil,
@@ -1274,27 +1249,10 @@ func testPermsStore_GrantPendingPermissions(db *sql.DB) func(*testing.T) {
 		AccountID:   "bob",
 	}
 
-	type pending struct {
-		accounts *extsvc.Accounts
-		perm     *authz.RepoPermissions
-	}
-	type update struct {
-		regulars []*authz.RepoPermissions
-		pendings []pending
-	}
-	type grant struct {
-		userID int32
-		perm   *authz.UserPendingPermissions
-	}
-	tests := []struct {
-		name                   string
-		updates                []update
-		grants                 []grant
-		expectUserPerms        map[int32][]uint32              // user_id -> object_ids
-		expectRepoPerms        map[int32][]uint32              // repo_id -> user_ids
-		expectUserPendingPerms map[extsvc.AccountSpec][]uint32 // account -> object_ids
-		expectRepoPendingPerms map[int32][]extsvc.AccountSpec  // repo_id -> accounts
-	}{
+	type pending struct { /* all structs must go */ }
+	type update struct { /* all structs must go */ }
+	type grant struct { /* all structs must go */ }
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "empty",
 			grants: []grant{
diff --git a/enterprise/internal/license/license.go b/enterprise/internal/license/license.go
index a333a30..764c0e3 100644
--- a/enterprise/internal/license/license.go
+++ b/enterprise/internal/license/license.go
@@ -27,11 +27,7 @@ import (
 // were generated with the old fields must still work until all customers have added the new
 // license. Increment (encodedInfo).Version and formatVersion when you make backward-incompatbile
 // changes.
-type Info struct {
-	Tags      []string  `json:"t"` // tags that denote features/restrictions (e.g., "starter" or "dev")
-	UserCount uint      `json:"u"` // the number of users that this license is valid for
-	ExpiresAt time.Time `json:"e"` // the date when this license expires
-}
+type Info struct { /* all structs must go */ }
 
 // IsExpired reports whether the license has expired.
 func (l Info) IsExpired() bool {
@@ -74,11 +70,7 @@ func ParseTagsInput(tagsStr string) []string {
 	return tags
 }
 
-type encodedInfo struct {
-	Version int     `json:"v"` // version number of the license key info format (not Sourcegraph product/build version)
-	Nonce   [8]byte `json:"n"` // random nonce so that licenses with identical Info values
-	Info
-}
+type encodedInfo struct { /* all structs must go */ }
 
 const formatVersion = 1 // (encodedInfo).Version value
 
@@ -102,10 +94,7 @@ func (l *Info) decode(data []byte) error {
 	return nil
 }
 
-type signedKey struct {
-	Signature   *ssh.Signature `json:"sig"`
-	EncodedInfo []byte         `json:"info"`
-}
+type signedKey struct { /* all structs must go */ }
 
 // GenerateSignedKey generates a new signed license key with the given license information, using
 // the private key for the signature.
diff --git a/internal/actor/actor.go b/internal/actor/actor.go
index 7efcd62..211d62d 100644
--- a/internal/actor/actor.go
+++ b/internal/actor/actor.go
@@ -12,19 +12,7 @@ import (
 
 // Actor represents an agent that accesses resources. It can represent an anonymous user, an
 // authenticated user, or an internal Sourcegraph service.
-type Actor struct {
-	// UID is the unique ID of the authenticated user, or 0 for anonymous actors.
-	UID int32 `json:",omitempty"`
-
-	// Internal is true if the actor represents an internal Sourcegraph service (and is therefore
-	// not tied to a specific user).
-	Internal bool `json:",omitempty"`
-
-	// FromSessionCookie is whether a session cookie was used to authenticate the actor. It is used
-	// to selectively display a logout link. (If the actor wasn't authenticated with a session
-	// cookie, logout would be ineffective.)
-	FromSessionCookie bool `json:"-"`
-}
+type Actor struct { /* all structs must go */ }
 
 // FromUser returns an actor corresponding to a user
 func FromUser(uid int32) *Actor { return &Actor{UID: uid} }
diff --git a/internal/api/api.go b/internal/api/api.go
index 6624e14..f2f924f 100644
--- a/internal/api/api.go
+++ b/internal/api/api.go
@@ -18,20 +18,7 @@ type RepoName string
 type CommitID string
 
 // Repo represents a source code repository.
-type Repo struct {
-	// ID is the unique numeric ID for this repository on Sourcegraph.
-	ID RepoID
-
-	// ExternalRepo identifies this repository by its ID on the external service where it resides (and the external
-	// service itself).
-	ExternalRepo *ExternalRepoSpec
-
-	// Name is the name of the repository (such as "github.com/user/repo").
-	Name RepoName
-	// Enabled is whether the repository is enabled. Disabled repositories are
-	// not accessible by users (except site admins).
-	Enabled bool
-}
+type Repo struct { /* all structs must go */ }
 
 func (Repo) Fork() bool {
 	// TODO(sqs): update callers
@@ -39,28 +26,7 @@ func (Repo) Fork() bool {
 }
 
 // ExternalRepoSpec specifies a repository on an external service (such as GitHub or GitLab).
-type ExternalRepoSpec struct {
-	// ID is the repository's ID on the external service. Its value is opaque except to the repo-updater.
-	//
-	// For GitHub, this is the GitHub GraphQL API's node ID for the repository.
-	ID string
-
-	// ServiceType is the type of external service. Its value is opaque except to the repo-updater.
-	//
-	// Example: "github", "gitlab", etc.
-	ServiceType string
-
-	// ServiceID is the particular instance of the external service where this repository resides. Its value is
-	// opaque but typically consists of the canonical base URL to the service.
-	//
-	// Implementations must take care to normalize this URL. For example, if different GitHub.com repository code
-	// paths used slightly different values here (such as "https://github.com/" and "https://github.com", note the
-	// lack of trailing slash), then the same logical repository would be incorrectly treated as multiple distinct
-	// repositories depending on the code path that provided its ServiceID value.
-	//
-	// Example: "https://github.com/", "https://github-enterprise.example.com/"
-	ServiceID string
-}
+type ExternalRepoSpec struct { /* all structs must go */ }
 
 // Equal returns true if r is equal to s.
 func (r ExternalRepoSpec) Equal(s *ExternalRepoSpec) bool {
@@ -83,12 +49,7 @@ func (r ExternalRepoSpec) String() string {
 }
 
 // A SettingsSubject is something that can have settings. Exactly 1 field must be nonzero.
-type SettingsSubject struct {
-	Default bool   // whether this is for default settings
-	Site    bool   // whether this is for global settings
-	Org     *int32 // the org's ID
-	User    *int32 // the user's ID
-}
+type SettingsSubject struct { /* all structs must go */ }
 
 func (s SettingsSubject) String() string {
 	switch {
@@ -106,24 +67,10 @@ func (s SettingsSubject) String() string {
 }
 
 // Settings contains settings for a subject.
-type Settings struct {
-	ID           int32           // the unique ID of this settings value
-	Subject      SettingsSubject // the subject of these settings
-	AuthorUserID *int32          // the ID of the user who authored this settings value
-	Contents     string          // the raw JSON (with comments and trailing commas allowed)
-	CreatedAt    time.Time       // the date when this settings value was created
-}
+type Settings struct { /* all structs must go */ }
 
 // ExternalService represents an complete external service record.
-type ExternalService struct {
-	ID          int64
-	Kind        string
-	DisplayName string
-	Config      string
-	CreatedAt   time.Time
-	UpdatedAt   time.Time
-	DeletedAt   *time.Time
-}
+type ExternalService struct { /* all structs must go */ }
 
 func cmp(a, b string) int {
 	switch {
diff --git a/internal/api/httpapi_schema.go b/internal/api/httpapi_schema.go
index d18bf41..ea12d87 100644
--- a/internal/api/httpapi_schema.go
+++ b/internal/api/httpapi_schema.go
@@ -7,45 +7,10 @@ package api
 // values. If ExternalRepo is not set, then it tries to find a stored repository with the same RepoName value.
 //
 // NOTE: Some fields are only used during creation (and are not used to update an existing repository).
-type RepoCreateOrUpdateRequest struct {
-	// ExternalRepo identifies this repository by its ID on the external service where it resides (and the external
-	// service itself).
-	ExternalRepo ExternalRepoSpec
+type RepoCreateOrUpdateRequest struct { /* all structs must go */ }
 
-	// RepoName is the repository's name.
-	//
-	// TODO(sqs): Add a way for callers to request that this repository be renamed.
-	RepoName `json:"repo"`
+type PhabricatorRepoCreateRequest struct { /* all structs must go */ }
 
-	// Enabled is whether the repository should be enabled when initially created.
-	//
-	// NOTE: If the repository already exists when this request is received, its enablement is not updated. This
-	// field is used only when creating the repository.
-	Enabled bool `json:"enabled"`
+type ExternalServiceConfigsRequest struct { /* all structs must go */ }
 
-	// Description is the repository's description on its external origin.
-	Description string `json:"description"`
-
-	// Fork is whether this repository is a fork (according to its external origin).
-	Fork bool `json:"fork"`
-
-	// Archived is whether this repository is archived (according to its external origin).
-	Archived bool `json:"archived"`
-}
-
-type PhabricatorRepoCreateRequest struct {
-	RepoName `json:"repo"`
-	Callsign string `json:"callsign"`
-	URL      string `json:"url"`
-}
-
-type ExternalServiceConfigsRequest struct {
-	Kind string `json:"kind"`
-}
-
-type ExternalServicesListRequest struct {
-	// NOTE(tsenart): We must keep this field in addition to the
-	// Kinds field until after we roll-out this change, for backwards compatibility.
-	Kind  string   `json:"kind"`
-	Kinds []string `json:"kinds"`
-}
+type ExternalServicesListRequest struct { /* all structs must go */ }
diff --git a/internal/api/internal_client.go b/internal/api/internal_client.go
index 4017da3..fc660fc 100644
--- a/internal/api/internal_client.go
+++ b/internal/api/internal_client.go
@@ -21,10 +21,7 @@ import (
 
 var frontendInternal = env.Get("SRC_FRONTEND_INTERNAL", "sourcegraph-frontend-internal", "HTTP address for internal frontend HTTP API.")
 
-type internalClient struct {
-	// URL is the root to the internal API frontend server.
-	URL string
-}
+type internalClient struct { /* all structs must go */ }
 
 var InternalClient = &internalClient{URL: "http://" + frontendInternal}
 
@@ -82,23 +79,11 @@ func (c *internalClient) WaitForFrontend(ctx context.Context) error {
 	return nil
 }
 
-type SavedQueryIDSpec struct {
-	Subject SettingsSubject
-	Key     string
-}
+type SavedQueryIDSpec struct { /* all structs must go */ }
 
 // ConfigSavedQuery is the JSON shape of a saved query entry in the JSON configuration
 // (i.e., an entry in the {"search.savedQueries": [...]} array).
-type ConfigSavedQuery struct {
-	Key             string  `json:"key,omitempty"`
-	Description     string  `json:"description"`
-	Query           string  `json:"query"`
-	Notify          bool    `json:"notify,omitempty"`
-	NotifySlack     bool    `json:"notifySlack,omitempty"`
-	UserID          *int32  `json:"userID"`
-	OrgID           *int32  `json:"orgID"`
-	SlackWebhookURL *string `json:"slackWebhookURL"`
-}
+type ConfigSavedQuery struct { /* all structs must go */ }
 
 func (sq ConfigSavedQuery) Equals(other ConfigSavedQuery) bool {
 	a, _ := json.Marshal(sq)
@@ -108,15 +93,10 @@ func (sq ConfigSavedQuery) Equals(other ConfigSavedQuery) bool {
 
 // PartialConfigSavedQueries is the JSON configuration shape, including only the
 // search.savedQueries section.
-type PartialConfigSavedQueries struct {
-	SavedQueries []ConfigSavedQuery `json:"search.savedQueries"`
-}
+type PartialConfigSavedQueries struct { /* all structs must go */ }
 
 // SavedQuerySpecAndConfig represents a saved query configuration its unique ID.
-type SavedQuerySpecAndConfig struct {
-	Spec   SavedQueryIDSpec
-	Config ConfigSavedQuery
-}
+type SavedQuerySpecAndConfig struct { /* all structs must go */ }
 
 // SavedQueriesListAll lists all saved queries, from every user, org, etc.
 func (c *internalClient) SavedQueriesListAll(ctx context.Context) (map[SavedQueryIDSpec]ConfigSavedQuery, error) {
@@ -133,22 +113,7 @@ func (c *internalClient) SavedQueriesListAll(ctx context.Context) (map[SavedQuer
 }
 
 // SavedQueryInfo represents information about a saved query that was executed.
-type SavedQueryInfo struct {
-	// Query is the search query in question.
-	Query string
-
-	// LastExecuted is the timestamp of the last time that the search query was
-	// executed.
-	LastExecuted time.Time
-
-	// LatestResult is the timestamp of the latest-known result for the search
-	// query. Therefore, searching `after:<LatestResult>` will return the new
-	// search results not yet seen.
-	LatestResult time.Time
-
-	// ExecDuration is the amount of time it took for the query to execute.
-	ExecDuration time.Duration
-}
+type SavedQueryInfo struct { /* all structs must go */ }
 
 // SavedQueriesGetInfo gets the info from the DB for the given saved query. nil
 // is returned if there is no existing info for the saved query.
diff --git a/internal/atomicvalue/atomicvalue.go b/internal/atomicvalue/atomicvalue.go
index 71e406b..81ff2f0 100644
--- a/internal/atomicvalue/atomicvalue.go
+++ b/internal/atomicvalue/atomicvalue.go
@@ -8,10 +8,7 @@ package atomicvalue
 import "sync"
 
 // Value manages an atomic value.
-type Value struct {
-	mu    sync.RWMutex
-	value interface{}
-}
+type Value struct { /* all structs must go */ }
 
 // Get returns the current value.
 func (v *Value) Get() interface{} {
diff --git a/internal/authz/bitbucketserver/integration_test.go b/internal/authz/bitbucketserver/integration_test.go
index aa10ca3..5b14508 100644
--- a/internal/authz/bitbucketserver/integration_test.go
+++ b/internal/authz/bitbucketserver/integration_test.go
@@ -17,10 +17,7 @@ func TestIntegration(t *testing.T) {
 	f := newFixtures()
 	f.load(t, cli)
 
-	for _, tc := range []struct {
-		name string
-		test func(*testing.T)
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{"Provider/FetchAccount", testProviderFetchAccount(f, cli)},
 		{"Provider/FetchUserPerms", testProviderFetchUserPerms(f, cli)},
 		{"Provider/FetchRepoPerms", testProviderFetchRepoPerms(f, cli)},
diff --git a/internal/authz/bitbucketserver/provider.go b/internal/authz/bitbucketserver/provider.go
index 3bc15a1..099b826 100644
--- a/internal/authz/bitbucketserver/provider.go
+++ b/internal/authz/bitbucketserver/provider.go
@@ -20,17 +20,7 @@ import (
 
 // Provider is an implementation of AuthzProvider that provides repository permissions as
 // determined from a Bitbucket Server instance API.
-type Provider struct {
-	urn      string
-	client   *bitbucketserver.Client
-	codeHost *extsvc.CodeHost
-	pageSize int // Page size to use in paginated requests.
-
-	// pluginPerm enables fetching permissions from the alternative roaring
-	// bitmap endpoint provided by the Bitbucket Server Sourcegraph plugin:
-	// https://github.com/sourcegraph/bitbucket-server-plugin
-	pluginPerm bool
-}
+type Provider struct { /* all structs must go */ }
 
 var _ authz.Provider = (*Provider)(nil)
 
diff --git a/internal/authz/bitbucketserver/provider_test.go b/internal/authz/bitbucketserver/provider_test.go
index 325c863..f090d8b 100644
--- a/internal/authz/bitbucketserver/provider_test.go
+++ b/internal/authz/bitbucketserver/provider_test.go
@@ -28,11 +28,7 @@ func TestProvider_Validate(t *testing.T) {
 		instanceURL = "https://bitbucket.sgdev.org"
 	}
 
-	for _, tc := range []struct {
-		name     string
-		client   func(*bitbucketserver.Client)
-		problems []string
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{
 			name: "no-problems-when-authenticated-as-admin",
 		},
@@ -72,13 +68,7 @@ func testProviderFetchAccount(f *fixtures, cli *bitbucketserver.Client) func(*te
 
 		h := codeHost{CodeHost: p.codeHost}
 
-		for _, tc := range []struct {
-			name string
-			ctx  context.Context
-			user *types.User
-			acct *extsvc.Account
-			err  string
-		}{
+		for _, tc := range []struct { /* all structs must go */ }{
 			{
 				name: "no user given",
 				user: nil,
@@ -134,13 +124,7 @@ func testProviderFetchUserPerms(f *fixtures, cli *bitbucketserver.Client) func(*
 			return ids
 		}
 
-		for _, tc := range []struct {
-			name string
-			ctx  context.Context
-			acct *extsvc.Account
-			ids  []extsvc.RepoID
-			err  string
-		}{
+		for _, tc := range []struct { /* all structs must go */ }{
 			{
 				name: "no account provided",
 				acct: nil,
@@ -228,13 +212,7 @@ func testProviderFetchRepoPerms(f *fixtures, cli *bitbucketserver.Client) func(*
 			return ids
 		}
 
-		for _, tc := range []struct {
-			name string
-			ctx  context.Context
-			repo *extsvc.Repository
-			ids  []extsvc.AccountID
-			err  string
-		}{
+		for _, tc := range []struct { /* all structs must go */ }{
 			{
 				name: "no repo provided",
 				repo: nil,
@@ -307,14 +285,7 @@ func marshalJSON(v interface{}) []byte {
 // of Bitbucket Server with docker, create an Application Link as per
 // https://docs.sourcegraph.com/admin/external_service/bitbucket_server, and
 // then run the tests with -update=true.
-type fixtures struct {
-	users             map[string]*bitbucketserver.User
-	groups            map[string]*bitbucketserver.Group
-	projects          map[string]*bitbucketserver.Project
-	repos             map[string]*bitbucketserver.Repo
-	groupProjectPerms []*bitbucketserver.GroupProjectPermission
-	userRepoPerms     []*bitbucketserver.UserRepoPermission
-}
+type fixtures struct { /* all structs must go */ }
 
 func (f fixtures) load(t *testing.T, cli *bitbucketserver.Client) {
 	ctx := context.Background()
@@ -459,9 +430,7 @@ func newFixtures() *fixtures {
 	}
 }
 
-type codeHost struct {
-	*extsvc.CodeHost
-}
+type codeHost struct { /* all structs must go */ }
 
 func (h codeHost) externalAccount(userID int32, u *bitbucketserver.User) *extsvc.Account {
 	bs := marshalJSON(u)
diff --git a/internal/authz/github/client.go b/internal/authz/github/client.go
index 8ea7ae8..b0dde87 100644
--- a/internal/authz/github/client.go
+++ b/internal/authz/github/client.go
@@ -20,9 +20,7 @@ type client interface {
 var _ client = (*ClientAdapter)(nil)
 
 // ClientAdapter is an adapter for GitHub API client.
-type ClientAdapter struct {
-	*github.Client
-}
+type ClientAdapter struct { /* all structs must go */ }
 
 func (c *ClientAdapter) WithToken(token string) client {
 	return &ClientAdapter{Client: c.Client.WithToken(token)}
@@ -30,13 +28,7 @@ func (c *ClientAdapter) WithToken(token string) client {
 
 var _ client = (*mockClient)(nil)
 
-type mockClient struct {
-	MockGetRepositoryByNodeID          func(ctx context.Context, id string) (*github.Repository, error)
-	MockGetRepositoriesByNodeIDFromAPI func(ctx context.Context, nodeIDs []string) (map[string]*github.Repository, error)
-	MockListAffiliatedRepositories     func(ctx context.Context, visibility github.Visibility, page int) (repos []*github.Repository, hasNextPage bool, rateLimitCost int, err error)
-	MockListRepositoryCollaborators    func(ctx context.Context, owner, repo string, page int) (users []*github.Collaborator, hasNextPage bool, _ error)
-	MockWithToken                      func(token string) client
-}
+type mockClient struct { /* all structs must go */ }
 
 func (m *mockClient) GetRepositoryByNodeID(ctx context.Context, id string) (*github.Repository, error) {
 	return m.MockGetRepositoryByNodeID(ctx, id)
diff --git a/internal/authz/github/github.go b/internal/authz/github/github.go
index 9d41f1c..dc19c0b 100644
--- a/internal/authz/github/github.go
+++ b/internal/authz/github/github.go
@@ -16,11 +16,7 @@ import (
 )
 
 // Provider implements authz.Provider for GitHub repository permissions.
-type Provider struct {
-	urn      string
-	client   client
-	codeHost *extsvc.CodeHost
-}
+type Provider struct { /* all structs must go */ }
 
 func NewProvider(urn string, githubURL *url.URL, baseToken string, client *github.Client) *Provider {
 	if client == nil {
diff --git a/internal/authz/gitlab/common_test.go b/internal/authz/gitlab/common_test.go
index ff48741..68f2a00 100644
--- a/internal/authz/gitlab/common_test.go
+++ b/internal/authz/gitlab/common_test.go
@@ -31,65 +31,9 @@ func init() {
 //
 // We prefer to do it this way, instead of defining an interface for the GitLab client, because this
 // preserves the ability to jump-to-def around the actual implementation.
-type mockGitLab struct {
-	t *testing.T
+type mockGitLab struct { /* all structs must go */ }
 
-	// projs is a map of all projects on the instance, keyed by project ID
-	projs map[int]*gitlab.Project
-
-	// users is a list of all users
-	users []*gitlab.User
-
-	// privateGuest is a map from GitLab user ID to list of metadata-accessible private project IDs on GitLab
-	privateGuest map[int32][]int
-
-	// privateRepo is a map from GitLab user ID to list of repo-content-accessible private project IDs on GitLab.
-	// Projects in each list are also metadata-accessible.
-	privateRepo map[int32][]int
-
-	// oauthToks is a map from OAuth token to GitLab user account ID
-	oauthToks map[string]int32
-
-	// sudoTok is the sudo token, if there is one
-	sudoTok string
-
-	// madeGetProject records what GetProject calls have been made. It's a map from oauth token -> GetProjectOp -> count.
-	madeGetProject map[string]map[gitlab.GetProjectOp]int
-
-	// madeListProjects records what ListProjects calls have been made. It's a map from oauth token -> string (urlStr) -> count.
-	madeListProjects map[string]map[string]int
-
-	// madeListTree records what ListTree calls have been made. It's a map from oauth token -> ListTreeOp -> count.
-	madeListTree map[string]map[gitlab.ListTreeOp]int
-
-	// madeUsers records what ListUsers calls have been made. It's a map from oauth token -> URL string -> count
-	madeUsers map[string]map[string]int
-}
-
-type mockGitLabOp struct {
-	t *testing.T
-
-	// users is a list of users on the GitLab instance
-	users []*gitlab.User
-
-	// publicProjs is the list of public project IDs
-	publicProjs []int
-
-	// internalProjs is the list of internal project IDs
-	internalProjs []int
-
-	// privateProjs is a map from { privateProjectID -> [ guestUserIDs, contentUserIDs ] } It
-	// determines the structure of private project permissions. A "guest" user can access private
-	// project metadata, but not project repository contents. A "content" user can access both.
-	privateProjs map[int][2][]int32
-
-	// oauthToks is a map from OAuth tokens to the corresponding GitLab user ID
-	oauthToks map[string]int32
-
-	// sudoTok, if non-empty, is the personal access token accepted with sudo permissions on this
-	// instance. The mock implementation only supports having one such token value.
-	sudoTok string
-}
+type mockGitLabOp struct { /* all structs must go */ }
 
 // newMockGitLab returns a new mockGitLab instance
 func newMockGitLab(op mockGitLabOp) mockGitLab {
@@ -351,10 +295,7 @@ func (m mockCache) Delete(key string) {
 	delete(m, key)
 }
 
-type mockAuthnProvider struct {
-	configID  providers.ConfigID
-	serviceID string
-}
+type mockAuthnProvider struct { /* all structs must go */ }
 
 func (m mockAuthnProvider) ConfigID() providers.ConfigID {
 	return m.configID
diff --git a/internal/authz/gitlab/oauth.go b/internal/authz/gitlab/oauth.go
index cde28da..e7616e3 100644
--- a/internal/authz/gitlab/oauth.go
+++ b/internal/authz/gitlab/oauth.go
@@ -16,29 +16,9 @@ import (
 
 var _ authz.Provider = (*OAuthProvider)(nil)
 
-type OAuthProvider struct {
-	// The token is the access token used for syncing repositories from the code host,
-	// but it may or may not be a sudo-scoped.
-	token string
-
-	urn            string
-	clientProvider *gitlab.ClientProvider
-	clientURL      *url.URL
-	codeHost       *extsvc.CodeHost
-}
-
-type OAuthProviderOp struct {
-	// The unique resource identifier of the external service where the provider is defined.
-	URN string
+type OAuthProvider struct { /* all structs must go */ }
 
-	// BaseURL is the URL of the GitLab instance.
-	BaseURL *url.URL
-
-	// Token is an access token with api scope, it may or may not have sudo scope.
-	//
-	// 🚨 SECURITY: This value contains secret information that must not be shown to non-site-admins.
-	Token string
-}
+type OAuthProviderOp struct { /* all structs must go */ }
 
 func newOAuthProvider(op OAuthProviderOp, cli httpcli.Doer) *OAuthProvider {
 	return &OAuthProvider{
diff --git a/internal/authz/gitlab/oauth_test.go b/internal/authz/gitlab/oauth_test.go
index 502b188..9d2d549 100644
--- a/internal/authz/gitlab/oauth_test.go
+++ b/internal/authz/gitlab/oauth_test.go
@@ -15,9 +15,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/rcache"
 )
 
-type mockDoer struct {
-	do func(*http.Request) (*http.Response, error)
-}
+type mockDoer struct { /* all structs must go */ }
 
 func (c *mockDoer) Do(r *http.Request) (*http.Response, error) {
 	return c.do(r)
diff --git a/internal/authz/gitlab/sudo.go b/internal/authz/gitlab/sudo.go
index b951cf7..0d8bc30 100644
--- a/internal/authz/gitlab/sudo.go
+++ b/internal/authz/gitlab/sudo.go
@@ -20,47 +20,11 @@ import (
 // SudoProvider is an implementation of AuthzProvider that provides repository permissions as
 // determined from a GitLab instance API. For documentation of specific fields, see the docstrings
 // of SudoProviderOp.
-type SudoProvider struct {
-	// sudoToken is the sudo-scoped access token. This is different from the Sudo parameter, which
-	// is set per client and defines which user to impersonate.
-	sudoToken string
-
-	urn               string
-	clientProvider    *gitlab.ClientProvider
-	clientURL         *url.URL
-	codeHost          *extsvc.CodeHost
-	gitlabProvider    string
-	authnConfigID     providers.ConfigID
-	useNativeUsername bool
-}
+type SudoProvider struct { /* all structs must go */ }
 
 var _ authz.Provider = (*SudoProvider)(nil)
 
-type SudoProviderOp struct {
-	// The unique resource identifier of the external service where the provider is defined.
-	URN string
-
-	// BaseURL is the URL of the GitLab instance.
-	BaseURL *url.URL
-
-	// AuthnConfigID identifies the authn provider to use to lookup users on the GitLab instance.
-	// This should be the authn provider that's used to sign into the GitLab instance.
-	AuthnConfigID providers.ConfigID
-
-	// GitLabProvider is the id of the authn provider to GitLab. It will be used in the
-	// `users?extern_uid=$uid&provider=$provider` API query.
-	GitLabProvider string
-
-	// SudoToken is an access token with sudo *and* api scope.
-	//
-	// 🚨 SECURITY: This value contains secret information that must not be shown to non-site-admins.
-	SudoToken string
-
-	// UseNativeUsername, if true, maps Sourcegraph users to GitLab users using username equivalency
-	// instead of the authn provider user ID. This is *very* insecure (Sourcegraph usernames can be
-	// changed at the user's will) and should only be used in development environments.
-	UseNativeUsername bool
-}
+type SudoProviderOp struct { /* all structs must go */ }
 
 func newSudoProvider(op SudoProviderOp, cli httpcli.Doer) *SudoProvider {
 	return &SudoProvider{
diff --git a/internal/authz/gitlab/sudo_test.go b/internal/authz/gitlab/sudo_test.go
index 92e1a00..627df20 100644
--- a/internal/authz/gitlab/sudo_test.go
+++ b/internal/authz/gitlab/sudo_test.go
@@ -24,25 +24,8 @@ import (
 
 func Test_GitLab_FetchAccount(t *testing.T) {
 	// Test structures
-	type call struct {
-		description string
-
-		user    *types.User
-		current []*extsvc.Account
-
-		expMine *extsvc.Account
-	}
-	type test struct {
-		description string
-
-		// authnProviders is the list of auth providers that are mocked
-		authnProviders []providers.Provider
-
-		// op configures the SudoProvider instance
-		op SudoProviderOp
-
-		calls []call
-	}
+	type call struct { /* all structs must go */ }
+	type test struct { /* all structs must go */ }
 
 	// Mocks
 	gitlabMock := newMockGitLab(mockGitLabOp{
diff --git a/internal/buildkite/buildkite.go b/internal/buildkite/buildkite.go
index d636b98..c3abd84 100644
--- a/internal/buildkite/buildkite.go
+++ b/internal/buildkite/buildkite.go
@@ -12,41 +12,15 @@ import (
 	"github.com/ghodss/yaml"
 )
 
-type Pipeline struct {
-	Steps []interface{} `json:"steps"`
-}
+type Pipeline struct { /* all structs must go */ }
 
-type BuildOptions struct {
-	Message  string                 `json:"message,omitempty"`
-	Commit   string                 `json:"commit,omitempty"`
-	Branch   string                 `json:"branch,omitempty"`
-	MetaData map[string]interface{} `json:"meta_data,omitempty"`
-	Env      map[string]string      `json:"env,omitempty"`
-}
+type BuildOptions struct { /* all structs must go */ }
 
-type Step struct {
-	Label            string                 `json:"label"`
-	Command          []string               `json:"command,omitempty"`
-	Trigger          string                 `json:"trigger,omitempty"`
-	Async            bool                   `json:"async,omitempty"`
-	Build            *BuildOptions          `json:"build,omitempty"`
-	Env              map[string]string      `json:"env,omitempty"`
-	Plugins          map[string]interface{} `json:"plugins,omitempty"`
-	ArtifactPaths    string                 `json:"artifact_paths,omitempty"`
-	ConcurrencyGroup string                 `json:"concurrency_group,omitempty"`
-	Concurrency      int                    `json:"concurrency,omitempty"`
-	SoftFail         bool                   `json:"soft_fail,omitempty"`
-	Retry            *RetryOptions          `json:"retry,omitempty"`
-	Agents           map[string]string      `json:"agents,omitempty"`
-}
+type Step struct { /* all structs must go */ }
 
-type RetryOptions struct {
-	Automatic *AutomaticRetryOptions `json:"automatic,omitempty"`
-}
+type RetryOptions struct { /* all structs must go */ }
 
-type AutomaticRetryOptions struct {
-	Limit int `json:"limit,omitempty"`
-}
+type AutomaticRetryOptions struct { /* all structs must go */ }
 
 var Plugins = make(map[string]interface{})
 
diff --git a/internal/campaigns/types.go b/internal/campaigns/types.go
index 5ffc1f7..912d9e5 100644
--- a/internal/campaigns/types.go
+++ b/internal/campaigns/types.go
@@ -53,20 +53,7 @@ func IsKindSupported(extSvcKind string) bool {
 }
 
 // A Campaign of changesets over multiple Repos over time.
-type Campaign struct {
-	ID              int64
-	Name            string
-	Description     string
-	Branch          string
-	AuthorID        int32
-	NamespaceUserID int32
-	NamespaceOrgID  int32
-	CreatedAt       time.Time
-	UpdatedAt       time.Time
-	ChangesetIDs    []int64
-	ClosedAt        time.Time
-	CampaignSpecID  int64
-}
+type Campaign struct { /* all structs must go */ }
 
 // Clone returns a clone of a Campaign.
 func (c *Campaign) Clone() *Campaign {
@@ -143,11 +130,7 @@ func (s ChangesetExternalState) Valid() bool {
 }
 
 // ChangesetLabel represents a label applied to a changeset
-type ChangesetLabel struct {
-	Name        string
-	Color       string
-	Description string
-}
+type ChangesetLabel struct { /* all structs must go */ }
 
 // CampaignState defines the possible states of a Campaign
 type CampaignState string
@@ -209,28 +192,7 @@ func (s ChangesetCheckState) Valid() bool {
 
 // A Changeset is a changeset on a code host belonging to a Repository and many
 // Campaigns.
-type Changeset struct {
-	ID                  int64
-	RepoID              api.RepoID
-	CreatedAt           time.Time
-	UpdatedAt           time.Time
-	Metadata            interface{}
-	CampaignIDs         []int64
-	ExternalID          string
-	ExternalServiceType string
-	ExternalBranch      string
-	ExternalDeletedAt   time.Time
-	ExternalUpdatedAt   time.Time
-	ExternalState       ChangesetExternalState
-	ExternalReviewState ChangesetReviewState
-	ExternalCheckState  ChangesetCheckState
-	CreatedByCampaign   bool
-	AddedToCampaign     bool
-	DiffStatAdded       *int32
-	DiffStatChanged     *int32
-	DiffStatDeleted     *int32
-	SyncState           ChangesetSyncState
-}
+type Changeset struct { /* all structs must go */ }
 
 // Clone returns a clone of a Changeset.
 func (c *Changeset) Clone() *Changeset {
@@ -642,15 +604,7 @@ func (c *Changeset) Labels() []ChangesetLabel {
 	}
 }
 
-type ChangesetSyncState struct {
-	BaseRefOid string
-	HeadRefOid string
-
-	// This is essentially the result of c.ExternalState != CampaignStateOpen
-	// the last time a sync occured. We use this to short circuit computing the
-	// sync state if the changeset remains closed.
-	IsComplete bool
-}
+type ChangesetSyncState struct { /* all structs must go */ }
 
 func (state *ChangesetSyncState) Equals(old *ChangesetSyncState) bool {
 	return state.BaseRefOid == old.BaseRefOid && state.HeadRefOid == old.HeadRefOid && state.IsComplete == old.IsComplete
@@ -658,15 +612,7 @@ func (state *ChangesetSyncState) Equals(old *ChangesetSyncState) bool {
 
 // A ChangesetEvent is an event that happened in the lifetime
 // and context of a Changeset.
-type ChangesetEvent struct {
-	ID          int64
-	ChangesetID int64
-	Kind        ChangesetEventKind
-	Key         string // Deduplication key
-	CreatedAt   time.Time
-	UpdatedAt   time.Time
-	Metadata    interface{}
-}
+type ChangesetEvent struct { /* all structs must go */ }
 
 // Clone returns a clone of a ChangesetEvent.
 func (e *ChangesetEvent) Clone() *ChangesetEvent {
@@ -1458,18 +1404,7 @@ const (
 )
 
 // ChangesetSyncData represents data about the sync status of a changeset
-type ChangesetSyncData struct {
-	ChangesetID int64
-	// UpdatedAt is the time we last updated / synced the changeset in our DB
-	UpdatedAt time.Time
-	// LatestEvent is the time we received the most recent changeset event
-	LatestEvent time.Time
-	// ExternalUpdatedAt is the time the external changeset last changed
-	ExternalUpdatedAt time.Time
-	// RepoExternalServiceID is the external_service_id in the repo table, usually
-	// represented by the code host URL
-	RepoExternalServiceID string
-}
+type ChangesetSyncData struct { /* all structs must go */ }
 
 func MarshalCampaignID(id int64) graphql.ID {
 	return relay.MarshalID("Campaign", id)
@@ -1494,21 +1429,7 @@ func NewCampaignSpecFromRaw(rawSpec string) (*CampaignSpec, error) {
 	return c, c.UnmarshalValidate()
 }
 
-type CampaignSpec struct {
-	ID     int64
-	RandID string
-
-	RawSpec string
-	Spec    CampaignSpecFields
-
-	NamespaceUserID int32
-	NamespaceOrgID  int32
-
-	UserID int32
-
-	CreatedAt time.Time
-	UpdatedAt time.Time
-}
+type CampaignSpec struct { /* all structs must go */ }
 
 // Clone returns a clone of a CampaignSpec.
 func (cs *CampaignSpec) Clone() *CampaignSpec {
@@ -1532,36 +1453,15 @@ func (cs *CampaignSpec) ExpiresAt() time.Time {
 	return cs.CreatedAt.Add(CampaignSpecTTL)
 }
 
-type CampaignSpecFields struct {
-	Name              string             `json:"name"`
-	Description       string             `json:"description"`
-	On                []CampaignSpecOn   `json:"on"`
-	Steps             []CampaignSpecStep `json:"steps"`
-	ChangesetTemplate ChangesetTemplate  `json:"changesetTemplate"`
-}
+type CampaignSpecFields struct { /* all structs must go */ }
 
-type CampaignSpecOn struct {
-	RepositoriesMatchingQuery string `json:"repositoriesMatchingQuery,omitempty"`
-	Repository                string `json:"repository,omitempty"`
-}
+type CampaignSpecOn struct { /* all structs must go */ }
 
-type CampaignSpecStep struct {
-	Run       string            `json:"run"`
-	Container string            `json:"container"`
-	Env       map[string]string `json:"env"`
-}
+type CampaignSpecStep struct { /* all structs must go */ }
 
-type ChangesetTemplate struct {
-	Title     string         `json:"title"`
-	Body      string         `json:"body"`
-	Branch    string         `json:"branch"`
-	Commit    CommitTemplate `json:"commit"`
-	Published bool           `json:"published"`
-}
+type ChangesetTemplate struct { /* all structs must go */ }
 
-type CommitTemplate struct {
-	Message string `json:"message"`
-}
+type CommitTemplate struct { /* all structs must go */ }
 
 func NewChangesetSpecFromRaw(rawSpec string) (*ChangesetSpec, error) {
 	c := &ChangesetSpec{RawSpec: rawSpec}
@@ -1575,25 +1475,7 @@ func NewChangesetSpecFromRaw(rawSpec string) (*ChangesetSpec, error) {
 	return c, nil
 }
 
-type ChangesetSpec struct {
-	ID     int64
-	RandID string
-
-	RawSpec string
-	// TODO(mrnugget): should we rename the "spec" column to "description"?
-	Spec ChangesetSpecDescription
-
-	DiffStatAdded   int32
-	DiffStatChanged int32
-	DiffStatDeleted int32
-
-	CampaignSpecID int64
-	RepoID         api.RepoID
-	UserID         int32
-
-	CreatedAt time.Time
-	UpdatedAt time.Time
-}
+type ChangesetSpec struct { /* all structs must go */ }
 
 // Clone returns a clone of a ChangesetSpec.
 func (cs *ChangesetSpec) Clone() *ChangesetSpec {
@@ -1683,27 +1565,7 @@ func (cs *ChangesetSpec) ExpiresAt() time.Time {
 // yet).
 var ErrHeadBaseMismatch = errors.New("headRepository does not match baseRepository")
 
-type ChangesetSpecDescription struct {
-	BaseRepository graphql.ID `json:"baseRepository,omitempty"`
-
-	// If this is not empty, the description is a reference to an existing
-	// changeset and the rest of these fields are empty.
-	// TODO(mrnugget): Id or ID, that is the question?
-	ExternalID string `json:"externalId,omitempty"`
-
-	BaseRev string `json:"baseRev,omitempty"`
-	BaseRef string `json:"baseRef,omitempty"`
-
-	HeadRepository graphql.ID `json:"headRepository,omitempty"`
-	HeadRef        string     `json:"headRef,omitempty"`
-
-	Title string `json:"title,omitempty"`
-	Body  string `json:"body,omitempty"`
-
-	Commits []GitCommitDescription `json:"commits,omitempty"`
-
-	Published bool `json:"published,omitempty"`
-}
+type ChangesetSpecDescription struct { /* all structs must go */ }
 
 // Type returns the ChangesetSpecDescriptionType of the ChangesetSpecDescription.
 func (d *ChangesetSpecDescription) Type() ChangesetSpecDescriptionType {
@@ -1752,10 +1614,7 @@ func (d *ChangesetSpecDescription) Diff() (string, error) {
 	return d.Commits[0].Diff, nil
 }
 
-type GitCommitDescription struct {
-	Message string `json:"message,omitempty"`
-	Diff    string `json:"diff,omitempty"`
-}
+type GitCommitDescription struct { /* all structs must go */ }
 
 // unmarshalValidate validates the input, which can be YAML or JSON, against
 // the provided JSON schema. If the validation is successful is unmarshals the
diff --git a/internal/campaigns/types_test.go b/internal/campaigns/types_test.go
index c75e49f..94a6927 100644
--- a/internal/campaigns/types_test.go
+++ b/internal/campaigns/types_test.go
@@ -84,11 +84,7 @@ func TestChangesetMetadata(t *testing.T) {
 }
 
 func TestChangesetEvents(t *testing.T) {
-	type testCase struct {
-		name      string
-		changeset Changeset
-		events    []*ChangesetEvent
-	}
+	type testCase struct { /* all structs must go */ }
 
 	var cases []testCase
 
@@ -358,10 +354,7 @@ func TestChangesetDiffStat(t *testing.T) {
 		deleted int32 = 99
 	)
 
-	for name, tc := range map[string]struct {
-		c    Changeset
-		want *diff.Stat
-	}{
+	for name, tc := range map[string]struct { /* all structs must go */ }{
 		"added missing": {
 			c: Changeset{
 				DiffStatAdded:   nil,
@@ -412,10 +405,7 @@ func TestChangesetDiffStat(t *testing.T) {
 	}
 }
 
-type changesetSyncStateTestCase struct {
-	state [2]ChangesetSyncState
-	want  bool
-}
+type changesetSyncStateTestCase struct { /* all structs must go */ }
 
 func TestChangesetSyncStateEquals(t *testing.T) {
 	testCases := make(map[string]changesetSyncStateTestCase)
@@ -464,10 +454,7 @@ func TestChangesetSyncStateEquals(t *testing.T) {
 }
 
 func TestChangeset_SetMetadata(t *testing.T) {
-	for name, tc := range map[string]struct {
-		meta interface{}
-		want *Changeset
-	}{
+	for name, tc := range map[string]struct { /* all structs must go */ }{
 		"bitbucketserver": {
 			meta: &bitbucketserver.PullRequest{
 				ID:          12345,
@@ -620,10 +607,7 @@ func TestChangeset_Body(t *testing.T) {
 }
 
 func TestChangeset_externalState(t *testing.T) {
-	for name, tc := range map[string]struct {
-		meta interface{}
-		want ChangesetExternalState
-	}{
+	for name, tc := range map[string]struct { /* all structs must go */ }{
 		"bitbucketserver: declined": {
 			meta: &bitbucketserver.PullRequest{
 				State: "DECLINED",
@@ -711,14 +695,8 @@ func TestChangeset_URL(t *testing.T) {
 	want := "foo"
 	for name, meta := range map[string]interface{}{
 		"bitbucketserver": &bitbucketserver.PullRequest{
-			Links: struct {
-				Self []struct {
-					Href string `json:"href"`
-				} `json:"self"`
-			}{
-				Self: []struct {
-					Href string `json:"href"`
-				}{{Href: want}},
+			Links: struct { /* all structs must go */ }{
+				Self: []struct { /* all structs must go */ }{{Href: want}},
 			},
 		},
 		"GitHub": &github.PullRequest{
@@ -749,10 +727,7 @@ func TestChangeset_URL(t *testing.T) {
 }
 
 func TestChangeset_HeadRefOid(t *testing.T) {
-	for name, tc := range map[string]struct {
-		meta interface{}
-		want string
-	}{
+	for name, tc := range map[string]struct { /* all structs must go */ }{
 		"bitbucketserver": {
 			meta: &bitbucketserver.PullRequest{},
 			want: "",
@@ -789,10 +764,7 @@ func TestChangeset_HeadRefOid(t *testing.T) {
 }
 
 func TestChangeset_HeadRef(t *testing.T) {
-	for name, tc := range map[string]struct {
-		meta interface{}
-		want string
-	}{
+	for name, tc := range map[string]struct { /* all structs must go */ }{
 		"bitbucketserver": {
 			meta: &bitbucketserver.PullRequest{
 				FromRef: bitbucketserver.Ref{ID: "foo"},
@@ -831,10 +803,7 @@ func TestChangeset_HeadRef(t *testing.T) {
 }
 
 func TestChangeset_BaseRefOid(t *testing.T) {
-	for name, tc := range map[string]struct {
-		meta interface{}
-		want string
-	}{
+	for name, tc := range map[string]struct { /* all structs must go */ }{
 		"bitbucketserver": {
 			meta: &bitbucketserver.PullRequest{},
 			want: "",
@@ -871,10 +840,7 @@ func TestChangeset_BaseRefOid(t *testing.T) {
 }
 
 func TestChangeset_BaseRef(t *testing.T) {
-	for name, tc := range map[string]struct {
-		meta interface{}
-		want string
-	}{
+	for name, tc := range map[string]struct { /* all structs must go */ }{
 		"bitbucketserver": {
 			meta: &bitbucketserver.PullRequest{
 				ToRef: bitbucketserver.Ref{ID: "foo"},
@@ -913,10 +879,7 @@ func TestChangeset_BaseRef(t *testing.T) {
 }
 
 func TestChangeset_Labels(t *testing.T) {
-	for name, tc := range map[string]struct {
-		meta interface{}
-		want []ChangesetLabel
-	}{
+	for name, tc := range map[string]struct { /* all structs must go */ }{
 		"bitbucketserver": {
 			meta: &bitbucketserver.PullRequest{},
 			want: []ChangesetLabel{},
@@ -971,11 +934,7 @@ func TestChangeset_Labels(t *testing.T) {
 }
 
 func TestChangesetSpecUnmarshalValidate(t *testing.T) {
-	tests := []struct {
-		name    string
-		rawSpec string
-		err     string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "valid ExistingChangesetReference",
 			rawSpec: `{
@@ -1081,11 +1040,7 @@ func TestChangesetSpecUnmarshalValidate(t *testing.T) {
 }
 
 func TestCampaignSpecUnmarshalValidate(t *testing.T) {
-	tests := []struct {
-		name    string
-		rawSpec string
-		err     string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "valid",
 			rawSpec: `{
diff --git a/internal/cmd/ghe-feeder/progress.go b/internal/cmd/ghe-feeder/progress.go
index 3d34264..be6b3a1 100644
--- a/internal/cmd/ghe-feeder/progress.go
+++ b/internal/cmd/ghe-feeder/progress.go
@@ -11,16 +11,7 @@ import (
 
 // feederDB is a front to a sqlite DB that records ownerRepo processed, orgs created and whether
 // processing was successful or failed
-type feederDB struct {
-	// sqlite is not thread-safe, this mutex protects access to it
-	sync.Mutex
-	// where the DB file is
-	path string
-	// the opened DB
-	db *sql.DB
-	// logger for this feeder DB
-	logger log15.Logger
-}
+type feederDB struct { /* all structs must go */ }
 
 // newFeederDB creates or opens the DB, creating the two tables if necessary
 func newFeederDB(path string) (*feederDB, error) {
diff --git a/internal/cmd/ghe-feeder/pump.go b/internal/cmd/ghe-feeder/pump.go
index 7a1e2d8..6c93f8a 100644
--- a/internal/cmd/ghe-feeder/pump.go
+++ b/internal/cmd/ghe-feeder/pump.go
@@ -33,22 +33,7 @@ func extractOwnerRepoFromCSVLine(line string) string {
 }
 
 // producer is pumping input line by line into the pipe channel for processing by the workers.
-type producer struct {
-	// how many lines are remaining to be processed
-	remaining int64
-	// where to send each ownerRepo. the workers expect 'owner/repo' strings
-	pipe chan<- string
-	// sqlite DB where each ownerRepo is declared (to keep progress and to implement resume functionality)
-	fdr *feederDB
-	// how many we have already processed
-	numAlreadyDone int64
-	// logger for the pump
-	logger log15.Logger
-	// terminal UI progress bar
-	bar *progressbar.ProgressBar
-	// skips this many lines from the input before starting to feed into the pipe
-	skipNumLines int64
-}
+type producer struct { /* all structs must go */ }
 
 // pumpFile reads the specified file line by line and feeds ownerRepo strings into the pipe
 func (prdc *producer) pumpFile(ctx context.Context, path string) error {
diff --git a/internal/cmd/ghe-feeder/worker.go b/internal/cmd/ghe-feeder/worker.go
index 43d0c37..0db670c 100644
--- a/internal/cmd/ghe-feeder/worker.go
+++ b/internal/cmd/ghe-feeder/worker.go
@@ -45,12 +45,7 @@ func randomOrgNameAndSize() (string, int) {
 
 // feederError is an error while processing an ownerRepo line. errType partitions the errors in 4 major categories
 // to use in metrics in logging: api, clone, push and unknown.
-type feederError struct {
-	// one of: api, clone, push, unknown
-	errType string
-	// underlying error
-	err error
-}
+type feederError struct { /* all structs must go */ }
 
 func (e *feederError) Error() string {
 	return fmt.Sprintf("%v: %v", e.errType, e.err)
@@ -64,55 +59,7 @@ func (e *feederError) Unwrap() error {
 // github.com, adds GHE as a remote, declares repo in GHE through API and does a git push to the GHE.
 // there's many workers working at the same time, taking work from a work channel fed by a pump that reads lines
 // from the input.
-type worker struct {
-	// used in logs and metrics
-	name string
-	// index of the worker (which one in range [0, numWorkers)
-	index int
-	// directory to use for cloning from github.com
-	scratchDir string
-
-	// GHE API client
-	client *github.Client
-	admin  string
-	token  string
-
-	// gets the lines of work from this channel (each line has a owner/repo string in some format)
-	work <-chan string
-	// wait group to decrement when this worker is done working
-	wg *sync.WaitGroup
-	// terminal UI progress bar
-	bar *progressbar.ProgressBar
-
-	// some stats
-	numFailed    int64
-	numSucceeded int64
-
-	// feeder DB is a sqlite DB, worker marks processed ownerRepos as successfully processed or failed
-	fdr *feederDB
-	// keeps track of org to which to add repos
-	// (when currentNumRepos reaches currentMaxRepos, it generates a new random triple of these)
-	currentOrg      string
-	currentNumRepos int
-	currentMaxRepos int
-
-	// logger has worker name inprinted
-	logger log15.Logger
-
-	// rate limiter for the GHE API calls
-	rateLimiter *rate.Limiter
-	// how many simultaneous `git push` operations to the GHE
-	pushSem chan struct{}
-	// how many simultaneous `git clone` operations from github.com
-	cloneSem chan struct{}
-	// how many times to try to clone from github.com
-	numCloningAttempts int
-	// how long to wait before cutting short a cloning from github.com
-	cloneRepoTimeout time.Duration
-
-	// host to add as a remote to a cloned repo pointing to GHE instance
-	host string
-}
+type worker struct { /* all structs must go */ }
 
 // run spins until work channel closes or context cancels
 func (wkr *worker) run(ctx context.Context) {
diff --git a/internal/cmd/precise-code-intel-tester/query_types.go b/internal/cmd/precise-code-intel-tester/query_types.go
index 3e6b35e..9bb4891 100644
--- a/internal/cmd/precise-code-intel-tester/query_types.go
+++ b/internal/cmd/precise-code-intel-tester/query_types.go
@@ -1,58 +1,21 @@
 package main
 
-type QueryResponse struct {
-	Data struct {
-		Repository struct {
-			Commit struct {
-				Blob struct {
-					LSIF struct {
-						Definitions Definitions `json:"definitions"`
-						References  References  `json:"references"`
-					} `json:"lsif"`
-				} `json:"blob"`
-			} `json:"commit"`
-		} `json:"repository"`
-	} `json:"data"`
-}
-
-type Definitions struct {
-	Nodes []Node `json:"nodes"`
-}
-
-type References struct {
-	Nodes    []Node   `json:"nodes"`
-	PageInfo PageInfo `json:"pageInfo"`
-}
-
-type Node struct {
-	Resource `json:"resource"`
-	Range    `json:"range"`
-}
-
-type Resource struct {
-	Path       string     `json:"path"`
-	Repository Repository `json:"repository"`
-	Commit     Commit     `json:"commit"`
-}
-
-type Repository struct {
-	Name string `json:"name"`
-}
-
-type Commit struct {
-	Oid string `json:"oid"`
-}
-
-type Range struct {
-	Start Position `json:"start"`
-	End   Position `json:"end"`
-}
-
-type Position struct {
-	Line      int `json:"line"`
-	Character int `json:"character"`
-}
-
-type PageInfo struct {
-	EndCursor string `json:"endCursor"`
-}
+type QueryResponse struct { /* all structs must go */ }
+
+type Definitions struct { /* all structs must go */ }
+
+type References struct { /* all structs must go */ }
+
+type Node struct { /* all structs must go */ }
+
+type Resource struct { /* all structs must go */ }
+
+type Repository struct { /* all structs must go */ }
+
+type Commit struct { /* all structs must go */ }
+
+type Range struct { /* all structs must go */ }
+
+type Position struct { /* all structs must go */ }
+
+type PageInfo struct { /* all structs must go */ }
diff --git a/internal/cmd/precise-code-intel-tester/test_cases.go b/internal/cmd/precise-code-intel-tester/test_cases.go
index 1dec7f8..605c3b3 100644
--- a/internal/cmd/precise-code-intel-tester/test_cases.go
+++ b/internal/cmd/precise-code-intel-tester/test_cases.go
@@ -1,13 +1,7 @@
 package main
 
 // Location specifies the first position in a source range.
-type Location struct {
-	Repo      string
-	Rev       string
-	Path      string
-	Line      int
-	Character int
-}
+type Location struct { /* all structs must go */ }
 
 // TEST DATA NOTES
 //
@@ -24,10 +18,7 @@ type Location struct {
 // symbol `zap.String`, a global function defined in fields.go
 // in both versions.
 
-var testCases = []struct {
-	Definition Location   // Symbol definition
-	References []Location // All xrepo references of definition in test repository set
-}{
+var testCases = []struct { /* all structs must go */ }{
 	{
 		Definition: Location{
 			Repo:      "github.com/sourcegraph-testing/zap",
diff --git a/internal/cmd/precise-code-intel-tester/upload.go b/internal/cmd/precise-code-intel-tester/upload.go
index 160e11d..b8ebfd2 100644
--- a/internal/cmd/precise-code-intel-tester/upload.go
+++ b/internal/cmd/precise-code-intel-tester/upload.go
@@ -30,11 +30,7 @@ func uploadCommand() error {
 }
 
 // Upload represents a fully uploaded (but possibly unprocessed) LSIF index.
-type Upload struct {
-	Name     string
-	Rev      string
-	UploadID string
-}
+type Upload struct { /* all structs must go */ }
 
 // uploadIndexes uploads each file in the index directory and blocks until each upload has
 // been successfully processed.
@@ -177,11 +173,7 @@ func uploadStates(ctx context.Context, ids []string) (map[string]string, error)
 	}
 	query := fmt.Sprintf("{%s}", strings.Join(fragments, "\n"))
 
-	payload := struct {
-		Data map[string]struct {
-			State string `json:"state"`
-		} `json:"data"`
-	}{}
+	payload := struct { /* all structs must go */ }{}
 	if err := util.QueryGraphQL(ctx, endpoint, token, query, nil, &payload); err != nil {
 		return nil, err
 	}
diff --git a/internal/cmd/precise-code-intel-tester/util/graphql.go b/internal/cmd/precise-code-intel-tester/util/graphql.go
index 5888276..7e69f5a 100644
--- a/internal/cmd/precise-code-intel-tester/util/graphql.go
+++ b/internal/cmd/precise-code-intel-tester/util/graphql.go
@@ -11,13 +11,9 @@ import (
 	"github.com/hashicorp/go-multierror"
 )
 
-type ErrorPayload struct {
-	Errors []GraphQLError `json:"errors"`
-}
+type ErrorPayload struct { /* all structs must go */ }
 
-type GraphQLError struct {
-	Message string `json:"message"`
-}
+type GraphQLError struct { /* all structs must go */ }
 
 // QueryGraphQL performs GraphQL query on the frontend.
 func QueryGraphQL(ctx context.Context, endpoint, token, query string, variables map[string]interface{}, target interface{}) error {
diff --git a/internal/cmd/precise-code-intel-tester/util/limiter.go b/internal/cmd/precise-code-intel-tester/util/limiter.go
index 0d2eab0..4e2690a 100644
--- a/internal/cmd/precise-code-intel-tester/util/limiter.go
+++ b/internal/cmd/precise-code-intel-tester/util/limiter.go
@@ -3,9 +3,7 @@ package util
 import "context"
 
 // Limiter implements a counting semaphore.
-type Limiter struct {
-	ch chan struct{}
-}
+type Limiter struct { /* all structs must go */ }
 
 // NewLimiter creates a new limiter with the given maximum concurrency.
 func NewLimiter(concurrency int) *Limiter {
diff --git a/internal/cmd/precise-code-intel-tester/util/parallel.go b/internal/cmd/precise-code-intel-tester/util/parallel.go
index 446f7b4..2b1e508 100644
--- a/internal/cmd/precise-code-intel-tester/util/parallel.go
+++ b/internal/cmd/precise-code-intel-tester/util/parallel.go
@@ -19,10 +19,7 @@ const MaxDisplayWidth = 80
 
 // ParallelFn groups an error-returning function with a description that can be displayed
 // by runParallel.
-type ParallelFn struct {
-	Fn          func(ctx context.Context) error
-	Description string
-}
+type ParallelFn struct { /* all structs must go */ }
 
 // braille is an animated spinner based off of the characters used by yarn.
 var braille = pentimento.NewAnimatedString([]string{"⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"}, pentimento.DefaultInterval)
@@ -66,10 +63,7 @@ func RunParallel(ctx context.Context, concurrency int, fns []ParallelFn) error {
 }
 
 // errPair bundles an error value with the function index from which it was produced.
-type errPair struct {
-	i   int
-	err error
-}
+type errPair struct { /* all structs must go */ }
 
 // runFunctions is the worker body. It will pull an index off of the work queue,
 // mark that index as pending, then send the index and the value resulting from
diff --git a/internal/cmd/precise-code-intel-tester/util/pending_map.go b/internal/cmd/precise-code-intel-tester/util/pending_map.go
index b3fb720..615b9ef 100644
--- a/internal/cmd/precise-code-intel-tester/util/pending_map.go
+++ b/internal/cmd/precise-code-intel-tester/util/pending_map.go
@@ -5,10 +5,7 @@ import (
 	"sync"
 )
 
-type pendingMap struct {
-	sync.RWMutex
-	pending map[int]bool
-}
+type pendingMap struct { /* all structs must go */ }
 
 // newPendingMap creates a new pending map with n pending tasks.
 func newPendingMap(n int) *pendingMap {
diff --git a/internal/cmd/resources-report/main.go b/internal/cmd/resources-report/main.go
index d848093..28a5d90 100644
--- a/internal/cmd/resources-report/main.go
+++ b/internal/cmd/resources-report/main.go
@@ -13,23 +13,7 @@ import (
 
 const resultsBuffer = 5
 
-type options struct {
-	slackWebhook    *string
-	sheetID         *string
-	window          *time.Duration
-	highlightWindow *time.Duration
-
-	gcp                *bool
-	gcpLabelsAllowlist map[string]string
-
-	aws              *bool
-	awsTagsAllowlist map[string]string
-
-	runID   *string
-	dry     *bool
-	verbose *bool
-	timeout *time.Duration
-}
+type options struct { /* all structs must go */ }
 
 func main() {
 	help := flag.Bool("help", false, "Show help text")
diff --git a/internal/cmd/resources-report/resource.go b/internal/cmd/resources-report/resource.go
index 9520c54..9f03384 100644
--- a/internal/cmd/resources-report/resource.go
+++ b/internal/cmd/resources-report/resource.go
@@ -14,17 +14,7 @@ const (
 	PlatformAWS Platform = "aws"
 )
 
-type Resource struct {
-	Platform   Platform
-	Identifier string
-	Type       string
-	Location   string
-	Owner      string
-	Created    time.Time
-	Meta       map[string]interface{}
-
-	Allowed bool
-}
+type Resource struct { /* all structs must go */ }
 
 type Resources []Resource
 
diff --git a/internal/cmd/resources-report/slack.go b/internal/cmd/resources-report/slack.go
index 3739694..c942e70 100644
--- a/internal/cmd/resources-report/slack.go
+++ b/internal/cmd/resources-report/slack.go
@@ -11,18 +11,13 @@ import (
 )
 
 // see https://api.slack.com/reference/block-kit/blocks
-type slackMessage struct {
-	Blocks []slackBlock `json:"blocks"`
-}
+type slackMessage struct { /* all structs must go */ }
 
 type slackBlock map[string]interface{}
 
 const slackTextMarkdown = "mrkdwn"
 
-type slackText struct {
-	Type string `json:"type"` // just use `slackTextMarkdown` for the most part
-	Text string `json:"text"`
-}
+type slackText struct { /* all structs must go */ }
 
 func newSlackButtonRun(runID string) slackBlock {
 	return slackBlock{
diff --git a/internal/cmd/search-integration-tester/search_tests.go b/internal/cmd/search-integration-tester/search_tests.go
index 722c4b2..cbb5e42 100644
--- a/internal/cmd/search-integration-tester/search_tests.go
+++ b/internal/cmd/search-integration-tester/search_tests.go
@@ -7,10 +7,7 @@ import (
 	"strings"
 )
 
-type test struct {
-	Name  string
-	Query string
-}
+type test struct { /* all structs must go */ }
 
 const searchTestDataDir = "testdata/search"
 
diff --git a/internal/cmd/search-integration-tester/types.go b/internal/cmd/search-integration-tester/types.go
index 33487de..7c8801a 100644
--- a/internal/cmd/search-integration-tester/types.go
+++ b/internal/cmd/search-integration-tester/types.go
@@ -1,12 +1,7 @@
 package main
 
-type GQLRequest struct {
-	Query     string      `json:"query"`
-	Variables interface{} `json:"variables"`
-}
+type GQLRequest struct { /* all structs must go */ }
 
-type GQLSearchVariable struct {
-	SearchQuery string `json:"query"`
-}
+type GQLSearchVariable struct { /* all structs must go */ }
 
 type GQLResult interface{}
diff --git a/internal/cmd/tracking-issue/main.go b/internal/cmd/tracking-issue/main.go
index 89368a4..11cebf7 100644
--- a/internal/cmd/tracking-issue/main.go
+++ b/internal/cmd/tracking-issue/main.go
@@ -116,10 +116,7 @@ func updateIssues(ctx context.Context, cli *graphql.Client, issues []*Issue) (er
 
 	r := graphql.NewRequest(q.String())
 
-	type UpdateIssueInput struct {
-		ID   string `json:"id"`
-		Body string `json:"body"`
-	}
+	type UpdateIssueInput struct { /* all structs must go */ }
 
 	for _, issue := range issues {
 		r.Var(fmt.Sprintf("issue%dInput", issue.Number), &UpdateIssueInput{
@@ -171,13 +168,7 @@ func (ws Workloads) Markdown(labelAllowlist []string) string {
 	return b.String()
 }
 
-type Workload struct {
-	Assignee     string
-	Days         float64
-	Issues       []*Issue
-	PullRequests []*PullRequest
-	Labels       []string
-}
+type Workload struct { /* all structs must go */ }
 
 func (wl *Workload) AddIssue(newIssue *Issue) {
 	for _, issue := range wl.Issues {
@@ -283,12 +274,7 @@ func Assignee(assignees []string) string {
 	return assignees[0]
 }
 
-type TrackingIssue struct {
-	*Issue
-	Issues         []*Issue
-	PRs            []*PullRequest
-	LabelAllowlist []string
-}
+type TrackingIssue struct { /* all structs must go */ }
 
 func NewTrackingIssue(issue *Issue) *TrackingIssue {
 	t := &TrackingIssue{Issue: issue}
@@ -366,26 +352,7 @@ func (t *TrackingIssue) Workloads() Workloads {
 	return workloads
 }
 
-type Issue struct {
-	ID         string
-	Title      string
-	Body       string
-	Number     int
-	URL        string
-	State      string
-	Repository string
-	Private    bool
-	Labels     []string
-	Assignees  []string
-	Milestone  string
-	Author     string
-	CreatedAt  time.Time
-	UpdatedAt  time.Time
-	ClosedAt   time.Time
-
-	Deprioritised bool           `json:"-"`
-	LinkedPRs     []*PullRequest `json:"-"`
-}
+type Issue struct { /* all structs must go */ }
 
 func (issue *Issue) Markdown(labelAllowlist []string) string {
 	state := " "
@@ -497,26 +464,7 @@ func RedactLabels(labels []string) []string {
 	return redacted
 }
 
-type PullRequest struct {
-	ID         string
-	Title      string
-	Body       string
-	Number     int
-	URL        string
-	State      string
-	Repository string
-	Private    bool
-	Labels     []string
-	Assignees  []string
-	Milestone  string
-	Author     string
-	CreatedAt  time.Time
-	UpdatedAt  time.Time
-	ClosedAt   time.Time
-	BeganAt    time.Time // Time of the first authored commit
-
-	LinkedIssues []*Issue `json:"-"`
-}
+type PullRequest struct { /* all structs must go */ }
 
 func (pr *PullRequest) Markdown() string {
 	state := " "
@@ -601,50 +549,15 @@ func Emoji(category string) string {
 	}
 }
 
-type searchNode struct {
-	Typename   string `json:"__typename"`
-	ID         string
-	Title      string
-	Body       string
-	State      string
-	Number     int
-	URL        string
-	Repository struct {
-		NameWithOwner string
-		IsPrivate     bool
-	}
-	Author    struct{ Login string }
-	Assignees struct{ Nodes []struct{ Login string } }
-	Labels    struct{ Nodes []struct{ Name string } }
-	Milestone struct{ Title string }
-	Commits   struct {
-		Nodes []struct {
-			Commit struct{ AuthoredDate time.Time }
-		}
-	}
-	CreatedAt time.Time
-	UpdatedAt time.Time
-	ClosedAt  time.Time
-}
+type searchNode struct { /* all structs must go */ }
 
-type search struct {
-	PageInfo struct {
-		EndCursor   string
-		HasNextPage bool
-	}
-	Nodes []searchNode
-}
+type search struct { /* all structs must go */ }
 
 func loadTrackingIssues(ctx context.Context, cli *graphql.Client, org string, issues []*TrackingIssue) error {
 	var q bytes.Buffer
 	q.WriteString("query(\n")
 
-	type query struct {
-		issue  *TrackingIssue
-		count  int
-		cursor string
-		query  string
-	}
+	type query struct { /* all structs must go */ }
 
 	queries := map[string]*query{}
 	for _, issue := range issues {
diff --git a/internal/comby/comby_test.go b/internal/comby/comby_test.go
index 26b1323..2a091e5 100644
--- a/internal/comby/comby_test.go
+++ b/internal/comby/comby_test.go
@@ -36,10 +36,7 @@ func main() {
 	}
 	defer cleanup()
 
-	cases := []struct {
-		args Args
-		want string
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			args: Args{
 				Input:         ZipPath(zipPath),
@@ -94,10 +91,7 @@ func main() {
 	}
 	defer cleanup()
 
-	cases := []struct {
-		args Args
-		want string
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			args: Args{
 				Input:           ZipPath(zipPath),
diff --git a/internal/comby/types.go b/internal/comby/types.go
index 548c01f..726b980 100644
--- a/internal/comby/types.go
+++ b/internal/comby/types.go
@@ -10,59 +10,19 @@ type DirPath string
 func (z ZipPath) Value() {}
 func (d DirPath) Value() {}
 
-type Args struct {
-	// An Input to process (either a path to a directory or zip file)
-	Input
-
-	// A template pattern that expresses what to match
-	MatchTemplate string
-
-	// A rule that places constraints on matching or rewriting
-	Rule string
-
-	// A template pattern that expresses how matches should be rewritten
-	RewriteTemplate string
-
-	// Matcher is a file extension (e.g., '.go') which denotes which language parser to use
-	Matcher string
-
-	// If MatchOnly is set to true, then comby will only find matches and not perform replacement
-	MatchOnly bool
-
-	// FilePatterns is a list of file patterns (suffixes) to filter and process
-	FilePatterns []string
-
-	// NumWorkers is the number of worker processes to fork in parallel
-	NumWorkers int
-}
+type Args struct { /* all structs must go */ }
 
 // Location is the location in a file
-type Location struct {
-	Offset int `json:"offset"`
-	Line   int `json:"line"`
-	Column int `json:"column"`
-}
+type Location struct { /* all structs must go */ }
 
 // Range is a range of start location to end location
-type Range struct {
-	Start Location `json:"start"`
-	End   Location `json:"end"`
-}
+type Range struct { /* all structs must go */ }
 
 // Match represents a range of matched characters and the matched content
-type Match struct {
-	Range   Range  `json:"range"`
-	Matched string `json:"matched"`
-}
+type Match struct { /* all structs must go */ }
 
 // FileMatch represents all the matches in a single file
-type FileMatch struct {
-	URI     string  `json:"uri"`
-	Matches []Match `json:"matches"`
-}
+type FileMatch struct { /* all structs must go */ }
 
 // FileDiff represents a diff for a file
-type FileDiff struct {
-	URI  string `json:"uri"`
-	Diff string `json:"diff"`
-}
+type FileDiff struct { /* all structs must go */ }
diff --git a/internal/conf/client.go b/internal/conf/client.go
index 79237be..f593e92 100644
--- a/internal/conf/client.go
+++ b/internal/conf/client.go
@@ -15,12 +15,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/conf/conftypes"
 )
 
-type client struct {
-	store       *store
-	passthrough ConfigurationSource
-	watchersMu  sync.Mutex
-	watchers    []chan struct{}
-}
+type client struct { /* all structs must go */ }
 
 var (
 	defaultClientOnce sync.Once
@@ -175,15 +170,7 @@ func (c *client) notifyWatchers() {
 	}
 }
 
-type continuousUpdateOptions struct {
-	// delayBeforeUnreachableLog is how long to wait before logging an error upon initial startup
-	// due to the frontend being unreachable. It is used to avoid log spam when other services (that
-	// contact the frontend for configuration) start up before the frontend.
-	delayBeforeUnreachableLog time.Duration
-
-	log   func(format string, v ...interface{}) // log.Printf equivalent
-	sleep func()                                // sleep between updates
-}
+type continuousUpdateOptions struct { /* all structs must go */ }
 
 // continuouslyUpdate runs (*client).fetchAndUpdate in an infinite loop, with error logging and
 // random sleep intervals.
diff --git a/internal/conf/computed_test.go b/internal/conf/computed_test.go
index 1d8a655..f9e90be 100644
--- a/internal/conf/computed_test.go
+++ b/internal/conf/computed_test.go
@@ -13,12 +13,7 @@ import (
 )
 
 func TestSearchIndexEnabled(t *testing.T) {
-	tests := []struct {
-		name string
-		sc   *Unified
-		env  []string
-		want interface{}
-	}{{
+	tests := []struct { /* all structs must go */ }{{
 		name: "SearchIndex defaults to false in docker",
 		sc:   &Unified{},
 		env:  []string{"DEPLOY_TYPE=docker-container"},
diff --git a/internal/conf/conf.go b/internal/conf/conf.go
index da7b0ea..8a825a5 100644
--- a/internal/conf/conf.go
+++ b/internal/conf/conf.go
@@ -23,10 +23,7 @@ import (
 // - The site configuration, from the database (from the site-admin panel).
 // - Service connections, from the frontend (e.g. which gitservers to talk to).
 //
-type Unified struct {
-	schema.SiteConfiguration
-	ServiceConnections conftypes.ServiceConnections
-}
+type Unified struct { /* all structs must go */ }
 
 type configurationMode int
 
@@ -105,14 +102,7 @@ func initDefaultClient() *client {
 // cachedConfigurationSource caches reads for a specified duration to reduce
 // the number of reads against the underlying configuration source (e.g. a
 // Postgres DB).
-type cachedConfigurationSource struct {
-	source ConfigurationSource
-
-	ttl       time.Duration
-	entryMu   sync.Mutex
-	entry     *conftypes.RawUnified
-	entryTime time.Time
-}
+type cachedConfigurationSource struct { /* all structs must go */ }
 
 func (c *cachedConfigurationSource) Read(ctx context.Context) (conftypes.RawUnified, error) {
 	c.entryMu.Lock()
diff --git a/internal/conf/conftypes/conftypes.go b/internal/conf/conftypes/conftypes.go
index 88ee5d1..548e610 100644
--- a/internal/conf/conftypes/conftypes.go
+++ b/internal/conf/conftypes/conftypes.go
@@ -6,21 +6,10 @@ import "reflect"
 // internally connects to services. These are settings that need to be
 // propagated from the frontend to other services, so that the frontend
 // can be the source of truth for all configuration.
-type ServiceConnections struct {
-	// GitServers is the addresses of gitserver instances that should be talked
-	// to.
-	GitServers []string `json:"gitServers"`
-
-	// PostgresDSN is the PostgreSQL DB data source name.
-	// eg: "postgres://sg@pgsql/sourcegraph?sslmode=false"
-	PostgresDSN string `json:"postgresDSN"`
-}
+type ServiceConnections struct { /* all structs must go */ }
 
 // RawUnified is the unparsed variant of conf.Unified.
-type RawUnified struct {
-	Site               string
-	ServiceConnections ServiceConnections
-}
+type RawUnified struct { /* all structs must go */ }
 
 // Equal tells if the two configurations are equal or not.
 func (r RawUnified) Equal(other RawUnified) bool {
diff --git a/internal/conf/diff_test.go b/internal/conf/diff_test.go
index 10c1516..9fd475e 100644
--- a/internal/conf/diff_test.go
+++ b/internal/conf/diff_test.go
@@ -9,11 +9,7 @@ import (
 )
 
 func TestDiff(t *testing.T) {
-	tests := []struct {
-		name          string
-		before, after *Unified
-		want          []string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:   "diff",
 			before: &Unified{SiteConfiguration: schema.SiteConfiguration{ExternalURL: "a"}},
diff --git a/internal/conf/platform.go b/internal/conf/platform.go
index 8afdb17..b83b96d 100644
--- a/internal/conf/platform.go
+++ b/internal/conf/platform.go
@@ -8,9 +8,7 @@ import (
 )
 
 // PlatformConfiguration contains site configuration for the Sourcegraph platform.
-type PlatformConfiguration struct {
-	RemoteRegistryURL string
-}
+type PlatformConfiguration struct { /* all structs must go */ }
 
 // DefaultRemoteRegistry is the default value for the site configuration property
 // "extensions"."remoteRegistry".
diff --git a/internal/conf/reposource/awscodecommit.go b/internal/conf/reposource/awscodecommit.go
index b06ca48..8a47b42 100644
--- a/internal/conf/reposource/awscodecommit.go
+++ b/internal/conf/reposource/awscodecommit.go
@@ -7,9 +7,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/schema"
 )
 
-type AWS struct {
-	*schema.AWSCodeCommitConnection
-}
+type AWS struct { /* all structs must go */ }
 
 var _ RepoSource = AWS{}
 
diff --git a/internal/conf/reposource/awscodecommit_test.go b/internal/conf/reposource/awscodecommit_test.go
index 8c92279..1ec7b0b 100644
--- a/internal/conf/reposource/awscodecommit_test.go
+++ b/internal/conf/reposource/awscodecommit_test.go
@@ -7,10 +7,7 @@ import (
 )
 
 func TestAWS_cloneURLToRepoName(t *testing.T) {
-	tests := []struct {
-		conn schema.AWSCodeCommitConnection
-		urls []urlToRepoName
-	}{{
+	tests := []struct { /* all structs must go */ }{{
 		conn: schema.AWSCodeCommitConnection{
 			Region: "us-west-1",
 		},
diff --git a/internal/conf/reposource/bitbucketcloud.go b/internal/conf/reposource/bitbucketcloud.go
index af0e081..aa74218 100644
--- a/internal/conf/reposource/bitbucketcloud.go
+++ b/internal/conf/reposource/bitbucketcloud.go
@@ -7,9 +7,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/schema"
 )
 
-type BitbucketCloud struct {
-	*schema.BitbucketCloudConnection
-}
+type BitbucketCloud struct { /* all structs must go */ }
 
 var _ RepoSource = BitbucketCloud{}
 
diff --git a/internal/conf/reposource/bitbucketcloud_test.go b/internal/conf/reposource/bitbucketcloud_test.go
index ffa524b..8788630 100644
--- a/internal/conf/reposource/bitbucketcloud_test.go
+++ b/internal/conf/reposource/bitbucketcloud_test.go
@@ -7,10 +7,7 @@ import (
 )
 
 func TestBitbucketCloud_cloneURLToRepoName(t *testing.T) {
-	tests := []struct {
-		conn schema.BitbucketCloudConnection
-		urls []urlToRepoName
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			conn: schema.BitbucketCloudConnection{
 				Url: "https://bitbucket.org",
diff --git a/internal/conf/reposource/bitbucketserver.go b/internal/conf/reposource/bitbucketserver.go
index 2362de5..dc8c854 100644
--- a/internal/conf/reposource/bitbucketserver.go
+++ b/internal/conf/reposource/bitbucketserver.go
@@ -7,9 +7,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/schema"
 )
 
-type BitbucketServer struct {
-	*schema.BitbucketServerConnection
-}
+type BitbucketServer struct { /* all structs must go */ }
 
 var _ RepoSource = BitbucketServer{}
 
diff --git a/internal/conf/reposource/bitbucketserver_test.go b/internal/conf/reposource/bitbucketserver_test.go
index e0e3e33..50aece5 100644
--- a/internal/conf/reposource/bitbucketserver_test.go
+++ b/internal/conf/reposource/bitbucketserver_test.go
@@ -7,10 +7,7 @@ import (
 )
 
 func TestBitbucketServer_cloneURLToRepoName(t *testing.T) {
-	tests := []struct {
-		conn schema.BitbucketServerConnection
-		urls []urlToRepoName
-	}{{
+	tests := []struct { /* all structs must go */ }{{
 		conn: schema.BitbucketServerConnection{
 			Password: "pass",
 			Url:      "https://bitbucket.sgdev.org",
diff --git a/internal/conf/reposource/common.go b/internal/conf/reposource/common.go
index 436f17d..dc858f3 100644
--- a/internal/conf/reposource/common.go
+++ b/internal/conf/reposource/common.go
@@ -76,22 +76,9 @@ const (
 )
 
 // NameTransformation describes the rule to transform a repository name.
-type NameTransformation struct {
-	kind NameTransformationKind
+type NameTransformation struct { /* all structs must go */ }
 
-	// Fields for regex replacement transformation.
-	regexp      *regexp.Regexp
-	replacement string
-
-	// Note: Please add a blank line between each set of fields for a transformation rule
-	// to help better organize the structure and more clear to the future contributors.
-}
-
-type NameTransformationOptions struct {
-	// Options for regex replacement transformation.
-	Regex       string
-	Replacement string
-}
+type NameTransformationOptions struct { /* all structs must go */ }
 
 func NewNameTransformation(opts NameTransformationOptions) (NameTransformation, error) {
 	switch {
diff --git a/internal/conf/reposource/common_test.go b/internal/conf/reposource/common_test.go
index aded949..dace189 100644
--- a/internal/conf/reposource/common_test.go
+++ b/internal/conf/reposource/common_test.go
@@ -8,23 +8,13 @@ import (
 )
 
 // urlToRepoName represents a cloneURL and expected corresponding repo name
-type urlToRepoName struct {
-	cloneURL string
-	repoName string
-}
+type urlToRepoName struct { /* all structs must go */ }
 
 // urlToRepoNameErr is similar to urlToRepoName, but with an expected error value
-type urlToRepoNameErr struct {
-	cloneURL string
-	repoName string
-	err      error
-}
+type urlToRepoNameErr struct { /* all structs must go */ }
 
 func TestParseCloneURL(t *testing.T) {
-	tests := []struct {
-		input  string
-		output *url.URL
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			input: "git@github.com:gorilla/mux.git",
 			output: &url.URL{
@@ -175,10 +165,7 @@ func TestNameTransformations(t *testing.T) {
 		nts[i] = nt
 	}
 
-	tests := []struct {
-		input  string
-		output string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{"path/to.d/repo-git", "path/to/repo"},
 		{"path/to.d/repo-git.git", "path/to/repo-git.git"},
 		{"path/to.de/repo-git.git", "path/to.de/repo-git.git"},
diff --git a/internal/conf/reposource/custom.go b/internal/conf/reposource/custom.go
index 359f3db..23ba83b 100644
--- a/internal/conf/reposource/custom.go
+++ b/internal/conf/reposource/custom.go
@@ -21,10 +21,7 @@ func init() {
 	})
 }
 
-type cloneURLResolver struct {
-	from *regexp.Regexp
-	to   string
-}
+type cloneURLResolver struct { /* all structs must go */ }
 
 // cloneURLResolvers is the list of clone-URL-to-repo-URI mappings, derived
 // from the site config
diff --git a/internal/conf/reposource/custom_test.go b/internal/conf/reposource/custom_test.go
index f53a36b..19e2dbd 100644
--- a/internal/conf/reposource/custom_test.go
+++ b/internal/conf/reposource/custom_test.go
@@ -8,10 +8,7 @@ import (
 )
 
 func TestCustomCloneURLToRepoName(t *testing.T) {
-	tests := []struct {
-		cloneURLResolvers  []*cloneURLResolver
-		cloneURLToRepoName map[string]string
-	}{{
+	tests := []struct { /* all structs must go */ }{{
 		cloneURLResolvers: []*cloneURLResolver{{
 			from: regexp.MustCompile(`^\.\./(?P<name>[A-Za-z0-9]+)$`),
 			to:   `github.com/user/{name}`,
diff --git a/internal/conf/reposource/github.go b/internal/conf/reposource/github.go
index 780918d..288f98c 100644
--- a/internal/conf/reposource/github.go
+++ b/internal/conf/reposource/github.go
@@ -7,9 +7,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/schema"
 )
 
-type GitHub struct {
-	*schema.GitHubConnection
-}
+type GitHub struct { /* all structs must go */ }
 
 var _ RepoSource = GitHub{}
 
diff --git a/internal/conf/reposource/github_test.go b/internal/conf/reposource/github_test.go
index d1cb07f..c165612 100644
--- a/internal/conf/reposource/github_test.go
+++ b/internal/conf/reposource/github_test.go
@@ -7,10 +7,7 @@ import (
 )
 
 func TestGitHub_cloneURLToRepoName(t *testing.T) {
-	tests := []struct {
-		conn schema.GitHubConnection
-		urls []urlToRepoName
-	}{{
+	tests := []struct { /* all structs must go */ }{{
 		conn: schema.GitHubConnection{
 			Url: "https://github.com",
 		},
diff --git a/internal/conf/reposource/gitlab.go b/internal/conf/reposource/gitlab.go
index 09bd840..75d3199 100644
--- a/internal/conf/reposource/gitlab.go
+++ b/internal/conf/reposource/gitlab.go
@@ -7,9 +7,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/schema"
 )
 
-type GitLab struct {
-	*schema.GitLabConnection
-}
+type GitLab struct { /* all structs must go */ }
 
 var _ RepoSource = GitLab{}
 
diff --git a/internal/conf/reposource/gitlab_test.go b/internal/conf/reposource/gitlab_test.go
index b8845a3..18ba4f8 100644
--- a/internal/conf/reposource/gitlab_test.go
+++ b/internal/conf/reposource/gitlab_test.go
@@ -7,10 +7,7 @@ import (
 )
 
 func TestGitLab_cloneURLToRepoName(t *testing.T) {
-	tests := []struct {
-		conn schema.GitLabConnection
-		urls []urlToRepoName
-	}{{
+	tests := []struct { /* all structs must go */ }{{
 		conn: schema.GitLabConnection{
 			Url: "https://gitlab.com",
 			NameTransformations: []*schema.GitLabNameTransformation{
diff --git a/internal/conf/reposource/gitolite.go b/internal/conf/reposource/gitolite.go
index 0390806..a797fa4 100644
--- a/internal/conf/reposource/gitolite.go
+++ b/internal/conf/reposource/gitolite.go
@@ -7,9 +7,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/schema"
 )
 
-type Gitolite struct {
-	*schema.GitoliteConnection
-}
+type Gitolite struct { /* all structs must go */ }
 
 var _ RepoSource = Gitolite{}
 
diff --git a/internal/conf/reposource/gitolite_test.go b/internal/conf/reposource/gitolite_test.go
index 9ecac10..e7cf054 100644
--- a/internal/conf/reposource/gitolite_test.go
+++ b/internal/conf/reposource/gitolite_test.go
@@ -7,10 +7,7 @@ import (
 )
 
 func TestGitolite_cloneURLToRepoName(t *testing.T) {
-	tests := []struct {
-		conn schema.GitoliteConnection
-		urls []urlToRepoName
-	}{{
+	tests := []struct { /* all structs must go */ }{{
 		conn: schema.GitoliteConnection{
 			Host:   "git@gitolite.sgdev.org",
 			Prefix: "gitolite.sgdev.org/",
diff --git a/internal/conf/reposource/other.go b/internal/conf/reposource/other.go
index 85bd23a..f0958de 100644
--- a/internal/conf/reposource/other.go
+++ b/internal/conf/reposource/other.go
@@ -9,18 +9,13 @@ import (
 	"github.com/sourcegraph/sourcegraph/schema"
 )
 
-type urlMismatchErr struct {
-	cloneURL string
-	hostURL  string
-}
+type urlMismatchErr struct { /* all structs must go */ }
 
 func (e urlMismatchErr) Error() string {
 	return fmt.Sprintf("cloneURL %q did not match git host %q", e.cloneURL, e.hostURL)
 }
 
-type Other struct {
-	*schema.OtherExternalServiceConnection
-}
+type Other struct { /* all structs must go */ }
 
 var _ RepoSource = Other{}
 
diff --git a/internal/conf/reposource/other_test.go b/internal/conf/reposource/other_test.go
index b9b4e28..3d5fefc 100644
--- a/internal/conf/reposource/other_test.go
+++ b/internal/conf/reposource/other_test.go
@@ -8,10 +8,7 @@ import (
 )
 
 func TestOtherCloneURLToRepoName(t *testing.T) {
-	tests := []struct {
-		conn schema.OtherExternalServiceConnection
-		urls []urlToRepoNameErr
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			conn: schema.OtherExternalServiceConnection{
 				Url:                   "https://github.com",
diff --git a/internal/conf/server.go b/internal/conf/server.go
index 974386b..31b8e91 100644
--- a/internal/conf/server.go
+++ b/internal/conf/server.go
@@ -21,21 +21,7 @@ type ConfigurationSource interface {
 }
 
 // Server provides access and manages modifications to the site configuration.
-type Server struct {
-	Source ConfigurationSource
-
-	store *store
-
-	needRestartMu sync.RWMutex
-	needRestart   bool
-
-	// fileWrite signals when our app writes to the configuration file. The
-	// secondary channel is closed when server.Raw() would return the new
-	// configuration that has been written to disk.
-	fileWrite chan chan struct{}
-
-	once sync.Once
-}
+type Server struct { /* all structs must go */ }
 
 // NewServer returns a new Server instance that mangages the site config file
 // that is stored at configSource.
@@ -81,9 +67,7 @@ func (s *Server) Write(ctx context.Context, input conftypes.RawUnified) error {
 }
 
 // Edits describes some JSON edits to apply to site configuration.
-type Edits struct {
-	Site []jsonx.Edit
-}
+type Edits struct { /* all structs must go */ }
 
 // Edit invokes the provided function to compute edits to the site
 // configuration. It then applies and writes them.
diff --git a/internal/conf/store.go b/internal/conf/store.go
index 8708c91..70b1cd9 100644
--- a/internal/conf/store.go
+++ b/internal/conf/store.go
@@ -14,17 +14,7 @@ import (
 
 // store manages the in-memory storage, access,
 // and updating of the site configuration in a threadsafe manner.
-type store struct {
-	configMu  sync.RWMutex
-	lastValid *Unified
-	mock      *Unified
-
-	rawMu sync.RWMutex
-	raw   conftypes.RawUnified
-
-	ready chan struct{}
-	once  sync.Once
-}
+type store struct { /* all structs must go */ }
 
 // newStore returns a new configuration store.
 func newStore() *store {
@@ -67,11 +57,7 @@ func (s *store) Mock(mockery *Unified) {
 	s.initialize()
 }
 
-type updateResult struct {
-	Changed bool
-	Old     *Unified
-	New     *Unified
-}
+type updateResult struct { /* all structs must go */ }
 
 // MaybeUpdate attempts to update the store with the supplied rawConfig.
 //
diff --git a/internal/conf/validate.go b/internal/conf/validate.go
index e05acd0..27a5d69 100644
--- a/internal/conf/validate.go
+++ b/internal/conf/validate.go
@@ -55,10 +55,7 @@ const (
 )
 
 // Problem contains kind and description of a specific configuration problem.
-type Problem struct {
-	kind        problemKind
-	description string
-}
+type Problem struct { /* all structs must go */ }
 
 // NewSiteProblem creates a new site config problem with given message.
 func NewSiteProblem(msg string) *Problem {
@@ -247,9 +244,7 @@ func validate(schema, input []byte) (*gojsonschema.Result, error) {
 	return s.Validate(gojsonschema.NewBytesLoader(input))
 }
 
-type jsonLoader struct {
-	gojsonschema.JSONLoader
-}
+type jsonLoader struct { /* all structs must go */ }
 
 func (l jsonLoader) LoaderFactory() gojsonschema.JSONLoaderFactory {
 	return &jsonLoaderFactory{}
diff --git a/internal/conf/validate_test.go b/internal/conf/validate_test.go
index ae13839..e7ed23b 100644
--- a/internal/conf/validate_test.go
+++ b/internal/conf/validate_test.go
@@ -31,11 +31,7 @@ func TestValidate(t *testing.T) {
 }
 
 func TestValidateCustom(t *testing.T) {
-	tests := map[string]struct {
-		raw         string
-		wantProblem string
-		wantErr     string
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"unrecognized auth.providers": {
 			raw:     `{"auth.providers":[{"type":"asdf"}]}`,
 			wantErr: "tagged union type must have a",
diff --git a/internal/db/access_tokens.go b/internal/db/access_tokens.go
index 2075157..8dbf058 100644
--- a/internal/db/access_tokens.go
+++ b/internal/db/access_tokens.go
@@ -16,15 +16,7 @@ import (
 
 // AccessToken describes an access token. The actual token (that a caller must supply to
 // authenticate) is not stored and is not present in this struct.
-type AccessToken struct {
-	ID            int64
-	SubjectUserID int32 // the user whose privileges the access token grants
-	Scopes        []string
-	Note          string
-	CreatorUserID int32
-	CreatedAt     time.Time
-	LastUsedAt    *time.Time
-}
+type AccessToken struct { /* all structs must go */ }
 
 // ErrAccessTokenNotFound occurs when a database operation expects a specific access token to exist
 // but it does not exist.
@@ -151,12 +143,7 @@ func (s *accessTokens) GetByID(ctx context.Context, id int64) (*AccessToken, err
 }
 
 // AccessTokensListOptions contains options for listing access tokens.
-type AccessTokensListOptions struct {
-	SubjectUserID  int32 // only list access tokens with this user as the subject
-	LastUsedAfter  *time.Time
-	LastUsedBefore *time.Time
-	*LimitOffset
-}
+type AccessTokensListOptions struct { /* all structs must go */ }
 
 func (o AccessTokensListOptions) sqlConditions() []*sqlf.Query {
 	conds := []*sqlf.Query{sqlf.Sprintf("deleted_at IS NULL")}
@@ -264,9 +251,4 @@ func toSHA256Bytes(input []byte) []byte {
 	return b[:]
 }
 
-type MockAccessTokens struct {
-	Create     func(subjectUserID int32, scopes []string, note string, creatorUserID int32) (id int64, token string, err error)
-	DeleteByID func(id int64, subjectUserID int32) error
-	Lookup     func(tokenHexEncoded, requiredScope string) (subjectUserID int32, err error)
-	GetByID    func(id int64) (*AccessToken, error)
-}
+type MockAccessTokens struct { /* all structs must go */ }
diff --git a/internal/db/authz.go b/internal/db/authz.go
index 56310c4..b55c740 100644
--- a/internal/db/authz.go
+++ b/internal/db/authz.go
@@ -10,37 +10,15 @@ import (
 
 // GrantPendingPermissionsArgs contains required arguments to grant pending permissions for a user
 // by username or verified email address(es) according to the site configuration.
-type GrantPendingPermissionsArgs struct {
-	// The user ID that will be used to bind pending permissions.
-	UserID int32
-	// The permission level to be granted.
-	Perm authz.Perms
-	// The type of permissions to be granted.
-	Type authz.PermType
-}
+type GrantPendingPermissionsArgs struct { /* all structs must go */ }
 
 // AuthorizedReposArgs contains required arguments to verify if a user is authorized to access some
 // or all of the repositories from the candidate list with the given level and type of permissions.
-type AuthorizedReposArgs struct {
-	// The candidate list of repositories to be verified.
-	Repos []*types.Repo
-	// The user whose authorization to access the repos is being checked.
-	UserID int32
-	// The permission level to be verified.
-	Perm authz.Perms
-	// The type of permissions to be verified.
-	Type authz.PermType
-}
+type AuthorizedReposArgs struct { /* all structs must go */ }
 
 // RevokeUserPermissionsArgs contains required arguments to revoke user permissions, it includes all
 // possible leads to grant or authorize access for a user.
-type RevokeUserPermissionsArgs struct {
-	// The user ID that will be used to revoke effective permissions.
-	UserID int32
-	// The list of external accounts related to the user. This is list because a user could have
-	// multiple external accounts, including ones from code hosts and/or Sourcegraph authz provider.
-	Accounts []*extsvc.Accounts
-}
+type RevokeUserPermissionsArgs struct { /* all structs must go */ }
 
 // AuthzStore contains methods for manipulating user permissions.
 type AuthzStore interface {
diff --git a/internal/db/authz_mock.go b/internal/db/authz_mock.go
index 0c25662..43902e8 100644
--- a/internal/db/authz_mock.go
+++ b/internal/db/authz_mock.go
@@ -6,8 +6,4 @@ import (
 	"github.com/sourcegraph/sourcegraph/cmd/frontend/types"
 )
 
-type MockAuthz struct {
-	GrantPendingPermissions func(ctx context.Context, args *GrantPendingPermissionsArgs) error
-	AuthorizedRepos         func(ctx context.Context, args *AuthorizedReposArgs) ([]*types.Repo, error)
-	RevokeUserPermissions   func(ctx context.Context, args *RevokeUserPermissionsArgs) error
-}
+type MockAuthz struct { /* all structs must go */ }
diff --git a/internal/db/basestore/handle.go b/internal/db/basestore/handle.go
index 024cece..ea93cb1 100644
--- a/internal/db/basestore/handle.go
+++ b/internal/db/basestore/handle.go
@@ -10,10 +10,7 @@ import (
 // TransactableHandle is a wrapper around a database connection that provides nested transactions
 // through registration and finalization of savepoints. A transactable database handler can be
 // shared by multiple stores.
-type TransactableHandle struct {
-	db         dbutil.DB
-	savepoints []*savepoint
-}
+type TransactableHandle struct { /* all structs must go */ }
 
 // NewHandle returns a new transactable database handle connected to the given dsn (data store name).
 func NewHandle(postgresDSN, app string) (*TransactableHandle, error) {
diff --git a/internal/db/basestore/savepoint.go b/internal/db/basestore/savepoint.go
index 29565ef..4db8dd2 100644
--- a/internal/db/basestore/savepoint.go
+++ b/internal/db/basestore/savepoint.go
@@ -17,10 +17,7 @@ const rollbackSavepointQuery = "ROLLBACK TO %s"
 // Each savepoint has an identifier unique to that connection and must be referenced by
 // name on finalization. The transactional database handler takes care to finalize the
 // savepoints in the same order they were created for a particular store.
-type savepoint struct {
-	db          dbutil.DB
-	savepointID string
-}
+type savepoint struct { /* all structs must go */ }
 
 func newSavepoint(ctx context.Context, db dbutil.DB) (*savepoint, error) {
 	savepointID, err := makeSavepointID()
diff --git a/internal/db/basestore/store.go b/internal/db/basestore/store.go
index 796768f..e7445a7 100644
--- a/internal/db/basestore/store.go
+++ b/internal/db/basestore/store.go
@@ -34,9 +34,7 @@ import (
 //         txBase, err := s.Store.Transact(ctx)
 //         return &SprocketStore{Store: txBase}, nil
 //     }
-type Store struct {
-	handle *TransactableHandle
-}
+type Store struct { /* all structs must go */ }
 
 // ShareableStore is implemented by stores to explicitly allow distinct store instances
 // to reference the store's underlying handle. This is used to share transactions between
diff --git a/internal/db/confdb/confdb.go b/internal/db/confdb/confdb.go
index f907d06..6ac85a7 100644
--- a/internal/db/confdb/confdb.go
+++ b/internal/db/confdb/confdb.go
@@ -16,12 +16,7 @@ import (
 )
 
 // SiteConfig contains the contents of a site config along with associated metadata.
-type SiteConfig struct {
-	ID        int32     // the unique ID of this config
-	Contents  string    // the raw JSON content (with comments and trailing commas allowed)
-	CreatedAt time.Time // the date when this config was created
-	UpdatedAt time.Time // the date when this config was updated
-}
+type SiteConfig struct { /* all structs must go */ }
 
 // ErrNewerEdit is returned by SiteCreateIfUpToDate when a newer edit has already been applied and
 // the edit has been rejected.
diff --git a/internal/db/confdb/confdb_test.go b/internal/db/confdb/confdb_test.go
index be321a9..5944c47 100644
--- a/internal/db/confdb/confdb_test.go
+++ b/internal/db/confdb/confdb_test.go
@@ -44,26 +44,13 @@ func TestSiteCreate_RejectInvalidJSON(t *testing.T) {
 }
 
 func TestSiteCreateIfUpToDate(t *testing.T) {
-	type input struct {
-		lastID   int32
-		contents string
-	}
+	type input struct { /* all structs must go */ }
 
-	type output struct {
-		ID       int32
-		contents string
-		err      error
-	}
+	type output struct { /* all structs must go */ }
 
-	type pair struct {
-		input    input
-		expected output
-	}
+	type pair struct { /* all structs must go */ }
 
-	type test struct {
-		name     string
-		sequence []pair
-	}
+	type test struct { /* all structs must go */ }
 
 	for _, test := range []test{
 		{
diff --git a/internal/db/dbconn/dbconn_test.go b/internal/db/dbconn/dbconn_test.go
index e5fc56b..3a673ac 100644
--- a/internal/db/dbconn/dbconn_test.go
+++ b/internal/db/dbconn/dbconn_test.go
@@ -3,11 +3,7 @@ package dbconn
 import "testing"
 
 func TestBuildConnectionString(t *testing.T) {
-	tests := []struct {
-		name                   string
-		dataSource             string
-		wantedConnectionString string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:                   "empty dataSource",
 			dataSource:             "",
diff --git a/internal/db/dbutil/dbutil_test.go b/internal/db/dbutil/dbutil_test.go
index 1b8d626..b2edb63 100644
--- a/internal/db/dbutil/dbutil_test.go
+++ b/internal/db/dbutil/dbutil_test.go
@@ -3,11 +3,7 @@ package dbutil
 import "testing"
 
 func TestPostgresDSN(t *testing.T) {
-	cases := []struct {
-		name string
-		env  map[string]string
-		dsn  string
-	}{{
+	cases := []struct { /* all structs must go */ }{{
 		name: "default",
 		env:  map[string]string{},
 		dsn:  "postgres://testuser@127.0.0.1:5432",
diff --git a/internal/db/default_repos_test.go b/internal/db/default_repos_test.go
index 7e22ca8..aae9e5e 100644
--- a/internal/db/default_repos_test.go
+++ b/internal/db/default_repos_test.go
@@ -15,10 +15,7 @@ func Test_defaultRepos_List(t *testing.T) {
 	if testing.Short() {
 		t.Skip()
 	}
-	tcs := []struct {
-		name  string
-		repos []*types.Repo
-	}{
+	tcs := []struct { /* all structs must go */ }{
 		{
 			name:  "empty case",
 			repos: nil,
diff --git a/internal/db/err_test.go b/internal/db/err_test.go
index 6e52cdc..19f8ec9 100644
--- a/internal/db/err_test.go
+++ b/internal/db/err_test.go
@@ -9,10 +9,7 @@ import (
 )
 
 func TestErrorsInterface(t *testing.T) {
-	cases := []struct {
-		Err       error
-		Predicate func(error) bool
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{&RepoNotFoundErr{}, errcode.IsNotFound},
 		{userNotFoundErr{}, errcode.IsNotFound},
 	}
diff --git a/internal/db/event_logs.go b/internal/db/event_logs.go
index e0caa80..cc4f2bd 100644
--- a/internal/db/event_logs.go
+++ b/internal/db/event_logs.go
@@ -23,15 +23,7 @@ const (
 type eventLogs struct{}
 
 // Event contains information needed for logging an event.
-type Event struct {
-	Name            string
-	URL             string
-	UserID          uint32
-	AnonymousUserID string
-	Argument        json.RawMessage
-	Source          string
-	Timestamp       time.Time
-}
+type Event struct { /* all structs must go */ }
 
 func (*eventLogs) Insert(ctx context.Context, e *Event) error {
 	argument := e.Argument
@@ -80,12 +72,7 @@ func (*eventLogs) getBySQL(ctx context.Context, querySuffix *sqlf.Query) ([]*typ
 }
 
 // EventLogsListOptions specifies the options for listing event logs.
-type EventLogsListOptions struct {
-	// UserID specifies the user whose events should be included.
-	UserID int32
-
-	*LimitOffset
-}
+type EventLogsListOptions struct { /* all structs must go */ }
 
 // ListAll gets all event logs in descending order of timestamp.
 func (l *eventLogs) ListAll(ctx context.Context, opt EventLogsListOptions) ([]*types.Event, error) {
@@ -153,10 +140,7 @@ func (*eventLogs) maxTimestampBySQL(ctx context.Context, querySuffix *sqlf.Query
 }
 
 // UsageValue is a single count of usage for a time period starting on a given date.
-type UsageValue struct {
-	Start time.Time
-	Count int
-}
+type UsageValue struct { /* all structs must go */ }
 
 // PeriodType is the type of period in which to count events and unique users.
 type PeriodType string
@@ -220,44 +204,18 @@ func calcEndDate(startDate time.Time, periodType PeriodType, periods int) (time.
 }
 
 // CountUniqueUsersOptions provides options for counting unique users.
-type CountUniqueUsersOptions struct {
-	// If true, only include registered users. Otherwise, include all users.
-	RegisteredOnly bool
-	// If true, only include code host integration users. Otherwise, include all users.
-	IntegrationOnly bool
-	// If set, adds additional restrictions on the event types.
-	EventFilters *EventFilterOptions
-}
+type CountUniqueUsersOptions struct { /* all structs must go */ }
 
 // EventFilterOptions provides options for filtering events.
-type EventFilterOptions struct {
-	// If set, only include events with a given prefix.
-	ByEventNamePrefix string
-	// If set, only include events with the given name.
-	ByEventName string
-	// If not empty, only include events that matche a list of given event names
-	ByEventNames []string
-	// Must be used with ByEventName
-	//
-	// If set, only include events that match a specified condition.
-	ByEventNameWithCondition *sqlf.Query
-}
+type EventFilterOptions struct { /* all structs must go */ }
 
 // EventArgumentMatch provides the options for matching an event with
 // a specific JSON value passed as an argument.
-type EventArgumentMatch struct {
-	// The name of the JSON key to match against.
-	ArgumentName string
-	// The actual value passed to the JSON key to match.
-	ArgumentValue string
-}
+type EventArgumentMatch struct { /* all structs must go */ }
 
 // PercentileValue is a slice of Nth percentile values calculated from a field of events
 // in a time period starting on a given date.
-type PercentileValue struct {
-	Start  time.Time
-	Values []float64
-}
+type PercentileValue struct { /* all structs must go */ }
 
 // CountUniqueUsersPerPeriod provides a count of unique active users in a given time span, broken up into periods of
 // a given type. The value of `now` should be the current time in UTC. Returns an array of length `periods`, with one
diff --git a/internal/db/event_logs_test.go b/internal/db/event_logs_test.go
index bc3e8eb..a8ce994 100644
--- a/internal/db/event_logs_test.go
+++ b/internal/db/event_logs_test.go
@@ -21,11 +21,7 @@ func TestEventLogs_ValidInfo(t *testing.T) {
 	dbtesting.SetupGlobalTestDB(t)
 	ctx := context.Background()
 
-	var testCases = []struct {
-		name  string
-		event *Event
-		err   string // Stringified error
-	}{
+	var testCases = []struct { /* all structs must go */ }{
 		{
 			name:  "EmptyName",
 			event: &Event{UserID: 1, URL: "http://sourcegraph.com", Source: "WEB"},
@@ -172,11 +168,7 @@ func TestEventLogs_SiteUsage(t *testing.T) {
 	// time that falls too near the edge of a week.
 	now := time.Unix(1589581800, 0).UTC()
 
-	days := map[time.Time]struct {
-		users   []uint32
-		names   []string
-		sources []string
-	}{
+	days := map[time.Time]struct { /* all structs must go */ }{
 		// Today
 		now: {
 			[]uint32{1, 2, 3, 4, 5},
diff --git a/internal/db/external_accounts.go b/internal/db/external_accounts.go
index 031d9fd..f1bcdc5 100644
--- a/internal/db/external_accounts.go
+++ b/internal/db/external_accounts.go
@@ -15,9 +15,7 @@ import (
 )
 
 // userExternalAccountNotFoundError is the error that is returned when a user external account is not found.
-type userExternalAccountNotFoundError struct {
-	args []interface{}
-}
+type userExternalAccountNotFoundError struct { /* all structs must go */ }
 
 func (err userExternalAccountNotFoundError) Error() string {
 	return fmt.Sprintf("user external account not found: %v", err.args)
@@ -195,11 +193,7 @@ func (*userExternalAccounts) Delete(ctx context.Context, id int32) error {
 }
 
 // ExternalAccountsListOptions specifies the options for listing user external accounts.
-type ExternalAccountsListOptions struct {
-	UserID                           int32
-	ServiceType, ServiceID, ClientID string
-	*LimitOffset
-}
+type ExternalAccountsListOptions struct { /* all structs must go */ }
 
 func (s *userExternalAccounts) List(ctx context.Context, opt ExternalAccountsListOptions) (acct []*extsvc.Account, err error) {
 	if Mocks.ExternalAccounts.List != nil {
@@ -319,12 +313,4 @@ func (*userExternalAccounts) listSQL(opt ExternalAccountsListOptions) (conds []*
 }
 
 // MockExternalAccounts mocks the Stores.ExternalAccounts DB store.
-type MockExternalAccounts struct {
-	Get                  func(id int32) (*extsvc.Account, error)
-	LookupUserAndSave    func(extsvc.AccountSpec, extsvc.AccountData) (userID int32, err error)
-	AssociateUserAndSave func(userID int32, spec extsvc.AccountSpec, data extsvc.AccountData) error
-	CreateUserAndSave    func(NewUser, extsvc.AccountSpec, extsvc.AccountData) (createdUserID int32, err error)
-	Delete               func(id int32) error
-	List                 func(ExternalAccountsListOptions) ([]*extsvc.Account, error)
-	Count                func(ExternalAccountsListOptions) (int, error)
-}
+type MockExternalAccounts struct { /* all structs must go */ }
diff --git a/internal/db/external_services.go b/internal/db/external_services.go
index 32e8f42..f3d0be1 100644
--- a/internal/db/external_services.go
+++ b/internal/db/external_services.go
@@ -27,11 +27,7 @@ import (
 // Before updating or creating a new external service, validation is performed.
 // The enterprise code registers additional validators at run-time and sets the
 // global instance in stores.go
-type ExternalServicesStore struct {
-	GitHubValidators          []func(*schema.GitHubConnection) error
-	GitLabValidators          []func(*schema.GitLabConnection, []schema.AuthProviders) error
-	BitbucketServerValidators []func(*schema.BitbucketServerConnection) error
-}
+type ExternalServicesStore struct { /* all structs must go */ }
 
 // ExternalServiceKinds contains a map of all supported kinds of
 // external services.
@@ -47,18 +43,10 @@ var ExternalServiceKinds = map[string]ExternalServiceKind{
 }
 
 // ExternalServiceKind describes a kind of external service.
-type ExternalServiceKind struct {
-	// True if the external service can host repositories.
-	CodeHost bool
-
-	JSONSchema string // JSON Schema for the external service's configuration
-}
+type ExternalServiceKind struct { /* all structs must go */ }
 
 // ExternalServicesListOptions contains options for listing external services.
-type ExternalServicesListOptions struct {
-	Kinds []string
-	*LimitOffset
-}
+type ExternalServicesListOptions struct { /* all structs must go */ }
 
 func (o ExternalServicesListOptions) sqlConditions() []*sqlf.Query {
 	conds := []*sqlf.Query{sqlf.Sprintf("deleted_at IS NULL")}
@@ -288,10 +276,7 @@ func (e *ExternalServicesStore) Create(ctx context.Context, confGet func() *conf
 }
 
 // ExternalServiceUpdate contains optional fields to update.
-type ExternalServiceUpdate struct {
-	DisplayName *string
-	Config      *string
-}
+type ExternalServiceUpdate struct { /* all structs must go */ }
 
 // Update updates a external service.
 //
@@ -343,9 +328,7 @@ func (e *ExternalServicesStore) Update(ctx context.Context, ps []schema.AuthProv
 	})
 }
 
-type externalServiceNotFoundError struct {
-	id int64
-}
+type externalServiceNotFoundError struct { /* all structs must go */ }
 
 func (e externalServiceNotFoundError) Error() string {
 	return fmt.Sprintf("external service not found: %v", e.id)
@@ -590,10 +573,4 @@ func (*ExternalServicesStore) Count(ctx context.Context, opt ExternalServicesLis
 }
 
 // MockExternalServices mocks the external services store.
-type MockExternalServices struct {
-	Create  func(ctx context.Context, confGet func() *conf.Unified, externalService *types.ExternalService) error
-	Delete  func(ctx context.Context, id int64) error
-	GetByID func(id int64) (*types.ExternalService, error)
-	List    func(opt ExternalServicesListOptions) ([]*types.ExternalService, error)
-	Update  func(ctx context.Context, ps []schema.AuthProviders, id int64, update *ExternalServiceUpdate) error
-}
+type MockExternalServices struct { /* all structs must go */ }
diff --git a/internal/db/external_services_test.go b/internal/db/external_services_test.go
index 390c12d..d1ae7fc 100644
--- a/internal/db/external_services_test.go
+++ b/internal/db/external_services_test.go
@@ -16,12 +16,7 @@ import (
 )
 
 func TestExternalServicesListOptions_sqlConditions(t *testing.T) {
-	tests := []struct {
-		name      string
-		kinds     []string
-		wantQuery string
-		wantArgs  []interface{}
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:      "no kind",
 			wantQuery: "deleted_at IS NULL",
@@ -55,13 +50,7 @@ func TestExternalServicesListOptions_sqlConditions(t *testing.T) {
 }
 
 func TestExternalServicesStore_ValidateConfig(t *testing.T) {
-	tests := []struct {
-		name    string
-		kind    string
-		config  string
-		setup   func(t *testing.T)
-		wantErr string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:    "0 errors",
 			kind:    extsvc.KindGitHub,
diff --git a/internal/db/globalstatedb/globalstatedb.go b/internal/db/globalstatedb/globalstatedb.go
index fed0029..282dca2 100644
--- a/internal/db/globalstatedb/globalstatedb.go
+++ b/internal/db/globalstatedb/globalstatedb.go
@@ -10,10 +10,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/db/dbconn"
 )
 
-type State struct {
-	SiteID      string
-	Initialized bool // whether the initial site admin account has been created
-}
+type State struct { /* all structs must go */ }
 
 func Get(ctx context.Context) (*State, error) {
 	if Mock.Get != nil {
diff --git a/internal/db/globalstatedb/globalstatedb_mock.go b/internal/db/globalstatedb/globalstatedb_mock.go
index c0153e2..44d7d7a 100644
--- a/internal/db/globalstatedb/globalstatedb_mock.go
+++ b/internal/db/globalstatedb/globalstatedb_mock.go
@@ -2,6 +2,4 @@ package globalstatedb
 
 import "context"
 
-var Mock = struct {
-	Get func(ctx context.Context) (*State, error)
-}{}
+var Mock = struct { /* all structs must go */ }{}
diff --git a/internal/db/helpers.go b/internal/db/helpers.go
index 044f316..720d603 100644
--- a/internal/db/helpers.go
+++ b/internal/db/helpers.go
@@ -4,10 +4,7 @@ import "github.com/keegancsmith/sqlf"
 
 // LimitOffset specifies SQL LIMIT and OFFSET counts. A pointer to it is typically embedded in other options
 // structs that need to perform SQL queries with LIMIT and OFFSET.
-type LimitOffset struct {
-	Limit  int // SQL LIMIT count
-	Offset int // SQL OFFSET count
-}
+type LimitOffset struct { /* all structs must go */ }
 
 // SQL returns the SQL query fragment ("LIMIT %d OFFSET %d") for use in SQL queries.
 func (o *LimitOffset) SQL() *sqlf.Query {
diff --git a/internal/db/mockstores.go b/internal/db/mockstores.go
index 01e7f31..ed1acbc 100644
--- a/internal/db/mockstores.go
+++ b/internal/db/mockstores.go
@@ -3,26 +3,4 @@ package db
 var Mocks MockStores
 
 // MockStores has a field for each store interface with the concrete mock type (to obviate the need for tedious type assertions in test code).
-type MockStores struct {
-	AccessTokens MockAccessTokens
-
-	Repos         MockRepos
-	Orgs          MockOrgs
-	OrgMembers    MockOrgMembers
-	SavedSearches MockSavedSearches
-	Settings      MockSettings
-	Users         MockUsers
-	UserEmails    MockUserEmails
-
-	Phabricator MockPhabricator
-
-	ExternalAccounts MockExternalAccounts
-
-	OrgInvitations MockOrgInvitations
-
-	ExternalServices MockExternalServices
-
-	Authz MockAuthz
-
-	Secrets MockSecrets
-}
+type MockStores struct { /* all structs must go */ }
diff --git a/internal/db/org_invitations.go b/internal/db/org_invitations.go
index 985e33d..84c792a 100644
--- a/internal/db/org_invitations.go
+++ b/internal/db/org_invitations.go
@@ -13,17 +13,7 @@ import (
 )
 
 // An OrgInvitation is an invitation for a user to join an organization as a member.
-type OrgInvitation struct {
-	ID              int64
-	OrgID           int32
-	SenderUserID    int32 // the sender of the invitation
-	RecipientUserID int32 // the recipient of the invitation
-	CreatedAt       time.Time
-	NotifiedAt      *time.Time
-	RespondedAt     *time.Time
-	ResponseType    *bool // accepted (true), rejected (false), no response (nil)
-	RevokedAt       *time.Time
-}
+type OrgInvitation struct { /* all structs must go */ }
 
 // Pending reports whether the invitation is pending (i.e., can be responded to by the recipient
 // because it has not been revoked or responded to yet).
@@ -34,9 +24,7 @@ func (oi *OrgInvitation) Pending() bool {
 type orgInvitations struct{}
 
 // OrgInvitationNotFoundError occurs when an org invitation is not found.
-type OrgInvitationNotFoundError struct {
-	args []interface{}
-}
+type OrgInvitationNotFoundError struct { /* all structs must go */ }
 
 // NotFound implements errcode.NotFounder.
 func (err OrgInvitationNotFoundError) NotFound() bool { return true }
@@ -107,11 +95,7 @@ func (s *orgInvitations) GetPending(ctx context.Context, orgID, recipientUserID
 }
 
 // OrgInvitationsListOptions contains options for listing org invitations.
-type OrgInvitationsListOptions struct {
-	OrgID           int32 // only list org invitations for this org
-	RecipientUserID int32 // only list org invitations with this user as the recipient
-	*LimitOffset
-}
+type OrgInvitationsListOptions struct { /* all structs must go */ }
 
 func (o OrgInvitationsListOptions) sqlConditions() []*sqlf.Query {
 	var conds []*sqlf.Query
@@ -225,8 +209,4 @@ func (*orgInvitations) Revoke(ctx context.Context, id int64) error {
 }
 
 // MockOrgInvitations mocks the org invitations store.
-type MockOrgInvitations struct {
-	Create  func(orgID, senderUserID, recipientUserID int32) (*OrgInvitation, error)
-	GetByID func(id int64) (*OrgInvitation, error)
-	Revoke  func(id int64) error
-}
+type MockOrgInvitations struct { /* all structs must go */ }
diff --git a/internal/db/org_members.go b/internal/db/org_members.go
index d0014a7..cb1aeb2 100644
--- a/internal/db/org_members.go
+++ b/internal/db/org_members.go
@@ -63,9 +63,7 @@ func (*orgMembers) GetByOrgID(ctx context.Context, orgID int32) ([]*types.OrgMem
 
 // ErrOrgMemberNotFound is the error that is returned when
 // a user is not in an org.
-type ErrOrgMemberNotFound struct {
-	args []interface{}
-}
+type ErrOrgMemberNotFound struct { /* all structs must go */ }
 
 func (err *ErrOrgMemberNotFound) Error() string {
 	return fmt.Sprintf("org member not found: %v", err.args)
diff --git a/internal/db/org_members_mock.go b/internal/db/org_members_mock.go
index 11c37f9..e004ab9 100644
--- a/internal/db/org_members_mock.go
+++ b/internal/db/org_members_mock.go
@@ -7,9 +7,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/cmd/frontend/types"
 )
 
-type MockOrgMembers struct {
-	GetByOrgIDAndUserID func(ctx context.Context, orgID, userID int32) (*types.OrgMembership, error)
-}
+type MockOrgMembers struct { /* all structs must go */ }
 
 func (s *MockOrgMembers) MockGetByOrgIDAndUserID_Return(t *testing.T, returns *types.OrgMembership, returnsErr error) (called *bool) {
 	called = new(bool)
diff --git a/internal/db/orgs.go b/internal/db/orgs.go
index 674c41e..e6888ff 100644
--- a/internal/db/orgs.go
+++ b/internal/db/orgs.go
@@ -15,9 +15,7 @@ import (
 )
 
 // OrgNotFoundError occurs when an organization is not found.
-type OrgNotFoundError struct {
-	Message string
-}
+type OrgNotFoundError struct { /* all structs must go */ }
 
 func (e *OrgNotFoundError) Error() string {
 	return fmt.Sprintf("org not found: %s", e.Message)
@@ -100,12 +98,7 @@ func (o *orgs) Count(ctx context.Context, opt OrgsListOptions) (int, error) {
 }
 
 // OrgsListOptions specifies the options for listing organizations.
-type OrgsListOptions struct {
-	// Query specifies a search query for organizations.
-	Query string
-
-	*LimitOffset
-}
+type OrgsListOptions struct { /* all structs must go */ }
 
 func (o *orgs) List(ctx context.Context, opt *OrgsListOptions) ([]*types.Org, error) {
 	if Mocks.Orgs.List != nil {
diff --git a/internal/db/orgs_mock.go b/internal/db/orgs_mock.go
index 7f9a1ca..0439539 100644
--- a/internal/db/orgs_mock.go
+++ b/internal/db/orgs_mock.go
@@ -7,12 +7,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/cmd/frontend/types"
 )
 
-type MockOrgs struct {
-	GetByID   func(ctx context.Context, id int32) (*types.Org, error)
-	GetByName func(ctx context.Context, name string) (*types.Org, error)
-	Count     func(ctx context.Context, opt OrgsListOptions) (int, error)
-	List      func(ctx context.Context, opt *OrgsListOptions) ([]*types.Org, error)
-}
+type MockOrgs struct { /* all structs must go */ }
 
 func (s *MockOrgs) MockGetByID_Return(t *testing.T, returns *types.Org, returnsErr error) (called *bool) {
 	called = new(bool)
diff --git a/internal/db/phabricator.go b/internal/db/phabricator.go
index 54ac14e..ef62d15 100644
--- a/internal/db/phabricator.go
+++ b/internal/db/phabricator.go
@@ -12,9 +12,7 @@ import (
 
 type phabricator struct{}
 
-type errPhabricatorRepoNotFound struct {
-	args []interface{}
-}
+type errPhabricatorRepoNotFound struct { /* all structs must go */ }
 
 func (err errPhabricatorRepoNotFound) Error() string {
 	return fmt.Sprintf("phabricator repo not found: %v", err.args)
@@ -126,6 +124,4 @@ func (p *phabricator) GetByName(ctx context.Context, name api.RepoName) (*types.
 	return p.getOneBySQL(ctx, "WHERE repo_name=$1", name)
 }
 
-type MockPhabricator struct {
-	GetByName func(repo api.RepoName) (*types.PhabricatorRepo, error)
-}
+type MockPhabricator struct { /* all structs must go */ }
diff --git a/internal/db/query/query.go b/internal/db/query/query.go
index 23f9dc7..bffbe54 100644
--- a/internal/db/query/query.go
+++ b/internal/db/query/query.go
@@ -27,17 +27,11 @@ func Not(child Q) Q {
 	return &not{Child: child}
 }
 
-type and struct {
-	Children []Q
-}
+type and struct { /* all structs must go */ }
 
-type or struct {
-	Children []Q
-}
+type or struct { /* all structs must go */ }
 
-type not struct {
-	Child Q
-}
+type not struct { /* all structs must go */ }
 
 // Eval runs all atoms of q through atomToQueryFn, returning the final query
 // to run. If any call of atomToQueryFn returns an error, that error is
diff --git a/internal/db/query/query_test.go b/internal/db/query/query_test.go
index 16386ee..04f1b80 100644
--- a/internal/db/query/query_test.go
+++ b/internal/db/query/query_test.go
@@ -67,10 +67,7 @@ func ExampleEval_types() {
 }
 
 func TestEval_cornercase(t *testing.T) {
-	cases := []struct {
-		q    query.Q
-		want string
-	}{{
+	cases := []struct { /* all structs must go */ }{{
 		q:    query.And(),
 		want: "TRUE",
 	}, {
diff --git a/internal/db/repos.go b/internal/db/repos.go
index c1f9f39..4ab24f4 100644
--- a/internal/db/repos.go
+++ b/internal/db/repos.go
@@ -19,10 +19,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/trace"
 )
 
-type RepoNotFoundErr struct {
-	ID   api.RepoID
-	Name api.RepoName
-}
+type RepoNotFoundErr struct { /* all structs must go */ }
 
 func (e *RepoNotFoundErr) Error() string {
 	if e.Name != "" {
@@ -230,68 +227,7 @@ func scanRepo(rows *sql.Rows, r *types.Repo) (err error) {
 // ReposListOptions specifies the options for listing repositories.
 //
 // Query and IncludePatterns/ExcludePatterns may not be used together.
-type ReposListOptions struct {
-	// Query specifies a search query for repositories. If specified, then the Sort and
-	// Direction options are ignored
-	Query string
-
-	// IncludePatterns is a list of regular expressions, all of which must match all
-	// repositories returned in the list.
-	IncludePatterns []string
-
-	// ExcludePattern is a regular expression that must not match any repository
-	// returned in the list.
-	ExcludePattern string
-
-	// Names is a list of repository names used to limit the results to that
-	// set of repositories.
-	// Note: This is currently used for version contexts. In future iterations,
-	// version contexts may have their own table
-	// and this may be replaced by the version context name.
-	Names []string
-
-	// PatternQuery is an expression tree of patterns to query. The atoms of
-	// the query are strings which are regular expression patterns.
-	PatternQuery query.Q
-
-	// NoForks excludes forks from the list.
-	NoForks bool
-
-	// OnlyForks excludes non-forks from the lhist.
-	OnlyForks bool
-
-	// NoArchived excludes archived repositories from the list.
-	NoArchived bool
-
-	// OnlyArchived excludes non-archived repositories from the list.
-	OnlyArchived bool
-
-	// NoCloned excludes cloned repositories from the list.
-	NoCloned bool
-
-	// OnlyCloned excludes non-cloned repositories from the list.
-	OnlyCloned bool
-
-	// NoPrivate excludes private repositories from the list.
-	NoPrivate bool
-
-	// OnlyPrivate excludes non-private repositories from the list.
-	OnlyPrivate bool
-
-	// OnlyRepoIDs skips fetching of RepoFields in each Repo.
-	OnlyRepoIDs bool
-
-	// Index when set will only include repositories which should be indexed
-	// if true. If false it will exclude repositories which should be
-	// indexed. An example use case of this is for indexed search only
-	// indexing a subset of repositories.
-	Index *bool
-
-	// List of fields by which to order the return repositories.
-	OrderBy RepoListOrderBy
-
-	*LimitOffset
-}
+type ReposListOptions struct { /* all structs must go */ }
 
 type RepoListOrderBy []RepoListSort
 
@@ -308,10 +244,7 @@ func (r RepoListOrderBy) SQL() *sqlf.Query {
 }
 
 // RepoListSort is a field by which to sort and the direction of the sorting.
-type RepoListSort struct {
-	Field      RepoListColumn
-	Descending bool
-}
+type RepoListSort struct { /* all structs must go */ }
 
 func (r RepoListSort) SQL() *sqlf.Query {
 	if r.Descending {
diff --git a/internal/db/repos_db_test.go b/internal/db/repos_db_test.go
index 5cc58b7..8f7f1e7 100644
--- a/internal/db/repos_db_test.go
+++ b/internal/db/repos_db_test.go
@@ -72,14 +72,7 @@ func (s *repos) Delete(ctx context.Context, repo api.RepoID) error {
 }
 
 // InsertRepoOp represents an operation to insert a repository.
-type InsertRepoOp struct {
-	Name         api.RepoName
-	Description  string
-	Fork         bool
-	Archived     bool
-	Cloned       bool
-	ExternalRepo api.ExternalRepoSpec
-}
+type InsertRepoOp struct { /* all structs must go */ }
 
 const upsertSQL = `
 WITH upsert AS (
@@ -336,11 +329,7 @@ func TestRepos_List_cloned(t *testing.T) {
 	mine := mustCreate(ctx, t, &types.Repo{Name: "a/r", RepoFields: &types.RepoFields{Cloned: false}})
 	yours := mustCreate(ctx, t, &types.Repo{Name: "b/r", RepoFields: &types.RepoFields{Cloned: true}})
 
-	tests := []struct {
-		name string
-		opt  ReposListOptions
-		want []*types.Repo
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{"OnlyCloned", ReposListOptions{OnlyCloned: true}, yours},
 		{"NoCloned", ReposListOptions{NoCloned: true}, mine},
 		{"NoCloned && OnlyCloned", ReposListOptions{NoCloned: true, OnlyCloned: true}, nil},
@@ -380,11 +369,7 @@ func TestRepos_List_pagination(t *testing.T) {
 		mustCreate(ctx, t, repo)
 	}
 
-	type testcase struct {
-		limit  int
-		offset int
-		exp    []api.RepoName
-	}
+	type testcase struct { /* all structs must go */ }
 	tests := []testcase{
 		{limit: 1, offset: 0, exp: []api.RepoName{"r1"}},
 		{limit: 1, offset: 1, exp: []api.RepoName{"r2"}},
@@ -432,10 +417,7 @@ func TestRepos_List_query1(t *testing.T) {
 	for _, repo := range createdRepos {
 		createRepo(ctx, t, repo)
 	}
-	tests := []struct {
-		query string
-		want  []api.RepoName
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{"def", []api.RepoName{"abc/def", "def/ghi"}},
 		{"ABC/DEF", []api.RepoName{"abc/def"}},
 		{"xyz", []api.RepoName{"github.com/abc/xyz"}},
@@ -478,10 +460,7 @@ func TestRepos_List_query2(t *testing.T) {
 	for _, repo := range createdRepos {
 		createRepo(ctx, t, repo)
 	}
-	tests := []struct {
-		query string
-		want  []api.RepoName
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{"def", []api.RepoName{"a/def", "b/def", "c/def", "def/ghi", "def/jkl", "def/mno"}},
 		{"b/def", []api.RepoName{"b/def"}},
 		{"def/", []api.RepoName{"def/ghi", "def/jkl", "def/mno"}},
@@ -524,11 +503,7 @@ func TestRepos_List_sort(t *testing.T) {
 	for _, repo := range createdRepos {
 		createRepo(ctx, t, repo)
 	}
-	tests := []struct {
-		query   string
-		orderBy RepoListOrderBy
-		want    []api.RepoName
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			query: "",
 			orderBy: RepoListOrderBy{{
@@ -595,11 +570,7 @@ func TestRepos_List_patterns(t *testing.T) {
 	for _, repo := range createdRepos {
 		createRepo(ctx, t, repo)
 	}
-	tests := []struct {
-		includePatterns []string
-		excludePattern  string
-		want            []api.RepoName
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			includePatterns: []string{"(a|c)"},
 			want:            []api.RepoName{"a/b", "c/d"},
@@ -652,11 +623,7 @@ func TestRepos_List_queryPattern(t *testing.T) {
 	for _, repo := range createdRepos {
 		createRepo(ctx, t, repo)
 	}
-	tests := []struct {
-		q    query.Q
-		want []api.RepoName
-		err  string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		// These are the same tests as TestRepos_List_patterns, but in an
 		// expression form.
 		{
diff --git a/internal/db/repos_mock.go b/internal/db/repos_mock.go
index 8fb2ea5..6e5776b 100644
--- a/internal/db/repos_mock.go
+++ b/internal/db/repos_mock.go
@@ -9,13 +9,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/api"
 )
 
-type MockRepos struct {
-	Get       func(ctx context.Context, repo api.RepoID) (*types.Repo, error)
-	GetByName func(ctx context.Context, repo api.RepoName) (*types.Repo, error)
-	GetByIDs  func(ctx context.Context, ids ...api.RepoID) ([]*types.Repo, error)
-	List      func(v0 context.Context, v1 ReposListOptions) ([]*types.Repo, error)
-	Count     func(ctx context.Context, opt ReposListOptions) (int, error)
-}
+type MockRepos struct { /* all structs must go */ }
 
 func (s *MockRepos) MockGet(t *testing.T, wantRepo api.RepoID) (called *bool) {
 	called = new(bool)
diff --git a/internal/db/repos_perm_filter_test.go b/internal/db/repos_perm_filter_test.go
index 8744bfc..a5e5e58 100644
--- a/internal/db/repos_perm_filter_test.go
+++ b/internal/db/repos_perm_filter_test.go
@@ -24,12 +24,7 @@ func Test_authzFilter_permissionsUserMapping(t *testing.T) {
 	globals.SetPermissionsUserMapping(&schema.PermissionsUserMapping{Enabled: true})
 	defer globals.SetPermissionsUserMapping(before)
 
-	tests := []struct {
-		name      string
-		providers []authz.Provider
-		repos     []*types.Repo
-		expectErr string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		// 🚨 SECURITY: We need to make sure the behavior is the same for both "has repos" and "no repos".
 		// This is to ensure we always check conflict as the first step.
 		{
@@ -143,12 +138,7 @@ func Test_authzFilter(t *testing.T) {
 		ctx := context.Background()
 		ctx = actor.WithActor(ctx, &actor.Actor{UID: user.ID})
 
-		tests := []struct {
-			name                string
-			authzAllowByDefault bool
-			repos               []*types.Repo
-			wantRepos           []*types.Repo
-		}{
+		tests := []struct { /* all structs must go */ }{
 			{
 				name:                "authzAllowByDefault=false, only see public repos",
 				authzAllowByDefault: false,
@@ -213,12 +203,7 @@ func Test_authzFilter(t *testing.T) {
 		ctx := context.Background()
 		ctx = actor.WithActor(ctx, &actor.Actor{UID: user.ID})
 
-		tests := []struct {
-			name                string
-			authzAllowByDefault bool
-			repos               []*types.Repo
-			wantRepos           []*types.Repo
-		}{
+		tests := []struct { /* all structs must go */ }{
 			{
 				name:                "authzAllowByDefault=false, see explicitly authorized repos",
 				authzAllowByDefault: false,
@@ -301,12 +286,7 @@ func Test_authzFilter(t *testing.T) {
 		ctx := context.Background()
 		ctx = actor.WithActor(ctx, &actor.Actor{UID: user.ID})
 
-		tests := []struct {
-			name                string
-			authzAllowByDefault bool
-			repos               []*types.Repo
-			wantRepos           []*types.Repo
-		}{
+		tests := []struct { /* all structs must go */ }{
 			{
 				name:                "authzAllowByDefault=false, see explicitly authorized repos",
 				authzAllowByDefault: false,
@@ -362,18 +342,7 @@ func Test_authzFilter(t *testing.T) {
 	})
 }
 
-type MockAuthzProvider struct {
-	serviceID   string
-	serviceType string
-
-	// okServiceIDs indicate services whose external accounts will be straightforwardly translated
-	// into external accounts belonging to this provider.
-	okServiceIDs map[string]struct{}
-
-	// perms is the map from external user account to repository permissions. The key set must
-	// include all user external accounts that are available in this mock instance.
-	perms map[extsvc.Account]map[api.RepoName]authz.Perms
-}
+type MockAuthzProvider struct { /* all structs must go */ }
 
 func (m *MockAuthzProvider) FetchAccount(ctx context.Context, user *types.User, current []*extsvc.Account) (mine *extsvc.Account, err error) {
 	if user == nil {
diff --git a/internal/db/repos_perm_test.go b/internal/db/repos_perm_test.go
index 9a65b9b..17c096b 100644
--- a/internal/db/repos_perm_test.go
+++ b/internal/db/repos_perm_test.go
@@ -116,10 +116,7 @@ func Benchmark_authzFilter(b *testing.B) {
 	}
 }
 
-type fakeProvider struct {
-	codeHost *extsvc.CodeHost
-	extAcct  *extsvc.Account
-}
+type fakeProvider struct { /* all structs must go */ }
 
 func (p *fakeProvider) FetchAccount(
 	ctx context.Context,
diff --git a/internal/db/repos_test.go b/internal/db/repos_test.go
index 2670197..3be565f 100644
--- a/internal/db/repos_test.go
+++ b/internal/db/repos_test.go
@@ -14,11 +14,7 @@ import (
 )
 
 func TestParseIncludePattern(t *testing.T) {
-	tests := map[string]struct {
-		exact  []string
-		like   []string
-		regexp string
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		`^$`:              {exact: []string{""}},
 		`(^$)`:            {exact: []string{""}},
 		`((^$))`:          {exact: []string{""}},
diff --git a/internal/db/saved_queries.go b/internal/db/saved_queries.go
index d0dd07d..3fc7be8 100644
--- a/internal/db/saved_queries.go
+++ b/internal/db/saved_queries.go
@@ -11,12 +11,7 @@ import (
 
 type queryRunnerState struct{}
 
-type SavedQueryInfo struct {
-	Query        string
-	LastExecuted time.Time
-	LatestResult time.Time
-	ExecDuration time.Duration
-}
+type SavedQueryInfo struct { /* all structs must go */ }
 
 // Get gets the saved query information for the given query. nil
 // is returned if there is no existing saved query info.
diff --git a/internal/db/saved_searches_mock.go b/internal/db/saved_searches_mock.go
index fc15d8f..3a65c3e 100644
--- a/internal/db/saved_searches_mock.go
+++ b/internal/db/saved_searches_mock.go
@@ -7,11 +7,4 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/api"
 )
 
-type MockSavedSearches struct {
-	ListAll                   func(ctx context.Context) ([]api.SavedQuerySpecAndConfig, error)
-	ListSavedSearchesByUserID func(ctx context.Context, userID int32) ([]*types.SavedSearch, error)
-	Create                    func(ctx context.Context, newSavedSearch *types.SavedSearch) (*types.SavedSearch, error)
-	Update                    func(ctx context.Context, savedSearch *types.SavedSearch) (*types.SavedSearch, error)
-	Delete                    func(ctx context.Context, id int32) error
-	GetByID                   func(ctx context.Context, id int32) (*api.SavedQuerySpecAndConfig, error)
-}
+type MockSavedSearches struct { /* all structs must go */ }
diff --git a/internal/db/secrets_mock.go b/internal/db/secrets_mock.go
index 3c894c5..4072781 100644
--- a/internal/db/secrets_mock.go
+++ b/internal/db/secrets_mock.go
@@ -6,14 +6,4 @@ import (
 	"github.com/sourcegraph/sourcegraph/cmd/frontend/types"
 )
 
-type MockSecrets struct {
-	DeleteByID      func(ctx context.Context, id int32) error
-	DeleteByKeyName func(ctx context.Context, keyName string) error
-	DeleteBySource  func(ctx context.Context, sourceType string, sourceID int32) error
-	GetByID         func(ctx context.Context, id int32) (*types.Secret, error)
-	GetByKeyName    func(ctx context.Context, keyName string) (*types.Secret, error)
-	GetBySource     func(ctx context.Context, sourceType string, sourceID int32) (*types.Secret, error)
-	UpdateByID      func(ctx context.Context, id int32) error
-	UpdateByKeyname func(ctx context.Context, keyName string) error
-	UpdateBySource  func(ctx context.Context, sourceType string, sourceID int32) error
-}
+type MockSecrets struct { /* all structs must go */ }
diff --git a/internal/db/settings_mock.go b/internal/db/settings_mock.go
index b7a68aa..2f20017 100644
--- a/internal/db/settings_mock.go
+++ b/internal/db/settings_mock.go
@@ -6,7 +6,4 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/api"
 )
 
-type MockSettings struct {
-	GetLatest        func(ctx context.Context, subject api.SettingsSubject) (*api.Settings, error)
-	CreateIfUpToDate func(ctx context.Context, subject api.SettingsSubject, lastID, authorUserID *int32, contents string) (latestSetting *api.Settings, err error)
-}
+type MockSettings struct { /* all structs must go */ }
diff --git a/internal/db/survey_responses.go b/internal/db/survey_responses.go
index 76c4218..13811bb 100644
--- a/internal/db/survey_responses.go
+++ b/internal/db/survey_responses.go
@@ -13,9 +13,7 @@ import (
 )
 
 // SurveyResponseListOptions specifies the options for listing survey responses.
-type SurveyResponseListOptions struct {
-	*LimitOffset
-}
+type SurveyResponseListOptions struct { /* all structs must go */ }
 
 type surveyResponses struct{}
 
diff --git a/internal/db/user_emails.go b/internal/db/user_emails.go
index 6c75f4f..0581ed1 100644
--- a/internal/db/user_emails.go
+++ b/internal/db/user_emails.go
@@ -14,14 +14,7 @@ import (
 )
 
 // UserEmail represents a row in the `user_emails` table.
-type UserEmail struct {
-	UserID                 int32
-	Email                  string
-	CreatedAt              time.Time
-	VerificationCode       *string
-	VerifiedAt             *time.Time
-	LastVerificationSentAt *time.Time
-}
+type UserEmail struct { /* all structs must go */ }
 
 // NeedsVerificationCoolDown returns true if the verification cooled down time is behind current time.
 func (email *UserEmail) NeedsVerificationCoolDown() bool {
@@ -31,9 +24,7 @@ func (email *UserEmail) NeedsVerificationCoolDown() bool {
 }
 
 // userEmailNotFoundError is the error that is returned when a user email is not found.
-type userEmailNotFoundError struct {
-	args []interface{}
-}
+type userEmailNotFoundError struct { /* all structs must go */ }
 
 func (err userEmailNotFoundError) Error() string {
 	return fmt.Sprintf("user email not found: %v", err.args)
@@ -245,12 +236,7 @@ func (*userEmails) getBySQL(ctx context.Context, query string, args ...interface
 }
 
 // UserEmailsListOptions specifies the options for listing user emails.
-type UserEmailsListOptions struct {
-	// UserID specifies the id of the user for listing emails.
-	UserID int32
-	// OnlyVerified excludes unverified emails from the list.
-	OnlyVerified bool
-}
+type UserEmailsListOptions struct { /* all structs must go */ }
 
 // ListByUser returns a list of emails that are associated to the given user.
 func (*userEmails) ListByUser(ctx context.Context, opt UserEmailsListOptions) ([]*UserEmail, error) {
diff --git a/internal/db/user_emails_mock.go b/internal/db/user_emails_mock.go
index 0d938ae..fcaca18 100644
--- a/internal/db/user_emails_mock.go
+++ b/internal/db/user_emails_mock.go
@@ -4,11 +4,4 @@ import (
 	"context"
 )
 
-type MockUserEmails struct {
-	GetPrimaryEmail                func(ctx context.Context, id int32) (email string, verified bool, err error)
-	Get                            func(userID int32, email string) (emailCanonicalCase string, verified bool, err error)
-	SetVerified                    func(ctx context.Context, userID int32, email string, verified bool) error
-	GetLatestVerificationSentEmail func(ctx context.Context, email string) (*UserEmail, error)
-	GetVerifiedEmails              func(ctx context.Context, emails ...string) ([]*UserEmail, error)
-	ListByUser                     func(ctx context.Context, opt UserEmailsListOptions) ([]*UserEmail, error)
-}
+type MockUserEmails struct { /* all structs must go */ }
diff --git a/internal/db/user_emails_test.go b/internal/db/user_emails_test.go
index c67f07b..6bb981c 100644
--- a/internal/db/user_emails_test.go
+++ b/internal/db/user_emails_test.go
@@ -17,11 +17,7 @@ func TestUserEmail_NeedsVerificationCoolDown(t *testing.T) {
 		return &t
 	}
 
-	tests := []struct {
-		name                   string
-		lastVerificationSentAt *time.Time
-		needsCoolDown          bool
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:                   "nil",
 			lastVerificationSentAt: nil,
diff --git a/internal/db/users.go b/internal/db/users.go
index 4ca5f6e..3a87c2e 100644
--- a/internal/db/users.go
+++ b/internal/db/users.go
@@ -25,16 +25,10 @@ import (
 // users provides access to the `users` table.
 //
 // For a detailed overview of the schema, see schema.txt.
-type users struct {
-	// PreCreateUser (if set) is a hook called before creating a new user in the DB by any means
-	// (e.g., both directly via Users.Create or via ExternalAccounts.CreateUserAndSave).
-	PreCreateUser func(context.Context) error
-}
+type users struct { /* all structs must go */ }
 
 // userNotFoundErr is the error that is returned when a user is not found.
-type userNotFoundErr struct {
-	args []interface{}
-}
+type userNotFoundErr struct { /* all structs must go */ }
 
 func (err userNotFoundErr) Error() string {
 	return fmt.Sprintf("user not found: %v", err.args)
@@ -52,9 +46,7 @@ func NewUserNotFoundError(userID int32) error {
 
 // errCannotCreateUser is the error that is returned when
 // a user cannot be added to the DB due to a constraint.
-type errCannotCreateUser struct {
-	code string
-}
+type errCannotCreateUser struct { /* all structs must go */ }
 
 const (
 	errorCodeUsernameExists = "err_username_exists"
@@ -82,32 +74,7 @@ func IsEmailExists(err error) bool {
 }
 
 // NewUser describes a new to-be-created user.
-type NewUser struct {
-	Email       string
-	Username    string
-	DisplayName string
-	Password    string
-	AvatarURL   string // the new user's avatar URL, if known
-
-	// EmailVerificationCode, if given, causes the new user's email address to be unverified until
-	// they perform the email verification process and provied this code.
-	EmailVerificationCode string `json:"-"` // forbid this field being set by JSON, just in case
-
-	// EmailIsVerified is whether the email address should be considered already verified.
-	//
-	// 🚨 SECURITY: Only site admins are allowed to create users whose email addresses are initially
-	// verified (i.e., with EmailVerificationCode == "").
-	EmailIsVerified bool `json:"-"` // forbid this field being set by JSON, just in case
-
-	// FailIfNotInitialUser causes the (users).Create call to return an error and not create the
-	// user if at least one of the following is true: (1) the site has already been initialized or
-	// (2) any other user account already exists.
-	FailIfNotInitialUser bool `json:"-"` // forbid this field being set by JSON, just in case
-
-	// EnforcePasswordLength is whether should enforce minimum and maximum password length requirement.
-	// Users created by non-builtin auth providers do not have a password thus no need to check.
-	EnforcePasswordLength bool `json:"-"` // forbid this field being set by JSON, just in case
-}
+type NewUser struct { /* all structs must go */ }
 
 // Create creates a new user in the database.
 //
@@ -312,16 +279,7 @@ func orgsForAllUsersToJoin(userOrgMap map[string][]string) ([]string, []error) {
 }
 
 // UserUpdate describes user fields to update.
-type UserUpdate struct {
-	Username string // update the Username to this value (if non-zero)
-
-	// For the following fields:
-	//
-	// - If nil, the value in the DB is unchanged.
-	// - If pointer to "" (empty string), the value in the DB is set to null.
-	// - If pointer to a non-empty string, the value in the DB is set to the string.
-	DisplayName, AvatarURL *string
-}
+type UserUpdate struct { /* all structs must go */ }
 
 // Update updates a user's profile information.
 func (u *users) Update(ctx context.Context, id int32, update UserUpdate) error {
@@ -630,16 +588,7 @@ func (u *users) Count(ctx context.Context, opt *UsersListOptions) (int, error) {
 }
 
 // UsersListOptions specifies the options for listing users.
-type UsersListOptions struct {
-	// Query specifies a search query for users.
-	Query string
-	// UserIDs specifies a list of user IDs to include.
-	UserIDs []int32
-
-	Tag string // only include users with this tag
-
-	*LimitOffset
-}
+type UsersListOptions struct { /* all structs must go */ }
 
 func (u *users) List(ctx context.Context, opt *UsersListOptions) (_ []*types.User, err error) {
 	if Mocks.Users.List != nil {
diff --git a/internal/db/users_mock.go b/internal/db/users_mock.go
index 9d8d142..d2e6aac 100644
--- a/internal/db/users_mock.go
+++ b/internal/db/users_mock.go
@@ -7,21 +7,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/cmd/frontend/types"
 )
 
-type MockUsers struct {
-	Create                       func(ctx context.Context, info NewUser) (newUser *types.User, err error)
-	Update                       func(userID int32, update UserUpdate) error
-	Delete                       func(ctx context.Context, id int32) error
-	HardDelete                   func(ctx context.Context, id int32) error
-	SetIsSiteAdmin               func(id int32, isSiteAdmin bool) error
-	CheckAndDecrementInviteQuota func(ctx context.Context, userID int32) (bool, error)
-	GetByID                      func(ctx context.Context, id int32) (*types.User, error)
-	GetByUsername                func(ctx context.Context, username string) (*types.User, error)
-	GetByUsernames               func(ctx context.Context, usernames ...string) ([]*types.User, error)
-	GetByCurrentAuthUser         func(ctx context.Context) (*types.User, error)
-	GetByVerifiedEmail           func(ctx context.Context, email string) (*types.User, error)
-	Count                        func(ctx context.Context, opt *UsersListOptions) (int, error)
-	List                         func(ctx context.Context, opt *UsersListOptions) ([]*types.User, error)
-}
+type MockUsers struct { /* all structs must go */ }
 
 func (s *MockUsers) MockGetByID_Return(t *testing.T, returns *types.User, returnsErr error) (called *bool) {
 	called = new(bool)
diff --git a/internal/db/users_test.go b/internal/db/users_test.go
index 624806d..33b66f8 100644
--- a/internal/db/users_test.go
+++ b/internal/db/users_test.go
@@ -19,10 +19,7 @@ import (
 )
 
 // usernamesForTests is a list of test cases containing valid and invalid usernames and org names.
-var usernamesForTests = []struct {
-	name      string
-	wantValid bool
-}{
+var usernamesForTests = []struct { /* all structs must go */ }{
 	{"nick", true},
 	{"n1ck", true},
 	{"Nick2", true},
@@ -100,13 +97,7 @@ func TestUsers_Create_checkPasswordLength(t *testing.T) {
 
 	minPasswordRunes := conf.AuthMinPasswordLength()
 	expErr := fmt.Sprintf("Passwords may not be less than %d or be more than %d characters.", minPasswordRunes, maxPasswordRunes)
-	tests := []struct {
-		name     string
-		username string
-		password string
-		enforce  bool
-		expErr   string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:     "below minimum",
 			username: "user1",
diff --git a/internal/debugserver/debug.go b/internal/debugserver/debug.go
index 5ef03fc..862a7d6 100644
--- a/internal/debugserver/debug.go
+++ b/internal/debugserver/debug.go
@@ -40,31 +40,14 @@ func init() {
 
 // Endpoint is a handler for the debug server. It will be displayed on the
 // debug index page.
-type Endpoint struct {
-	// Name is the name shown on the index page for the endpoint
-	Name string
-	// Path is passed to http.Mux.Handle as the pattern.
-	Path string
-	// Handler is the debug handler
-	Handler http.Handler
-}
+type Endpoint struct { /* all structs must go */ }
 
 // Services is the list of registered services' debug addresses. Populated
 // from SRC_PROF_MAP.
 var Services []Service
 
 // Service is a service's debug addr (host:port).
-type Service struct {
-	// Name of the service. Always the binary name. example: "gitserver"
-	Name string
-
-	// Host is the host:port for the services SRC_PROF_HTTP. example:
-	// "127.0.0.1:6060"
-	Host string
-
-	// DefaultPath is the path to the service we should link to.
-	DefaultPath string
-}
+type Service struct { /* all structs must go */ }
 
 // Start runs a debug server (pprof, prometheus, etc) if it is configured (via
 // SRC_PROF_HTTP environment variable). It is blocking.
diff --git a/internal/diskcache/cache.go b/internal/diskcache/cache.go
index a24d5fa..6addbd5 100644
--- a/internal/diskcache/cache.go
+++ b/internal/diskcache/cache.go
@@ -19,31 +19,10 @@ import (
 )
 
 // Store is an on disk cache, with items cached via calls to Open.
-type Store struct {
-	// Dir is the directory to cache items.
-	Dir string
-
-	// Component when set is reported to OpenTracing as the component.
-	Component string
-
-	// BackgroundTimeout when non-zero will do fetches in the background with
-	// a timeout. This means the context passed to fetch will be
-	// context.WithTimeout(context.Background(), BackgroundTimeout). When not
-	// set fetches are done with the passed in context.
-	BackgroundTimeout time.Duration
-
-	// BeforeEvict, when non-nil, is a function to call before evicting a file.
-	// It is passed the path to the file to be evicted.
-	BeforeEvict func(string)
-}
+type Store struct { /* all structs must go */ }
 
 // File is an os.File, but includes the Path
-type File struct {
-	*os.File
-
-	// The Path on disk for File
-	Path string
-}
+type File struct { /* all structs must go */ }
 
 // Fetcher returns a ReadCloser. It is used by Open if the key is not in the
 // cache.
@@ -112,10 +91,7 @@ func (s *Store) OpenWithPath(ctx context.Context, key string, fetcher FetcherWit
 	span.SetTag("source", "fetch")
 
 	// Do the fetch in another goroutine so we can respect ctx cancellation.
-	type result struct {
-		f   *File
-		err error
-	}
+	type result struct { /* all structs must go */ }
 	ch := make(chan result, 1)
 	go func(ctx context.Context) {
 		if s.BackgroundTimeout != 0 {
@@ -214,13 +190,7 @@ func doFetch(ctx context.Context, path string, fetcher FetcherWithPath) (file *F
 }
 
 // EvictStats is information gathered during Evict.
-type EvictStats struct {
-	// CacheSize is the size of the cache before evicting.
-	CacheSize int64
-
-	// Evicted is the number of items evicted.
-	Evicted int
-}
+type EvictStats struct { /* all structs must go */ }
 
 // Evict will remove files from Store.Dir until it is smaller than
 // maxCacheSizeBytes. It evicts files with the oldest modification time first.
diff --git a/internal/endpoint/consistenthash.go b/internal/endpoint/consistenthash.go
index e437e9c..7265b9c 100644
--- a/internal/endpoint/consistenthash.go
+++ b/internal/endpoint/consistenthash.go
@@ -24,13 +24,7 @@ import (
 
 type hashFn func(data []byte) uint32
 
-type hashMap struct {
-	hash     hashFn
-	replicas int
-	keys     []int // Sorted
-	hashMap  map[int]string
-	values   map[string]struct{}
-}
+type hashMap struct { /* all structs must go */ }
 
 func hashMapNew(replicas int, fn hashFn) *hashMap {
 	m := &hashMap{
diff --git a/internal/endpoint/endpoint.go b/internal/endpoint/endpoint.go
index 98860ef..0ee908a 100644
--- a/internal/endpoint/endpoint.go
+++ b/internal/endpoint/endpoint.go
@@ -24,13 +24,7 @@ import (
 // Map is a consistent hash map to URLs. It uses the kubernetes API to watch
 // the endpoints for a service and update the map when they change. It can
 // also fallback to static URLs if not configured for kubernetes.
-type Map struct {
-	mu      sync.Mutex
-	init    func() (*hashMap, error)
-	err     error
-	urls    *hashMap
-	urlspec string
-}
+type Map struct { /* all structs must go */ }
 
 // New creates a new Map for the URL specifier.
 //
@@ -218,12 +212,7 @@ func endpointsToMap(u *k8sURL, eps *corev1.Endpoints) (*hashMap, error) {
 	return newConsistentHashMap(urls), nil
 }
 
-type k8sURL struct {
-	url.URL
-
-	Service   string
-	Namespace string
-}
+type k8sURL struct { /* all structs must go */ }
 
 func (u *k8sURL) endpointURL(endpoint string) string {
 	uCopy := u.URL
diff --git a/internal/env/env.go b/internal/env/env.go
index 3674b55..7e0a8b8 100644
--- a/internal/env/env.go
+++ b/internal/env/env.go
@@ -15,11 +15,7 @@ import (
 	"github.com/inconshreveable/log15"
 )
 
-type envflag struct {
-	name        string
-	description string
-	value       string
-}
+type envflag struct { /* all structs must go */ }
 
 var env []envflag
 var environ map[string]string
diff --git a/internal/errcode/code.go b/internal/errcode/code.go
index 7794b7d..95f6459 100644
--- a/internal/errcode/code.go
+++ b/internal/errcode/code.go
@@ -59,10 +59,7 @@ func HTTP(err error) int {
 	return http.StatusInternalServerError
 }
 
-type HTTPErr struct {
-	Status int   // HTTP status code.
-	Err    error // Optional reason for the HTTP error.
-}
+type HTTPErr struct { /* all structs must go */ }
 
 func (err *HTTPErr) Error() string {
 	if err.Err != nil {
@@ -79,13 +76,7 @@ func IsHTTPErrorCode(err error, statusCode int) bool {
 
 // Mock is a convenience error which makes it easy to satisfy the optional
 // interfaces errors implement.
-type Mock struct {
-	// Message is the return value for Error() string
-	Message string
-
-	// IsNotFound is the return value for NotFound
-	IsNotFound bool
-}
+type Mock struct { /* all structs must go */ }
 
 func (e *Mock) Error() string {
 	return e.Message
diff --git a/internal/errcode/code_test.go b/internal/errcode/code_test.go
index b796611..29f3500 100644
--- a/internal/errcode/code_test.go
+++ b/internal/errcode/code_test.go
@@ -10,10 +10,7 @@ import (
 )
 
 func TestHTTP(t *testing.T) {
-	tests := []struct {
-		err  error
-		want int
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{os.ErrNotExist, http.StatusNotFound},
 		{&notFoundErr{}, http.StatusNotFound},
 		{nil, http.StatusOK},
diff --git a/internal/errcode/presentation_error.go b/internal/errcode/presentation_error.go
index 65b882b..fc06bcc 100644
--- a/internal/errcode/presentation_error.go
+++ b/internal/errcode/presentation_error.go
@@ -35,10 +35,7 @@ func NewPresentationError(message string) error {
 }
 
 // presentationError implements PresentationError.
-type presentationError struct {
-	cause error
-	msg   string
-}
+type presentationError struct { /* all structs must go */ }
 
 func (e *presentationError) Error() string {
 	if e.cause != nil {
diff --git a/internal/eventlogger/event_logger.go b/internal/eventlogger/event_logger.go
index 5e00f90..111e365 100644
--- a/internal/eventlogger/event_logger.go
+++ b/internal/eventlogger/event_logger.go
@@ -12,11 +12,7 @@ import (
 )
 
 // TelemetryRequest represents a request to log telemetry.
-type TelemetryRequest struct {
-	UserID    int32
-	EventName string
-	Argument  json.RawMessage
-}
+type TelemetryRequest struct { /* all structs must go */ }
 
 // LogEvent sends a payload representing an event to the api/telemetry endpoint.
 //
diff --git a/internal/extsvc/awscodecommit/client.go b/internal/extsvc/awscodecommit/client.go
index c83468a..04cfff7 100644
--- a/internal/extsvc/awscodecommit/client.go
+++ b/internal/extsvc/awscodecommit/client.go
@@ -13,10 +13,7 @@ import (
 )
 
 // Client is a AWS CodeCommit API client.
-type Client struct {
-	aws       aws.Config
-	repoCache *rcache.Cache
-}
+type Client struct { /* all structs must go */ }
 
 // NewClient creates a new AWS CodeCommit API client.
 func NewClient(config aws.Config) *Client {
diff --git a/internal/extsvc/awscodecommit/repos.go b/internal/extsvc/awscodecommit/repos.go
index 0cb3cb5..f3ffc5e 100644
--- a/internal/extsvc/awscodecommit/repos.go
+++ b/internal/extsvc/awscodecommit/repos.go
@@ -11,15 +11,7 @@ import (
 )
 
 // Repository is an AWS CodeCommit repository.
-type Repository struct {
-	ARN          string     // the ARN (Amazon Resource Name) of the repository
-	AccountID    string     // the ID of the AWS account associated with the repository
-	ID           string     // the ID of the repository
-	Name         string     // the name of the repository
-	Description  string     // the description of the repository
-	HTTPCloneURL string     // the HTTP(S) clone URL of the repository
-	LastModified *time.Time // the last modified date of the repository
-}
+type Repository struct { /* all structs must go */ }
 
 func (c *Client) repositoryCacheKey(ctx context.Context, arn string) (string, error) {
 	key, err := c.cacheKeyPrefix(ctx)
@@ -88,13 +80,7 @@ func init() {
 	prometheus.MustRegister(reposCacheCounter)
 }
 
-type cachedRepo struct {
-	Repository
-
-	// NotFound indicates that the AWS CodeCommit API reported that the repository was not
-	// found.
-	NotFound bool
-}
+type cachedRepo struct { /* all structs must go */ }
 
 // getRepositoryFromCache attempts to get a response from the redis cache.
 // It returns nil error for cache-hit condition and non-nil error for cache-miss.
diff --git a/internal/extsvc/bitbucketcloud/client.go b/internal/extsvc/bitbucketcloud/client.go
index ea04f63..e7cbe39 100644
--- a/internal/extsvc/bitbucketcloud/client.go
+++ b/internal/extsvc/bitbucketcloud/client.go
@@ -39,20 +39,7 @@ const (
 )
 
 // Client access a Bitbucket Cloud via the REST API 2.0.
-type Client struct {
-	// HTTP Client used to communicate with the API
-	httpClient httpcli.Doer
-
-	// URL is the base URL of Bitbucket Cloud.
-	URL *url.URL
-
-	// The username and app password credentials for accessing the server.
-	Username, AppPassword string
-
-	// RateLimit is the self-imposed rate limiter (since Bitbucket does not have a concept
-	// of rate limiting in HTTP response headers).
-	RateLimit *rate.Limiter
-}
+type Client struct { /* all structs must go */ }
 
 // NewClient creates a new Bitbucket Cloud API client with given apiURL. If a nil httpClient
 // is provided, http.DefaultClient will be used. Both Username and AppPassword fields are
@@ -128,10 +115,7 @@ func (c *Client) reqPage(ctx context.Context, url string, results interface{}) (
 	}
 
 	var next PageToken
-	err = c.do(ctx, req, &struct {
-		*PageToken
-		Values interface{} `json:"values"`
-	}{
+	err = c.do(ctx, req, &struct { /* all structs must go */ }{
 		PageToken: &next,
 		Values:    results,
 	})
@@ -198,12 +182,7 @@ func (c *Client) authenticate(req *http.Request) error {
 	return nil
 }
 
-type PageToken struct {
-	Size    int    `json:"size"`
-	Page    int    `json:"page"`
-	Pagelen int    `json:"pagelen"`
-	Next    string `json:"next"`
-}
+type PageToken struct { /* all structs must go */ }
 
 func (t *PageToken) HasMore() bool {
 	if t == nil {
@@ -223,31 +202,13 @@ func (t *PageToken) Values() url.Values {
 	return v
 }
 
-type Repo struct {
-	Slug        string `json:"slug"`
-	Name        string `json:"name"`
-	FullName    string `json:"full_name"`
-	UUID        string `json:"uuid"`
-	SCM         string `json:"scm"`
-	Description string `json:"description"`
-	Parent      *Repo  `json:"parent"`
-	IsPrivate   bool   `json:"is_private"`
-	Links       Links  `json:"links"`
-}
+type Repo struct { /* all structs must go */ }
 
-type Links struct {
-	Clone CloneLinks `json:"clone"`
-	HTML  Link       `json:"html"`
-}
+type Links struct { /* all structs must go */ }
 
-type CloneLinks []struct {
-	Href string `json:"href"`
-	Name string `json:"name"`
-}
+type CloneLinks []struct { /* all structs must go */ }
 
-type Link struct {
-	Href string `json:"href"`
-}
+type Link struct { /* all structs must go */ }
 
 // HTTPS returns clone link named "https", it returns an error if not found.
 func (cl CloneLinks) HTTPS() (string, error) {
@@ -259,11 +220,7 @@ func (cl CloneLinks) HTTPS() (string, error) {
 	return "", errors.New("HTTPS clone link not found")
 }
 
-type httpError struct {
-	StatusCode int
-	URL        *url.URL
-	Body       []byte
-}
+type httpError struct { /* all structs must go */ }
 
 func (e *httpError) Error() string {
 	return fmt.Sprintf("Bitbucket Cloud API HTTP error: code=%d url=%q body=%q", e.StatusCode, e.URL, e.Body)
diff --git a/internal/extsvc/bitbucketcloud/client_test.go b/internal/extsvc/bitbucketcloud/client_test.go
index b41795d..fbccc85 100644
--- a/internal/extsvc/bitbucketcloud/client_test.go
+++ b/internal/extsvc/bitbucketcloud/client_test.go
@@ -54,15 +54,7 @@ func TestClient_Repos(t *testing.T) {
 		},
 	}
 
-	for _, tc := range []struct {
-		name    string
-		ctx     context.Context
-		page    *PageToken
-		account string
-		repos   []*Repo
-		next    *PageToken
-		err     string
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{
 			name: "timeout",
 			ctx:  timeout,
diff --git a/internal/extsvc/bitbucketserver/client.go b/internal/extsvc/bitbucketserver/client.go
index aa3dbc7..bbf106e 100644
--- a/internal/extsvc/bitbucketserver/client.go
+++ b/internal/extsvc/bitbucketserver/client.go
@@ -56,30 +56,7 @@ const (
 )
 
 // Client access a Bitbucket Server via the REST API.
-type Client struct {
-	// HTTP Client used to communicate with the API
-	httpClient httpcli.Doer
-
-	// URL is the base URL of Bitbucket Server.
-	URL *url.URL
-
-	// Token is the personal access token for accessing the
-	// server. https://bitbucket.example.com/plugins/servlet/access-tokens/manage
-	Token string
-
-	// The username and password credentials for accessing the server. Typically these are only
-	// used when the server doesn't support personal access tokens (such as Bitbucket Server
-	// version 5.4 and older). If both Token and Username/Password are specified, Token is used.
-	Username, Password string
-
-	// RateLimit is the self-imposed rate limiter (since Bitbucket does not have a concept
-	// of rate limiting in HTTP response headers).
-	RateLimit *rate.Limiter
-
-	// OAuth client used to authenticate requests, if set via SetOAuth.
-	// Takes precedence over Token and Username / Password authentication.
-	Oauth *oauth.Client
-}
+type Client struct { /* all structs must go */ }
 
 // NewClient returns an authenticated Bitbucket Server API client with
 // the provided configuration. If a nil httpClient is provided, http.DefaultClient
@@ -187,17 +164,7 @@ func (fs UserFilters) EncodeTo(qry url.Values) {
 }
 
 // UserFilter defines a sum type of filters to be used when listing users.
-type UserFilter struct {
-	// Filter filters the returned users to those whose username,
-	// name or email address contain this value.
-	// The API doesn't support exact matches.
-	Filter string
-	// Group filters the returned users to those who are in the give group.
-	Group string
-	// Permission filters the returned users to those having the given
-	// permissions.
-	Permission PermissionFilter
-}
+type UserFilter struct { /* all structs must go */ }
 
 // EncodeTo encodes the UserFilter to the given url.Values.
 func (f UserFilter) EncodeTo(qry url.Values) {
@@ -216,15 +183,7 @@ func (f UserFilter) EncodeTo(qry url.Values) {
 
 // A PermissionFilter is a filter used to list users that have specific
 // permissions.
-type PermissionFilter struct {
-	Root           Perm
-	ProjectID      string
-	ProjectKey     string
-	RepositoryID   string
-	RepositorySlug string
-
-	index int
-}
+type PermissionFilter struct { /* all structs must go */ }
 
 // EncodeTo encodes the PermissionFilter to the given url.Values.
 func (p PermissionFilter) EncodeTo(qry url.Values) {
@@ -279,15 +238,10 @@ func (c *Client) Users(ctx context.Context, pageToken *PageToken, fs ...UserFilt
 func (c *Client) UserPermissions(ctx context.Context, username string) (perms []Perm, _ error) {
 	qry := url.Values{"filter": {username}}
 
-	type permission struct {
-		User       *User `json:"user"`
-		Permission Perm  `json:"permission"`
-	}
+	type permission struct { /* all structs must go */ }
 
 	var ps []permission
-	err := c.send(ctx, "GET", "rest/api/1.0/admin/permissions/users", qry, nil, &struct {
-		Values []permission `json:"values"`
-	}{
+	err := c.send(ctx, "GET", "rest/api/1.0/admin/permissions/users", qry, nil, &struct { /* all structs must go */ }{
 		Values: ps,
 	})
 	if err != nil {
@@ -324,9 +278,7 @@ func (c *Client) LoadUser(ctx context.Context, u *User) error {
 // LoadGroup loads the given Group returning an error in case of failure.
 func (c *Client) LoadGroup(ctx context.Context, g *Group) error {
 	qry := url.Values{"filter": {g.Name}}
-	var groups struct {
-		Values []*Group `json:"values"`
-	}
+	var groups struct { /* all structs must go */ }
 
 	err := c.send(ctx, "GET", "rest/api/1.0/admin/groups", qry, nil, &groups)
 	if err != nil {
@@ -350,10 +302,7 @@ func (c *Client) CreateGroup(ctx context.Context, g *Group) error {
 
 // CreateGroupMembership creates the given Group's membership returning an error in case of failure.
 func (c *Client) CreateGroupMembership(ctx context.Context, g *Group) error {
-	type membership struct {
-		Group string   `json:"group"`
-		Users []string `json:"users"`
-	}
+	type membership struct { /* all structs must go */ }
 	m := &membership{Group: g.Name, Users: g.Users}
 	return c.send(ctx, "POST", "rest/api/1.0/admin/groups/add-users", nil, m, nil)
 }
@@ -393,9 +342,7 @@ func (c *Client) createPermission(ctx context.Context, path, name string, p Perm
 // CreateRepo creates the given Repo returning an error in case of failure.
 func (c *Client) CreateRepo(ctx context.Context, r *Repo) error {
 	path := "rest/api/1.0/projects/" + r.Project.Key + "/repos"
-	return c.send(ctx, "POST", path, nil, r, &struct {
-		Values []*Repo `json:"values"`
-	}{
+	return c.send(ctx, "POST", path, nil, r, &struct { /* all structs must go */ }{
 		Values: []*Repo{r},
 	})
 }
@@ -428,14 +375,7 @@ func (c *Client) LoadPullRequest(ctx context.Context, pr *PullRequest) error {
 	return c.send(ctx, "GET", path, nil, nil, pr)
 }
 
-type UpdatePullRequestInput struct {
-	PullRequestID string `json:"-"`
-	Version       int    `json:"version"`
-
-	Title       string `json:"title"`
-	Description string `json:"description"`
-	ToRef       Ref    `json:"toRef"`
-}
+type UpdatePullRequestInput struct { /* all structs must go */ }
 
 func (c *Client) UpdatePullRequest(ctx context.Context, in *UpdatePullRequestInput) (*PullRequest, error) {
 	path := fmt.Sprintf(
@@ -451,9 +391,7 @@ func (c *Client) UpdatePullRequest(ctx context.Context, in *UpdatePullRequestInp
 
 // ErrAlreadyExists is returned by Client.CreatePullRequest when a Pull Request
 // for the given FromRef and ToRef already exists.
-type ErrAlreadyExists struct {
-	Existing *PullRequest
-}
+type ErrAlreadyExists struct { /* all structs must go */ }
 
 func (e ErrAlreadyExists) Error() string {
 	return "A pull request with the given to and from refs already exists"
@@ -461,10 +399,7 @@ func (e ErrAlreadyExists) Error() string {
 
 // CreatePullRequest creates the given PullRequest returning an error in case of failure.
 func (c *Client) CreatePullRequest(ctx context.Context, pr *PullRequest) error {
-	for _, namedRef := range [...]struct {
-		name string
-		ref  Ref
-	}{
+	for _, namedRef := range [...]struct { /* all structs must go */ }{
 		{"ToRef", pr.ToRef},
 		{"FromRef", pr.FromRef},
 	} {
@@ -479,16 +414,7 @@ func (c *Client) CreatePullRequest(ctx context.Context, pr *PullRequest) error {
 		}
 	}
 
-	type requestBody struct {
-		Title       string `json:"title"`
-		Description string `json:"description"`
-		State       string `json:"state"`
-		Open        bool   `json:"open"`
-		Closed      bool   `json:"closed"`
-		FromRef     Ref    `json:"fromRef"`
-		ToRef       Ref    `json:"toRef"`
-		Locked      bool   `json:"locked"`
-	}
+	type requestBody struct { /* all structs must go */ }
 
 	// Bitbucket Server doesn't support GFM taskitems. But since we might add
 	// those to a PR description for certain Automation Campaigns, we have to
@@ -725,10 +651,7 @@ func (c *Client) page(ctx context.Context, path string, qry url.Values, token *P
 	}
 
 	var next PageToken
-	err = c.do(ctx, req, &struct {
-		*PageToken
-		Values interface{} `json:"values"`
-	}{
+	err = c.do(ctx, req, &struct { /* all structs must go */ }{
 		PageToken: &next,
 		Values:    results,
 	})
@@ -884,13 +807,7 @@ func categorize(u *url.URL) string {
 	}
 }
 
-type PageToken struct {
-	Size          int  `json:"size"`
-	Limit         int  `json:"limit"`
-	IsLastPage    bool `json:"isLastPage"`
-	Start         int  `json:"start"`
-	NextPageStart int  `json:"nextPageStart"`
-}
+type PageToken struct { /* all structs must go */ }
 
 func (t *PageToken) HasMore() bool {
 	if t == nil {
@@ -945,190 +862,51 @@ const (
 )
 
 // User account in a Bitbucket Server instance.
-type User struct {
-	Name         string `json:"name,omitempty"`
-	Password     string `json:"-"`
-	EmailAddress string `json:"emailAddress,omitempty"`
-	ID           int    `json:"id,omitempty"`
-	DisplayName  string `json:"displayName,omitempty"`
-	Active       bool   `json:"active,omitempty"`
-	Slug         string `json:"slug,omitempty"`
-	Type         string `json:"type,omitempty"`
-}
+type User struct { /* all structs must go */ }
 
 // Group of users in a Bitbucket Server instance.
-type Group struct {
-	Name  string   `json:"name,omitempty"`
-	Users []string `json:"users,omitempty"`
-}
+type Group struct { /* all structs must go */ }
 
 // A UserRepoPermission of a User to perform certain actions
 // on a Repo.
-type UserRepoPermission struct {
-	User *User
-	Perm Perm
-	Repo *Repo
-}
+type UserRepoPermission struct { /* all structs must go */ }
 
 // A GroupRepoPermission of a Group to perform certain actions
 // on a Repo.
-type GroupRepoPermission struct {
-	Group *Group
-	Perm  Perm
-	Repo  *Repo
-}
+type GroupRepoPermission struct { /* all structs must go */ }
 
 // A UserProjectPermission of a User to perform certain actions
 // on a Project.
-type UserProjectPermission struct {
-	User    *User
-	Perm    Perm
-	Project *Project
-}
+type UserProjectPermission struct { /* all structs must go */ }
 
 // A GroupProjectPermission of a Group to perform certain actions
 // on a Project.
-type GroupProjectPermission struct {
-	Group   *Group
-	Perm    Perm
-	Project *Project
-}
+type GroupProjectPermission struct { /* all structs must go */ }
 
-type Repo struct {
-	Slug          string   `json:"slug"`
-	ID            int      `json:"id"`
-	Name          string   `json:"name"`
-	SCMID         string   `json:"scmId"`
-	State         string   `json:"state"`
-	StatusMessage string   `json:"statusMessage"`
-	Forkable      bool     `json:"forkable"`
-	Origin        *Repo    `json:"origin"`
-	Project       *Project `json:"project"`
-	Public        bool     `json:"public"`
-	Links         struct {
-		Clone []struct {
-			Href string `json:"href"`
-			Name string `json:"name"`
-		} `json:"clone"`
-		Self []struct {
-			Href string `json:"href"`
-		} `json:"self"`
-	} `json:"links"`
-}
+type Repo struct { /* all structs must go */ }
 
 // IsPersonalRepository tells if the repository is a personal one.
 func (r *Repo) IsPersonalRepository() bool {
 	return r.Project.Type == "PERSONAL"
 }
 
-type Project struct {
-	Key    string `json:"key"`
-	ID     int    `json:"id"`
-	Name   string `json:"name"`
-	Public bool   `json:"public"`
-	Type   string `json:"type"`
-	Links  struct {
-		Self []struct {
-			Href string `json:"href"`
-		} `json:"self"`
-	} `json:"links"`
-}
+type Project struct { /* all structs must go */ }
 
-type Ref struct {
-	ID         string `json:"id"`
-	Repository struct {
-		ID      int    `json:"id"`
-		Slug    string `json:"slug"`
-		Project struct {
-			Key string `json:"key"`
-		} `json:"project"`
-	} `json:"repository"`
-}
+type Ref struct { /* all structs must go */ }
 
-type PullRequest struct {
-	ID          int    `json:"id"`
-	Version     int    `json:"version"`
-	Title       string `json:"title"`
-	Description string `json:"description"`
-	State       string `json:"state"`
-	Open        bool   `json:"open"`
-	Closed      bool   `json:"closed"`
-	CreatedDate int    `json:"createdDate"`
-	UpdatedDate int    `json:"updatedDate"`
-	FromRef     Ref    `json:"fromRef"`
-	ToRef       Ref    `json:"toRef"`
-	Locked      bool   `json:"locked"`
-	Author      struct {
-		User     *User  `json:"user"`
-		Role     string `json:"role"`
-		Approved bool   `json:"approved"`
-		Status   string `json:"status"`
-	} `json:"author"`
-	Reviewers []struct {
-		User               *User  `json:"user"`
-		LastReviewedCommit string `json:"lastReviewedCommit"`
-		Role               string `json:"role"`
-		Approved           bool   `json:"approved"`
-		Status             string `json:"status"`
-	} `json:"reviewers"`
-	Participants []struct {
-		User     *User  `json:"user"`
-		Role     string `json:"role"`
-		Approved bool   `json:"approved"`
-		Status   string `json:"status"`
-	} `json:"participants"`
-	Links struct {
-		Self []struct {
-			Href string `json:"href"`
-		} `json:"self"`
-	} `json:"links"`
-
-	Activities   []*Activity     `json:"activities,omitempty"`
-	Commits      []*Commit       `json:"commits,omitempty"`
-	CommitStatus []*CommitStatus `json:"commit_status,omitempty"`
-
-	// Deprecated, use CommitStatus instead. BuildStatus was not tied to individual commits
-	BuildStatuses []*BuildStatus `json:"buildstatuses,omitempty"`
-}
+type PullRequest struct { /* all structs must go */ }
 
 // Activity is a union type of all supported pull request activity items.
-type Activity struct {
-	ID          int            `json:"id"`
-	CreatedDate int            `json:"createdDate"`
-	User        User           `json:"user"`
-	Action      ActivityAction `json:"action"`
-
-	// Comment activity fields.
-	CommentAction string         `json:"commentAction,omitempty"`
-	Comment       *Comment       `json:"comment,omitempty"`
-	CommentAnchor *CommentAnchor `json:"commentAnchor,omitempty"`
-
-	// Reviewers change fields.
-	AddedReviewers   []User `json:"addedReviewers,omitempty"`
-	RemovedReviewers []User `json:"removedReviewers,omitempty"`
-
-	// Merged event fields.
-	Commit *Commit `json:"commit,omitempty"`
-}
+type Activity struct { /* all structs must go */ }
 
 // Key is a unique key identifying this activity in the context of its pull request.
 func (a *Activity) Key() string { return strconv.Itoa(a.ID) }
 
 // BuildStatus represents the build status of a commit
-type BuildStatus struct {
-	State       string `json:"state,omitempty"`
-	Key         string `json:"key,omitempty"`
-	Name        string `json:"name,omitempty"`
-	Url         string `json:"url,omitempty"`
-	Description string `json:"description,omitempty"`
-	DateAdded   int64  `json:"dateAdded,omitempty"`
-}
+type BuildStatus struct { /* all structs must go */ }
 
 // Commit status is the build status for a specific commit
-type CommitStatus struct {
-	Commit string      `json:"commit,omitempty"`
-	Status BuildStatus `json:"status,omitempty"`
-}
+type CommitStatus struct { /* all structs must go */ }
 
 func (s *CommitStatus) Key() string {
 	key := fmt.Sprintf("%s:%s:%s:%s", s.Commit, s.Status.Key, s.Status.Name, s.Status.Url)
@@ -1153,58 +931,19 @@ const (
 )
 
 // A Comment in a PullRequest.
-type Comment struct {
-	ID                  int                 `json:"id"`
-	Version             int                 `json:"version"`
-	Text                string              `json:"text"`
-	Author              User                `json:"author"`
-	CreatedDate         int                 `json:"createdDate"`
-	UpdatedDate         int                 `json:"updatedDate"`
-	Comments            []Comment           `json:"comments"` // Replies to the comment
-	Tasks               []Task              `json:"tasks"`
-	PermittedOperations PermittedOperations `json:"permittedOperations"`
-}
+type Comment struct { /* all structs must go */ }
 
 // A CommentAnchor captures the location of a code comment in a PullRequest.
-type CommentAnchor struct {
-	FromHash string `json:"fromHash"`
-	ToHash   string `json:"toHash"`
-	Line     int    `json:"line"`
-	LineType string `json:"lineType"`
-	FileType string `json:"fileType"`
-	Path     string `json:"path"`
-	DiffType string `json:"diffType"`
-	Orphaned bool   `json:"orphaned"`
-}
+type CommentAnchor struct { /* all structs must go */ }
 
 // A Task in a PullRequest.
-type Task struct {
-	ID                  int                 `json:"id"`
-	Author              User                `json:"author"`
-	Text                string              `json:"text"`
-	State               string              `json:"state"`
-	CreatedDate         int                 `json:"createdDate"`
-	PermittedOperations PermittedOperations `json:"permittedOperations"`
-}
+type Task struct { /* all structs must go */ }
 
 // PermittedOperations of a Comment or Task.
-type PermittedOperations struct {
-	Editable       bool `json:"editable,omitempty"`
-	Deletable      bool `json:"deletable,omitempty"`
-	Transitionable bool `json:"transitionable,omitempty"`
-}
+type PermittedOperations struct { /* all structs must go */ }
 
 // A Commit in a Repository.
-type Commit struct {
-	ID                 string   `json:"id,omitempty"`
-	DisplayID          string   `json:"displayId,omitempty"`
-	Author             *User    `json:"user,omitempty"`
-	AuthorTimestamp    int64    `json:"authorTimestamp,omitempty"`
-	Committer          *User    `json:"committer,omitempty"`
-	CommitterTimestamp int64    `json:"committerTimestamp,omitempty"`
-	Message            string   `json:"message,omitempty"`
-	Parents            []Commit `json:"parents,omitempty"`
-}
+type Commit struct { /* all structs must go */ }
 
 // IsNotFound reports whether err is a Bitbucket Server API not found error.
 func IsNotFound(err error) bool {
@@ -1244,11 +983,7 @@ func ExtractDuplicatePullRequest(err error) (*PullRequest, error) {
 	return nil, fmt.Errorf("error does not contain existing PR")
 }
 
-type httpError struct {
-	StatusCode int
-	URL        *url.URL
-	Body       []byte
-}
+type httpError struct { /* all structs must go */ }
 
 func (e *httpError) Error() string {
 	return fmt.Sprintf("Bitbucket API HTTP error: code=%d url=%q body=%q", e.StatusCode, e.URL, e.Body)
@@ -1276,12 +1011,7 @@ const (
 )
 
 func (e *httpError) ExtractExistingPullRequest() (*PullRequest, error) {
-	var dest struct {
-		Errors []struct {
-			ExceptionName       string
-			ExistingPullRequest PullRequest
-		}
-	}
+	var dest struct { /* all structs must go */ }
 
 	err := json.Unmarshal(e.Body, &dest)
 	if err != nil {
diff --git a/internal/extsvc/bitbucketserver/client_test.go b/internal/extsvc/bitbucketserver/client_test.go
index 17ea496..0887afa 100644
--- a/internal/extsvc/bitbucketserver/client_test.go
+++ b/internal/extsvc/bitbucketserver/client_test.go
@@ -21,12 +21,7 @@ import (
 var update = flag.Bool("update", false, "update testdata")
 
 func TestParseQueryStrings(t *testing.T) {
-	for _, tc := range []struct {
-		name string
-		qs   []string
-		vals url.Values
-		err  string
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{
 			name: "ignores query separator",
 			qs:   []string{"?foo=bar&baz=boo"},
@@ -62,11 +57,7 @@ func TestParseQueryStrings(t *testing.T) {
 }
 
 func TestUserFilters(t *testing.T) {
-	for _, tc := range []struct {
-		name string
-		fs   UserFilters
-		qry  url.Values
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{
 			name: "last one wins",
 			fs: UserFilters{
@@ -150,15 +141,7 @@ func TestClient_Users(t *testing.T) {
 		},
 	}
 
-	for _, tc := range []struct {
-		name    string
-		ctx     context.Context
-		page    *PageToken
-		filters []UserFilter
-		users   []*User
-		next    *PageToken
-		err     string
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{
 			name: "timeout",
 			ctx:  timeout,
@@ -333,12 +316,7 @@ func TestClient_LoadPullRequest(t *testing.T) {
 	pr.ToRef.Repository.Slug = "vegeta"
 	pr.ToRef.Repository.Project.Key = "SOUR"
 
-	for _, tc := range []struct {
-		name string
-		ctx  context.Context
-		pr   func() *PullRequest
-		err  string
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{
 			name: "timeout",
 			pr:   func() *PullRequest { return pr },
@@ -433,12 +411,7 @@ func TestClient_CreatePullRequest(t *testing.T) {
 	pr.FromRef.Repository.Project.Key = "SOUR"
 	pr.FromRef.ID = "refs/heads/test-pr-bbs-1"
 
-	for _, tc := range []struct {
-		name string
-		ctx  context.Context
-		pr   func() *PullRequest
-		err  string
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{
 			name: "timeout",
 			pr:   func() *PullRequest { return pr },
@@ -570,12 +543,7 @@ func TestClient_DeclinePullRequest(t *testing.T) {
 	pr.ToRef.Repository.Slug = "automation-testing"
 	pr.ToRef.Repository.Project.Key = "SOUR"
 
-	for _, tc := range []struct {
-		name string
-		ctx  context.Context
-		pr   func() *PullRequest
-		err  string
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{
 			name: "timeout",
 			pr:   func() *PullRequest { return pr },
@@ -657,12 +625,7 @@ func TestClient_LoadPullRequestActivities(t *testing.T) {
 	pr.ToRef.Repository.Slug = "vegeta"
 	pr.ToRef.Repository.Project.Key = "SOUR"
 
-	for _, tc := range []struct {
-		name string
-		ctx  context.Context
-		pr   func() *PullRequest
-		err  string
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{
 			name: "timeout",
 			pr:   func() *PullRequest { return pr },
diff --git a/internal/extsvc/bitbucketserver/events.go b/internal/extsvc/bitbucketserver/events.go
index ce23b7c..b2789b2 100644
--- a/internal/extsvc/bitbucketserver/events.go
+++ b/internal/extsvc/bitbucketserver/events.go
@@ -35,31 +35,14 @@ func ParseWebhookEvent(eventType string, payload []byte) (e interface{}, err err
 
 type PingEvent struct{}
 
-type PullRequestActivityEvent struct {
-	Date        time.Time      `json:"date"`
-	Actor       User           `json:"actor"`
-	PullRequest PullRequest    `json:"pullRequest"`
-	Action      ActivityAction `json:"action"`
-	Activity    *Activity      `json:"activity"`
-}
+type PullRequestActivityEvent struct { /* all structs must go */ }
 
-type PullRequestParticipantStatusEvent struct {
-	*ParticipantStatusEvent
-	PullRequest PullRequest `json:"pullRequest"`
-}
+type PullRequestParticipantStatusEvent struct { /* all structs must go */ }
 
-type ParticipantStatusEvent struct {
-	CreatedDate int            `json:"createdDate"`
-	User        User           `json:"user"`
-	Action      ActivityAction `json:"action"`
-}
+type ParticipantStatusEvent struct { /* all structs must go */ }
 
 func (a *ParticipantStatusEvent) Key() string {
 	return fmt.Sprintf("%s:%d:%d", a.Action, a.User.ID, a.CreatedDate)
 }
 
-type BuildStatusEvent struct {
-	Commit       string        `json:"commit"`
-	Status       BuildStatus   `json:"status"`
-	PullRequests []PullRequest `json:"pullRequests"`
-}
+type BuildStatusEvent struct { /* all structs must go */ }
diff --git a/internal/extsvc/codehost.go b/internal/extsvc/codehost.go
index 7abc8e8..9ebd1f5 100644
--- a/internal/extsvc/codehost.go
+++ b/internal/extsvc/codehost.go
@@ -7,11 +7,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/api"
 )
 
-type CodeHost struct {
-	ServiceID   string
-	ServiceType string
-	BaseURL     *url.URL
-}
+type CodeHost struct { /* all structs must go */ }
 
 // Known public code hosts and their URLs
 var (
diff --git a/internal/extsvc/codehost_test.go b/internal/extsvc/codehost_test.go
index 3fe83c3..fa2d99f 100644
--- a/internal/extsvc/codehost_test.go
+++ b/internal/extsvc/codehost_test.go
@@ -7,12 +7,7 @@ import (
 )
 
 func TestCodeHostOf(t *testing.T) {
-	for _, tc := range []struct {
-		name      string
-		repo      api.RepoName
-		codehosts []*CodeHost
-		want      *CodeHost
-	}{{
+	for _, tc := range []struct { /* all structs must go */ }{{
 		name:      "none",
 		repo:      "github.com/foo/bar",
 		codehosts: nil,
diff --git a/internal/extsvc/data.go b/internal/extsvc/data.go
index d224071..10b34f9 100644
--- a/internal/extsvc/data.go
+++ b/internal/extsvc/data.go
@@ -14,9 +14,7 @@ func setJSONOrError(field **json.RawMessage, value interface{}) {
 
 	b, err := json.Marshal(value)
 	if err != nil {
-		b, _ = json.Marshal(struct {
-			Error string `json:"__jsonError"`
-		}{Error: err.Error()})
+		b, _ = json.Marshal(struct { /* all structs must go */ }{Error: err.Error()})
 	}
 	*field = (*json.RawMessage)(&b)
 }
@@ -60,6 +58,4 @@ func getJSONOrError(field *json.RawMessage, v interface{}) error {
 	return nil
 }
 
-type jsonError struct {
-	Error string `json:"__jsonError"`
-}
+type jsonError struct { /* all structs must go */ }
diff --git a/internal/extsvc/github/client.go b/internal/extsvc/github/client.go
index 687d1e4..9fa7fa0 100644
--- a/internal/extsvc/github/client.go
+++ b/internal/extsvc/github/client.go
@@ -49,42 +49,11 @@ var (
 // separate instances have consistent naming prefixes so that different instances will share the
 // same Redis cache entries (provided they were computed with the same API URL and access
 // token). The cache keys are agnostic of the http.RoundTripper transport.
-type Client struct {
-	// apiURL is the base URL of a GitHub API. It must point to the base URL of the GitHub API. This
-	// is https://api.github.com for GitHub.com and http[s]://[github-enterprise-hostname]/api for
-	// GitHub Enterprise.
-	apiURL *url.URL
-
-	// githubDotCom is true if this client connects to github.com.
-	githubDotCom bool
-
-	// token is the personal access token used to authenticate requests. May be empty, in which case
-	// the default behavior is to make unauthenticated requests.
-	// 🚨 SECURITY: Should not be changed after client creation to prevent unauthorized access to the
-	// repository cache. Use `WithToken` to create a new client with a different token instead.
-	token string
-
-	// httpClient is the HTTP client used to make requests to the GitHub API.
-	httpClient httpcli.Doer
-
-	// repoCache is the repository cache associated with the token.
-	repoCache *rcache.Cache
-
-	// rateLimitMonitor is the API rate limit monitor.
-	rateLimitMonitor *ratelimit.Monitor
-
-	// rateLimit is our self imposed rate limiter
-	rateLimit *rate.Limiter
-}
+type Client struct { /* all structs must go */ }
 
 // APIError is an error type returned by Client when the GitHub API responds with
 // an error.
-type APIError struct {
-	URL              string
-	Code             int
-	Message          string
-	DocumentationURL string `json:"documentation_url"`
-}
+type APIError struct { /* all structs must go */ }
 
 func (e *APIError) Error() string {
 	return fmt.Sprintf("request to %s returned status %d: %s", e.URL, e.Code, e.Message)
@@ -229,9 +198,7 @@ func (c *Client) listRepositories(ctx context.Context, requestURI string) ([]*Re
 // ListInstallationRepositories lists repositories on which the authenticated
 // GitHub App has been installed.
 func (c *Client) ListInstallationRepositories(ctx context.Context) ([]*Repository, error) {
-	type response struct {
-		Repositories []restRepository `json:"repositories"`
-	}
+	type response struct { /* all structs must go */ }
 	var resp response
 	if err := c.requestGet(ctx, "installation/repositories", &resp); err != nil {
 		return nil, err
@@ -269,10 +236,7 @@ func (c *Client) requestGet(ctx context.Context, requestURI string, result inter
 }
 
 func (c *Client) requestGraphQL(ctx context.Context, query string, vars map[string]interface{}, result interface{}) (err error) {
-	reqBody, err := json.Marshal(struct {
-		Query     string                 `json:"query"`
-		Variables map[string]interface{} `json:"variables"`
-	}{
+	reqBody, err := json.Marshal(struct { /* all structs must go */ }{
 		Query:     query,
 		Variables: vars,
 	})
@@ -294,10 +258,7 @@ func (c *Client) requestGraphQL(ctx context.Context, query string, vars map[stri
 	// Enable Checks API
 	// https://developer.github.com/v4/previews/#checks
 	req.Header.Add("Accept", "application/vnd.github.antiope-preview+json")
-	var respBody struct {
-		Data   json.RawMessage `json:"data"`
-		Errors graphqlErrors   `json:"errors"`
-	}
+	var respBody struct { /* all structs must go */ }
 
 	cost, err := estimateGraphQLCost(query)
 	if err != nil {
@@ -355,12 +316,7 @@ func estimateGraphQLCost(query string) (int, error) {
 	return totalCost, nil
 }
 
-type limitDepth struct {
-	// The 'first' or 'last' limit
-	limit int
-	// The depth at which it was added
-	depth int
-}
+type limitDepth struct { /* all structs must go */ }
 
 func calcDefinitionCost(def ast.Node) int {
 	var cost int
@@ -505,15 +461,7 @@ func IsRateLimitExceeded(err error) bool {
 
 // graphqlErrors describes the errors in a GraphQL response. It contains at least 1 element when returned by
 // requestGraphQL. See https://graphql.github.io/graphql-spec/June2018/#sec-Errors.
-type graphqlErrors []struct {
-	Message   string        `json:"message"`
-	Type      string        `json:"type"`
-	Path      []interface{} `json:"path"`
-	Locations []struct {
-		Line   int `json:"line"`
-		Column int `json:"column"`
-	} `json:"locations,omitempty"`
-}
+type graphqlErrors []struct { /* all structs must go */ }
 
 const graphqlErrTypeNotFound = "NOT_FOUND"
 
diff --git a/internal/extsvc/github/client_test.go b/internal/extsvc/github/client_test.go
index 3a1fd11..933bda9 100644
--- a/internal/extsvc/github/client_test.go
+++ b/internal/extsvc/github/client_test.go
@@ -23,10 +23,7 @@ import (
 )
 
 func TestUnmarshal(t *testing.T) {
-	type result struct {
-		FieldA string
-		FieldB string
-	}
+	type result struct { /* all structs must go */ }
 	cases := map[string]string{
 		// Valid
 		`[]`:                                  "",
@@ -136,11 +133,7 @@ func TestClient_WithToken(t *testing.T) {
 // NOTE: To update VCR for this test, please use the token of "sourcegraph-vcr"
 // for GITHUB_TOKEN, which can be found in 1Password.
 func TestClient_ListAffiliatedRepositories(t *testing.T) {
-	tests := []struct {
-		name       string
-		visibility Visibility
-		wantRepos  []*Repository
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:       "list all repositories",
 			visibility: VisibilityAll,
@@ -236,12 +229,7 @@ func TestClient_LoadPullRequests(t *testing.T) {
 	cli, save := newClient(t, "LoadPullRequests")
 	defer save()
 
-	for i, tc := range []struct {
-		name string
-		ctx  context.Context
-		prs  []*PullRequest
-		err  string
-	}{
+	for i, tc := range []struct { /* all structs must go */ }{
 		{
 			name: "non-existing-repo",
 			prs:  []*PullRequest{{RepoWithOwner: "whoisthis/sourcegraph", Number: 5550}},
@@ -299,12 +287,7 @@ func TestClient_CreatePullRequest(t *testing.T) {
 	// only open a pull request once.
 	// In order to update specific tests, comment out the other ones and then
 	// run with -update.
-	for i, tc := range []struct {
-		name  string
-		ctx   context.Context
-		input *CreatePullRequestInput
-		err   string
-	}{
+	for i, tc := range []struct { /* all structs must go */ }{
 		{
 			name: "success",
 			input: &CreatePullRequestInput{
@@ -374,12 +357,7 @@ func TestClient_ClosePullRequest(t *testing.T) {
 	// only close a pull request once.
 	// In order to update specific tests, comment out the other ones and then
 	// run with -update.
-	for i, tc := range []struct {
-		name string
-		ctx  context.Context
-		pr   *PullRequest
-		err  string
-	}{
+	for i, tc := range []struct { /* all structs must go */ }{
 		{
 			name: "success",
 			// github.com/sourcegraph/automation-testing/pull/44
@@ -457,11 +435,7 @@ func newClient(t testing.TB, name string) (*Client, func()) {
 }
 
 func TestEstimateGraphQLCost(t *testing.T) {
-	for _, tc := range []struct {
-		name  string
-		query string
-		want  int
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{
 			name: "Canonical example",
 			query: `query {
diff --git a/internal/extsvc/github/pulls.go b/internal/extsvc/github/pulls.go
index d272330..ef69e7a 100644
--- a/internal/extsvc/github/pulls.go
+++ b/internal/extsvc/github/pulls.go
@@ -14,48 +14,19 @@ import (
 )
 
 // An Actor represents an object which can take actions on GitHub. Typically a User or Bot.
-type Actor struct {
-	AvatarURL string
-	Login     string
-	URL       string
-}
+type Actor struct { /* all structs must go */ }
 
 // A Team represents a team on Github.
-type Team struct {
-	Name string
-	URL  string
-}
+type Team struct { /* all structs must go */ }
 
 // A GitActor represents an actor in a Git commit (ie. an author or committer).
-type GitActor struct {
-	AvatarURL string
-	Email     string
-	Name      string
-	User      *Actor `json:"User,omitempty"`
-}
+type GitActor struct { /* all structs must go */ }
 
 // A Review of a PullRequest.
-type Review struct {
-	Body        string
-	State       string
-	URL         string
-	Author      Actor
-	Commit      Commit
-	CreatedAt   time.Time
-	SubmittedAt time.Time
-}
+type Review struct { /* all structs must go */ }
 
 // CheckSuite represents the status of a checksuite
-type CheckSuite struct {
-	ID string
-	// One of COMPLETED, IN_PROGRESS, QUEUED, REQUESTED
-	Status string
-	// One of ACTION_REQUIRED, CANCELLED, FAILURE, NEUTRAL, SUCCESS, TIMED_OUT
-	Conclusion string
-	ReceivedAt time.Time
-	// When the suite was received via a webhook
-	CheckRuns struct{ Nodes []CheckRun }
-}
+type CheckSuite struct { /* all structs must go */ }
 
 func (c *CheckSuite) Key() string {
 	key := fmt.Sprintf("%s:%s:%s:%d", c.ID, c.Status, c.Conclusion, c.ReceivedAt.UnixNano())
@@ -63,15 +34,7 @@ func (c *CheckSuite) Key() string {
 }
 
 // CheckRun represents the status of a checkrun
-type CheckRun struct {
-	ID string
-	// One of COMPLETED, IN_PROGRESS, QUEUED, REQUESTED
-	Status string
-	// One of ACTION_REQUIRED, CANCELLED, FAILURE, NEUTRAL, SUCCESS, TIMED_OUT
-	Conclusion string
-	// When the run was received via a webhook
-	ReceivedAt time.Time
-}
+type CheckRun struct { /* all structs must go */ }
 
 func (c *CheckRun) Key() string {
 	key := fmt.Sprintf("%s:%s:%s:%d", c.ID, c.Status, c.Conclusion, c.ReceivedAt.UnixNano())
@@ -79,30 +42,14 @@ func (c *CheckRun) Key() string {
 }
 
 // A Commit in a Repository.
-type Commit struct {
-	OID             string
-	Message         string
-	MessageHeadline string
-	URL             string
-	Committer       GitActor
-	CommittedDate   time.Time
-	PushedDate      time.Time
-}
+type Commit struct { /* all structs must go */ }
 
 // A Status represents a Commit status.
-type Status struct {
-	State    string
-	Contexts []Context
-}
+type Status struct { /* all structs must go */ }
 
 // CommitStatus represents the state of a commit context received
 // via the StatusEvent webhook
-type CommitStatus struct {
-	SHA        string
-	Context    string
-	State      string
-	ReceivedAt time.Time
-}
+type CommitStatus struct { /* all structs must go */ }
 
 func (c *CommitStatus) Key() string {
 	key := fmt.Sprintf("%s:%s:%s:%d", c.SHA, c.State, c.Context, c.ReceivedAt.UnixNano())
@@ -110,48 +57,15 @@ func (c *CommitStatus) Key() string {
 }
 
 // Context represent the individual commit status context
-type Context struct {
-	ID          string
-	Context     string
-	Description string
-	State       string
-}
+type Context struct { /* all structs must go */ }
 
-type Label struct {
-	ID          string
-	Color       string
-	Description string
-	Name        string
-}
+type Label struct { /* all structs must go */ }
 
 // PullRequest is a GitHub pull request.
-type PullRequest struct {
-	RepoWithOwner string `json:"-"`
-	ID            string
-	Title         string
-	Body          string
-	State         string
-	URL           string
-	HeadRefOid    string
-	BaseRefOid    string
-	HeadRefName   string
-	BaseRefName   string
-	Number        int64
-	Author        Actor
-	Participants  []Actor
-	Labels        struct{ Nodes []Label }
-	TimelineItems []TimelineItem
-	Commits       struct{ Nodes []CommitWithChecks }
-	CreatedAt     time.Time
-	UpdatedAt     time.Time
-}
+type PullRequest struct { /* all structs must go */ }
 
 // AssignedEvent represents an 'assigned' event on a PullRequest.
-type AssignedEvent struct {
-	Actor     Actor
-	Assignee  Actor
-	CreatedAt time.Time
-}
+type AssignedEvent struct { /* all structs must go */ }
 
 // Key is a unique key identifying this event in the context of its pull request.
 func (e AssignedEvent) Key() string {
@@ -159,11 +73,7 @@ func (e AssignedEvent) Key() string {
 }
 
 // ClosedEvent represents a 'closed' event on a PullRequest.
-type ClosedEvent struct {
-	Actor     Actor
-	CreatedAt time.Time
-	URL       string
-}
+type ClosedEvent struct { /* all structs must go */ }
 
 // Key is a unique key identifying this event in the context of its pull request.
 func (e ClosedEvent) Key() string {
@@ -172,17 +82,7 @@ func (e ClosedEvent) Key() string {
 
 // IssueComment represents a comment on an PullRequest that isn't
 // a commit or review comment.
-type IssueComment struct {
-	DatabaseID          int64
-	Author              Actor
-	Editor              *Actor
-	AuthorAssociation   string
-	Body                string
-	URL                 string
-	CreatedAt           time.Time
-	UpdatedAt           time.Time
-	IncludesCreatedEdit bool
-}
+type IssueComment struct { /* all structs must go */ }
 
 // Key is a unique key identifying this event in the context of its pull request.
 func (e IssueComment) Key() string {
@@ -190,12 +90,7 @@ func (e IssueComment) Key() string {
 }
 
 // RenamedTitleEvent represents a 'renamed' event on a given pull request.
-type RenamedTitleEvent struct {
-	Actor         Actor
-	PreviousTitle string
-	CurrentTitle  string
-	CreatedAt     time.Time
-}
+type RenamedTitleEvent struct { /* all structs must go */ }
 
 // Key is a unique key identifying this event in the context of its pull request.
 func (e RenamedTitleEvent) Key() string {
@@ -203,13 +98,7 @@ func (e RenamedTitleEvent) Key() string {
 }
 
 // MergedEvent represents a 'merged' event on a given pull request.
-type MergedEvent struct {
-	Actor        Actor
-	MergeRefName string
-	URL          string
-	Commit       Commit
-	CreatedAt    time.Time
-}
+type MergedEvent struct { /* all structs must go */ }
 
 // Key is a unique key identifying this event in the context of its pull request.
 func (e MergedEvent) Key() string {
@@ -217,18 +106,7 @@ func (e MergedEvent) Key() string {
 }
 
 // PullRequestReview represents a review on a given pull request.
-type PullRequestReview struct {
-	DatabaseID          int64
-	Author              Actor
-	AuthorAssociation   string
-	Body                string
-	State               string
-	URL                 string
-	CreatedAt           time.Time
-	UpdatedAt           time.Time
-	Commit              Commit
-	IncludesCreatedEdit bool
-}
+type PullRequestReview struct { /* all structs must go */ }
 
 // Key is a unique key identifying this event in the context of its pull request.
 func (e PullRequestReview) Key() string {
@@ -240,13 +118,9 @@ func (e PullRequestReview) Key() string {
 // each thread we receive via GraphQL, and don't store this event as the metadata
 // of a ChangesetEvent, instead storing each contained comment as a separate ChangesetEvent.
 // That's why this type doesn't have a Key method like the others.
-type PullRequestReviewThread struct {
-	Comments []*PullRequestReviewComment
-}
+type PullRequestReviewThread struct { /* all structs must go */ }
 
-type PullRequestCommit struct {
-	Commit Commit
-}
+type PullRequestCommit struct { /* all structs must go */ }
 
 func (p PullRequestCommit) Key() string {
 	return p.Commit.OID
@@ -254,29 +128,10 @@ func (p PullRequestCommit) Key() string {
 
 // CommitWithChecks represents check/build status of a commit. When we load the PR
 // from GitHub we fetch the most recent commit into this type to check build status.
-type CommitWithChecks struct {
-	Commit struct {
-		OID           string
-		CheckSuites   struct{ Nodes []CheckSuite }
-		Status        Status
-		CommittedDate time.Time
-	}
-}
+type CommitWithChecks struct { /* all structs must go */ }
 
 // PullRequestReviewComment represents a review comment on a given pull request.
-type PullRequestReviewComment struct {
-	DatabaseID          int64
-	Author              Actor
-	AuthorAssociation   string
-	Editor              Actor
-	Commit              Commit
-	Body                string
-	State               string
-	URL                 string
-	CreatedAt           time.Time
-	UpdatedAt           time.Time
-	IncludesCreatedEdit bool
-}
+type PullRequestReviewComment struct { /* all structs must go */ }
 
 // Key is a unique key identifying this event in the context of its pull request.
 func (e PullRequestReviewComment) Key() string {
@@ -284,10 +139,7 @@ func (e PullRequestReviewComment) Key() string {
 }
 
 // ReopenedEvent represents a 'reopened' event on a pull request.
-type ReopenedEvent struct {
-	Actor     Actor
-	CreatedAt time.Time
-}
+type ReopenedEvent struct { /* all structs must go */ }
 
 // Key is a unique key identifying this event in the context of its pull request.
 func (e ReopenedEvent) Key() string {
@@ -295,12 +147,7 @@ func (e ReopenedEvent) Key() string {
 }
 
 // ReviewDismissedEvent represents a 'review_dismissed' event on a pull request.
-type ReviewDismissedEvent struct {
-	Actor            Actor
-	Review           PullRequestReview
-	DismissalMessage string
-	CreatedAt        time.Time
-}
+type ReviewDismissedEvent struct { /* all structs must go */ }
 
 // Key is a unique key identifying this event in the context of its pull request.
 func (e ReviewDismissedEvent) Key() string {
@@ -314,12 +161,7 @@ func (e ReviewDismissedEvent) Key() string {
 
 // ReviewRequestRemovedEvent represents a 'review_request_removed' event on a
 // pull request.
-type ReviewRequestRemovedEvent struct {
-	Actor             Actor
-	RequestedReviewer Actor
-	RequestedTeam     Team
-	CreatedAt         time.Time
-}
+type ReviewRequestRemovedEvent struct { /* all structs must go */ }
 
 // Key is a unique key identifying this event in the context of its pull request.
 func (e ReviewRequestRemovedEvent) Key() string {
@@ -333,12 +175,7 @@ func (e ReviewRequestRemovedEvent) Key() string {
 
 // ReviewRequestedRevent represents a 'review_requested' event on a
 // pull request.
-type ReviewRequestedEvent struct {
-	Actor             Actor
-	RequestedReviewer Actor
-	RequestedTeam     Team
-	CreatedAt         time.Time
-}
+type ReviewRequestedEvent struct { /* all structs must go */ }
 
 // Key is a unique key identifying this event in the context of its pull request.
 func (e ReviewRequestedEvent) Key() string {
@@ -358,11 +195,7 @@ func (e ReviewRequestedEvent) ReviewerDeleted() bool {
 }
 
 // UnassignedEvent represents an 'unassigned' event on a pull request.
-type UnassignedEvent struct {
-	Actor     Actor
-	Assignee  Actor
-	CreatedAt time.Time
-}
+type UnassignedEvent struct { /* all structs must go */ }
 
 // Key is a unique key identifying this event in the context of its pull request.
 func (e UnassignedEvent) Key() string {
@@ -370,13 +203,7 @@ func (e UnassignedEvent) Key() string {
 }
 
 // LabelEvent represents a label being added or removed from a pull request
-type LabelEvent struct {
-	Actor     Actor
-	Label     Label
-	CreatedAt time.Time
-	// Will be true if we had an "unlabeled" event
-	Removed bool
-}
+type LabelEvent struct { /* all structs must go */ }
 
 func (e LabelEvent) Key() string {
 	action := "add"
@@ -387,19 +214,12 @@ func (e LabelEvent) Key() string {
 }
 
 // TimelineItem is a union type of all supported pull request timeline items.
-type TimelineItem struct {
-	Type string
-	Item interface{}
-}
+type TimelineItem struct { /* all structs must go */ }
 
 // UnmarshalJSON knows how to unmarshal a TimelineItem as produced
 // by json.Marshal or as returned by the GitHub GraphQL API.
 func (i *TimelineItem) UnmarshalJSON(data []byte) error {
-	v := struct {
-		Typename *string `json:"__typename"`
-		Type     *string
-		Item     json.RawMessage
-	}{
+	v := struct { /* all structs must go */ }{
 		Typename: &i.Type,
 		Type:     &i.Type,
 	}
@@ -452,19 +272,7 @@ func (i *TimelineItem) UnmarshalJSON(data []byte) error {
 	return json.Unmarshal(data, i.Item)
 }
 
-type CreatePullRequestInput struct {
-	// The Node ID of the repository.
-	RepositoryID string `json:"repositoryId"`
-	// The name of the branch you want your changes pulled into. This should be
-	// an existing branch on the current repository.
-	BaseRefName string `json:"baseRefName"`
-	// The name of the branch where your changes are implemented.
-	HeadRefName string `json:"headRefName"`
-	// The title of the pull request.
-	Title string `json:"title"`
-	// The body of the pull request (optional).
-	Body string `json:"body"`
-}
+type CreatePullRequestInput struct { /* all structs must go */ }
 
 // CreatePullRequest creates a PullRequest on Github.
 func (c *Client) CreatePullRequest(ctx context.Context, in *CreatePullRequestInput) (*PullRequest, error) {
@@ -478,15 +286,7 @@ func (c *Client) CreatePullRequest(ctx context.Context, in *CreatePullRequestInp
   }
 }`)
 
-	var result struct {
-		CreatePullRequest struct {
-			PullRequest struct {
-				PullRequest
-				Participants  struct{ Nodes []Actor }
-				TimelineItems struct{ Nodes []TimelineItem }
-			} `json:"pullRequest"`
-		} `json:"createPullRequest"`
-	}
+	var result struct { /* all structs must go */ }
 
 	input := map[string]interface{}{"input": in}
 	err := c.requestGraphQL(ctx, q.String(), input, &result)
@@ -506,17 +306,7 @@ func (c *Client) CreatePullRequest(ctx context.Context, in *CreatePullRequestInp
 	return pr, nil
 }
 
-type UpdatePullRequestInput struct {
-	// The Node ID of the pull request.
-	PullRequestID string `json:"pullRequestId"`
-	// The name of the branch you want your changes pulled into. This should be
-	// an existing branch on the current repository.
-	BaseRefName string `json:"baseRefName"`
-	// The title of the pull request.
-	Title string `json:"title"`
-	// The body of the pull request (optional).
-	Body string `json:"body"`
-}
+type UpdatePullRequestInput struct { /* all structs must go */ }
 
 // UpdatePullRequest creates a PullRequest on Github.
 func (c *Client) UpdatePullRequest(ctx context.Context, in *UpdatePullRequestInput) (*PullRequest, error) {
@@ -530,15 +320,7 @@ func (c *Client) UpdatePullRequest(ctx context.Context, in *UpdatePullRequestInp
   }
 }`)
 
-	var result struct {
-		UpdatePullRequest struct {
-			PullRequest struct {
-				PullRequest
-				Participants  struct{ Nodes []Actor }
-				TimelineItems struct{ Nodes []TimelineItem }
-			} `json:"pullRequest"`
-		} `json:"updatePullRequest"`
-	}
+	var result struct { /* all structs must go */ }
 
 	input := map[string]interface{}{"input": in}
 	err := c.requestGraphQL(ctx, q.String(), input, &result)
@@ -570,19 +352,9 @@ func (c *Client) ClosePullRequest(ctx context.Context, pr *PullRequest) error {
   }
 }`)
 
-	var result struct {
-		ClosePullRequest struct {
-			PullRequest struct {
-				PullRequest
-				Participants  struct{ Nodes []Actor }
-				TimelineItems struct{ Nodes []TimelineItem }
-			} `json:"pullRequest"`
-		} `json:"closePullRequest"`
-	}
+	var result struct { /* all structs must go */ }
 
-	input := map[string]interface{}{"input": struct {
-		ID string `json:"pullRequestId"`
-	}{ID: pr.ID}}
+	input := map[string]interface{}{"input": struct { /* all structs must go */ }{ID: pr.ID}}
 	err := c.requestGraphQL(ctx, q.String(), input, &result)
 	if err != nil {
 		return err
@@ -612,11 +384,7 @@ func (c *Client) LoadPullRequests(ctx context.Context, prs ...*PullRequest) erro
 }
 
 func (c *Client) loadPullRequests(ctx context.Context, prs ...*PullRequest) error {
-	type repository struct {
-		Owner string
-		Name  string
-		PRs   map[string]*PullRequest
-	}
+	type repository struct { /* all structs must go */ }
 
 	labeled := map[string]*repository{}
 	for i, pr := range prs {
@@ -659,11 +427,7 @@ func (c *Client) loadPullRequests(ctx context.Context, prs ...*PullRequest) erro
 
 	q.WriteString("}")
 
-	var results map[string]map[string]*struct {
-		PullRequest
-		Participants  struct{ Nodes []Actor }
-		TimelineItems struct{ Nodes []TimelineItem }
-	}
+	var results map[string]map[string]*struct { /* all structs must go */ }
 
 	err := c.requestGraphQL(ctx, q.String(), nil, &results)
 	if err != nil {
@@ -695,17 +459,7 @@ func (c *Client) GetOpenPullRequestByRefs(ctx context.Context, owner, name, base
 	))
 	q.WriteString("nodes{ ... pr }\n}\n}\n}")
 
-	var results struct {
-		Repository struct {
-			PullRequests struct {
-				Nodes []*struct {
-					PullRequest
-					Participants  struct{ Nodes []Actor }
-					TimelineItems struct{ Nodes []TimelineItem }
-				}
-			}
-		}
-	}
+	var results struct { /* all structs must go */ }
 
 	err := c.requestGraphQL(ctx, q.String(), nil, &results)
 	if err != nil {
diff --git a/internal/extsvc/github/repos.go b/internal/extsvc/github/repos.go
index d0350cf..f15b5da 100644
--- a/internal/extsvc/github/repos.go
+++ b/internal/extsvc/github/repos.go
@@ -25,17 +25,7 @@ func SplitRepositoryNameWithOwner(nameWithOwner string) (owner, repo string, err
 }
 
 // Repository is a GitHub repository.
-type Repository struct {
-	ID               string // ID of repository (GitHub GraphQL ID, not GitHub database ID)
-	DatabaseID       int64  // The integer database id
-	NameWithOwner    string // full name of repository ("owner/name")
-	Description      string // description of repository
-	URL              string // the web URL of this repository ("https://github.com/foo/bar")
-	IsPrivate        bool   // whether the repository is private
-	IsFork           bool   // whether the repository is a fork of another repository
-	IsArchived       bool   // whether the repository is archived on the code host
-	ViewerPermission string // ADMIN, WRITE, READ, or empty if unknown. Only the graphql api populates this. https://developer.github.com/v4/enum/repositorypermission/
-}
+type Repository struct { /* all structs must go */ }
 
 // repositoryFieldsGraphQLFragment returns a GraphQL fragment that contains the fields needed to populate the
 // Repository struct.
@@ -167,12 +157,7 @@ func init() {
 	prometheus.MustRegister(reposGitHubCacheCounter)
 }
 
-type cachedRepo struct {
-	Repository
-
-	// NotFound indicates that the GitHub API reported that the repository was not found.
-	NotFound bool
-}
+type cachedRepo struct { /* all structs must go */ }
 
 // getRepositoryFromCache attempts to get a response from the redis cache.
 // It returns nil error for cache-hit condition and non-nil error for cache-miss.
@@ -212,23 +197,9 @@ func (c *Client) addRepositoriesToCache(repos []*Repository) {
 	}
 }
 
-type restRepositoryPermissions struct {
-	Admin bool `json:"admin"`
-	Push  bool `json:"push"`
-	Pull  bool `json:"pull"`
-}
+type restRepositoryPermissions struct { /* all structs must go */ }
 
-type restRepository struct {
-	ID          string `json:"node_id"` // GraphQL ID
-	DatabaseID  int64  `json:"id"`
-	FullName    string `json:"full_name"` // same as nameWithOwner
-	Description string
-	HTMLURL     string `json:"html_url"` // web URL
-	Private     bool
-	Fork        bool
-	Archived    bool
-	Permissions restRepositoryPermissions `json:"permissions"`
-}
+type restRepository struct { /* all structs must go */ }
 
 // getRepositoryFromAPI attempts to fetch a repository from the GitHub API without use of the redis cache.
 func (c *Client) getRepositoryFromAPI(ctx context.Context, owner, name string) (*Repository, error) {
@@ -293,9 +264,7 @@ func (c *Client) getPublicRepositories(ctx context.Context, sinceRepoID int64) (
 // getRepositoryByNodeIDFromAPI attempts to fetch a repository by GraphQL node ID from the GitHub
 // API without use of the redis cache.
 func (c *Client) getRepositoryByNodeIDFromAPI(ctx context.Context, id string) (*Repository, error) {
-	var result struct {
-		Node *Repository `json:"node"`
-	}
+	var result struct { /* all structs must go */ }
 	if err := c.requestGraphQL(ctx, `
 query Repository($id: ID!) {
 	node(id: $id) {
@@ -332,9 +301,7 @@ var MaxNodeIDs = 100
 // time of writing, is 100 (if the caller does not respect this match, this method will return an
 // error). This method does not cache.
 func (c *Client) GetRepositoriesByNodeIDFromAPI(ctx context.Context, nodeIDs []string) (map[string]*Repository, error) {
-	var result struct {
-		Nodes []*Repository
-	}
+	var result struct { /* all structs must go */ }
 	err := c.requestGraphQL(ctx, `
 query Repositories($ids: [ID!]!) {
 	nodes(ids: $ids) {
@@ -489,18 +456,10 @@ func (c *Client) ListUserRepositories(ctx context.Context, user string, page int
 	return repos, len(repos) > 0, 1, err
 }
 
-type restSearchResponse struct {
-	TotalCount        int              `json:"total_count"`
-	IncompleteResults bool             `json:"incomplete_results"`
-	Items             []restRepository `json:"items"`
-}
+type restSearchResponse struct { /* all structs must go */ }
 
 // RepositoryListPage is a page of repositories returned from the GitHub Search API.
-type RepositoryListPage struct {
-	TotalCount  int
-	Repos       []*Repository
-	HasNextPage bool
-}
+type RepositoryListPage struct { /* all structs must go */ }
 
 func (c *Client) ListRepositoriesForSearch(ctx context.Context, searchString string, page int) (RepositoryListPage, error) {
 	urlValues := url.Values{
@@ -529,9 +488,7 @@ func (c *Client) ListRepositoriesForSearch(ctx context.Context, searchString str
 	}, nil
 }
 
-type restTopicsResponse struct {
-	Names []string `json:"names"`
-}
+type restTopicsResponse struct { /* all structs must go */ }
 
 // ListTopicsOnRepository lists topics on the given repository.
 func (c *Client) ListTopicsOnRepository(ctx context.Context, ownerAndName string) ([]string, error) {
diff --git a/internal/extsvc/github/repos_test.go b/internal/extsvc/github/repos_test.go
index b3d2d21..bde4a4c 100644
--- a/internal/extsvc/github/repos_test.go
+++ b/internal/extsvc/github/repos_test.go
@@ -32,11 +32,7 @@ func TestSplitRepositoryNameWithOwner(t *testing.T) {
 	}
 }
 
-type mockHTTPResponseBody struct {
-	count        int
-	responseBody string
-	status       int
-}
+type mockHTTPResponseBody struct { /* all structs must go */ }
 
 func newMockHTTPResponseBody(responseBody string, status int) *mockHTTPResponseBody {
 	return &mockHTTPResponseBody{
@@ -57,9 +53,7 @@ func (s *mockHTTPResponseBody) Do(req *http.Request) (*http.Response, error) {
 	}, nil
 }
 
-type mockHTTPEmptyResponse struct {
-	statusCode int
-}
+type mockHTTPEmptyResponse struct { /* all structs must go */ }
 
 func (s mockHTTPEmptyResponse) Do(req *http.Request) (*http.Response, error) {
 	return &http.Response{
@@ -134,11 +128,7 @@ func TestClient_GetRepository(t *testing.T) {
 }
 
 func TestClient_GetRepositoriesByNodeFromAPI(t *testing.T) {
-	tests := []struct {
-		responseBody string
-		want         map[string]*Repository
-		nodeIDs      []string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			responseBody: `
 {
@@ -665,12 +655,7 @@ func TestClient_GetReposByNameWithOwner(t *testing.T) {
 		ViewerPermission: "ADMIN",
 	}
 
-	testCases := []struct {
-		name             string
-		mockResponseBody string
-		wantRepos        []*Repository
-		err              string
-	}{
+	testCases := []struct { /* all structs must go */ }{
 
 		{
 			name: "found",
diff --git a/internal/extsvc/github/user.go b/internal/extsvc/github/user.go
index 594a701..cbbff31 100644
--- a/internal/extsvc/github/user.go
+++ b/internal/extsvc/github/user.go
@@ -35,12 +35,7 @@ func SetExternalAccountData(data *extsvc.AccountData, user *github.User, token *
 	data.SetAuthData(token)
 }
 
-type UserEmail struct {
-	Email      string `json:"email,omitempty"`
-	Primary    bool   `json:"primary,omitempty"`
-	Verified   bool   `json:"verified,omitempty"`
-	Visibility string `json:"visibility,omitempty"`
-}
+type UserEmail struct { /* all structs must go */ }
 
 var MockGetAuthenticatedUserEmails func(ctx context.Context) ([]*UserEmail, error)
 
@@ -59,9 +54,7 @@ func (c *Client) GetAuthenticatedUserEmails(ctx context.Context) ([]*UserEmail,
 	return emails, nil
 }
 
-type Org struct {
-	Login string `json:"login,omitempty"`
-}
+type Org struct { /* all structs must go */ }
 
 var MockGetAuthenticatedUserOrgs func(ctx context.Context) ([]*Org, error)
 
@@ -81,10 +74,7 @@ func (c *Client) GetAuthenticatedUserOrgs(ctx context.Context) ([]*Org, error) {
 }
 
 // Collaborator is a collaborator of a repository.
-type Collaborator struct {
-	ID         string `json:"node_id"` // GraphQL ID
-	DatabaseID int64  `json:"id"`
-}
+type Collaborator struct { /* all structs must go */ }
 
 // ListRepositoryCollaborators lists all GitHub users that has access to the repository.
 // The page is the page of results to return, and is 1-indexed (so the first call should
diff --git a/internal/extsvc/github/user_test.go b/internal/extsvc/github/user_test.go
index 0a3fb49..e195804 100644
--- a/internal/extsvc/github/user_test.go
+++ b/internal/extsvc/github/user_test.go
@@ -10,12 +10,7 @@ import (
 // NOTE: To update VCR for this test, please use the token of "sourcegraph-vcr"
 // for GITHUB_TOKEN, which can be found in 1Password.
 func TestClient_ListRepositoryCollaborators(t *testing.T) {
-	tests := []struct {
-		name      string
-		owner     string
-		repo      string
-		wantUsers []*Collaborator
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:  "public repo",
 			owner: "sourcegraph-vcr-repos",
diff --git a/internal/extsvc/gitlab/client.go b/internal/extsvc/gitlab/client.go
index 95c43c2..7bb97d3 100644
--- a/internal/extsvc/gitlab/client.go
+++ b/internal/extsvc/gitlab/client.go
@@ -58,23 +58,9 @@ func trace(msg string, ctx ...interface{}) {
 // ClientProvider creates GitLab API clients. Each client has separate authentication creds and a
 // separate cache, but they share an underlying HTTP client and rate limiter. Callers who want a simple
 // unauthenticated API client should use `NewClientProvider(baseURL, transport).GetClient()`.
-type ClientProvider struct {
-	// baseURL is the base URL of GitLab; e.g., https://gitlab.com or https://gitlab.example.com
-	baseURL *url.URL
+type ClientProvider struct { /* all structs must go */ }
 
-	// httpClient is the underlying the HTTP client to use
-	httpClient httpcli.Doer
-
-	gitlabClients   map[string]*Client
-	gitlabClientsMu sync.Mutex
-
-	rateLimitMonitor *ratelimit.Monitor // the API rate limit monitor
-}
-
-type CommonOp struct {
-	// NoCache, if true, will bypass any caching done in this package
-	NoCache bool
-}
+type CommonOp struct { /* all structs must go */ }
 
 func NewClientProvider(baseURL *url.URL, cli httpcli.Doer) *ClientProvider {
 	if cli == nil {
@@ -119,11 +105,7 @@ func (p *ClientProvider) GetClient() *Client {
 	return p.getClient(getClientOp{})
 }
 
-type getClientOp struct {
-	personalAccessToken string
-	oauthToken          string
-	sudo                string
-}
+type getClientOp struct { /* all structs must go */ }
 
 func (p *ClientProvider) getClient(op getClientOp) *Client {
 	if op.personalAccessToken != "" && op.oauthToken != "" {
@@ -158,16 +140,7 @@ func (p *ClientProvider) getClient(op getClientOp) *Client {
 // token belong to the same user and there are two corresponding Client instances, those Client
 // instances will NOT share the same cache. However, two Client instances sharing the exact same
 // values for those fields WILL share a cache.
-type Client struct {
-	baseURL             *url.URL
-	httpClient          httpcli.Doer
-	projCache           *rcache.Cache
-	PersonalAccessToken string // a personal access token to authenticate requests, if set
-	OAuthToken          string // an OAuth bearer token, if set
-	Sudo                string // Sudo user value, if set
-	RateLimitMonitor    *ratelimit.Monitor
-	RateLimiter         *rate.Limiter // Our internal rate limiter
-}
+type Client struct { /* all structs must go */ }
 
 // newClient creates a new GitLab API client with an optional personal access token to authenticate requests.
 //
diff --git a/internal/extsvc/gitlab/members.go b/internal/extsvc/gitlab/members.go
index f8bc93a..88b9109 100644
--- a/internal/extsvc/gitlab/members.go
+++ b/internal/extsvc/gitlab/members.go
@@ -8,21 +8,7 @@ import (
 )
 
 // Member contains fields for a group or project membership.
-type Member struct {
-	ID                int32  `json:"id"`
-	Username          string `json:"username"`
-	Name              string `json:"name"`
-	State             string `json:"state"`
-	AvatarURL         string `json:"avatar_url"`
-	WebURL            string `json:"web_url"`
-	ExpiresAt         string `json:"expires_at"`
-	AccessLevel       int    `json:"access_level"`
-	GroupSAMLIdentity *struct {
-		Provider       string `json:"provider"`
-		ExternUID      string `json:"extern_uid"`
-		SAMLProviderID int    `json:"saml_provider_id"`
-	} `json:"group_saml_identity"`
-}
+type Member struct { /* all structs must go */ }
 
 // ListMembers returns a list of members parsed from reponse of given URL.
 func (c *Client) ListMembers(ctx context.Context, urlStr string) (members []*Member, nextPageURL *string, err error) {
diff --git a/internal/extsvc/gitlab/merge_requests.go b/internal/extsvc/gitlab/merge_requests.go
index 2b969b2..286404d 100644
--- a/internal/extsvc/gitlab/merge_requests.go
+++ b/internal/extsvc/gitlab/merge_requests.go
@@ -23,38 +23,9 @@ const (
 	MergeRequestStateMerged MergeRequestState = "merged"
 )
 
-type MergeRequest struct {
-	ID           ID                `json:"id"`
-	IID          ID                `json:"iid"`
-	ProjectID    ID                `json:"project_id"`
-	Title        string            `json:"title"`
-	Description  string            `json:"description"`
-	State        MergeRequestState `json:"state"`
-	CreatedAt    time.Time         `json:"created_at"`
-	UpdatedAt    time.Time         `json:"updated_at"`
-	MergedAt     *time.Time        `json:"merged_at"`
-	ClosedAt     *time.Time        `json:"closed_at"`
-	HeadPipeline *Pipeline         `json:"head_pipeline"`
-	Labels       []string          `json:"labels"`
-	SourceBranch string            `json:"source_branch"`
-	TargetBranch string            `json:"target_branch"`
-	WebURL       string            `json:"web_url"`
-
-	DiffRefs DiffRefs `json:"diff_refs"`
-
-	// The fields below are computed from other REST API requests when getting a
-	// Merge Request. Once our minimum version is GitLab 12.0, we can use the
-	// GraphQL API to retrieve all of this data at once, but until then, we have
-	// to do it the old fashioned way with lots of REST requests.
-	Notes     []*Note
-	Pipelines []*Pipeline
-}
+type MergeRequest struct { /* all structs must go */ }
 
-type DiffRefs struct {
-	BaseSHA  string `json:"base_sha"`
-	HeadSHA  string `json:"head_sha"`
-	StartSHA string `json:"start_sha"`
-}
+type DiffRefs struct { /* all structs must go */ }
 
 var (
 	ErrMergeRequestAlreadyExists = errors.New("merge request already exists")
@@ -62,14 +33,7 @@ var (
 	ErrTooManyMergeRequests      = errors.New("retrieved too many merge requests")
 )
 
-type CreateMergeRequestOpts struct {
-	SourceBranch string `json:"source_branch"`
-	TargetBranch string `json:"target_branch"`
-	Title        string `json:"title"`
-	Description  string `json:"description,omitempty"`
-	// TODO: other fields at
-	// https://docs.gitlab.com/ee/api/merge_requests.html#create-mr as needed.
-}
+type CreateMergeRequestOpts struct { /* all structs must go */ }
 
 func (c *Client) CreateMergeRequest(ctx context.Context, project *Project, opts CreateMergeRequestOpts) (*MergeRequest, error) {
 	if MockCreateMergeRequest != nil {
@@ -158,12 +122,7 @@ func (c *Client) GetOpenMergeRequestByRefs(ctx context.Context, project *Project
 	return c.GetMergeRequest(ctx, project, resp[0].IID)
 }
 
-type UpdateMergeRequestOpts struct {
-	TargetBranch string                       `json:"target_branch"`
-	Title        string                       `json:"title"`
-	Description  string                       `json:"description,omitempty"`
-	StateEvent   UpdateMergeRequestStateEvent `json:"state_event,omitempty"`
-}
+type UpdateMergeRequestOpts struct { /* all structs must go */ }
 
 type UpdateMergeRequestStateEvent string
 
diff --git a/internal/extsvc/gitlab/notes.go b/internal/extsvc/gitlab/notes.go
index e0c1c62..db37813 100644
--- a/internal/extsvc/gitlab/notes.go
+++ b/internal/extsvc/gitlab/notes.go
@@ -47,13 +47,7 @@ func (c *Client) GetMergeRequestNotes(ctx context.Context, project *Project, iid
 	}
 }
 
-type Note struct {
-	ID        ID        `json:"id"`
-	Body      string    `json:"body"`
-	Author    User      `json:"author"`
-	CreatedAt time.Time `json:"created_at"`
-	System    bool      `json:"system"`
-}
+type Note struct { /* all structs must go */ }
 
 func (n *Note) Key() string {
 	return fmt.Sprintf("Note:%d", n.ID)
diff --git a/internal/extsvc/gitlab/pipelines.go b/internal/extsvc/gitlab/pipelines.go
index 26ea799..5ff8a6b 100644
--- a/internal/extsvc/gitlab/pipelines.go
+++ b/internal/extsvc/gitlab/pipelines.go
@@ -47,15 +47,7 @@ func (c *Client) GetMergeRequestPipelines(ctx context.Context, project *Project,
 	}
 }
 
-type Pipeline struct {
-	ID        ID             `json:"id"`
-	SHA       string         `json:"sha"`
-	Ref       string         `json:"ref"`
-	Status    PipelineStatus `json:"status"`
-	WebURL    string         `json:"web_url"`
-	CreatedAt time.Time      `json:"created_at"`
-	UpdatedAt time.Time      `json:"updated_at"`
-}
+type Pipeline struct { /* all structs must go */ }
 
 type PipelineStatus string
 
diff --git a/internal/extsvc/gitlab/projects.go b/internal/extsvc/gitlab/projects.go
index 6934604..2e252fa 100644
--- a/internal/extsvc/gitlab/projects.go
+++ b/internal/extsvc/gitlab/projects.go
@@ -22,21 +22,9 @@ const (
 )
 
 // Project is a GitLab project (equivalent to a GitHub repository).
-type Project struct {
-	ProjectCommon
-	Visibility        Visibility     `json:"visibility"`                    // "private", "internal", or "public"
-	ForkedFromProject *ProjectCommon `json:"forked_from_project,omitempty"` // If non-nil, the project from which this project was forked
-	Archived          bool           `json:"archived"`
-}
+type Project struct { /* all structs must go */ }
 
-type ProjectCommon struct {
-	ID                int    `json:"id"`                  // ID of project
-	PathWithNamespace string `json:"path_with_namespace"` // full path name of project ("namespace1/namespace2/name")
-	Description       string `json:"description"`         // description of project
-	WebURL            string `json:"web_url"`             // the web URL of this project ("https://gitlab.com/foo/bar")i
-	HTTPURLToRepo     string `json:"http_url_to_repo"`    // HTTP clone URL
-	SSHURLToRepo      string `json:"ssh_url_to_repo"`     // SSH clone URL ("git@example.com:foo/bar.git")
-}
+type ProjectCommon struct { /* all structs must go */ }
 
 // RequiresAuthentication reports whether this project requires authentication to view (i.e., its visibility is
 // "private" or "internal").
@@ -54,11 +42,7 @@ func MockGetProject_Return(returns *Project) {
 	}
 }
 
-type GetProjectOp struct {
-	ID                int
-	PathWithNamespace string
-	CommonOp
-}
+type GetProjectOp struct { /* all structs must go */ }
 
 // GetProject gets a project from GitLab by either ID or path with namespace.
 func (c *Client) GetProject(ctx context.Context, op GetProjectOp) (*Project, error) {
@@ -131,12 +115,7 @@ func init() {
 	prometheus.MustRegister(projectsGitLabCacheCounter)
 }
 
-type cachedProj struct {
-	Project
-
-	// NotFound indicates that the GitLab API reported that the project was not found.
-	NotFound bool
-}
+type cachedProj struct { /* all structs must go */ }
 
 // getProjectFromCache attempts to get a response from the redis cache.
 // It returns nil error for cache-hit condition and non-nil error for cache-miss.
diff --git a/internal/extsvc/gitlab/repositories.go b/internal/extsvc/gitlab/repositories.go
index 3bad781..ec10ac0 100644
--- a/internal/extsvc/gitlab/repositories.go
+++ b/internal/extsvc/gitlab/repositories.go
@@ -10,19 +10,9 @@ import (
 	"github.com/pkg/errors"
 )
 
-type Tree struct {
-	ID   string `json:"id"`
-	Name string `json:"name"`
-	Type string `json:"type"`
-	Path string `json:"path"`
-	Mode string `json:"mode"`
-}
+type Tree struct { /* all structs must go */ }
 
-type ListTreeOp struct {
-	ProjID                int
-	ProjPathWithNamespace string
-	CommonOp
-}
+type ListTreeOp struct { /* all structs must go */ }
 
 var ListTreeMock func(ctx context.Context, op ListTreeOp) ([]*Tree, error)
 
diff --git a/internal/extsvc/gitlab/testing.go b/internal/extsvc/gitlab/testing.go
index dfa498b..67a837d 100644
--- a/internal/extsvc/gitlab/testing.go
+++ b/internal/extsvc/gitlab/testing.go
@@ -12,11 +12,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/rcache"
 )
 
-type mockHTTPResponseBody struct {
-	count        int
-	header       http.Header
-	responseBody string
-}
+type mockHTTPResponseBody struct { /* all structs must go */ }
 
 func (s *mockHTTPResponseBody) Do(req *http.Request) (*http.Response, error) {
 	s.count++
@@ -28,9 +24,7 @@ func (s *mockHTTPResponseBody) Do(req *http.Request) (*http.Response, error) {
 	}, nil
 }
 
-type mockHTTPEmptyResponse struct {
-	statusCode int
-}
+type mockHTTPEmptyResponse struct { /* all structs must go */ }
 
 func (s mockHTTPEmptyResponse) Do(req *http.Request) (*http.Response, error) {
 	return &http.Response{
diff --git a/internal/extsvc/gitlab/users.go b/internal/extsvc/gitlab/users.go
index a7e5c92..c20a6b1 100644
--- a/internal/extsvc/gitlab/users.go
+++ b/internal/extsvc/gitlab/users.go
@@ -8,21 +8,9 @@ import (
 	"github.com/peterhellberg/link"
 )
 
-type User struct {
-	ID         int32      `json:"id"`
-	Name       string     `json:"name"`
-	Username   string     `json:"username"`
-	Email      string     `json:"email"`
-	State      string     `json:"state"`
-	AvatarURL  string     `json:"avatar_url"`
-	WebURL     string     `json:"web_url"`
-	Identities []Identity `json:"identities"`
-}
+type User struct { /* all structs must go */ }
 
-type Identity struct {
-	Provider  string `json:"provider"`
-	ExternUID string `json:"extern_uid"`
-}
+type Identity struct { /* all structs must go */ }
 
 func (c *Client) ListUsers(ctx context.Context, urlStr string) (users []*User, nextPageURL *string, err error) {
 	if MockListUsers != nil {
diff --git a/internal/extsvc/gitolite/repos.go b/internal/extsvc/gitolite/repos.go
index 5c0daa2..b431cf1 100644
--- a/internal/extsvc/gitolite/repos.go
+++ b/internal/extsvc/gitolite/repos.go
@@ -10,13 +10,7 @@ import (
 )
 
 // Repo is the repository metadata returned by the Gitolite API.
-type Repo struct {
-	// Name is the name of the repository as it is returned by `ssh git@GITOLITE_HOST info`
-	Name string
-
-	// URL is the clone URL of the repository.
-	URL string
-}
+type Repo struct { /* all structs must go */ }
 
 // Client is a client for the Gitolite API.
 //
@@ -26,9 +20,7 @@ type Repo struct {
 //
 // Impl note: To change the above, remove the invocation of the `ssh` binary and replace it
 // with use of the `ssh` package, reading arguments from config.
-type Client struct {
-	Host string
-}
+type Client struct { /* all structs must go */ }
 
 func NewClient(host string) *Client {
 	return &Client{Host: host}
diff --git a/internal/extsvc/gitolite/repos_test.go b/internal/extsvc/gitolite/repos_test.go
index 57a8b9f..513349b 100644
--- a/internal/extsvc/gitolite/repos_test.go
+++ b/internal/extsvc/gitolite/repos_test.go
@@ -7,12 +7,7 @@ import (
 )
 
 func TestDecodeRepos(t *testing.T) {
-	tests := []struct {
-		name         string
-		host         string
-		gitoliteInfo string
-		expRepos     []*Repo
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "with SCP host format",
 			host: "git@gitolite.example.com",
diff --git a/internal/extsvc/phabricator/client.go b/internal/extsvc/phabricator/client.go
index 3b675ee..c70fb56 100644
--- a/internal/extsvc/phabricator/client.go
+++ b/internal/extsvc/phabricator/client.go
@@ -27,9 +27,7 @@ func init() {
 	prometheus.MustRegister(requestDuration)
 }
 
-type meteredConn struct {
-	gonduit.Conn
-}
+type meteredConn struct { /* all structs must go */ }
 
 func (mc *meteredConn) CallContext(
 	ctx context.Context,
@@ -50,9 +48,7 @@ func (mc *meteredConn) CallContext(
 }
 
 // A Client provides high level methods to a Phabricator Conduit API.
-type Client struct {
-	conn *meteredConn
-}
+type Client struct { /* all structs must go */ }
 
 // NewClient returns an authenticated Client, using the given URL and
 // token. If provided, cli will be used to perform the underlying HTTP requests.
@@ -75,98 +71,32 @@ func NewClient(ctx context.Context, phabUrl, token string, cli httpcli.Doer) (*C
 }
 
 // Repo represents a single code repository.
-type Repo struct {
-	ID           uint64
-	PHID         string
-	Name         string
-	VCS          string
-	Callsign     string
-	Shortname    string
-	Status       string
-	DateCreated  time.Time
-	DateModified time.Time
-	ViewPolicy   string
-	EditPolicy   string
-	URIs         []*URI
-}
+type Repo struct { /* all structs must go */ }
 
 // URI of a Repository
-type URI struct {
-	ID   string
-	PHID string
-
-	Display    string
-	Effective  string
-	Normalized string
-
-	Disabled bool
-
-	BuiltinProtocol   string
-	BuiltinIdentifier string
-
-	DateCreated  time.Time
-	DateModified time.Time
-}
+type URI struct { /* all structs must go */ }
 
 //
 // Marshaling types
 //
 
-type apiRepo struct {
-	ID          *uint64            `json:"id"`
-	PHID        *string            `json:"phid"`
-	Fields      apiRepoFields      `json:"fields"`
-	Attachments apiRepoAttachments `json:"attachments"`
-}
+type apiRepo struct { /* all structs must go */ }
 
-type apiRepoFields struct {
-	Name         *string       `json:"name"`
-	VCS          *string       `json:"vcs"`
-	Callsign     *string       `json:"callsign"`
-	Shortname    *string       `json:"shortname"`
-	Status       *string       `json:"status"`
-	Policy       apiRepoPolicy `json:"policy"`
-	DateCreated  unixTime      `json:"dateCreated"`
-	DateModified unixTime      `json:"dateModified"`
-}
+type apiRepoFields struct { /* all structs must go */ }
 
-type apiRepoPolicy struct {
-	View *string `json:"view"`
-	Edit *string `json:"edit"`
-}
+type apiRepoPolicy struct { /* all structs must go */ }
 
-type apiRepoAttachments struct {
-	URIs apiURIsContainer `json:"uris"`
-}
+type apiRepoAttachments struct { /* all structs must go */ }
 
-type apiURIsContainer struct {
-	URIs *[]apiURI `json:"uris"`
-}
+type apiURIsContainer struct { /* all structs must go */ }
 
-type apiURI struct {
-	ID     string       `json:"id"`
-	PHID   string       `json:"phid"`
-	Fields apiURIFields `json:"fields"`
-}
+type apiURI struct { /* all structs must go */ }
 
-type apiURIFields struct {
-	URI          apiURIs      `json:"uri"`
-	Builtin      apiURIBultin `json:"builtin"`
-	Disabled     bool         `json:"disabled"`
-	DateCreated  unixTime     `json:"dateCreated"`
-	DateModified unixTime     `json:"dateModified"`
-}
+type apiURIFields struct { /* all structs must go */ }
 
-type apiURIs struct {
-	Display    string `json:"display"`
-	Effective  string `json:"effective"`
-	Normalized string `json:"normalized"`
-}
+type apiURIs struct { /* all structs must go */ }
 
-type apiURIBultin struct {
-	Protocol   string `json:"protocol"`
-	Identifier string `json:"identifier"`
-}
+type apiURIBultin struct { /* all structs must go */ }
 
 // UnmarshalJSON implements the json.Unmarshaler interface.
 func (r *Repo) UnmarshalJSON(data []byte) error {
@@ -223,28 +153,15 @@ func (r *Repo) UnmarshalJSON(data []byte) error {
 }
 
 // Cursor represents the pagination cursor on many responses.
-type Cursor struct {
-	Limit  uint64 `json:"limit,omitempty"`
-	After  string `json:"after,omitempty"`
-	Before string `json:"before,omitempty"`
-	Order  string `json:"order,omitempty"`
-}
+type Cursor struct { /* all structs must go */ }
 
 // ListReposArgs defines the constraints to be satisfied
 // by the ListRepos method.
-type ListReposArgs struct {
-	*Cursor
-}
+type ListReposArgs struct { /* all structs must go */ }
 
 // ListRepos lists all repositories matching the given arguments.
 func (c *Client) ListRepos(ctx context.Context, args ListReposArgs) ([]*Repo, *Cursor, error) {
-	var req struct {
-		requests.Request
-		ListReposArgs
-		Attachments struct {
-			URIs bool `json:"uris"`
-		} `json:"attachments"`
-	}
+	var req struct { /* all structs must go */ }
 
 	req.ListReposArgs = args
 	req.Attachments.URIs = true
@@ -261,10 +178,7 @@ func (c *Client) ListRepos(ctx context.Context, args ListReposArgs) ([]*Repo, *C
 		req.Cursor.Limit = 100
 	}
 
-	var res struct {
-		Data   []*Repo `json:"data"`
-		Cursor Cursor  `json:"cursor"`
-	}
+	var res struct { /* all structs must go */ }
 
 	err := c.conn.CallContext(ctx, "diffusion.repository.search", &req, &res)
 	if err != nil {
@@ -276,10 +190,7 @@ func (c *Client) ListRepos(ctx context.Context, args ListReposArgs) ([]*Repo, *C
 
 // GetRawDiff retrieves the raw diff of the diff with the given id.
 func (c *Client) GetRawDiff(ctx context.Context, diffID int) (diff string, err error) {
-	type request struct {
-		requests.Request
-		DiffID int `json:"diffID"`
-	}
+	type request struct { /* all structs must go */ }
 
 	req := request{DiffID: diffID}
 	err = c.conn.CallContext(ctx, "differential.getrawdiff", &req, &diff)
@@ -291,20 +202,11 @@ func (c *Client) GetRawDiff(ctx context.Context, diffID int) (diff string, err e
 }
 
 // DiffInfo contains information for a diff such as the author
-type DiffInfo struct {
-	Message     string    `json:"description"`
-	AuthorName  string    `json:"authorName"`
-	AuthorEmail string    `json:"authorEmail"`
-	DateCreated string    `json:"dateCreated"`
-	Date        time.Time `json:"omitempty"`
-}
+type DiffInfo struct { /* all structs must go */ }
 
 // GetDiffInfo retrieves the DiffInfo of the diff with the given id.
 func (c *Client) GetDiffInfo(ctx context.Context, diffID int) (*DiffInfo, error) {
-	type request struct {
-		requests.Request
-		IDs []int `json:"ids"`
-	}
+	type request struct { /* all structs must go */ }
 
 	req := request{IDs: []int{diffID}}
 
diff --git a/internal/extsvc/phabricator/client_test.go b/internal/extsvc/phabricator/client_test.go
index 8f51673..86ee8ad 100644
--- a/internal/extsvc/phabricator/client_test.go
+++ b/internal/extsvc/phabricator/client_test.go
@@ -31,13 +31,7 @@ func TestClient_ListRepos(t *testing.T) {
 	timeout, cancel := context.WithDeadline(context.Background(), time.Now().Add(-time.Second))
 	defer cancel()
 
-	for _, tc := range []struct {
-		name   string
-		ctx    context.Context
-		args   phabricator.ListReposArgs
-		cursor *phabricator.Cursor
-		err    string
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{
 			name:   "repos-listed",
 			args:   phabricator.ListReposArgs{Cursor: &phabricator.Cursor{Limit: 5}},
@@ -121,12 +115,7 @@ func TestClient_GetRawDiff(t *testing.T) {
 	timeout, cancel := context.WithDeadline(context.Background(), time.Now().Add(-time.Second))
 	defer cancel()
 
-	for _, tc := range []struct {
-		name string
-		ctx  context.Context
-		id   int
-		err  string
-	}{{
+	for _, tc := range []struct { /* all structs must go */ }{{
 		name: "diff not found",
 		id:   0xdeadbeef,
 		err:  "ERR_NOT_FOUND: Diff not found.",
@@ -185,13 +174,7 @@ func TestClient_GetDiffInfo(t *testing.T) {
 	timeout, cancel := context.WithDeadline(context.Background(), time.Now().Add(-time.Second))
 	defer cancel()
 
-	for _, tc := range []struct {
-		name string
-		ctx  context.Context
-		id   int
-		info *phabricator.DiffInfo
-		err  string
-	}{{
+	for _, tc := range []struct { /* all structs must go */ }{{
 		name: "diff not found",
 		id:   0xdeadbeef,
 		err:  "phabricator error: no diff info found for diff 3735928559",
diff --git a/internal/extsvc/types.go b/internal/extsvc/types.go
index 77cd2ce..629ae0d 100644
--- a/internal/extsvc/types.go
+++ b/internal/extsvc/types.go
@@ -18,47 +18,24 @@ import (
 
 // Account represents a row in the `user_external_accounts` table. See the GraphQL API's
 // corresponding fields in "ExternalAccount" for documentation.
-type Account struct {
-	ID          int32
-	UserID      int32
-	AccountSpec // ServiceType, ServiceID, ClientID, AccountID
-	AccountData // AuthData, Data
-	CreatedAt   time.Time
-	UpdatedAt   time.Time
-}
+type Account struct { /* all structs must go */ }
 
 // AccountSpec specifies a user external account by its external identifier (i.e., by the
 // identifier provided by the account's owner service), instead of by our database's serial
 // ID. See the GraphQL API's corresponding fields in "ExternalAccount" for documentation.
-type AccountSpec struct {
-	ServiceType string
-	ServiceID   string
-	ClientID    string
-	AccountID   string
-}
+type AccountSpec struct { /* all structs must go */ }
 
 // AccountData contains data that can be freely updated in the user external account after it
 // has been created. See the GraphQL API's corresponding fields for documentation.
-type AccountData struct {
-	AuthData *json.RawMessage
-	Data     *json.RawMessage
-}
+type AccountData struct { /* all structs must go */ }
 
 // Repository contains necessary information to identify an external repository on the code host.
-type Repository struct {
-	// URI is the full name for this repository, e.g. "github.com/user/repo".
-	URI string
-	api.ExternalRepoSpec
-}
+type Repository struct { /* all structs must go */ }
 
 // Accounts contains a list of accounts that belong to the same external service.
 // All fields have a same meaning to AccountSpec. See GraphQL API's corresponding fields
 // in "ExternalAccount" for documentation.
-type Accounts struct {
-	ServiceType string
-	ServiceID   string
-	AccountIDs  []string
-}
+type Accounts struct { /* all structs must go */ }
 
 // TracingFields returns tracing fields for the opentracing log.
 func (s *Accounts) TracingFields() []otlog.Field {
@@ -278,12 +255,7 @@ func ExtractBaseURL(kind, config string) (*url.URL, error) {
 }
 
 // RateLimitConfig represents the internal rate limit configured for an external service
-type RateLimitConfig struct {
-	BaseURL     string
-	DisplayName string
-	Limit       rate.Limit
-	IsDefault   bool
-}
+type RateLimitConfig struct { /* all structs must go */ }
 
 // GetLimitFromConfig gets RateLimitConfig from an already parsed config schema.
 func GetLimitFromConfig(kind string, config interface{}) (rlc RateLimitConfig, err error) {
@@ -347,9 +319,7 @@ func limitOrInf(enabled bool, perHour float64) rate.Limit {
 	return rate.Inf
 }
 
-type ErrRateLimitUnsupported struct {
-	codehostKind string
-}
+type ErrRateLimitUnsupported struct { /* all structs must go */ }
 
 func (e ErrRateLimitUnsupported) Error() string {
 	return fmt.Sprintf("internal rate limiting not supported for %s", e.codehostKind)
diff --git a/internal/extsvc/types_test.go b/internal/extsvc/types_test.go
index afda5bf..05b2625 100644
--- a/internal/extsvc/types_test.go
+++ b/internal/extsvc/types_test.go
@@ -6,13 +6,7 @@ import (
 )
 
 func TestExtractRateLimitConfig(t *testing.T) {
-	for _, tc := range []struct {
-		name        string
-		config      string
-		kind        string
-		displayName string
-		want        RateLimitConfig
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{
 			name:        "GitLab default",
 			config:      `{"url": "https://example.com/"}`,
diff --git a/internal/gitserver/client.go b/internal/gitserver/client.go
index 826216d..a3f2f85 100644
--- a/internal/gitserver/client.go
+++ b/internal/gitserver/client.go
@@ -70,22 +70,7 @@ func NewClient(cli httpcli.Doer) *Client {
 }
 
 // Client is a gitserver client.
-type Client struct {
-	// HTTP client to use
-	HTTPClient httpcli.Doer
-
-	// Limits concurrency of outstanding HTTP posts
-	HTTPLimiter *parallel.Run
-
-	// Addrs is a function which should return the addresses for gitservers. It
-	// is called each time a request is made. The function must be safe for
-	// concurrent use. It may return different results at different times.
-	Addrs func(ctx context.Context) []string
-
-	// UserAgent is a string identifing who the client is. It will be logged in
-	// the telemetry in gitserver.
-	UserAgent string
-}
+type Client struct { /* all structs must go */ }
 
 // AddrForRepo returns the gitserver address to use for the given repo name.
 func (c *Client) AddrForRepo(ctx context.Context, repo api.RepoName) string {
@@ -110,20 +95,12 @@ func addrForKey(addrs []string, key string) string {
 }
 
 // ArchiveOptions contains options for the Archive func.
-type ArchiveOptions struct {
-	Treeish string   // the tree or commit to produce an archive for
-	Format  string   // format of the resulting archive (usually "tar" or "zip")
-	Paths   []string // if nonempty, only include these paths
-}
+type ArchiveOptions struct { /* all structs must go */ }
 
 // archiveReader wraps the StdoutReader yielded by gitserver's
 // Cmd.StdoutReader with one that knows how to report a repository-not-found
 // error more carefully.
-type archiveReader struct {
-	base io.ReadCloser
-	repo api.RepoName
-	spec string
-}
+type archiveReader struct { /* all structs must go */ }
 
 // Read checks the known output behavior of the StdoutReader.
 func (a *archiveReader) Read(p []byte) (int, error) {
@@ -283,25 +260,11 @@ func init() {
 }
 
 // Cmd represents a command to be executed remotely.
-type Cmd struct {
-	client *Client
-
-	Args           []string
-	Repo           // the repository to execute the command in
-	EnsureRevision string
-	ExitStatus     int
-}
+type Cmd struct { /* all structs must go */ }
 
 // Repo represents a repository on gitserver. It contains the information necessary to identify and
 // create/clone it.
-type Repo struct {
-	Name api.RepoName // the repository's name
-
-	// URL is the repository's Git remote URL. If the gitserver already has cloned the repository,
-	// this field is optional (it will use the last-used Git remote URL). If the repository is not
-	// cloned on the gitserver, the request will fail.
-	URL string
-}
+type Repo struct { /* all structs must go */ }
 
 // Command creates a new Cmd. Command name must be 'git',
 // otherwise it panics.
@@ -376,10 +339,7 @@ func StdoutReader(ctx context.Context, c *Cmd) (io.ReadCloser, error) {
 	}, nil
 }
 
-type cmdReader struct {
-	rc      io.ReadCloser
-	trailer http.Header
-}
+type cmdReader struct { /* all structs must go */ }
 
 func (c *cmdReader) Read(p []byte) (int, error) {
 	n, err := c.rc.Read(p)
@@ -623,11 +583,7 @@ func (c *Client) IsRepoCloneable(ctx context.Context, repo Repo) error {
 }
 
 // RepoNotCloneableErr is the error that happens when a repository can not be cloned.
-type RepoNotCloneableErr struct {
-	repo     Repo
-	reason   string
-	notFound bool
-}
+type RepoNotCloneableErr struct { /* all structs must go */ }
 
 // NotFound returns true if the repo could not be cloned because it wasn't found.
 // This may be because the repo doesn't exist, or because the repo is private and
@@ -673,11 +629,7 @@ func (c *Client) RepoCloneProgress(ctx context.Context, repos ...api.RepoName) (
 		shard.Repos = append(shard.Repos, r)
 	}
 
-	type op struct {
-		req *protocol.RepoCloneProgressRequest
-		res *protocol.RepoCloneProgressResponse
-		err error
-	}
+	type op struct { /* all structs must go */ }
 
 	ch := make(chan op, len(shards))
 	for _, req := range shards {
@@ -750,11 +702,7 @@ func (c *Client) RepoInfo(ctx context.Context, repos ...api.RepoName) (*protocol
 		shard.Repos = append(shard.Repos, r)
 	}
 
-	type op struct {
-		req *protocol.RepoInfoRequest
-		res *protocol.RepoInfoResponse
-		err error
-	}
+	type op struct { /* all structs must go */ }
 
 	ch := make(chan op, len(shards))
 	for _, req := range shards {
diff --git a/internal/gitserver/client_test.go b/internal/gitserver/client_test.go
index 7c9eb08..5e2a66b 100644
--- a/internal/gitserver/client_test.go
+++ b/internal/gitserver/client_test.go
@@ -75,11 +75,7 @@ func TestClient_Archive(t *testing.T) {
 		return []string{u.Host}
 	}
 
-	tests := map[api.RepoName]struct {
-		remote string
-		want   map[string]string
-		err    error
-	}{
+	tests := map[api.RepoName]struct { /* all structs must go */ }{
 		"simple": {
 			remote: createSimpleGitRepo(t, root),
 			want: map[string]string{
diff --git a/internal/gitserver/errors.go b/internal/gitserver/errors.go
index 6c8eda8..d0a2b05 100644
--- a/internal/gitserver/errors.go
+++ b/internal/gitserver/errors.go
@@ -7,10 +7,7 @@ import (
 )
 
 // RevisionNotFoundError is an error that reports a revision doesn't exist.
-type RevisionNotFoundError struct {
-	Repo api.RepoName
-	Spec string
-}
+type RevisionNotFoundError struct { /* all structs must go */ }
 
 func (e *RevisionNotFoundError) Error() string {
 	return fmt.Sprintf("revision not found: %s@%s", e.Repo, e.Spec)
diff --git a/internal/gitserver/protocol/gitolite_phabricator.go b/internal/gitserver/protocol/gitolite_phabricator.go
index 6d5864d..59a4e91 100644
--- a/internal/gitserver/protocol/gitolite_phabricator.go
+++ b/internal/gitserver/protocol/gitolite_phabricator.go
@@ -2,6 +2,4 @@ package protocol
 
 // GitolitePhabricatorMetadataResponse is the response for a request
 // for Phabricator metadata through the Gitolite API
-type GitolitePhabricatorMetadataResponse struct {
-	Callsign string `json:"callsign"`
-}
+type GitolitePhabricatorMetadataResponse struct { /* all structs must go */ }
diff --git a/internal/gitserver/protocol/gitserver.go b/internal/gitserver/protocol/gitserver.go
index d823ec8..b94fa1d 100644
--- a/internal/gitserver/protocol/gitserver.go
+++ b/internal/gitserver/protocol/gitserver.go
@@ -11,186 +11,72 @@ import (
 // Note that this request is deserialized by both gitserver and the frontend's
 // internal proxy route and any major change to this structure will need to
 // be reconciled in both places.
-type ExecRequest struct {
-	Repo api.RepoName `json:"repo"`
-
-	// URL is the repository's Git remote URL. If the gitserver already has cloned the repository,
-	// this field is optional (it will use the last-used Git remote URL). If the repository is not
-	// cloned on the gitserver, the request will fail.
-	URL string `json:"url,omitempty"`
-
-	EnsureRevision string      `json:"ensureRevision"`
-	Args           []string    `json:"args"`
-	Opt            *RemoteOpts `json:"opt"`
-}
+type ExecRequest struct { /* all structs must go */ }
 
 // RemoteOpts configures interactions with a remote repository.
-type RemoteOpts struct {
-	SSH   *SSHConfig   `json:"ssh"`   // SSH configuration for communication with the remote
-	HTTPS *HTTPSConfig `json:"https"` // HTTPS configuration for communication with the remote
-}
+type RemoteOpts struct { /* all structs must go */ }
 
 // SSHConfig configures and authenticates SSH for communication with remotes.
-type SSHConfig struct {
-	User       string `json:"user,omitempty"`      // SSH user (if empty, inferred from URL)
-	PublicKey  []byte `json:"publicKey,omitempty"` // SSH public key (if nil, inferred from PrivateKey)
-	PrivateKey []byte `json:"privateKey"`          // SSH private key, usually passed to ssh.ParsePrivateKey (passphrases currently unsupported)
-}
+type SSHConfig struct { /* all structs must go */ }
 
 // HTTPSConfig configures and authenticates HTTPS for communication with remotes.
-type HTTPSConfig struct {
-	User string `json:"user"` // the username provided to the remote
-	Pass string `json:"pass"` // the password provided to the remote
-}
+type HTTPSConfig struct { /* all structs must go */ }
 
 // RepoUpdateRequest is a request to update the contents of a given repo, or clone it if it doesn't exist.
-type RepoUpdateRequest struct {
-	Repo  api.RepoName  `json:"repo"`  // identifying URL for repo
-	URL   string        `json:"url"`   // repo's remote URL
-	Since time.Duration `json:"since"` // debounce interval for queries, used only with request-repo-update
-}
+type RepoUpdateRequest struct { /* all structs must go */ }
 
 // RepoUpdateResponse returns meta information of the repo enqueued for
 // update.
 //
 // TODO just use RepoInfoResponse?
-type RepoUpdateResponse struct {
-	Cloned          bool
-	CloneInProgress bool
-	LastFetched     *time.Time
-	LastChanged     *time.Time
-	Error           string // an error reported by the update, as opposed to a protocol error
-	QueueCap        int    // size of the clone queue
-	QueueLen        int    // current clone operations
-	// Following items likely provided only if the request specified waiting.
-	Received *time.Time // time request was received by handler function
-	Started  *time.Time // time request actually started processing
-	Finished *time.Time // time request completed
-}
-
-type NotFoundPayload struct {
-	CloneInProgress bool `json:"cloneInProgress"` // If true, exec returned with noop because clone is in progress.
+type RepoUpdateResponse struct { /* all structs must go */ }
 
-	// CloneProgress is a progress message from the running clone command.
-	CloneProgress string `json:"cloneProgress,omitempty"`
-}
+type NotFoundPayload struct { /* all structs must go */ }
 
 // IsRepoCloneableRequest is a request to determine if a repo is cloneable.
-type IsRepoCloneableRequest struct {
-	// Repo is the repository to check.
-	Repo api.RepoName `json:"Repo"`
-
-	// URL is the repository's Git remote URL.
-	URL string `json:"url"`
-}
+type IsRepoCloneableRequest struct { /* all structs must go */ }
 
 // IsRepoCloneableResponse is the response type for the IsRepoCloneableRequest.
-type IsRepoCloneableResponse struct {
-	Cloneable bool   // whether the repo is cloneable
-	Reason    string // if not cloneable, the reason why not
-}
+type IsRepoCloneableResponse struct { /* all structs must go */ }
 
 // IsRepoClonedRequest is a request to determine if a repo currently exists on gitserver.
-type IsRepoClonedRequest struct {
-	// Repo is the repository to check.
-	Repo api.RepoName
-}
+type IsRepoClonedRequest struct { /* all structs must go */ }
 
 // RepoDeleteRequest is a request to delete a repository clone on gitserver
-type RepoDeleteRequest struct {
-	// Repo is the repository to delete.
-	Repo api.RepoName
-}
+type RepoDeleteRequest struct { /* all structs must go */ }
 
 // RepoInfoRequest is a request for information about multiple repositories on gitserver.
-type RepoInfoRequest struct {
-	// Repos are the repositories to get information about.
-	Repos []api.RepoName
-}
+type RepoInfoRequest struct { /* all structs must go */ }
 
 // RepoInfo is the information requests about a single repository
 // via a RepoInfoRequest.
-type RepoInfo struct {
-	URL             string     // this repository's Git remote URL
-	CloneInProgress bool       // whether the repository is currently being cloned
-	CloneProgress   string     // a progress message from the running clone command.
-	Cloned          bool       // whether the repository has been cloned successfully
-	LastFetched     *time.Time // when the last `git remote update` or `git fetch` occurred
-	LastChanged     *time.Time // timestamp of the most recent ref in the git repository
-
-	// CloneTime is the time the clone occurred. Note: Repositories may be
-	// recloned automatically, so this time is likely to move forward
-	// periodically.
-	CloneTime *time.Time
-}
+type RepoInfo struct { /* all structs must go */ }
 
 // RepoInfoResponse is the response to a repository information request
 // for multiple repositories at the same time.
-type RepoInfoResponse struct {
-	// Results mapping from the repository name to the repository information.
-	Results map[api.RepoName]*RepoInfo
-}
+type RepoInfoResponse struct { /* all structs must go */ }
 
 // RepoCloneProgressRequest is a request for information about the clone progress of multiple
 // repositories on gitserver.
-type RepoCloneProgressRequest struct {
-	Repos []api.RepoName
-}
+type RepoCloneProgressRequest struct { /* all structs must go */ }
 
 // RepoCloneProgress is information about the clone progress of a repo
-type RepoCloneProgress struct {
-	CloneInProgress bool   // whether the repository is currently being cloned
-	CloneProgress   string // a progress message from the running clone command.
-	Cloned          bool   // whether the repository has been cloned successfully
-}
+type RepoCloneProgress struct { /* all structs must go */ }
 
 // RepoCloneProgressResponse is the response to a repository clone progress request
 // for multiple repositories at the same time.
-type RepoCloneProgressResponse struct {
-	Results map[api.RepoName]*RepoCloneProgress
-}
+type RepoCloneProgressResponse struct { /* all structs must go */ }
 
 // CreateCommitFromPatchRequest is the request information needed for creating
 // the simulated staging area git object for a repo.
-type CreateCommitFromPatchRequest struct {
-	// Repo is the repository to get information about.
-	Repo api.RepoName
-	// BaseCommit is the revision that the staging area object is based on
-	BaseCommit api.CommitID
-	// Patch is the diff contents to be used to create the staging area revision
-	Patch string
-	// TargetRef is the ref that will be created for this patch
-	TargetRef string
-	// If set to true and the TargetRef already exists, an unique number will be appended to the end (ie TargetRef-{#}). The generated ref will be returned.
-	UniqueRef bool
-	// CommitInfo is the information that will be used when creating the commit from a patch
-	CommitInfo PatchCommitInfo
-	// Push specifies whether the target ref will be pushed to the code host
-	Push bool
-	// GitApplyArgs are the arguments that will be passed to `git apply` along
-	// with `--cached`.
-	GitApplyArgs []string
-}
+type CreateCommitFromPatchRequest struct { /* all structs must go */ }
 
 // PatchCommitInfo will be used for commit information when creating a commit from a patch
-type PatchCommitInfo struct {
-	Message        string
-	AuthorName     string
-	AuthorEmail    string
-	CommitterName  string
-	CommitterEmail string
-	Date           time.Time
-}
+type PatchCommitInfo struct { /* all structs must go */ }
 
 // CreateCommitFromPatchResponse is the response type returned after creating
 // a commit from a patch
-type CreateCommitFromPatchResponse struct {
-	// Rev is the tag that the staging object can be found at
-	Rev string
-
-	// Error is populated only on error
-	Error *CreateCommitFromPatchError
-}
+type CreateCommitFromPatchResponse struct { /* all structs must go */ }
 
 // SetError adds the supplied error related details to e.
 func (e *CreateCommitFromPatchResponse) SetError(repo, command, out string, err error) {
@@ -205,18 +91,7 @@ func (e *CreateCommitFromPatchResponse) SetError(repo, command, out string, err
 
 // CreateCommitFromPatchError is populated on errors running
 // CreateCommitFromPatch
-type CreateCommitFromPatchError struct {
-	// RepositoryName is the name of the repository
-	RepositoryName string
-
-	// InternalError is the internal error
-	InternalError string
-
-	// Command is the last git command that was attempted
-	Command string
-	// CombinedOutput is the combined stderr and stdout from running the command
-	CombinedOutput string
-}
+type CreateCommitFromPatchError struct { /* all structs must go */ }
 
 // Error returns a detailed error conforming to the error interface
 func (e *CreateCommitFromPatchError) Error() string {
diff --git a/internal/gitserver/proxy.go b/internal/gitserver/proxy.go
index 97032fd..2ca1cee 100644
--- a/internal/gitserver/proxy.go
+++ b/internal/gitserver/proxy.go
@@ -23,12 +23,7 @@ func NewReverseProxy(transport http.RoundTripper, httpLimiter *parallel.Run) *Re
 }
 
 // ReverseProxy is a gitserver reverse proxy.
-type ReverseProxy struct {
-	Transport http.RoundTripper
-
-	// Limits concurrency of outstanding HTTP posts
-	HTTPLimiter *parallel.Run
-}
+type ReverseProxy struct { /* all structs must go */ }
 
 // ServeHTTP creates a one-shot proxy with the given director and proxies the given request
 // to gitserver. The director must rewrite the request to the correct gitserver address, which
diff --git a/internal/gituri/uri.go b/internal/gituri/uri.go
index 8baf121..a60bfc3 100644
--- a/internal/gituri/uri.go
+++ b/internal/gituri/uri.go
@@ -29,9 +29,7 @@ import (
 // given file in a repository has any number of URIs that refer to it
 // (e.g., using the branch name vs. the commit ID, using clean
 // vs. non-clean file paths, etc.).
-type URI struct {
-	url.URL
-}
+type URI struct { /* all structs must go */ }
 
 // Parse parses uriStr to a URI. The uriStr should be an absolute URL.
 func Parse(uriStr string) (*URI, error) {
diff --git a/internal/goreman/goreman.go b/internal/goreman/goreman.go
index 63ce35c..1e81fd3 100644
--- a/internal/goreman/goreman.go
+++ b/internal/goreman/goreman.go
@@ -14,15 +14,7 @@ import (
 )
 
 // -- process information structure.
-type procInfo struct {
-	proc    string
-	cmdline string
-	stopped bool // true if we stopped it
-	cmd     *exec.Cmd
-	mu      sync.Mutex
-	cond    *sync.Cond
-	waitErr error
-}
+type procInfo struct { /* all structs must go */ }
 
 // process informations named with proc.
 var procs map[string]*procInfo
@@ -75,13 +67,7 @@ const (
 // everywhere \o/
 var procDiedAction ProcDiedAction
 
-type Options struct {
-	// RPCAddr is the address to listen for Goreman RPCs.
-	RPCAddr string
-
-	// ProcDiedAction specifies the behaviour to take when a process dies.
-	ProcDiedAction ProcDiedAction
-}
+type Options struct { /* all structs must go */ }
 
 // Start starts up the Procfile.
 func Start(contents []byte, opts Options) error {
diff --git a/internal/goreman/log.go b/internal/goreman/log.go
index d3f874a..4491e3e 100644
--- a/internal/goreman/log.go
+++ b/internal/goreman/log.go
@@ -11,14 +11,7 @@ import (
 	ct "github.com/daviddengcn/go-colortext"
 )
 
-type clogger struct {
-	idx     int
-	proc    string
-	writes  chan []byte
-	done    chan struct{}
-	timeout time.Duration // how long to wait before printing partial lines
-	buffers net.Buffers   // partial lines awaiting printing
-}
+type clogger struct { /* all structs must go */ }
 
 var colors = []ct.Color{
 	ct.Green,
diff --git a/internal/gosrc/import_path.go b/internal/gosrc/import_path.go
index 48bab33..d8d5767 100644
--- a/internal/gosrc/import_path.go
+++ b/internal/gosrc/import_path.go
@@ -18,14 +18,7 @@ import (
 // different to runtime.Version for test data.
 var RuntimeVersion = runtime.Version()
 
-type Directory struct {
-	ImportPath  string // the Go import path for this package
-	ProjectRoot string // import path prefix for all packages in the project
-	CloneURL    string // the VCS clone URL
-	RepoPrefix  string // the path to this directory inside the repo, if set
-	VCS         string // one of "git", "hg", "svn", etc.
-	Rev         string // the VCS revision specifier, if any
-}
+type Directory struct { /* all structs must go */ }
 
 var errNoMatch = errors.New("no match")
 
@@ -141,19 +134,10 @@ func resolveDynamicImportPath(client *http.Client, importPath string) (*Director
 // importMeta represents the values in a go-import meta tag.
 //
 // See https://golang.org/cmd/go/#hdr-Remote_import_paths.
-type importMeta struct {
-	prefix string // the import path corresponding to the repository root
-	vcs    string // one of "git", "hg", "svn", etc.
-	repo   string // root of the VCS repo containing a scheme and not containing a .vcs qualifier
-}
+type importMeta struct { /* all structs must go */ }
 
 // sourceMeta represents the values in a go-source meta tag.
-type sourceMeta struct {
-	prefix       string
-	projectURL   string
-	dirTemplate  string
-	fileTemplate string
-}
+type sourceMeta struct { /* all structs must go */ }
 
 func fetchMeta(client *http.Client, importPath string) (scheme string, im *importMeta, sm *sourceMeta, err error) {
 	uri := importPath
diff --git a/internal/gosrc/import_path_test.go b/internal/gosrc/import_path_test.go
index 05cc1ae..e514f71 100644
--- a/internal/gosrc/import_path_test.go
+++ b/internal/gosrc/import_path_test.go
@@ -32,10 +32,7 @@ func (t testTransport) RoundTrip(req *http.Request) (*http.Response, error) {
 }
 
 func TestResolveImportPath(t *testing.T) {
-	tests := []struct {
-		importPath string
-		dir        *Directory
-	}{
+	tests := []struct { /* all structs must go */ }{
 		// static
 		{"fmt", &Directory{
 			ImportPath:  "fmt",
diff --git a/internal/gqltestutil/access_token.go b/internal/gqltestutil/access_token.go
index d5e062e..fdac1b0 100644
--- a/internal/gqltestutil/access_token.go
+++ b/internal/gqltestutil/access_token.go
@@ -19,13 +19,7 @@ mutation CreateAccessToken($user: ID!, $scopes: [String!]!, $note: String!) {
 		"scopes": scopes,
 		"note":   note,
 	}
-	var resp struct {
-		Data struct {
-			CreateAccessToken struct {
-				Token string `json:"token"`
-			} `json:"createAccessToken"`
-		} `json:"data"`
-	}
+	var resp struct { /* all structs must go */ }
 	err := c.GraphQL("", query, variables, &resp)
 	if err != nil {
 		return "", errors.Wrap(err, "request GraphQL")
diff --git a/internal/gqltestutil/client.go b/internal/gqltestutil/client.go
index 3585eb5..0fcacc2 100644
--- a/internal/gqltestutil/client.go
+++ b/internal/gqltestutil/client.go
@@ -90,14 +90,7 @@ func extractCSRFToken(body string) string {
 // Client is an authenticated client for a Sourcegraph user for doing e2e testing.
 // The user may or may not be a site admin depends on how the client is instantiated.
 // It works by simulating how the browser would send HTTP requests to the server.
-type Client struct {
-	baseURL       string
-	csrfToken     string
-	csrfCookie    *http.Cookie
-	sessionCookie *http.Cookie
-
-	userID string
-}
+type Client struct { /* all structs must go */ }
 
 // newClient instantiates a new client by performing a GET request then obtains the
 // CSRF token and cookie from its response.
@@ -196,13 +189,7 @@ func (c *Client) CurrentUserID(token string) (string, error) {
 		}
 	}
 `
-	var resp struct {
-		Data struct {
-			CurrentUser struct {
-				ID string `json:"id"`
-			} `json:"currentUser"`
-		} `json:"data"`
-	}
+	var resp struct { /* all structs must go */ }
 	err := c.GraphQL(token, query, nil, &resp)
 	if err != nil {
 		return "", errors.Wrap(err, "request GraphQL")
@@ -256,11 +243,7 @@ func (c *Client) GraphQL(token, query string, variables map[string]interface{},
 	// Check if the response format should be JSON
 	if strings.Contains(resp.Header.Get("Content-Type"), "application/json") {
 		// Try and see unmarshalling to errors
-		var errResp struct {
-			Errors []struct {
-				Message string `json:"message"`
-			} `json:"errors"`
-		}
+		var errResp struct { /* all structs must go */ }
 		err = jsoniter.Unmarshal(body, &errResp)
 		if err != nil {
 			return errors.Wrap(err, "unmarshal response body to errors")
diff --git a/internal/gqltestutil/external_service.go b/internal/gqltestutil/external_service.go
index a5883bb..479b327 100644
--- a/internal/gqltestutil/external_service.go
+++ b/internal/gqltestutil/external_service.go
@@ -4,11 +4,7 @@ import (
 	"github.com/pkg/errors"
 )
 
-type AddExternalServiceInput struct {
-	Kind        string `json:"kind"`
-	DisplayName string `json:"displayName"`
-	Config      string `json:"config"`
-}
+type AddExternalServiceInput struct { /* all structs must go */ }
 
 // AddExternalService adds a new external service with given input.
 // It returns GraphQL node ID of newly created external service.
@@ -26,14 +22,7 @@ mutation AddExternalService($input: AddExternalServiceInput!) {
 	variables := map[string]interface{}{
 		"input": input,
 	}
-	var resp struct {
-		Data struct {
-			AddExternalService struct {
-				ID      string `json:"id"`
-				Warning string `json:"warning"`
-			} `json:"addExternalService"`
-		} `json:"data"`
-	}
+	var resp struct { /* all structs must go */ }
 	err := c.GraphQL("", query, variables, &resp)
 	if err != nil {
 		return "", errors.Wrap(err, "request GraphQL")
diff --git a/internal/gqltestutil/git_blob.go b/internal/gqltestutil/git_blob.go
index f1c8c68..e7a40be 100644
--- a/internal/gqltestutil/git_blob.go
+++ b/internal/gqltestutil/git_blob.go
@@ -22,17 +22,7 @@ query Blob($repoName: String!, $revision: String!, $filePath: String!) {
 		"revision": revision,
 		"filePath": filePath,
 	}
-	var resp struct {
-		Data struct {
-			Repository struct {
-				Commit struct {
-					File struct {
-						Content string `json:"content"`
-					} `json:"file"`
-				} `json:"commit"`
-			} `json:"repository"`
-		} `json:"data"`
-	}
+	var resp struct { /* all structs must go */ }
 	err := c.GraphQL("", gqlQuery, variables, &resp)
 	if err != nil {
 		return "", errors.Wrap(err, "request GraphQL")
diff --git a/internal/gqltestutil/organization.go b/internal/gqltestutil/organization.go
index 916dbe8..e53b1e5 100644
--- a/internal/gqltestutil/organization.go
+++ b/internal/gqltestutil/organization.go
@@ -18,13 +18,7 @@ mutation CreateOrganization($name: String!, $displayName: String) {
 		"name":        name,
 		"displayName": displayName,
 	}
-	var resp struct {
-		Data struct {
-			CreateOrganization struct {
-				ID string `json:"id"`
-			} `json:"createOrganization"`
-		} `json:"data"`
-	}
+	var resp struct { /* all structs must go */ }
 	err := c.GraphQL("", query, variables, &resp)
 	if err != nil {
 		return "", errors.Wrap(err, "request GraphQL")
diff --git a/internal/gqltestutil/repository.go b/internal/gqltestutil/repository.go
index 711422e..d5dbab4 100644
--- a/internal/gqltestutil/repository.go
+++ b/internal/gqltestutil/repository.go
@@ -21,15 +21,7 @@ query Repositories {
 	}
 }
 `
-		var resp struct {
-			Data struct {
-				Repositories struct {
-					Nodes []struct {
-						Name string `json:"name"`
-					} `json:"nodes"`
-				} `json:"repositories"`
-			} `json:"data"`
-		}
+		var resp struct { /* all structs must go */ }
 		err := c.GraphQL("", query, nil, &resp)
 		if err != nil {
 			return errors.Wrap(err, "request GraphQL")
diff --git a/internal/gqltestutil/search.go b/internal/gqltestutil/search.go
index fccbdc1..f5e60f6 100644
--- a/internal/gqltestutil/search.go
+++ b/internal/gqltestutil/search.go
@@ -4,9 +4,7 @@ import (
 	"github.com/pkg/errors"
 )
 
-type SearchRepositoryResult struct {
-	Name string `json:"name"`
-}
+type SearchRepositoryResult struct { /* all structs must go */ }
 
 type SearchRepositoryResults []*SearchRepositoryResult
 
@@ -46,15 +44,7 @@ query Search($query: String!) {
 	variables := map[string]interface{}{
 		"query": query,
 	}
-	var resp struct {
-		Data struct {
-			Search struct {
-				Results struct {
-					Results []*SearchRepositoryResult `json:"results"`
-				} `json:"results"`
-			} `json:"search"`
-		} `json:"data"`
-	}
+	var resp struct { /* all structs must go */ }
 	err := c.GraphQL("", gqlQuery, variables, &resp)
 	if err != nil {
 		return nil, errors.Wrap(err, "request GraphQL")
@@ -63,20 +53,7 @@ query Search($query: String!) {
 	return resp.Data.Search.Results.Results, nil
 }
 
-type SearchFileResults struct {
-	MatchCount int64 `json:"matchCount"`
-	Results    []*struct {
-		File struct {
-			Name string `json:"name"`
-		} `json:"file"`
-		Repository struct {
-			Name string `json:"name"`
-		} `json:"repository"`
-		RevSpec struct {
-			Expr string `json:"expr"`
-		} `json:"revSpec"`
-	} `json:"results"`
-}
+type SearchFileResults struct { /* all structs must go */ }
 
 // SearchFiles searches files with given query. It returns the match count and
 // corresponding file matches.
@@ -108,15 +85,7 @@ query Search($query: String!) {
 	variables := map[string]interface{}{
 		"query": query,
 	}
-	var resp struct {
-		Data struct {
-			Search struct {
-				Results struct {
-					*SearchFileResults
-				} `json:"results"`
-			} `json:"search"`
-		} `json:"data"`
-	}
+	var resp struct { /* all structs must go */ }
 	err := c.GraphQL("", gqlQuery, variables, &resp)
 	if err != nil {
 		return nil, errors.Wrap(err, "request GraphQL")
@@ -125,12 +94,7 @@ query Search($query: String!) {
 	return resp.Data.Search.Results.SearchFileResults, nil
 }
 
-type SearchCommitResults struct {
-	MatchCount int64 `json:"matchCount"`
-	Results    []*struct {
-		URL string `json:"url"`
-	} `json:"results"`
-}
+type SearchCommitResults struct { /* all structs must go */ }
 
 // SearchCommits searches commits with given query. It returns the match count and
 // corresponding file matches.
@@ -152,15 +116,7 @@ query Search($query: String!) {
 	variables := map[string]interface{}{
 		"query": query,
 	}
-	var resp struct {
-		Data struct {
-			Search struct {
-				Results struct {
-					*SearchCommitResults
-				} `json:"results"`
-			} `json:"search"`
-		} `json:"data"`
-	}
+	var resp struct { /* all structs must go */ }
 	err := c.GraphQL("", gqlQuery, variables, &resp)
 	if err != nil {
 		return nil, errors.Wrap(err, "request GraphQL")
@@ -170,14 +126,7 @@ query Search($query: String!) {
 }
 
 // SearchAlert is an alert specific to searches (i.e. not site alert).
-type SearchAlert struct {
-	Title           string `json:"title"`
-	Description     string `json:"description"`
-	ProposedQueries []struct {
-		Description string `json:"description"`
-		Query       string `json:"query"`
-	} `json:"proposedQueries"`
-}
+type SearchAlert struct { /* all structs must go */ }
 
 // SearchAlert returns the alert returned by searching for given query.
 // It returns both nil values if no alert raised and no error occurred.
@@ -201,15 +150,7 @@ query Search($query: String!) {
 	variables := map[string]interface{}{
 		"query": query,
 	}
-	var resp struct {
-		Data struct {
-			Search struct {
-				Results struct {
-					*SearchAlert `json:"alert"`
-				} `json:"results"`
-			} `json:"search"`
-		} `json:"data"`
-	}
+	var resp struct { /* all structs must go */ }
 	err := c.GraphQL("", gqlQuery, variables, &resp)
 	if err != nil {
 		return nil, errors.Wrap(err, "request GraphQL")
@@ -218,12 +159,7 @@ query Search($query: String!) {
 	return resp.Data.Search.Results.SearchAlert, nil
 }
 
-type SearchStatsResult struct {
-	Languages []struct {
-		Name       string `json:"name"`
-		TotalLines int    `json:"totalLines"`
-	} `json:"languages"`
-}
+type SearchStatsResult struct { /* all structs must go */ }
 
 // SearchStats returns statistics of given query.
 func (c *Client) SearchStats(query string) (*SearchStatsResult, error) {
@@ -242,13 +178,7 @@ query SearchResultsStats($query: String!) {
 	variables := map[string]interface{}{
 		"query": query,
 	}
-	var resp struct {
-		Data struct {
-			Search struct {
-				Stats *SearchStatsResult `json:"stats"`
-			} `json:"search"`
-		} `json:"data"`
-	}
+	var resp struct { /* all structs must go */ }
 	err := c.GraphQL("", gqlQuery, variables, &resp)
 	if err != nil {
 		return nil, errors.Wrap(err, "request GraphQL")
diff --git a/internal/gqltestutil/settings.go b/internal/gqltestutil/settings.go
index 3bbec5d..60330bf 100644
--- a/internal/gqltestutil/settings.go
+++ b/internal/gqltestutil/settings.go
@@ -53,18 +53,7 @@ query ViewerSettings {
 	}
 }
 `
-	var resp struct {
-		Data struct {
-			ViewerSettings struct {
-				Subjects []struct {
-					ID             string `json:"id"`
-					LatestSettings *struct {
-						ID int
-					} `json:"latestSettings"`
-				} `json:"subjects"`
-			} `json:"viewerSettings"`
-		} `json:"data"`
-	}
+	var resp struct { /* all structs must go */ }
 	err := c.GraphQL("", query, nil, &resp)
 	if err != nil {
 		return 0, errors.Wrap(err, "request GraphQL")
@@ -94,13 +83,7 @@ query ViewerSettings {
 	}
 }
 `
-	var resp struct {
-		Data struct {
-			ViewerSettings struct {
-				Final string `json:"final"`
-			} `json:"viewerSettings"`
-		} `json:"data"`
-	}
+	var resp struct { /* all structs must go */ }
 	err := c.GraphQL("", query, nil, &resp)
 	if err != nil {
 		return "", errors.Wrap(err, "request GraphQL")
@@ -122,15 +105,7 @@ query Site {
 }
 `
 
-	var resp struct {
-		Data struct {
-			Site struct {
-				Configuration struct {
-					EffectiveContents string `json:"effectiveContents"`
-				} `json:"configuration"`
-			} `json:"site"`
-		} `json:"data"`
-	}
+	var resp struct { /* all structs must go */ }
 	err := c.GraphQL("", query, nil, &resp)
 	if err != nil {
 		return nil, errors.Wrap(err, "request GraphQL")
diff --git a/internal/gqltestutil/user.go b/internal/gqltestutil/user.go
index 2289843..8f16437 100644
--- a/internal/gqltestutil/user.go
+++ b/internal/gqltestutil/user.go
@@ -22,15 +22,7 @@ mutation CreateUser($username: String!, $email: String) {
 		"username": username,
 		"email":    email,
 	}
-	var resp struct {
-		Data struct {
-			CreateUser struct {
-				User struct {
-					ID string `json:"id"`
-				} `json:"user"`
-			} `json:"createUser"`
-		} `json:"data"`
-	}
+	var resp struct { /* all structs must go */ }
 	err := c.GraphQL("", query, variables, &resp)
 	if err != nil {
 		return "", errors.Wrap(err, "request GraphQL")
@@ -77,17 +69,7 @@ query User($username: String) {
 	variables := map[string]interface{}{
 		"username": username,
 	}
-	var resp struct {
-		Data struct {
-			User struct {
-				Organizations struct {
-					Nodes []struct {
-						Name string `json:"name"`
-					} `json:"nodes"`
-				} `json:"organizations"`
-			} `json:"user"`
-		} `json:"data"`
-	}
+	var resp struct { /* all structs must go */ }
 	err := c.GraphQL("", query, variables, &resp)
 	if err != nil {
 		return nil, errors.Wrap(err, "request GraphQL")
diff --git a/internal/highlight/highlight.go b/internal/highlight/highlight.go
index e0f26f5..a6197ea 100644
--- a/internal/highlight/highlight.go
+++ b/internal/highlight/highlight.go
@@ -45,35 +45,7 @@ func IsBinary(content []byte) bool {
 
 // Params defines mandatory and optional parameters to use when highlighting
 // code.
-type Params struct {
-	// Content is the file content.
-	Content []byte
-
-	// Filepath is used to detect the language, it must contain at least the
-	// file name + extension.
-	Filepath string
-
-	// DisableTimeout indicates whether or not a user has requested to wait as
-	// long as needed to get highlighted results (this should never be on by
-	// default, as some files can take a very long time to highlight).
-	DisableTimeout bool
-
-	// Whether or not the light theme should be used to highlight the code.
-	IsLightTheme bool
-
-	// HighlightLongLines, if true, highlighting lines which are greater than
-	// 2000 bytes is enabled. This may produce a significant amount of HTML
-	// which some browsers (such as Chrome, but not Firefox) may have trouble
-	// rendering efficiently.
-	HighlightLongLines bool
-
-	// Whether or not to simulate the syntax highlighter taking too long to
-	// respond.
-	SimulateTimeout bool
-
-	// Metadata provides optional metadata about the code we're highlighting.
-	Metadata Metadata
-}
+type Params struct { /* all structs must go */ }
 
 // Metadata contains metadata about a request to highlight code. It is used to
 // ensure that when syntax highlighting takes a long time or errors out, we
@@ -81,10 +53,7 @@ type Params struct {
 // trying to highlight was.
 //
 // All fields are optional.
-type Metadata struct {
-	RepoName string
-	Revision string
-}
+type Metadata struct { /* all structs must go */ }
 
 // ErrBinary is returned when a binary file was attempted to be highlighted.
 var ErrBinary = errors.New("cannot render binary file")
diff --git a/internal/highlight/mocks.go b/internal/highlight/mocks.go
index 2930b85..07e5e04 100644
--- a/internal/highlight/mocks.go
+++ b/internal/highlight/mocks.go
@@ -8,9 +8,7 @@ import (
 // mocks are not (inadvertently) used by subsequent tests.
 //
 // (The emptyMocks is used by ResetMocks to zero out Mocks without needing to use a named type.)
-var Mocks, emptyMocks struct {
-	Code func(p Params) (h template.HTML, aborted bool, err error)
-}
+var Mocks, emptyMocks struct { /* all structs must go */ }
 
 // ResetMocks clears the mock functions set on Mocks (so that subsequent tests don't inadvertently
 // use them).
diff --git a/internal/httpcli/client.go b/internal/httpcli/client.go
index 3a9c756..121b1ba 100644
--- a/internal/httpcli/client.go
+++ b/internal/httpcli/client.go
@@ -52,10 +52,7 @@ type Opt func(*http.Client) error
 // A Factory constructs an http.Client with the given functional
 // options applied, returning an aggregate error of the errors returned by
 // all those options.
-type Factory struct {
-	stack  Middleware
-	common []Opt
-}
+type Factory struct { /* all structs must go */ }
 
 // NewExternalHTTPClientFactory returns an httpcli.Factory with common options
 // and middleware pre-set for communicating to external services.
diff --git a/internal/httpcli/client_test.go b/internal/httpcli/client_test.go
index 70f3291..2aef312 100644
--- a/internal/httpcli/client_test.go
+++ b/internal/httpcli/client_test.go
@@ -23,12 +23,7 @@ import (
 
 func TestHeadersMiddleware(t *testing.T) {
 	headers := []string{"X-Foo", "bar", "X-Bar", "foo"}
-	for _, tc := range []struct {
-		name    string
-		cli     Doer
-		headers []string
-		err     string
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{
 			name:    "odd number of headers panics",
 			headers: headers[:1],
@@ -81,12 +76,7 @@ func TestContextErrorMiddleware(t *testing.T) {
 	cancelled, cancel := context.WithCancel(context.Background())
 	cancel()
 
-	for _, tc := range []struct {
-		name string
-		cli  Doer
-		ctx  context.Context
-		err  string
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{
 			name: "no context error, no doer error",
 			cli:  newFakeClient(http.StatusOK, nil, nil),
@@ -161,13 +151,7 @@ func TestNewCertPool(t *testing.T) {
 		t.Fatal(err)
 	}
 
-	for _, tc := range []struct {
-		name   string
-		certs  []string
-		cli    *http.Client
-		assert func(testing.TB, *http.Client)
-		err    string
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{
 			name:  "fails if transport isn't an http.Transport",
 			cli:   &http.Client{Transport: bogusTransport{}},
@@ -210,13 +194,7 @@ func TestNewCertPool(t *testing.T) {
 
 func TestNewIdleConnTimeoutOpt(t *testing.T) {
 	timeout := 33 * time.Second
-	for _, tc := range []struct {
-		name    string
-		cli     *http.Client
-		timeout time.Duration
-		assert  func(testing.TB, *http.Client)
-		err     string
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{
 			name: "sets default transport if nil",
 			cli:  &http.Client{},
diff --git a/internal/httpcli/external.go b/internal/httpcli/external.go
index e92d519..da03904 100644
--- a/internal/httpcli/external.go
+++ b/internal/httpcli/external.go
@@ -11,13 +11,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/schema"
 )
 
-type externalTransport struct {
-	base *http.Transport
-
-	mu        sync.RWMutex
-	config    *schema.TlsExternal
-	effective *http.Transport
-}
+type externalTransport struct { /* all structs must go */ }
 
 func (t *externalTransport) RoundTrip(r *http.Request) (*http.Response, error) {
 	t.mu.RLock()
diff --git a/internal/httptestutil/client.go b/internal/httptestutil/client.go
index 45fb0fe..cc8f656 100644
--- a/internal/httptestutil/client.go
+++ b/internal/httptestutil/client.go
@@ -18,9 +18,7 @@ func NewTest(h http.Handler) *Client {
 	return &Client{http.Client{Transport: handlerTransport{h}}}
 }
 
-type handlerTransport struct {
-	http.Handler
-}
+type handlerTransport struct { /* all structs must go */ }
 
 func (t handlerTransport) RoundTrip(req *http.Request) (*http.Response, error) {
 	rw := httptest.NewRecorder()
diff --git a/internal/httputil/cache_control_transport.go b/internal/httputil/cache_control_transport.go
index addde20..b12dc1b 100644
--- a/internal/httputil/cache_control_transport.go
+++ b/internal/httputil/cache_control_transport.go
@@ -17,24 +17,7 @@ import (
 // assuming that all cache entries are fresh within the lifetime of CacheControlTransport.
 // For this reason, CacheControlTransport should not outlive the lifetime of a single
 // end-user request.
-type CacheControlTransport struct {
-	// Transport is the base transport that CacheControlTransport forwards requests to
-	// after setting the Cache-Control header.
-	Transport http.RoundTripper
-
-	// The Cache-Control header to set on requests.
-	CacheControl string
-
-	// ShouldForwardCacheControl returns whether the Cache-Control header should be set on
-	// a given request. This function should be stateless. Setting this to nil is
-	// equivalent to setting a function that always returns true.
-	ShouldSetCacheControl func(req *http.Request) bool
-
-	// prevGets records previously seen GET request URLs.
-	prevGets map[string]bool
-
-	lock sync.Mutex // protects prevGets
-}
+type CacheControlTransport struct { /* all structs must go */ }
 
 func NewCacheControlTransport(cacheControl string, baseTransport http.RoundTripper, shouldSetCacheControl func(req *http.Request) bool) *CacheControlTransport {
 	return &CacheControlTransport{
diff --git a/internal/httputil/cache_control_transport_test.go b/internal/httputil/cache_control_transport_test.go
index 7231b26..6e6990b 100644
--- a/internal/httputil/cache_control_transport_test.go
+++ b/internal/httputil/cache_control_transport_test.go
@@ -6,9 +6,7 @@ import (
 	"testing"
 )
 
-type recorderTransport struct {
-	req *http.Request
-}
+type recorderTransport struct { /* all structs must go */ }
 
 func (t *recorderTransport) RoundTrip(req *http.Request) (*http.Response, error) {
 	t.req = req
diff --git a/internal/httputil/logged_transport.go b/internal/httputil/logged_transport.go
index 38b5ff8..20f6839 100644
--- a/internal/httputil/logged_transport.go
+++ b/internal/httputil/logged_transport.go
@@ -21,10 +21,7 @@ func init() {
 }
 
 // A LoggedTransport prints URLs and timings for each HTTP request.
-type LoggedTransport struct {
-	io.Writer                   // destination of output
-	Transport http.RoundTripper // underlying transport (or default if nil)
-}
+type LoggedTransport struct { /* all structs must go */ }
 
 func (t *LoggedTransport) RoundTrip(req *http.Request) (*http.Response, error) {
 	var u http.RoundTripper
diff --git a/internal/httputil/respbuf.go b/internal/httputil/respbuf.go
index f2e659a..2286711 100644
--- a/internal/httputil/respbuf.go
+++ b/internal/httputil/respbuf.go
@@ -5,11 +5,7 @@ import (
 	"net/http"
 )
 
-type ResponseBuffer struct {
-	buf    bytes.Buffer
-	Status int
-	header http.Header
-}
+type ResponseBuffer struct { /* all structs must go */ }
 
 func (rb *ResponseBuffer) Write(p []byte) (int, error) {
 	return rb.buf.Write(p)
diff --git a/internal/hubspot/contacts.go b/internal/hubspot/contacts.go
index 393369a..28d110d 100644
--- a/internal/hubspot/contacts.go
+++ b/internal/hubspot/contacts.go
@@ -36,18 +36,11 @@ func (c *Client) baseContactURL(email string) *url.URL {
 }
 
 // ContactProperties represent HubSpot user properties
-type ContactProperties struct {
-	UserID        string `json:"user_id"`
-	IsServerAdmin bool   `json:"is_server_admin"`
-	LatestPing    int64  `json:"latest_ping"`
-}
+type ContactProperties struct { /* all structs must go */ }
 
 // ContactResponse represents HubSpot user properties returned
 // after a CreateOrUpdate API call
-type ContactResponse struct {
-	VID   int32 `json:"vid"`
-	IsNew bool  `json:"isNew"`
-}
+type ContactResponse struct { /* all structs must go */ }
 
 // newAPIValues converts a ContactProperties struct to a HubSpot API-compliant
 // array of key-value pairs
@@ -60,14 +53,9 @@ func newAPIValues(h *ContactProperties) *apiProperties {
 }
 
 // apiProperties represents a list of HubSpot API-compliant key-value pairs
-type apiProperties struct {
-	Properties []*apiProperty `json:"properties"`
-}
+type apiProperties struct { /* all structs must go */ }
 
-type apiProperty struct {
-	Property string `json:"property"`
-	Value    string `json:"value"`
-}
+type apiProperty struct { /* all structs must go */ }
 
 func (h *apiProperties) set(property string, value interface{}) {
 	if h.Properties == nil {
diff --git a/internal/hubspot/hubspot.go b/internal/hubspot/hubspot.go
index 2d7a5de..d4070e9 100644
--- a/internal/hubspot/hubspot.go
+++ b/internal/hubspot/hubspot.go
@@ -17,10 +17,7 @@ import (
 )
 
 // Client is a HubSpot API client
-type Client struct {
-	portalID string
-	hapiKey  string
-}
+type Client struct { /* all structs must go */ }
 
 // New returns a new HubSpot client using the given Portal ID.
 func New(portalID, hapiKey string) *Client {
diff --git a/internal/lazyregexp/lazyre.go b/internal/lazyregexp/lazyre.go
index 5f20a3f..50495b4 100644
--- a/internal/lazyregexp/lazyre.go
+++ b/internal/lazyregexp/lazyre.go
@@ -15,12 +15,7 @@ import (
 
 // Regexp is a wrapper around regexp.Regexp, where the underlying regexp will be
 // compiled the first time it is needed.
-type Regexp struct {
-	str   string
-	posix bool
-	once  sync.Once
-	rx    *regexp.Regexp
-}
+type Regexp struct { /* all structs must go */ }
 
 func (r *Regexp) re() *regexp.Regexp {
 	r.once.Do(r.build)
diff --git a/internal/leader/leader.go b/internal/leader/leader.go
index eafb859..5879cf7 100644
--- a/internal/leader/leader.go
+++ b/internal/leader/leader.go
@@ -12,12 +12,7 @@ const (
 	defaultAcquireInterval = 30 * time.Second
 )
 
-type Options struct {
-	// AcquireInterval defines how frequently we should attempt to acquire
-	// leadership when not the leader.
-	AcquireInterval time.Duration
-	MutexOptions    rcache.MutexOptions
-}
+type Options struct { /* all structs must go */ }
 
 // Do will ensure that only one instance of workFn is running globally per key at any point using a mutex
 // stored in Redis.
diff --git a/internal/metrics/metrics.go b/internal/metrics/metrics.go
index 8a68e4a..70ac3ce 100644
--- a/internal/metrics/metrics.go
+++ b/internal/metrics/metrics.go
@@ -26,11 +26,7 @@ var registerer = prometheus.DefaultRegisterer
 
 // RequestMeter wraps a Prometheus request meter (counter + duration histogram) updated by requests made by derived
 // http.RoundTrippers.
-type RequestMeter struct {
-	counter   *prometheus.CounterVec
-	duration  *prometheus.HistogramVec
-	subsystem string
-}
+type RequestMeter struct { /* all structs must go */ }
 
 // NewRequestMeter creates a new request meter.
 func NewRequestMeter(subsystem, help string) *RequestMeter {
@@ -78,12 +74,7 @@ func (rm *RequestMeter) Doer(cli httpcli.Doer, categoryFunc func(*url.URL) strin
 	}
 }
 
-type requestCounterMiddleware struct {
-	meter        *RequestMeter
-	cli          httpcli.Doer
-	transport    http.RoundTripper
-	categoryFunc func(*url.URL) string
-}
+type requestCounterMiddleware struct { /* all structs must go */ }
 
 func (t *requestCounterMiddleware) RoundTrip(r *http.Request) (resp *http.Response, err error) {
 	start := time.Now()
diff --git a/internal/metrics/operation.go b/internal/metrics/operation.go
index 278ca93..1213f79 100644
--- a/internal/metrics/operation.go
+++ b/internal/metrics/operation.go
@@ -8,11 +8,7 @@ import (
 )
 
 // OperationMetrics contains three common metrics for any operation.
-type OperationMetrics struct {
-	Duration *prometheus.HistogramVec // How long did it take?
-	Count    *prometheus.CounterVec   // How many things were processed?
-	Errors   *prometheus.CounterVec   // How many errors occurred?
-}
+type OperationMetrics struct { /* all structs must go */ }
 
 // Observe registers an observation of a single operation.
 func (m *OperationMetrics) Observe(secs, count float64, err *error, lvals ...string) {
@@ -27,13 +23,7 @@ func (m *OperationMetrics) Observe(secs, count float64, err *error, lvals ...str
 	}
 }
 
-type operationMetricOptions struct {
-	subsystem    string
-	durationHelp string
-	countHelp    string
-	errorsHelp   string
-	labels       []string
-}
+type operationMetricOptions struct { /* all structs must go */ }
 
 // OperationMetricsOption alter the default behavior of NewOperationMetrics.
 type OperationMetricsOption func(o *operationMetricOptions)
@@ -120,10 +110,7 @@ func NewOperationMetrics(r prometheus.Registerer, metricPrefix string, fns ...Op
 	}
 }
 
-type SingletonOperationMetrics struct {
-	sync.Once
-	metrics *OperationMetrics
-}
+type SingletonOperationMetrics struct { /* all structs must go */ }
 
 // SingletonOperationMetrics returns an operation metrics instance. If no instance has been
 // created yet, one is constructed with the given create function. This method is safe to
diff --git a/internal/mutablelimiter/limiter.go b/internal/mutablelimiter/limiter.go
index 5080bc8..1b489fb 100644
--- a/internal/mutablelimiter/limiter.go
+++ b/internal/mutablelimiter/limiter.go
@@ -15,21 +15,11 @@ import (
 // Note: Each Limiter has an associated goroutine managing the semaphore
 // state. We do not expose a way to stop this goroutine, so ensure the number
 // of Limiters created is bounded.
-type Limiter struct {
-	adjustLimit chan int
-	acquire     chan acquireRequest
-	getLimit    chan struct{ cap, len int }
-}
+type Limiter struct { /* all structs must go */ }
 
-type acquireResponse struct {
-	ctx    context.Context
-	cancel context.CancelFunc
-}
+type acquireResponse struct { /* all structs must go */ }
 
-type acquireRequest struct {
-	ctx  context.Context
-	resp chan<- acquireResponse
-}
+type acquireRequest struct { /* all structs must go */ }
 
 // New returns a new Limiter (Semaphore).
 func New(limit int) *Limiter {
diff --git a/internal/observation/observation.go b/internal/observation/observation.go
index 1eede59..aa29a72 100644
--- a/internal/observation/observation.go
+++ b/internal/observation/observation.go
@@ -65,27 +65,13 @@ import (
 // Context carries context about where to send logs, trace spans, and register
 // metrics. It should be created once on service startup, and passed around to
 // any location that wants to use it for observing operations.
-type Context struct {
-	Logger     logging.ErrorLogger
-	Tracer     *trace.Tracer
-	Registerer prometheus.Registerer
-}
+type Context struct { /* all structs must go */ }
 
 // TestContext is a behaviorless Context usable for unit tests.
 var TestContext = Context{Registerer: metrics.TestRegisterer}
 
 // Op configures an Operation instance.
-type Op struct {
-	Metrics *metrics.OperationMetrics
-	// Name configures the trace and error log names. This string should be of the
-	// format {GroupName}.{OperationName}, where both sections are title cased
-	// (e.g. Store.GetRepoByID).
-	Name string
-	// MetricLabels that apply for every invocation of this operation.
-	MetricLabels []string
-	// LogFields that apply for for every invocation of this operation.
-	LogFields []log.Field
-}
+type Op struct { /* all structs must go */ }
 
 // Operation combines the state of the parent context to create a new operation. This value
 // should be owned and used by the code that performs the operation it represents.
@@ -101,26 +87,14 @@ func (c *Context) Operation(args Op) *Operation {
 }
 
 // Operation represents an interesting section of code that can be invoked.
-type Operation struct {
-	context      *Context
-	metrics      *metrics.OperationMetrics
-	name         string
-	kebabName    string
-	metricLabels []string
-	logFields    []log.Field
-}
+type Operation struct { /* all structs must go */ }
 
 // FinishFunc is the shape of the function returned by With and should be invoked within
 // a defer directly before the observed function returns.
 type FinishFunc func(count float64, args Args)
 
 // Args configures the observation behavior of an invocation of an operation.
-type Args struct {
-	// MetricLabels that apply only to this invocation of the operation.
-	MetricLabels []string
-	// LogFields that apply only to this invocation of the operation.
-	LogFields []log.Field
-}
+type Args struct { /* all structs must go */ }
 
 // With prepares the necessary timers, loggers, and metrics to observe the invocation of
 // an operation.
diff --git a/internal/pathmatch/pathmatch.go b/internal/pathmatch/pathmatch.go
index 6dd38bf..39199e0 100644
--- a/internal/pathmatch/pathmatch.go
+++ b/internal/pathmatch/pathmatch.go
@@ -19,10 +19,7 @@ type PathMatcher interface {
 	String() string
 }
 
-type pathMatcherFunc struct {
-	matcher func(path string) bool
-	pattern string
-}
+type pathMatcherFunc struct { /* all structs must go */ }
 
 func (f *pathMatcherFunc) MatchPath(path string) bool { return f.matcher(path) }
 
@@ -42,10 +39,7 @@ func (m *regexpMatcher) String() string {
 }
 
 // CompileOptions specifies options about the patterns to compile.
-type CompileOptions struct {
-	RegExp        bool // whether the patterns are regular expressions (false means globs)
-	CaseSensitive bool // whether the patterns are case sensitive
-}
+type CompileOptions struct { /* all structs must go */ }
 
 // CompilePattern compiles pattern into a PathMatcher func.
 func CompilePattern(pattern string, options CompileOptions) (PathMatcher, error) {
@@ -132,10 +126,7 @@ func CompilePatterns(patterns []string, options CompileOptions) (PathMatcher, er
 
 // pathMatcherIncludeExclude is a PathMatcher that matches a path iff it matches
 // the include matcher AND it does not match the exclude matcher.
-type pathMatcherIncludeExclude struct {
-	include PathMatcher
-	exclude PathMatcher
-}
+type pathMatcherIncludeExclude struct { /* all structs must go */ }
 
 func (pm pathMatcherIncludeExclude) MatchPath(path string) bool {
 	include := pm.include == nil || pm.include.MatchPath(path)
diff --git a/internal/pathmatch/pathmatch_test.go b/internal/pathmatch/pathmatch_test.go
index f892bbe..fbe580c 100644
--- a/internal/pathmatch/pathmatch_test.go
+++ b/internal/pathmatch/pathmatch_test.go
@@ -3,12 +3,7 @@ package pathmatch
 import "testing"
 
 func TestCompilePattern(t *testing.T) {
-	tests := []struct {
-		pattern string
-		options CompileOptions
-		want    map[string]bool
-		wantErr bool
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			pattern: `README.md`,
 			options: CompileOptions{},
diff --git a/internal/prefixsuffixsaver/prefixSuffixSaver.go b/internal/prefixsuffixsaver/prefixSuffixSaver.go
index 773d5a1..10dff0b 100644
--- a/internal/prefixsuffixsaver/prefixSuffixSaver.go
+++ b/internal/prefixsuffixsaver/prefixSuffixSaver.go
@@ -10,19 +10,7 @@ import (
 // Writer is an io.Writer which retains the first N bytes
 // and the last N bytes written to it. The Bytes() methods reconstructs
 // it with a pretty error message.
-type Writer struct {
-	N         int // max size of prefix or suffix
-	prefix    []byte
-	suffix    []byte // ring buffer once len(suffix) == N
-	suffixOff int    // offset to write into suffix
-	skipped   int64
-
-	// TODO(bradfitz): we could keep one large []byte and use part of it for
-	// the prefix, reserve space for the '... Omitting N bytes ...' message,
-	// then the ring buffer suffix, and just rearrange the ring buffer
-	// suffix when Bytes() is called, but it doesn't seem worth it for
-	// now just for error messages. It's only ~64KB anyway.
-}
+type Writer struct { /* all structs must go */ }
 
 func (w *Writer) Write(p []byte) (n int, err error) {
 	lenp := len(p)
diff --git a/internal/prometheusutil/prometheus_mock.go b/internal/prometheusutil/prometheus_mock.go
index 0318a8d..672c3d9 100644
--- a/internal/prometheusutil/prometheus_mock.go
+++ b/internal/prometheusutil/prometheus_mock.go
@@ -13,11 +13,7 @@ import (
 // interface (from the package
 // github.com/sourcegraph/sourcegraph/internal/prometheusutil) used for unit
 // testing.
-type MockPrometheusQuerier struct {
-	// QueryRangeFunc is an instance of a mock function object controlling
-	// the behavior of the method QueryRange.
-	QueryRangeFunc *PrometheusQuerierQueryRangeFunc
-}
+type MockPrometheusQuerier struct { /* all structs must go */ }
 
 // NewMockPrometheusQuerier creates a new mock of the PrometheusQuerier
 // interface. All methods return zero values for all results, unless
@@ -46,12 +42,7 @@ func NewMockPrometheusQuerierFrom(i PrometheusQuerier) *MockPrometheusQuerier {
 // PrometheusQuerierQueryRangeFunc describes the behavior when the
 // QueryRange method of the parent MockPrometheusQuerier instance is
 // invoked.
-type PrometheusQuerierQueryRangeFunc struct {
-	defaultHook func(context.Context, string, v1.Range) (model.Value, v1.Warnings, error)
-	hooks       []func(context.Context, string, v1.Range) (model.Value, v1.Warnings, error)
-	history     []PrometheusQuerierQueryRangeFuncCall
-	mutex       sync.Mutex
-}
+type PrometheusQuerierQueryRangeFunc struct { /* all structs must go */ }
 
 // QueryRange delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -126,26 +117,7 @@ func (f *PrometheusQuerierQueryRangeFunc) History() []PrometheusQuerierQueryRang
 
 // PrometheusQuerierQueryRangeFuncCall is an object that describes an
 // invocation of method QueryRange on an instance of MockPrometheusQuerier.
-type PrometheusQuerierQueryRangeFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 string
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 v1.Range
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 model.Value
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 v1.Warnings
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type PrometheusQuerierQueryRangeFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
diff --git a/internal/ratelimit/rate_limit.go b/internal/ratelimit/rate_limit.go
index 1515d46..7efb814 100644
--- a/internal/ratelimit/rate_limit.go
+++ b/internal/ratelimit/rate_limit.go
@@ -15,18 +15,7 @@ import (
 // headers. It supports both GitHub's and GitLab's APIs.
 //
 // It is intended to be embedded in an API client struct.
-type Monitor struct {
-	HeaderPrefix string // "X-" (GitHub) or "" (GitLab)
-
-	mu        sync.Mutex
-	known     bool
-	limit     int       // last RateLimit-Limit HTTP response header value
-	remaining int       // last RateLimit-Remaining HTTP response header value
-	reset     time.Time // last RateLimit-Remaining HTTP response header value
-	retry     time.Time // deadline based on Retry-After HTTP response header value
-
-	clock func() time.Time
-}
+type Monitor struct { /* all structs must go */ }
 
 // Get reports the client's rate limit status (as of the last API response it received).
 func (c *Monitor) Get() (remaining int, reset, retry time.Duration, known bool) {
@@ -163,12 +152,7 @@ func NewRegistry() *Registry {
 
 // Registry keeps a mapping of external service URL to *rate.Limiter.
 // By default an infinite limiter is returned.
-type Registry struct {
-	mu sync.Mutex
-	// Rate limiter per code host, keys are the normalized base URL for a
-	// code host.
-	rateLimiters map[string]*rate.Limiter
-}
+type Registry struct { /* all structs must go */ }
 
 // normaliseURL will attempt to normalise rawURL.
 // If there is an error parsing it, we'll just return rawURL lower cased.
diff --git a/internal/ratelimit/rate_limit_test.go b/internal/ratelimit/rate_limit_test.go
index 2542776..89498cb 100644
--- a/internal/ratelimit/rate_limit_test.go
+++ b/internal/ratelimit/rate_limit_test.go
@@ -58,11 +58,7 @@ func TestMonitor_RecommendedWaitForBackgroundOp(t *testing.T) {
 
 func TestMonitor_RecommendedWaitForBackgroundOp_RetryAfter(t *testing.T) {
 	now := time.Now()
-	for _, tc := range []struct {
-		retry time.Time
-		now   time.Time
-		wait  time.Duration
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		// 30 seconds remaining from now until retry
 		{now.Add(30 * time.Second), now, 30 * time.Second},
 		// 0 seconds remaining from now until retry
@@ -95,12 +91,7 @@ func TestMonitor_Update(t *testing.T) {
 			a.retry.Equal(b.retry)
 	}
 
-	for _, tc := range []struct {
-		name   string
-		before *Monitor
-		h      http.Header
-		after  *Monitor
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{
 			name:   "Retry-After header sets retry deadline",
 			before: &Monitor{clock: clock},
diff --git a/internal/rcache/mutex.go b/internal/rcache/mutex.go
index 4f96699..9a8a792 100644
--- a/internal/rcache/mutex.go
+++ b/internal/rcache/mutex.go
@@ -19,16 +19,7 @@ const (
 
 // MutexOptions hold options passed to TryAcquireMutex. It is safe to
 // pass zero values in which case defaults will be used instead.
-type MutexOptions struct {
-	// Expiry sets how long a lock should be held. Under normal
-	// operation it will be extended on an interval of (Expiry / 2)
-	Expiry time.Duration
-	// Tries is how many tries we have before we give up acquiring a
-	// lock.
-	Tries int
-	// RetryDelay is how long to sleep between attempts to lock
-	RetryDelay time.Duration
-}
+type MutexOptions struct { /* all structs must go */ }
 
 // TryAcquireMutex tries to Lock a distributed mutex. If the mutex is already
 // locked, it will return `ctx, nil, false`. Otherwise it returns `ctx,
diff --git a/internal/rcache/rcache.go b/internal/rcache/rcache.go
index 3fdd415..957aa33 100644
--- a/internal/rcache/rcache.go
+++ b/internal/rcache/rcache.go
@@ -27,10 +27,7 @@ func DeleteOldCacheData(c redis.Conn) error {
 }
 
 // Cache implements httpcache.Cache
-type Cache struct {
-	keyPrefix  string
-	ttlSeconds int
-}
+type Cache struct { /* all structs must go */ }
 
 // New creates a redis backed Cache
 func New(keyPrefix string) *Cache {
diff --git a/internal/rcache/rcache_test.go b/internal/rcache/rcache_test.go
index 20ddbd9..891c0ee 100644
--- a/internal/rcache/rcache_test.go
+++ b/internal/rcache/rcache_test.go
@@ -8,10 +8,7 @@ import (
 func TestCache_namespace(t *testing.T) {
 	SetupForTest(t)
 
-	type testcase struct {
-		prefix  string
-		entries map[string]string
-	}
+	type testcase struct { /* all structs must go */ }
 
 	cases := []testcase{
 		{
diff --git a/internal/redispool/redispool_test.go b/internal/redispool/redispool_test.go
index ba75ed2..2259fb4 100644
--- a/internal/redispool/redispool_test.go
+++ b/internal/redispool/redispool_test.go
@@ -3,10 +3,7 @@ package redispool
 import "testing"
 
 func TestSchemeMatcher(t *testing.T) {
-	tests := []struct {
-		urlMaybe  string
-		hasScheme bool
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{"redis://foo.com", true},
 		{"https://foo.com", true},
 		{"redis://:password@foo.com/0", true},
diff --git a/internal/registry/types.go b/internal/registry/types.go
index dafd435..b3dda6f 100644
--- a/internal/registry/types.go
+++ b/internal/registry/types.go
@@ -8,24 +8,7 @@ import "time"
 // github.com/sourcegraph/sourcegraph/cmd/frontend/types.RegistryExtension (which is the
 // internal DB type). These types should generally be kept in sync, but registry.Extension updates
 // require backcompat.
-type Extension struct {
-	UUID        string    `json:"uuid"`
-	ExtensionID string    `json:"extensionID"`
-	Publisher   Publisher `json:"publisher"`
-	Name        string    `json:"name"`
-	Manifest    *string   `json:"manifest"`
-	CreatedAt   time.Time `json:"createdAt"`
-	UpdatedAt   time.Time `json:"updatedAt"`
-	PublishedAt time.Time `json:"publishedAt"`
-	URL         string    `json:"url"`
-
-	// RegistryURL is the URL of the remote registry that this extension was retrieved from. It is
-	// not set by package registry.
-	RegistryURL string `json:"-"`
-}
+type Extension struct { /* all structs must go */ }
 
 // Publisher describes a publisher in the extension registry.
-type Publisher struct {
-	Name string `json:"name"`
-	URL  string `json:"url"`
-}
+type Publisher struct { /* all structs must go */ }
diff --git a/internal/repotrackutil/repouri_test.go b/internal/repotrackutil/repouri_test.go
index 8017e62..4565abc 100644
--- a/internal/repotrackutil/repouri_test.go
+++ b/internal/repotrackutil/repouri_test.go
@@ -7,10 +7,7 @@ import (
 )
 
 func TestGetTrackedRepo(t *testing.T) {
-	cases := []struct {
-		Path        api.RepoName
-		TrackedRepo string
-	}{
+	cases := []struct { /* all structs must go */ }{
 		// Top-level view
 		{"/github.com/kubernetes/kubernetes", "github.com/kubernetes/kubernetes"},
 		// Code view
diff --git a/internal/repoupdater/client.go b/internal/repoupdater/client.go
index 8f1f072..90df18c 100644
--- a/internal/repoupdater/client.go
+++ b/internal/repoupdater/client.go
@@ -44,13 +44,7 @@ var DefaultClient = &Client{
 }
 
 // Client is a repoupdater client.
-type Client struct {
-	// URL to repoupdater server.
-	URL string
-
-	// HTTP client to use
-	HTTPClient *http.Client
-}
+type Client struct { /* all structs must go */ }
 
 // RepoUpdateSchedulerInfo returns information about the state of the repo in the update scheduler.
 func (c *Client) RepoUpdateSchedulerInfo(ctx context.Context, args protocol.RepoUpdateSchedulerInfoArgs) (result *protocol.RepoUpdateSchedulerInfoResult, err error) {
@@ -129,14 +123,7 @@ func (c *Client) RepoLookup(ctx context.Context, args protocol.RepoLookupArgs) (
 
 // Repo represents a repository on gitserver. It contains the information necessary to identify and
 // create/clone it.
-type Repo struct {
-	Name api.RepoName // the repository's URI
-
-	// URL is the repository's Git remote URL. If the gitserver already has cloned the repository,
-	// this field is optional (it will use the last-used Git remote URL). If the repository is not
-	// cloned on the gitserver, the request will fail.
-	URL string
-}
+type Repo struct { /* all structs must go */ }
 
 // MockEnqueueRepoUpdate mocks (*Client).EnqueueRepoUpdate for tests.
 var MockEnqueueRepoUpdate func(ctx context.Context, repo gitserver.Repo) (*protocol.RepoUpdateResponse, error)
diff --git a/internal/repoupdater/errors.go b/internal/repoupdater/errors.go
index c32e1f0..f1c7ec4 100644
--- a/internal/repoupdater/errors.go
+++ b/internal/repoupdater/errors.go
@@ -7,10 +7,7 @@ import (
 )
 
 // ErrNotFound is an error that occurs when a Repo doesn't exist.
-type ErrNotFound struct {
-	Repo       api.RepoName
-	IsNotFound bool
-}
+type ErrNotFound struct { /* all structs must go */ }
 
 // ErrNotFound returns true if the repo does Not exist.
 func (e *ErrNotFound) NotFound() bool {
@@ -23,10 +20,7 @@ func (e *ErrNotFound) Error() string {
 
 // ErrUnauthorized is an error that occurs when repo access is
 // unauthorized.
-type ErrUnauthorized struct {
-	Repo    api.RepoName
-	NoAuthz bool
-}
+type ErrUnauthorized struct { /* all structs must go */ }
 
 // Unauthorized returns true if repo access is unauthorized.
 func (e *ErrUnauthorized) Unauthorized() bool {
@@ -38,10 +32,7 @@ func (e *ErrUnauthorized) Error() string {
 }
 
 // ErrTemporary is an error that can be retried
-type ErrTemporary struct {
-	Repo        api.RepoName
-	IsTemporary bool
-}
+type ErrTemporary struct { /* all structs must go */ }
 
 // ErrTemporary is when the repository was reported as being temporarily
 // unavailable.
diff --git a/internal/repoupdater/protocol/repoupdater.go b/internal/repoupdater/protocol/repoupdater.go
index 38c21a4..1ab3858 100644
--- a/internal/repoupdater/protocol/repoupdater.go
+++ b/internal/repoupdater/protocol/repoupdater.go
@@ -8,78 +8,40 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/api"
 )
 
-type RepoUpdateSchedulerInfoArgs struct {
-	// RepoName is the repository name to look up.
-	// XXX(tsenart): Depreacted. Remove after lookup by ID is rolled out.
-	RepoName api.RepoName
-	// The ID of the repo to lookup the schedule for.
-	ID api.RepoID
-}
+type RepoUpdateSchedulerInfoArgs struct { /* all structs must go */ }
 
-type RepoUpdateSchedulerInfoResult struct {
-	Schedule *RepoScheduleState `json:",omitempty"`
-	Queue    *RepoQueueState    `json:",omitempty"`
-}
+type RepoUpdateSchedulerInfoResult struct { /* all structs must go */ }
 
-type RepoScheduleState struct {
-	Index           int
-	Total           int
-	IntervalSeconds int
-	Due             time.Time
-}
+type RepoScheduleState struct { /* all structs must go */ }
 
-type RepoQueueState struct {
-	Index    int
-	Total    int
-	Updating bool
-}
+type RepoQueueState struct { /* all structs must go */ }
 
 // RepoExternalServicesRequest is a request for the external services
 // associated with a repository.
-type RepoExternalServicesRequest struct {
-	// ID of the repository being queried.
-	ID api.RepoID
-}
+type RepoExternalServicesRequest struct { /* all structs must go */ }
 
 // RepoExternalServicesResponse is returned in response to an
 // RepoExternalServicesRequest.
-type RepoExternalServicesResponse struct {
-	ExternalServices []api.ExternalService
-}
+type RepoExternalServicesResponse struct { /* all structs must go */ }
 
 // ExcludeRepoRequest is a request to exclude a single repo from
 // being mirrored from any external service of its kind.
-type ExcludeRepoRequest struct {
-	// ID of the repository to be excluded.
-	ID api.RepoID
-}
+type ExcludeRepoRequest struct { /* all structs must go */ }
 
 // ExcludeRepoResponse is returned in response to an ExcludeRepoRequest.
-type ExcludeRepoResponse struct {
-	ExternalServices []api.ExternalService
-}
+type ExcludeRepoResponse struct { /* all structs must go */ }
 
 // RepoLookupArgs is a request for information about a repository on repoupdater.
 //
 // Exactly one of Repo and ExternalRepo should be set.
-type RepoLookupArgs struct {
-	// Repo is the repository name to look up.
-	Repo api.RepoName `json:",omitempty"`
-}
+type RepoLookupArgs struct { /* all structs must go */ }
 
 func (a *RepoLookupArgs) String() string {
 	return fmt.Sprintf("RepoLookupArgs{%s}", a.Repo)
 }
 
 // RepoLookupResult is the response to a repository information request (RepoLookupArgs).
-type RepoLookupResult struct {
-	// Repo contains information about the repository, if it is found. If an error occurred, it is nil.
-	Repo *RepoInfo
-
-	ErrorNotFound               bool // the repository host reported that the repository was not found
-	ErrorUnauthorized           bool // the repository host rejected the client's authorization
-	ErrorTemporarilyUnavailable bool // the repository host was temporarily unavailable (e.g., rate limit exceeded)
-}
+type RepoLookupResult struct { /* all structs must go */ }
 
 func (r *RepoLookupResult) String() string {
 	var parts []string
@@ -99,119 +61,56 @@ func (r *RepoLookupResult) String() string {
 }
 
 // RepoInfo is information about a repository that lives on an external service (such as GitHub or GitLab).
-type RepoInfo struct {
-	// Name the canonical name of the repository. Its case (uppercase/lowercase) may differ from the name arg used
-	// in the lookup. If the repository was renamed on the external service, this name is the new name.
-	Name api.RepoName
-
-	Description string // repository description (from the external service)
-	Fork        bool   // whether this repository is a fork of another repository (from the external service)
-	Archived    bool   // whether this repository is archived (from the external service)
-	Private     bool   // whether this repository is private (from the external service)
-
-	VCS VCSInfo // VCS-related information (for cloning/updating)
-
-	Links *RepoLinks // link URLs related to this repository
-
-	// ExternalRepo specifies this repository's ID on the external service where it resides (and the external
-	// service itself).
-	ExternalRepo api.ExternalRepoSpec
-}
+type RepoInfo struct { /* all structs must go */ }
 
 func (r *RepoInfo) String() string {
 	return fmt.Sprintf("RepoInfo{%s}", r.Name)
 }
 
 // VCSInfo describes how to access an external repository's Git data (to clone or update it).
-type VCSInfo struct {
-	URL string // the Git remote URL
-}
+type VCSInfo struct { /* all structs must go */ }
 
 // RepoLinks contains URLs and URL patterns for objects in this repository.
-type RepoLinks struct {
-	Root   string // the repository's main (root) page URL
-	Tree   string // the URL to a tree, with {rev} and {path} substitution variables
-	Blob   string // the URL to a blob, with {rev} and {path} substitution variables
-	Commit string // the URL to a commit, with {commit} substitution variable
-}
+type RepoLinks struct { /* all structs must go */ }
 
 // RepoUpdateRequest is a request to update the contents of a given repo, or clone it if it doesn't exist.
-type RepoUpdateRequest struct {
-	Repo api.RepoName `json:"repo"`
-
-	// URL is the repository's Git remote URL (from which to clone or update).
-	URL string `json:"url"`
-}
+type RepoUpdateRequest struct { /* all structs must go */ }
 
 func (a *RepoUpdateRequest) String() string {
 	return fmt.Sprintf("RepoUpdateRequest{%s, %s}", a.Repo, a.URL)
 }
 
 // RepoUpdateResponse is a response type to a RepoUpdateRequest.
-type RepoUpdateResponse struct {
-	// ID of the repo that got an update request.
-	ID api.RepoID `json:"id"`
-	// Name of the repo that got an update request.
-	Name string `json:"name"`
-	// URL of the repo that got an update request.
-	URL string `json:"url"`
-}
+type RepoUpdateResponse struct { /* all structs must go */ }
 
 // ChangesetSyncRequest is a request to sync a number of changesets
-type ChangesetSyncRequest struct {
-	IDs []int64
-}
+type ChangesetSyncRequest struct { /* all structs must go */ }
 
 // ChangesetSyncResponse is a response to sync a number of changesets
-type ChangesetSyncResponse struct {
-	Error string
-}
+type ChangesetSyncResponse struct { /* all structs must go */ }
 
 // PermsSyncRequest is a request to sync permissions.
-type PermsSyncRequest struct {
-	UserIDs []int32      `json:"user_ids"`
-	RepoIDs []api.RepoID `json:"repo_ids"`
-}
+type PermsSyncRequest struct { /* all structs must go */ }
 
 // PermsSyncResponse is a response to sync permissions.
-type PermsSyncResponse struct {
-	Error string
-}
+type PermsSyncResponse struct { /* all structs must go */ }
 
 // ExternalServiceSyncRequest is a request to sync a specific external service eagerly.
 //
 // The FrontendAPI is one of the issuers of this request. It does so when creating or
 // updating an external service so that admins don't have to wait until the next sync
 // run to see their repos being synced.
-type ExternalServiceSyncRequest struct {
-	ExternalService api.ExternalService
-}
+type ExternalServiceSyncRequest struct { /* all structs must go */ }
 
 // ExternalServiceSyncResult is a result type of an external service's sync request.
-type ExternalServiceSyncResult struct {
-	ExternalService api.ExternalService
-	Error           string
-}
+type ExternalServiceSyncResult struct { /* all structs must go */ }
 
-type CloningProgress struct {
-	Message string
-}
+type CloningProgress struct { /* all structs must go */ }
 
-type ExternalServiceSyncError struct {
-	Message           string
-	ExternalServiceId int64
-}
+type ExternalServiceSyncError struct { /* all structs must go */ }
 
-type SyncError struct {
-	Message string
-}
+type SyncError struct { /* all structs must go */ }
 
-type StatusMessage struct {
-	Cloning                  *CloningProgress          `json:"cloning"`
-	ExternalServiceSyncError *ExternalServiceSyncError `json:"external_service_sync_error"`
-	SyncError                *SyncError                `json:"sync_error"`
-}
+type StatusMessage struct { /* all structs must go */ }
 
-type StatusMessagesResponse struct {
-	Messages []StatusMessage `json:"messages"`
-}
+type StatusMessagesResponse struct { /* all structs must go */ }
diff --git a/internal/routevar/def.go b/internal/routevar/def.go
index e2802d3..c86062d 100644
--- a/internal/routevar/def.go
+++ b/internal/routevar/def.go
@@ -3,10 +3,7 @@ package routevar
 // DefAtRev refers to a def at a non-absolute commit ID (unlike
 // DefSpec/DefKey, which require the CommitID field to have an
 // absolute commit ID).
-type DefAtRev struct {
-	RepoRev
-	Unit, UnitType, Path string
-}
+type DefAtRev struct { /* all structs must go */ }
 
 // Def captures def paths in URL routes.
 const Def = "{UnitType}/{Unit:.+?}/-/{Path:.*?}"
diff --git a/internal/routevar/def_test.go b/internal/routevar/def_test.go
index ff9061a..cc8ccbe 100644
--- a/internal/routevar/def_test.go
+++ b/internal/routevar/def_test.go
@@ -6,10 +6,7 @@ import (
 )
 
 func TestDefRouteVars(t *testing.T) {
-	tests := []struct {
-		def       DefAtRev
-		routeVars map[string]string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			DefAtRev{RepoRev: RepoRev{Repo: "r", Rev: ""}, UnitType: "t", Unit: "u", Path: "p"},
 			map[string]string{"Repo": "r", "Rev": "", "UnitType": "t", "Unit": "u", "Path": "p"},
diff --git a/internal/routevar/regexp_test.go b/internal/routevar/regexp_test.go
index b509616..aac4f01 100644
--- a/internal/routevar/regexp_test.go
+++ b/internal/routevar/regexp_test.go
@@ -13,10 +13,7 @@ func pairs(m map[string]string) []string {
 }
 
 func TestNamedToNonCapturingGroups(t *testing.T) {
-	tests := []struct {
-		input string
-		want  string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{``, ``},
 		{`(?P<foo>bar)`, `(?:bar)`},
 		{`(?P<foo>(?P<baz>bar))`, `(?:(?:bar))`},
diff --git a/internal/routevar/repo.go b/internal/routevar/repo.go
index b71a8a3..9fb3488 100644
--- a/internal/routevar/repo.go
+++ b/internal/routevar/repo.go
@@ -11,10 +11,7 @@ import (
 // commit ID. This RepoRev type is appropriate for user input (e.g.,
 // from a URL), where it is convenient to allow users to specify
 // non-absolute commit IDs that the server can resolve.
-type RepoRev struct {
-	Repo api.RepoName // a repo path
-	Rev  string       // a VCS revision specifier (branch, "master~7", commit ID, etc.)
-}
+type RepoRev struct { /* all structs must go */ }
 
 var (
 	Repo = `{Repo:` + namedToNonCapturingGroups(RepoPattern) + `}`
diff --git a/internal/routevar/repo_test.go b/internal/routevar/repo_test.go
index b4b6283..3f6312a 100644
--- a/internal/routevar/repo_test.go
+++ b/internal/routevar/repo_test.go
@@ -16,10 +16,7 @@ func TestRepoPattern(t *testing.T) {
 		t.Fatal(err)
 	}
 
-	tests := []struct {
-		input     string
-		wantMatch bool
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{"foo", true},
 		{"foo/bar", true},
 		{"foo.com/bar", true},
@@ -67,10 +64,7 @@ func TestRevPattern(t *testing.T) {
 		t.Fatal(err)
 	}
 
-	tests := []struct {
-		input     string
-		wantMatch bool
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{"v", true},
 		{"v/v", true},
 		{"my/branch/name", true},
@@ -94,11 +88,7 @@ func TestRepo(t *testing.T) {
 	r := mux.NewRouter()
 	r.Path("/" + Repo)
 
-	tests := []struct {
-		path        string
-		wantNoMatch bool
-		wantVars    map[string]string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{path: "/foo", wantVars: map[string]string{"Repo": "foo"}},
 		{path: "/foo.com/bar", wantVars: map[string]string{"Repo": "foo.com/bar"}},
 
@@ -137,11 +127,7 @@ func TestRev(t *testing.T) {
 	r := mux.NewRouter()
 	r.Path("/" + Rev)
 
-	tests := []struct {
-		path        string
-		wantNoMatch bool
-		wantVars    map[string]string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{path: "/v", wantVars: map[string]string{"Rev": "v"}},
 		{path: "/v/v/v", wantVars: map[string]string{"Rev": "v/v/v"}},
 
@@ -172,10 +158,7 @@ func TestRev(t *testing.T) {
 }
 
 func TestRepoRevSpec(t *testing.T) {
-	tests := []struct {
-		spec      RepoRev
-		routeVars map[string]string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{RepoRev{Repo: "a.com/x", Rev: "r"}, map[string]string{"Repo": "a.com/x", "Rev": "@r"}},
 		{RepoRev{Repo: "x", Rev: "r"}, map[string]string{"Repo": "x", "Rev": "@r"}},
 	}
diff --git a/internal/routevar/spec.go b/internal/routevar/spec.go
index 28a59ca..6296f2f 100644
--- a/internal/routevar/spec.go
+++ b/internal/routevar/spec.go
@@ -3,11 +3,7 @@ package routevar
 import "fmt"
 
 // InvalidError occurs when a spec string is invalid.
-type InvalidError struct {
-	Type  string // Repo, etc.
-	Input string // the original string input
-	Err   error  // underlying error (nil for routine regexp match failures)
-}
+type InvalidError struct { /* all structs must go */ }
 
 func (e InvalidError) Error() string {
 	str := fmt.Sprintf("invalid input for %s: %q", e.Type, e.Input)
diff --git a/internal/search/backend/horizontal.go b/internal/search/backend/horizontal.go
index 9ae7e01..1a47df8 100644
--- a/internal/search/backend/horizontal.go
+++ b/internal/search/backend/horizontal.go
@@ -13,13 +13,7 @@ import (
 
 // HorizontalSearcher is a zoekt.Searcher which aggregates searches over
 // Map. It manages the connections to Map as the endpoints come and go.
-type HorizontalSearcher struct {
-	Map  EndpointMap
-	Dial func(endpoint string) zoekt.Searcher
-
-	mu      sync.RWMutex
-	clients map[string]zoekt.Searcher // addr -> client
-}
+type HorizontalSearcher struct { /* all structs must go */ }
 
 // Search aggregates search over every endpoint in Map.
 func (s *HorizontalSearcher) Search(ctx context.Context, q query.Q, opts *zoekt.SearchOptions) (*zoekt.SearchResult, error) {
@@ -34,10 +28,7 @@ func (s *HorizontalSearcher) Search(ctx context.Context, q query.Q, opts *zoekt.
 	ctx, cancel = context.WithCancel(ctx)
 	defer cancel()
 
-	type result struct {
-		sr  *zoekt.SearchResult
-		err error
-	}
+	type result struct { /* all structs must go */ }
 	results := make(chan result, len(clients))
 	for _, c := range clients {
 		go func(c zoekt.Searcher) {
@@ -89,10 +80,7 @@ func (s *HorizontalSearcher) List(ctx context.Context, q query.Q) (*zoekt.RepoLi
 	ctx, cancel = context.WithCancel(ctx)
 	defer cancel()
 
-	type result struct {
-		rl  *zoekt.RepoList
-		err error
-	}
+	type result struct { /* all structs must go */ }
 	results := make(chan result, len(clients))
 	for _, c := range clients {
 		go func(c zoekt.Searcher) {
diff --git a/internal/search/backend/horizontal_test.go b/internal/search/backend/horizontal_test.go
index 79b0a4f..51726c8 100644
--- a/internal/search/backend/horizontal_test.go
+++ b/internal/search/backend/horizontal_test.go
@@ -120,10 +120,7 @@ func TestSyncSearchers(t *testing.T) {
 	var endpoints atomicMap
 	endpoints.Store(prefixMap{"a"})
 
-	type mock struct {
-		mockSearcher
-		dialNum int
-	}
+	type mock struct { /* all structs must go */ }
 
 	dialNumCounter := 0
 	searcher := &HorizontalSearcher{
@@ -170,11 +167,7 @@ func TestDedupper(t *testing.T) {
 		}
 		return fms
 	}
-	cases := []struct {
-		name    string
-		matches []string
-		want    string
-	}{{
+	cases := []struct { /* all structs must go */ }{{
 		name: "empty",
 		matches: []string{
 			"",
@@ -299,12 +292,7 @@ func backgroundSearch(searcher zoekt.Searcher) func(t *testing.T) {
 	}
 }
 
-type mockSearcher struct {
-	searchResult *zoekt.SearchResult
-	searchError  error
-	listResult   *zoekt.RepoList
-	listError    error
-}
+type mockSearcher struct { /* all structs must go */ }
 
 func (s *mockSearcher) Search(context.Context, query.Q, *zoekt.SearchOptions) (*zoekt.SearchResult, error) {
 	res := s.searchResult
@@ -327,9 +315,7 @@ func (*mockSearcher) String() string {
 	return "mockSearcher"
 }
 
-type atomicMap struct {
-	atomic.Value
-}
+type atomicMap struct { /* all structs must go */ }
 
 func (m *atomicMap) Endpoints() (map[string]struct{}, error) {
 	return m.Value.Load().(EndpointMap).Endpoints()
diff --git a/internal/search/backend/index_options.go b/internal/search/backend/index_options.go
index 6eb217e..c866c8c 100644
--- a/internal/search/backend/index_options.go
+++ b/internal/search/backend/index_options.go
@@ -13,18 +13,7 @@ import (
 // fetched. See getIndexOptions in the zoekt codebase.
 //
 // We only specify a subset of the fields.
-type zoektIndexOptions struct {
-	// LargeFiles is a slice of glob patterns where matching file paths should
-	// be indexed regardless of their size. The pattern syntax can be found
-	// here: https://golang.org/pkg/path/filepath/#Match.
-	LargeFiles []string
-
-	// Symbols if true will make zoekt index the output of ctags.
-	Symbols bool
-
-	// Branches is a slice of branches to index.
-	Branches []zoekt.RepositoryBranch `json:",omitempty"`
-}
+type zoektIndexOptions struct { /* all structs must go */ }
 
 // GetIndexOptions returns a json blob for consumption by
 // sourcegraph-zoekt-indexserver. It is for repoName based on site settings c.
diff --git a/internal/search/backend/index_options_test.go b/internal/search/backend/index_options_test.go
index 3ab22a8..b8175eb 100644
--- a/internal/search/backend/index_options_test.go
+++ b/internal/search/backend/index_options_test.go
@@ -29,12 +29,7 @@ func TestGetIndexOptions(t *testing.T) {
 		return c
 	}
 
-	type caseT struct {
-		name string
-		conf schema.SiteConfiguration
-		repo string
-		want zoektIndexOptions
-	}
+	type caseT struct { /* all structs must go */ }
 
 	cases := []caseT{{
 		name: "default",
@@ -199,12 +194,7 @@ func TestGetIndexOptions_getVersion(t *testing.T) {
 	}
 
 	boom := errors.New("boom")
-	cases := []struct {
-		name    string
-		f       func(string) (string, error)
-		want    []zoekt.RepositoryBranch
-		wantErr error
-	}{{
+	cases := []struct { /* all structs must go */ }{{
 		name: "error",
 		f: func(_ string) (string, error) {
 			return "", boom
diff --git a/internal/search/backend/indexers.go b/internal/search/backend/indexers.go
index 0719fad..a3cb750 100644
--- a/internal/search/backend/indexers.go
+++ b/internal/search/backend/indexers.go
@@ -18,14 +18,7 @@ type EndpointMap interface {
 
 // Indexers provides methods over the set of indexed-search servers in a
 // Sourcegraph cluster.
-type Indexers struct {
-	// Map is the desired mapping from repository names to endpoints.
-	Map EndpointMap
-
-	// Indexed returns a set of repository names currently indexed on
-	// endpoint. If indexed fails, it is expected to return an empty set.
-	Indexed func(ctx context.Context, endpoint string) map[string]struct{}
-}
+type Indexers struct { /* all structs must go */ }
 
 // ReposSubset returns the subset of repoNames that hostname should index.
 //
diff --git a/internal/search/backend/indexers_test.go b/internal/search/backend/indexers_test.go
index 6838f4c..732a036 100644
--- a/internal/search/backend/indexers_test.go
+++ b/internal/search/backend/indexers_test.go
@@ -25,14 +25,7 @@ func TestReposSubset(t *testing.T) {
 		},
 	}
 
-	cases := []struct {
-		name     string
-		hostname string
-		indexed  map[string][]string
-		repos    []string
-		want     []string
-		errS     string
-	}{{
+	cases := []struct { /* all structs must go */ }{{
 		name:     "bad hostname",
 		hostname: "bam",
 		errS:     "hostname \"bam\" not found",
@@ -96,13 +89,7 @@ func TestReposSubset(t *testing.T) {
 }
 
 func TestFindEndpoint(t *testing.T) {
-	cases := []struct {
-		name      string
-		hostname  string
-		endpoints []string
-		want      string
-		errS      string
-	}{{
+	cases := []struct { /* all structs must go */ }{{
 		name:      "empty",
 		hostname:  "",
 		endpoints: []string{"foo.internal", "bar.internal"},
diff --git a/internal/search/backend/metered_searcher.go b/internal/search/backend/metered_searcher.go
index efe9464..1b49d5f 100644
--- a/internal/search/backend/metered_searcher.go
+++ b/internal/search/backend/metered_searcher.go
@@ -19,9 +19,7 @@ func init() {
 	prometheus.MustRegister(requestDuration)
 }
 
-type meteredSearcher struct {
-	zoekt.Searcher
-}
+type meteredSearcher struct { /* all structs must go */ }
 
 func NewMeteredSearcher(z zoekt.Searcher) zoekt.Searcher {
 	return &meteredSearcher{z}
diff --git a/internal/search/backend/text.go b/internal/search/backend/text.go
index 4589db0..ce7e6b6 100644
--- a/internal/search/backend/text.go
+++ b/internal/search/backend/text.go
@@ -15,19 +15,7 @@ import (
 //
 // Note: Zoekt starts up background goroutines, so call Close when done using
 // the Client.
-type Zoekt struct {
-	Client zoekt.Searcher
-
-	// DisableCache when true prevents caching of Client.List. Useful in
-	// tests.
-	DisableCache bool
-
-	mu       sync.RWMutex
-	state    int32 // 0 not running, 1 running, 2 stopped
-	set      map[string]*zoekt.Repository
-	err      error
-	disabled bool
-}
+type Zoekt struct { /* all structs must go */ }
 
 // Close will tear down the background goroutines.
 func (c *Zoekt) Close() {
diff --git a/internal/search/env_test.go b/internal/search/env_test.go
index c0a46cc..d650108 100644
--- a/internal/search/env_test.go
+++ b/internal/search/env_test.go
@@ -7,11 +7,7 @@ import (
 )
 
 func TestZoektAddr(t *testing.T) {
-	cases := []struct {
-		name    string
-		environ []string
-		want    string
-	}{{
+	cases := []struct { /* all structs must go */ }{{
 		name: "default",
 		want: "k8s+rpc://indexed-search:6070",
 	}, {
diff --git a/internal/search/query/literal_parser_test.go b/internal/search/query/literal_parser_test.go
index 50bcdaf..cd685ca 100644
--- a/internal/search/query/literal_parser_test.go
+++ b/internal/search/query/literal_parser_test.go
@@ -26,12 +26,7 @@ func heuristicLabels(nodes []Node) string {
 }
 
 func TestParseAndOrLiteral(t *testing.T) {
-	cases := []struct {
-		Input      string
-		Want       string
-		WantLabels string
-		WantError  string
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			Input:      "()",
 			Want:       `"()"`,
diff --git a/internal/search/query/mapper.go b/internal/search/query/mapper.go
index 588cd16..efd2c65 100644
--- a/internal/search/query/mapper.go
+++ b/internal/search/query/mapper.go
@@ -48,10 +48,7 @@ func (*BaseMapper) MapPattern(mapper Mapper, value string, negated bool, annotat
 // OperatorMapper is a helper mapper that maps operators in a query. It takes as
 // state a callback that will call and map each visited operator with the return
 // value.
-type OperatorMapper struct {
-	BaseMapper
-	callback func(kind operatorKind, operands []Node) []Node
-}
+type OperatorMapper struct { /* all structs must go */ }
 
 // MapOperator implements OperatorMapper by overriding the BaseMapper's value to
 // substitute a node computed by the callback. It reduces any substituted node.
@@ -62,10 +59,7 @@ func (s *OperatorMapper) MapOperator(mapper Mapper, kind operatorKind, operands
 // ParameterMapper is a helper mapper that only maps parameters in a query. It
 // takes as state a callback that will call and map each visited parameter by
 // the return value.
-type ParameterMapper struct {
-	BaseMapper
-	callback func(field, value string, negated bool, annotation Annotation) Node
-}
+type ParameterMapper struct { /* all structs must go */ }
 
 // MapParameter implements ParameterMapper by overriding the BaseMapper's value
 // to substitute a node computed by the callback.
@@ -76,10 +70,7 @@ func (s *ParameterMapper) MapParameter(mapper Mapper, field, value string, negat
 // PatternMapper is a helper mapper that only maps patterns in a query. It
 // takes as state a callback that will call and map each visited pattern by
 // the return value.
-type PatternMapper struct {
-	BaseMapper
-	callback func(value string, negated bool, annotation Annotation) Node
-}
+type PatternMapper struct { /* all structs must go */ }
 
 func (s *PatternMapper) MapPattern(mapper Mapper, value string, negated bool, annotation Annotation) Node {
 	return s.callback(value, negated, annotation)
@@ -88,11 +79,7 @@ func (s *PatternMapper) MapPattern(mapper Mapper, value string, negated bool, an
 // FieldMapper is a helper mapper that only maps patterns in a query, for a
 // field specified in state. For each parameter with this field name it calls
 // the callback that maps the field's members.
-type FieldMapper struct {
-	BaseMapper
-	field    string
-	callback func(value string, negated bool) Node
-}
+type FieldMapper struct { /* all structs must go */ }
 
 func (s *FieldMapper) MapParameter(mapper Mapper, field, value string, negated bool, annotation Annotation) Node {
 	if s.field == field {
diff --git a/internal/search/query/parser.go b/internal/search/query/parser.go
index a4e1e13..9961f1f 100644
--- a/internal/search/query/parser.go
+++ b/internal/search/query/parser.go
@@ -30,25 +30,13 @@ func (Parameter) node() {}
 func (Operator) node()  {}
 
 // An annotation stores information associated with a node.
-type Annotation struct {
-	Labels labels `json:"labels"`
-	Range  Range  `json:"range"`
-}
+type Annotation struct { /* all structs must go */ }
 
 // Pattern is a leaf node of expressions representing a search pattern fragment.
-type Pattern struct {
-	Value      string     `json:"value"`   // The pattern value.
-	Negated    bool       `json:"negated"` // True if this pattern is negated.
-	Annotation Annotation `json:"-"`       // An annotation attached to this pattern.
-}
+type Pattern struct { /* all structs must go */ }
 
 // Parameter is a leaf node of expressions representing a parameter of format "repo:foo".
-type Parameter struct {
-	Field      string     `json:"field"`   // The repo part in repo:sourcegraph.
-	Value      string     `json:"value"`   // The sourcegraph part in repo:sourcegraph.
-	Negated    bool       `json:"negated"` // True if the - prefix exists, as in -repo:sourcegraph.
-	Annotation Annotation `json:"-"`
-}
+type Parameter struct { /* all structs must go */ }
 
 type operatorKind int
 
@@ -59,11 +47,7 @@ const (
 )
 
 // Operator is a nonterminal node of kind Kind with child nodes Operands.
-type Operator struct {
-	Kind       operatorKind
-	Operands   []Node
-	Annotation Annotation
-}
+type Operator struct { /* all structs must go */ }
 
 func (node Pattern) String() string {
 	var v string
@@ -156,13 +140,7 @@ const (
 
 func isSet(h, heuristic heuristics) bool { return h&heuristic != 0 }
 
-type parser struct {
-	buf        []byte
-	heuristics heuristics
-	pos        int
-	balanced   int
-	leafParser SearchType
-}
+type parser struct { /* all structs must go */ }
 
 func (p *parser) done() bool {
 	return p.pos >= len(p.buf)
@@ -867,12 +845,7 @@ func ParseAndOr(in string, searchType SearchType) ([]Node, error) {
 	return newOperator(nodes, And), nil
 }
 
-type ParserOptions struct {
-	SearchType SearchType
-
-	// treat repo, file, or repohasfile values as glob syntax if true.
-	Globbing bool
-}
+type ParserOptions struct { /* all structs must go */ }
 
 // ProcessAndOr query parses and validates an and/or query for a given search type.
 func ProcessAndOr(in string, options ParserOptions) (QueryInfo, error) {
diff --git a/internal/search/query/parser_test.go b/internal/search/query/parser_test.go
index ef233c1..10916c8 100644
--- a/internal/search/query/parser_test.go
+++ b/internal/search/query/parser_test.go
@@ -11,13 +11,7 @@ import (
 )
 
 func TestParseParameterList(t *testing.T) {
-	cases := []struct {
-		Name       string
-		Input      string
-		Want       string
-		WantLabels labels
-		WantRange  string
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			Name:       "Normal field:value",
 			Input:      `file:README.md`,
@@ -131,14 +125,8 @@ func TestParseParameterList(t *testing.T) {
 }
 
 func TestScanField(t *testing.T) {
-	type value struct {
-		Field   string
-		Advance int
-	}
-	cases := []struct {
-		Input string
-		Want  value
-	}{
+	type value struct { /* all structs must go */ }
+	cases := []struct { /* all structs must go */ }{
 		// Valid field.
 		{
 			Input: "repo:foo",
@@ -267,12 +255,7 @@ func TestParse(t *testing.T) {
 	type Spec = relation         // constructor for expected output of the grammar spec without heuristics.
 	type Diff = relation         // constructor for expected heuristic output when different to the grammar spec.
 
-	cases := []struct {
-		Name          string
-		Input         string
-		WantGrammar   relation
-		WantHeuristic relation
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			Name:          "Empty string",
 			Input:         "",
@@ -734,18 +717,9 @@ func TestParse(t *testing.T) {
 }
 
 func TestScanDelimited(t *testing.T) {
-	type result struct {
-		Value  string
-		Count  int
-		ErrMsg string
-	}
+	type result struct { /* all structs must go */ }
 
-	cases := []struct {
-		name      string
-		input     string
-		delimiter rune
-		want      result
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			input:     `""`,
 			delimiter: '"',
@@ -824,10 +798,7 @@ func TestScanDelimited(t *testing.T) {
 }
 
 func TestMergePatterns(t *testing.T) {
-	cases := []struct {
-		input string
-		want  string
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			input: "foo()bar",
 			want:  `{"start":{"line":0,"column":0},"end":{"line":0,"column":8}}`,
diff --git a/internal/search/query/pattern_type_test.go b/internal/search/query/pattern_type_test.go
index acf23e0..eccf903 100644
--- a/internal/search/query/pattern_type_test.go
+++ b/internal/search/query/pattern_type_test.go
@@ -6,10 +6,7 @@ import (
 )
 
 func TestConvertToLiteral(t *testing.T) {
-	tests := []struct {
-		input string
-		want  string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{"", ""},
 		{" ", ""},
 		{"  ", ""},
@@ -61,10 +58,7 @@ func TestConvertToLiteral(t *testing.T) {
 }
 
 func TestTokenize(t *testing.T) {
-	tests := []struct {
-		input string
-		want  []string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{"", nil},
 		{" ", []string{" "}},
 		{"a", []string{"a"}},
diff --git a/internal/search/query/range.go b/internal/search/query/range.go
index e9a22a4..70f6401 100644
--- a/internal/search/query/range.go
+++ b/internal/search/query/range.go
@@ -2,15 +2,9 @@ package query
 
 import "encoding/json"
 
-type position struct {
-	Line   int `json:"line"`
-	Column int `json:"column"`
-}
+type position struct { /* all structs must go */ }
 
-type Range struct {
-	Start position `json:"start"`
-	End   position `json:"end"`
-}
+type Range struct { /* all structs must go */ }
 
 // Returns a new range that assumes the string happens on one line.
 // Column positions are in the interval [start, end].
diff --git a/internal/search/query/searchquery.go b/internal/search/query/searchquery.go
index acd6be6..196b3c2 100644
--- a/internal/search/query/searchquery.go
+++ b/internal/search/query/searchquery.go
@@ -96,11 +96,7 @@ var (
 )
 
 // A Query is the typechecked representation of a search query.
-type Query struct {
-	conf *types.Config // the typechecker config used to produce this query
-
-	types.Fields // the query fields
-}
+type Query struct { /* all structs must go */ }
 
 func Parse(input string) (syntax.ParseTree, error) {
 	parseTree, err := syntax.Parse(input)
@@ -155,9 +151,7 @@ func processSearchPattern(q QueryInfo) string {
 	return strings.Join(pieces, " ")
 }
 
-type ValidationError struct {
-	Msg string
-}
+type ValidationError struct { /* all structs must go */ }
 
 func (e *ValidationError) Error() string {
 	return e.Msg
diff --git a/internal/search/query/searchquery_test.go b/internal/search/query/searchquery_test.go
index 09447a2..1a1e3dd 100644
--- a/internal/search/query/searchquery_test.go
+++ b/internal/search/query/searchquery_test.go
@@ -133,12 +133,7 @@ func TestQuery_StringValues(t *testing.T) {
 }
 
 func TestQuery_Validate(t *testing.T) {
-	cases := []struct {
-		Name       string
-		Query      string
-		SearchType SearchType
-		Want       string
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			Name:       `Structural search validates`,
 			Query:      `patterntype:structural ":[_]"`,
diff --git a/internal/search/query/syntax/parse_tree.go b/internal/search/query/syntax/parse_tree.go
index 8c7a3d3..71bd2c7 100644
--- a/internal/search/query/syntax/parse_tree.go
+++ b/internal/search/query/syntax/parse_tree.go
@@ -57,13 +57,7 @@ func (p ParseTree) String() string {
 }
 
 // An Expr describes an expression in the parse tree.
-type Expr struct {
-	Pos       int       // the starting character position of the expression
-	Not       bool      // the expression is negated (e.g., -term or -field:term)
-	Field     string    // the field that this expression applies to
-	Value     string    // the raw field value
-	ValueType TokenType // the type of the value
-}
+type Expr struct { /* all structs must go */ }
 
 func (e Expr) String() string {
 	var buf bytes.Buffer
diff --git a/internal/search/query/syntax/parse_tree_test.go b/internal/search/query/syntax/parse_tree_test.go
index 49adefc..e109bd5 100644
--- a/internal/search/query/syntax/parse_tree_test.go
+++ b/internal/search/query/syntax/parse_tree_test.go
@@ -5,18 +5,8 @@ import (
 )
 
 func TestExpr_String(t *testing.T) {
-	type fields struct {
-		Pos       int
-		Not       bool
-		Field     string
-		Value     string
-		ValueType TokenType
-	}
-	tests := []struct {
-		name   string
-		fields fields
-		want   string
-	}{
+	type fields struct { /* all structs must go */ }
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:   "empty",
 			fields: fields{},
@@ -56,11 +46,7 @@ func TestExpr_String(t *testing.T) {
 }
 
 func TestQuery_WithErrorsQuoted(t *testing.T) {
-	cases := []struct {
-		name string
-		in   string
-		want string
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{name: "empty", in: "", want: ""},
 		{in: "a", want: "a"},
 		{in: "f:foo bar", want: `f:foo bar`},
diff --git a/internal/search/query/syntax/parser.go b/internal/search/query/syntax/parser.go
index 810accb..051ffa7 100644
--- a/internal/search/query/syntax/parser.go
+++ b/internal/search/query/syntax/parser.go
@@ -5,25 +5,16 @@ import (
 )
 
 // ParseError describes an error in query parsing.
-type ParseError struct {
-	Pos int    // the character position where the error occurred
-	Msg string // description of the error
-}
+type ParseError struct { /* all structs must go */ }
 
 func (e *ParseError) Error() string {
 	return fmt.Sprintf("parse error at character %d: %s", e.Pos, e.Msg)
 }
 
-type parser struct {
-	tokens      []Token
-	pos         int
-	allowErrors bool
-}
+type parser struct { /* all structs must go */ }
 
 // context holds settings active within a given scope during parsing.
-type context struct {
-	field string // name of the field currently in scope (or "")
-}
+type context struct { /* all structs must go */ }
 
 // Parse parses the input string and returns its parse tree. Returned errors are of
 // type *ParseError, which includes the error position and message.
diff --git a/internal/search/query/syntax/parser_test.go b/internal/search/query/syntax/parser_test.go
index e6550fa..5a0be0e 100644
--- a/internal/search/query/syntax/parser_test.go
+++ b/internal/search/query/syntax/parser_test.go
@@ -6,11 +6,7 @@ import (
 )
 
 func TestParser(t *testing.T) {
-	tests := map[string]struct {
-		wantExpr   ParseTree
-		wantString string
-		wantErr    *ParseError
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"":   {wantExpr: []*Expr{}},
 		" ":  {wantExpr: []*Expr{}, wantString: ""},
 		"  ": {wantExpr: []*Expr{}, wantString: ""},
@@ -113,14 +109,8 @@ func TestParser(t *testing.T) {
 }
 
 func TestParseAllowingErrors(t *testing.T) {
-	type args struct {
-		input string
-	}
-	tests := []struct {
-		name string
-		args args
-		want ParseTree
-	}{
+	type args struct { /* all structs must go */ }
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "empty",
 			args: args{input: ""},
diff --git a/internal/search/query/syntax/scanner.go b/internal/search/query/syntax/scanner.go
index e9e207a..6f4e5e2 100644
--- a/internal/search/query/syntax/scanner.go
+++ b/internal/search/query/syntax/scanner.go
@@ -30,11 +30,7 @@ var singleCharTokens = map[rune]TokenType{
 }
 
 // Token is a token in a query.
-type Token struct {
-	Type  TokenType // type of token
-	Value string    // string value
-	Pos   int       // starting character position
-}
+type Token struct { /* all structs must go */ }
 
 // Scan scans the query and returns a list of tokens.
 func Scan(input string) []Token {
@@ -48,13 +44,7 @@ func Scan(input string) []Token {
 
 type stateFn func(*scanner) stateFn
 
-type scanner struct {
-	input   string
-	tokens  []Token
-	pos     int
-	prevPos int
-	start   int
-}
+type scanner struct { /* all structs must go */ }
 
 func (s *scanner) next() rune {
 	s.prevPos = s.pos
diff --git a/internal/search/query/syntax/scanner_test.go b/internal/search/query/syntax/scanner_test.go
index 64315a8..df9002d 100644
--- a/internal/search/query/syntax/scanner_test.go
+++ b/internal/search/query/syntax/scanner_test.go
@@ -6,10 +6,7 @@ import (
 )
 
 func TestScanner(t *testing.T) {
-	tests := map[string]struct {
-		wantTypes  []TokenType /* + implicit TokenEOF */
-		wantValues []string
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"":                  {wantTypes: []TokenType{}},
 		" ":                 {wantTypes: []TokenType{}},
 		"\n":                {wantTypes: []TokenType{}},
diff --git a/internal/search/query/transformer.go b/internal/search/query/transformer.go
index a38c4c0..a258aa0 100644
--- a/internal/search/query/transformer.go
+++ b/internal/search/query/transformer.go
@@ -194,10 +194,7 @@ func globToRegex(value string) (string, error) {
 
 // globError carries the error message and the name of
 // field where the error occurred.
-type globError struct {
-	field string
-	err   error
-}
+type globError struct { /* all structs must go */ }
 
 func (g globError) Error() string {
 	return g.err.Error()
diff --git a/internal/search/query/transformer_test.go b/internal/search/query/transformer_test.go
index 5ef0156..c49002c 100644
--- a/internal/search/query/transformer_test.go
+++ b/internal/search/query/transformer_test.go
@@ -36,11 +36,7 @@ func TestLowercaseFieldNames(t *testing.T) {
 }
 
 func TestHoist(t *testing.T) {
-	cases := []struct {
-		input      string
-		want       string
-		wantErrMsg string
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			input: `repo:foo a or b`,
 			want:  `"repo:foo" (or "a" "b")`,
@@ -128,10 +124,7 @@ func TestHoist(t *testing.T) {
 }
 
 func TestSearchUppercase(t *testing.T) {
-	cases := []struct {
-		input string
-		want  string
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			input: `TeSt`,
 			want:  `(and "TeSt" "case:yes")`,
@@ -185,10 +178,7 @@ func TestSearchUppercase(t *testing.T) {
 }
 
 func TestSubstituteOrForRegexp(t *testing.T) {
-	cases := []struct {
-		input string
-		want  string
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			input: "foo or bar",
 			want:  `"(foo)|(bar)"`,
@@ -230,10 +220,7 @@ func TestSubstituteOrForRegexp(t *testing.T) {
 }
 
 func TestSubstituteConcat(t *testing.T) {
-	cases := []struct {
-		input string
-		want  string
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			input: "a b c d e f",
 			want:  `"a b c d e f"`,
@@ -263,10 +250,7 @@ func TestSubstituteConcat(t *testing.T) {
 }
 
 func TestConvertEmptyGroupsToLiteral(t *testing.T) {
-	cases := []struct {
-		input      string
-		wantLabels labels
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			input:      "func()",
 			wantLabels: HeuristicParensAsPatterns | Literal,
@@ -288,10 +272,7 @@ func TestConvertEmptyGroupsToLiteral(t *testing.T) {
 }
 
 func TestExpandOr(t *testing.T) {
-	cases := []struct {
-		input string
-		want  string
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			input: `a or b`,
 			want:  `("a") OR ("b")`,
@@ -342,11 +323,7 @@ func TestExpandOr(t *testing.T) {
 }
 
 func TestMap(t *testing.T) {
-	cases := []struct {
-		input string
-		fns   []func(_ []Node) []Node
-		want  string
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			input: "RePo:foo",
 			fns:   []func(_ []Node) []Node{LowercaseFieldNames},
@@ -370,10 +347,7 @@ func TestMap(t *testing.T) {
 }
 
 func TestTranslateGlobToRegex(t *testing.T) {
-	cases := []struct {
-		input string
-		want  string
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			input: "*",
 			want:  "[^/]*?",
@@ -486,9 +460,7 @@ func TestTranslateGlobToRegex(t *testing.T) {
 }
 
 func TestTranslateBadGlobPattern(t *testing.T) {
-	cases := []struct {
-		input string
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{input: "fo[a-b-c]"},
 		{input: "fo\\o"},
 		{input: "fo[o"},
diff --git a/internal/search/query/types.go b/internal/search/query/types.go
index f487dcc..b1ef618 100644
--- a/internal/search/query/types.go
+++ b/internal/search/query/types.go
@@ -8,17 +8,13 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/search/query/types"
 )
 
-type ExpectedOperand struct {
-	Msg string
-}
+type ExpectedOperand struct { /* all structs must go */ }
 
 func (e *ExpectedOperand) Error() string {
 	return e.Msg
 }
 
-type UnsupportedError struct {
-	Msg string
-}
+type UnsupportedError struct { /* all structs must go */ }
 
 func (e *UnsupportedError) Error() string {
 	return e.Msg
@@ -47,15 +43,10 @@ type QueryInfo interface {
 }
 
 // An ordinary query (not containing and/or expressions).
-type OrdinaryQuery struct {
-	Query     *Query           // the validated search query
-	parseTree syntax.ParseTree // the parsed search query
-}
+type OrdinaryQuery struct { /* all structs must go */ }
 
 // A query containing and/or expressions.
-type AndOrQuery struct {
-	Query []Node
-}
+type AndOrQuery struct { /* all structs must go */ }
 
 func (q OrdinaryQuery) RegexpPatterns(field string) (values, negatedValues []string) {
 	return q.Query.RegexpPatterns(field)
diff --git a/internal/search/query/types/check.go b/internal/search/query/types/check.go
index 162408a..172b755 100644
--- a/internal/search/query/types/check.go
+++ b/internal/search/query/types/check.go
@@ -12,32 +12,17 @@ import (
 )
 
 // TypeError describes an error in query typechecking.
-type TypeError struct {
-	Pos int   // the character position where the error occurred
-	Err error // the error
-}
+type TypeError struct { /* all structs must go */ }
 
 func (e *TypeError) Error() string {
 	return fmt.Sprintf("type error at character %d: %s", e.Pos, e.Err)
 }
 
 // Config specifies configuration for parsing a query.
-type Config struct {
-	FieldTypes   map[string]FieldType // map of recognized field name (excluding aliases) -> type
-	FieldAliases map[string]string    // map of field alias -> field name
-}
+type Config struct { /* all structs must go */ }
 
 // FieldType describes the type of a query field.
-type FieldType struct {
-	Literal   ValueType // interpret literal tokens as being of this type
-	Quoted    ValueType // interpret literal tokens as being of this type
-	Singular  bool      // whether the field may only be used 0 or 1 times
-	Negatable bool      // whether the field can be matched negated (i.e., -field:value)
-
-	// FeatureFlagEnabled returns true if this field is enabled.
-	// The field is always enabled if this is nil.
-	FeatureFlagEnabled func() bool
-}
+type FieldType struct { /* all structs must go */ }
 
 // Check typechecks the input query for field and type validity.
 func (c *Config) Check(parseTree syntax.ParseTree) (*Fields, error) {
diff --git a/internal/search/query/types/check_test.go b/internal/search/query/types/check_test.go
index 68c19bc..ef2c23b 100644
--- a/internal/search/query/types/check_test.go
+++ b/internal/search/query/types/check_test.go
@@ -12,10 +12,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/search/query/syntax"
 )
 
-type value struct {
-	Not   bool
-	Value interface{}
-}
+type value struct { /* all structs must go */ }
 
 func TestCheck(t *testing.T) {
 	toValue := func(v *Value) value { return value{Not: v.Not(), Value: v.Value()} }
@@ -52,10 +49,7 @@ func TestCheck(t *testing.T) {
 			"r2": "r",
 		},
 	}
-	tests := map[string]struct {
-		want    map[string][]value
-		wantErr *TypeError
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"":        {want: map[string][]value{}},
 		"a":       {want: map[string][]value{"": {{Value: regexp.MustCompile("a")}}}},
 		" a ":     {want: map[string][]value{"": {{Value: regexp.MustCompile("a")}}}},
@@ -156,10 +150,7 @@ func TestRegexpCompile(t *testing.T) {
 
 func TestAutoFix(t *testing.T) {
 	t.Run("handcrafted cases", func(t *testing.T) {
-		tests := []struct {
-			pat  string
-			want string
-		}{
+		tests := []struct { /* all structs must go */ }{
 			{"", ""},
 			{"a", "a"},
 			{"(", `\(`},
diff --git a/internal/search/query/types/query.go b/internal/search/query/types/query.go
index 78d8582..e889bec 100644
--- a/internal/search/query/types/query.go
+++ b/internal/search/query/types/query.go
@@ -44,13 +44,7 @@ const (
 )
 
 // A Value is a field value in a query.
-type Value struct {
-	syntax *syntax.Expr // the underlying query expression
-
-	String *string        // if a string value, the string value (with escape sequences interpreted)
-	Regexp *regexp.Regexp // if a regexp pattern, the compiled regular expression (call its String method to get source pattern string)
-	Bool   *bool          // if a bool value, the bool value
-}
+type Value struct { /* all structs must go */ }
 
 // Not returns whether the value is negated in the query (e.g., -value or -field:value).
 func (v *Value) Not() bool {
diff --git a/internal/search/query/validate_test.go b/internal/search/query/validate_test.go
index 3108cc2..efd181b 100644
--- a/internal/search/query/validate_test.go
+++ b/internal/search/query/validate_test.go
@@ -9,10 +9,7 @@ import (
 )
 
 func TestAndOrQuery_Validation(t *testing.T) {
-	cases := []struct {
-		input string
-		want  string
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			input: "case:yes case:no",
 			want:  `field "case" may not be used more than once`,
@@ -70,11 +67,7 @@ func TestAndOrQuery_Validation(t *testing.T) {
 }
 
 func TestAndOrQuery_IsCaseSensitive(t *testing.T) {
-	cases := []struct {
-		name  string
-		input string
-		want  bool
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			name:  "yes",
 			input: "case:yes",
@@ -106,15 +99,8 @@ func TestAndOrQuery_IsCaseSensitive(t *testing.T) {
 }
 
 func TestAndOrQuery_RegexpPatterns(t *testing.T) {
-	type want struct {
-		values        []string
-		negatedValues []string
-	}
-	c := struct {
-		query string
-		field string
-		want
-	}{
+	type want struct { /* all structs must go */ }
+	c := struct { /* all structs must go */ }{
 		query: "r:a r:b -r:c",
 		field: "repo",
 		want: want{
@@ -155,10 +141,7 @@ func TestAndOrQuery_CaseInsensitiveFields(t *testing.T) {
 }
 
 func TestPartitionSearchPattern(t *testing.T) {
-	cases := []struct {
-		input string
-		want  string
-	}{
+	cases := []struct { /* all structs must go */ }{
 		{
 			input: "x",
 			want:  `"x"`,
diff --git a/internal/search/query/visitor.go b/internal/search/query/visitor.go
index 2d83a49..d3d6708 100644
--- a/internal/search/query/visitor.go
+++ b/internal/search/query/visitor.go
@@ -40,10 +40,7 @@ func (*BaseVisitor) VisitPattern(visitor Visitor, value string, negated bool, an
 
 // ParameterVisitor is a helper visitor that only visits operators in a query,
 // and supplies the operator members via a callback.
-type OperatorVisitor struct {
-	BaseVisitor
-	callback func(kind operatorKind, operands []Node)
-}
+type OperatorVisitor struct { /* all structs must go */ }
 
 func (s *OperatorVisitor) VisitOperator(visitor Visitor, kind operatorKind, operands []Node) {
 	s.callback(kind, operands)
@@ -52,10 +49,7 @@ func (s *OperatorVisitor) VisitOperator(visitor Visitor, kind operatorKind, oper
 
 // ParameterVisitor is a helper visitor that only visits parameters in a query,
 // and supplies the parameter members via a callback.
-type ParameterVisitor struct {
-	BaseVisitor
-	callback func(field, value string, negated bool)
-}
+type ParameterVisitor struct { /* all structs must go */ }
 
 func (s *ParameterVisitor) VisitParameter(visitor Visitor, field, value string, negated bool) {
 	s.callback(field, value, negated)
@@ -63,10 +57,7 @@ func (s *ParameterVisitor) VisitParameter(visitor Visitor, field, value string,
 
 // PatternVisitor is a helper visitor that only visits patterns in a query,
 // and supplies the pattern members via a callback.
-type PatternVisitor struct {
-	BaseVisitor
-	callback func(value string, negated bool, annotation Annotation)
-}
+type PatternVisitor struct { /* all structs must go */ }
 
 func (s *PatternVisitor) VisitPattern(visitor Visitor, value string, negated bool, annotation Annotation) {
 	s.callback(value, negated, annotation)
@@ -75,11 +66,7 @@ func (s *PatternVisitor) VisitPattern(visitor Visitor, value string, negated boo
 // FieldVisitor is a helper visitor that only visits parameter fields in a
 // query, for a field specified in the state. For each parameter with
 // this field name it calls the callback with the field's members.
-type FieldVisitor struct {
-	BaseVisitor
-	field    string
-	callback func(value string, negated bool)
-}
+type FieldVisitor struct { /* all structs must go */ }
 
 func (s *FieldVisitor) VisitParameter(visitor Visitor, field, value string, negated bool) {
 	if s.field == field {
diff --git a/internal/search/repo_revs.go b/internal/search/repo_revs.go
index 9b10aca..ed3a03f 100644
--- a/internal/search/repo_revs.go
+++ b/internal/search/repo_revs.go
@@ -12,19 +12,7 @@ import (
 
 // RevisionSpecifier represents either a revspec or a ref glob. At most one
 // field is set. The default branch is represented by all fields being empty.
-type RevisionSpecifier struct {
-	// RevSpec is a revision range specifier suitable for passing to git. See
-	// the manpage gitrevisions(7).
-	RevSpec string
-
-	// RefGlob is a reference glob to pass to git. See the documentation for
-	// "--glob" in git-log.
-	RefGlob string
-
-	// ExcludeRefGlob is a glob for references to exclude. See the
-	// documentation for "--exclude" in git-log.
-	ExcludeRefGlob string
-}
+type RevisionSpecifier struct { /* all structs must go */ }
 
 func (r1 RevisionSpecifier) String() string {
 	if r1.ExcludeRefGlob != "" {
@@ -54,14 +42,7 @@ func (r1 RevisionSpecifier) Less(r2 RevisionSpecifier) bool {
 // RepositoryRevisions specifies a repository and 0 or more revspecs and ref
 // globs.  If no revspecs and no ref globs are specified, then the
 // repository's default branch is used.
-type RepositoryRevisions struct {
-	Repo *types.Repo
-	Revs []RevisionSpecifier
-
-	// ListRefs is called to list all Git refs for a repository. It is intended to be mocked by
-	// tests. If nil, git.ListRefs is used.
-	ListRefs func(context.Context, gitserver.Repo) ([]git.Ref, error)
-}
+type RepositoryRevisions struct { /* all structs must go */ }
 
 func (r *RepositoryRevisions) Equal(other *RepositoryRevisions) bool {
 	return reflect.DeepEqual(r.Repo, other.Repo) && reflect.DeepEqual(r.Revs, other.Revs)
diff --git a/internal/search/repo_revs_test.go b/internal/search/repo_revs_test.go
index eb8d9a2..4e7b7c5 100644
--- a/internal/search/repo_revs_test.go
+++ b/internal/search/repo_revs_test.go
@@ -6,10 +6,7 @@ import (
 )
 
 func TestParseRepositoryRevisions(t *testing.T) {
-	tests := map[string]struct {
-		repo string
-		revs []RevisionSpecifier
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"repo":           {repo: "repo", revs: []RevisionSpecifier{}},
 		"repo@":          {repo: "repo", revs: []RevisionSpecifier{{RevSpec: ""}}},
 		"repo@rev":       {repo: "repo", revs: []RevisionSpecifier{{RevSpec: "rev"}}},
diff --git a/internal/search/types.go b/internal/search/types.go
index f77ba44..6ee07fd 100644
--- a/internal/search/types.go
+++ b/internal/search/types.go
@@ -21,114 +21,26 @@ func (d DiffParameters) typeParametersValue()    {}
 func (s SymbolsParameters) typeParametersValue() {}
 func (t TextParameters) typeParametersValue()    {}
 
-type CommitParameters struct {
-	RepoRevs           *RepositoryRevisions
-	PatternInfo        *CommitPatternInfo
-	Query              query.QueryInfo
-	Diff               bool
-	ExtraMessageValues []string
-}
-
-type DiffParameters struct {
-	Repo    gitserver.Repo
-	Options git.RawLogDiffSearchOptions
-}
-
-type SymbolsParameters struct {
-	// Repo is the name of the repository to search in.
-	Repo api.RepoName `json:"repo"`
-
-	// CommitID is the commit to search in.
-	CommitID api.CommitID `json:"commitID"`
-
-	// Query is the search query.
-	Query string
+type CommitParameters struct { /* all structs must go */ }
 
-	// IsRegExp if true will treat the Pattern as a regular expression.
-	IsRegExp bool
+type DiffParameters struct { /* all structs must go */ }
 
-	// IsCaseSensitive if false will ignore the case of query and file pattern
-	// when finding matches.
-	IsCaseSensitive bool
-
-	// IncludePatterns is a list of regexes that symbol's file paths
-	// need to match to get included in the result
-	//
-	// The patterns are ANDed together; a file's path must match all patterns
-	// for it to be kept. That is also why it is a list (unlike the singular
-	// ExcludePattern); it is not possible in general to construct a single
-	// glob or Go regexp that represents multiple such patterns ANDed together.
-	IncludePatterns []string
-
-	// ExcludePattern is an optional regex that symbol's file paths
-	// need to match to get included in the result
-	ExcludePattern string
-
-	// First indicates that only the first n symbols should be returned.
-	First int
-}
+type SymbolsParameters struct { /* all structs must go */ }
 
 // TextParameters are the parameters passed to a search backend. It contains the Pattern
 // to search for, as well as the hydrated list of repository revisions to
 // search. It defines behavior for text search on repository names, file names, and file content.
-type TextParameters struct {
-	PatternInfo *TextPatternInfo
-	Repos       []*RepositoryRevisions
-
-	// Query is the parsed query from the user. You should be using Pattern
-	// instead, but Query is useful for checking extra fields that are set and
-	// ignored by Pattern, such as index:no
-	Query query.QueryInfo
-
-	// UseFullDeadline indicates that the search should try do as much work as
-	// it can within context.Deadline. If false the search should try and be
-	// as fast as possible, even if a "slow" deadline is set.
-	//
-	// For example searcher will wait to full its archive cache for a
-	// repository if this field is true. Another example is we set this field
-	// to true if the user requests a specific timeout or maximum result size.
-	UseFullDeadline bool
-
-	Zoekt        *searchbackend.Zoekt
-	SearcherURLs *endpoint.Map
-}
+type TextParameters struct { /* all structs must go */ }
 
 // TextParametersForCommitParameters is an intermediate type based on
 // TextParameters that encodes parameters exclusively for a commit search. The
 // commit search internals converts this type to CommitParameters. The
 // commitParameter type definitions will be merged in future.
-type TextParametersForCommitParameters struct {
-	PatternInfo *CommitPatternInfo
-	Repos       []*RepositoryRevisions
-	Query       query.QueryInfo
-}
+type TextParametersForCommitParameters struct { /* all structs must go */ }
 
 // TextPatternInfo is the struct used by vscode pass on search queries. Keep it in
 // sync with pkg/searcher/protocol.PatternInfo.
-type TextPatternInfo struct {
-	Pattern         string
-	IsRegExp        bool
-	IsStructuralPat bool
-	CombyRule       string
-	IsWordMatch     bool
-	IsCaseSensitive bool
-	FileMatchLimit  int32
-
-	// We do not support IsMultiline
-	// IsMultiline     bool
-	IncludePatterns []string
-	ExcludePattern  string
-
-	FilePatternsReposMustInclude []string
-	FilePatternsReposMustExclude []string
-
-	PathPatternsAreCaseSensitive bool
-
-	PatternMatchesContent bool
-	PatternMatchesPath    bool
-
-	Languages []string
-}
+type TextPatternInfo struct { /* all structs must go */ }
 
 func (p *TextPatternInfo) String() string {
 	args := []string{fmt.Sprintf("%q", p.Pattern)}
@@ -184,15 +96,4 @@ func (p *TextPatternInfo) String() string {
 
 // CommitPatternInfo is the data type that describes the properties of
 // a pattern used for commit search.
-type CommitPatternInfo struct {
-	Pattern         string
-	IsRegExp        bool
-	IsCaseSensitive bool
-	FileMatchLimit  int32
-
-	IncludePatterns []string
-	ExcludePattern  string
-
-	PathPatternsAreRegExps       bool
-	PathPatternsAreCaseSensitive bool
-}
+type CommitPatternInfo struct { /* all structs must go */ }
diff --git a/internal/slack/slack.go b/internal/slack/slack.go
index 3f3791b..316d9b8 100644
--- a/internal/slack/slack.go
+++ b/internal/slack/slack.go
@@ -15,9 +15,7 @@ import (
 )
 
 // Client is capable of posting a message to a Slack webhook
-type Client struct {
-	WebhookURL string
-}
+type Client struct { /* all structs must go */ }
 
 // New creates a new Slack client
 func New(webhookURL string) *Client {
@@ -26,40 +24,15 @@ func New(webhookURL string) *Client {
 
 // Payload is the wrapper for a Slack message, defined at:
 // https://api.slack.com/docs/message-formatting
-type Payload struct {
-	Username    string        `json:"username,omitempty"`
-	IconEmoji   string        `json:"icon_emoji,omitempty"`
-	UnfurlLinks bool          `json:"unfurl_links,omitempty"`
-	UnfurlMedia bool          `json:"unfurl_media,omitempty"`
-	Text        string        `json:"text,omitempty"`
-	Attachments []*Attachment `json:"attachments,omitempty"`
-}
+type Payload struct { /* all structs must go */ }
 
 // Attachment is a Slack message attachment, defined at:
 // https://api.slack.com/docs/message-attachments
-type Attachment struct {
-	AuthorIcon string   `json:"author_icon,omitempty"`
-	AuthorLink string   `json:"author_link,omitempty"`
-	AuthorName string   `json:"author_name,omitempty"`
-	Color      string   `json:"color"`
-	Fallback   string   `json:"fallback"`
-	Fields     []*Field `json:"fields"`
-	Footer     string   `json:"footer"`
-	MarkdownIn []string `json:"mrkdwn_in"`
-	ThumbURL   string   `json:"thumb_url"`
-	Text       string   `json:"text,omitempty"`
-	Timestamp  int64    `json:"ts"`
-	Title      string   `json:"title"`
-	TitleLink  string   `json:"title_link,omitempty"`
-}
+type Attachment struct { /* all structs must go */ }
 
 // Field is a single item within an attachment, defined at:
 // https://api.slack.com/docs/message-attachments
-type Field struct {
-	Short bool   `json:"short"`
-	Title string `json:"title"`
-	Value string `json:"value"`
-}
+type Field struct { /* all structs must go */ }
 
 // Post sends payload to a Slack channel.
 func (c *Client) Post(ctx context.Context, payload *Payload) error {
diff --git a/internal/sqliteutil/batch_inserter.go b/internal/sqliteutil/batch_inserter.go
index 20dff7c..68496d5 100644
--- a/internal/sqliteutil/batch_inserter.go
+++ b/internal/sqliteutil/batch_inserter.go
@@ -16,14 +16,7 @@ import (
 // BenchmarkSQLiteInsertion-8                    	   40417	     29440 ns/op
 // BenchmarkSQLiteInsertionInTransaction-8       	  214681	      5542 ns/op
 // BenchmarkSQLiteInsertionWithBatchInserter-8   	  324998	      3701 ns/op
-type BatchInserter struct {
-	db                Execable
-	numColumns        int
-	maxBatchSize      int
-	batch             []interface{}
-	queryPrefix       string
-	queryPlaceholders []string
-}
+type BatchInserter struct { /* all structs must go */ }
 
 // MaxNumSqliteParameters is the number of `?` placeholders that can be sent to SQLite without error.
 const MaxNumSqliteParameters = 999
diff --git a/internal/src-cli/version.go b/internal/src-cli/version.go
index 1d90d34..0919443 100644
--- a/internal/src-cli/version.go
+++ b/internal/src-cli/version.go
@@ -12,11 +12,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/linkheader"
 )
 
-type releaseMeta struct {
-	TagName    string `json:"tag_name"`
-	Draft      bool   `json:"draft"`
-	Prerelease bool   `json:"prerelease"`
-}
+type releaseMeta struct { /* all structs must go */ }
 
 const githubAPIReleasesEndpoint = "https://api.github.com/repos/sourcegraph/src-cli/releases"
 
diff --git a/internal/store/retry_test.go b/internal/store/retry_test.go
index f2ebda5..c3756ae 100644
--- a/internal/store/retry_test.go
+++ b/internal/store/retry_test.go
@@ -9,11 +9,7 @@ import (
 )
 
 func TestGetZipFileWithRetry(t *testing.T) {
-	tests := []struct {
-		name     string
-		errs     []error
-		succeeds bool
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name:     "success first try",
 			errs:     []error{nil},
diff --git a/internal/store/store.go b/internal/store/store.go
index aa46e7f..5204857 100644
--- a/internal/store/store.go
+++ b/internal/store/store.go
@@ -50,33 +50,7 @@ const maxFileSize = 1 << 20 // 1MB; match https://sourcegraph.com/search?q=repo:
 // filter which files we cache, so we need a format that supports streaming
 // (tar). We want to be able to support random concurrent access for reading,
 // so we store as a zip.
-type Store struct {
-	// FetchTar returns an io.ReadCloser to a tar archive of a repository at the specified Git
-	// remote URL and commit ID. If the error implements "BadRequest() bool", it will be used to
-	// determine if the error is a bad request (eg invalid repo).
-	FetchTar func(ctx context.Context, repo gitserver.Repo, commit api.CommitID) (io.ReadCloser, error)
-
-	// Path is the directory to store the cache
-	Path string
-
-	// MaxCacheSizeBytes is the maximum size of the cache in bytes. Note:
-	// We can temporarily be larger than MaxCacheSizeBytes. When we go
-	// over MaxCacheSizeBytes we trigger delete files until we get below
-	// MaxCacheSizeBytes.
-	MaxCacheSizeBytes int64
-
-	// once protects Start
-	once sync.Once
-
-	// cache is the disk backed cache.
-	cache *diskcache.Store
-
-	// fetchLimiter limits concurrent calls to FetchTar.
-	fetchLimiter *mutablelimiter.Limiter
-
-	// ZipCache provides efficient access to repo zip files.
-	ZipCache ZipCache
-}
+type Store struct { /* all structs must go */ }
 
 // SetMaxConcurrentFetchTar sets the maximum number of concurrent calls allowed
 // to FetchTar. It defaults to 15.
@@ -142,10 +116,7 @@ func (s *Store) PrepareZip(ctx context.Context, repo gitserver.Repo, commit api.
 
 	// Our fetch can take a long time, and the frontend aggressively cancels
 	// requests. So we open in the background to give it extra time.
-	type result struct {
-		path string
-		err  error
-	}
+	type result struct { /* all structs must go */ }
 	resC := make(chan result, 1)
 	go func() {
 		// TODO: consider adding a cache method that doesn't actually bother opening the file,
@@ -399,9 +370,7 @@ var (
 // temporaryError wraps an error but adds the Temporary method. It does not
 // implement Cause so that errors.Cause() returns an error which implements
 // Temporary.
-type temporaryError struct {
-	error
-}
+type temporaryError struct { /* all structs must go */ }
 
 func (temporaryError) Temporary() bool {
 	return true
diff --git a/internal/store/store_test.go b/internal/store/store_test.go
index 8cc40d9..5ce7386 100644
--- a/internal/store/store_test.go
+++ b/internal/store/store_test.go
@@ -125,10 +125,7 @@ func TestIngoreSizeMax(t *testing.T) {
 		"*.foo",
 		"bar.baz",
 	}
-	tests := []struct {
-		name    string
-		ignored bool
-	}{
+	tests := []struct { /* all structs must go */ }{
 		// Pass
 		{"foo", true},
 		{"foo.bar", true},
diff --git a/internal/store/zipcache.go b/internal/store/zipcache.go
index f1a746e..bae6cc0 100644
--- a/internal/store/zipcache.go
+++ b/internal/store/zipcache.go
@@ -18,22 +18,9 @@ import (
 
 // A ZipCache is a shared data structure that provides efficient access to a collection of zip files.
 // The zero value is usable.
-type ZipCache struct {
-	// Split the cache into many parts, to minimize lock contention.
-	// This matters because, for simplicity,
-	// we sometimes hold the lock for long-running operations,
-	// such as reading a zip file from disk
-	// or waiting for all users of a zip file to finish their work.
-	// (The latter case should basically never block, since it only
-	// occurs when a file is being deleted, and files are deleted
-	// when no one has used them for a long time. Nevertheless, take care.)
-	shards [64]zipCacheShard
-}
+type ZipCache struct { /* all structs must go */ }
 
-type zipCacheShard struct {
-	mu sync.Mutex
-	m  map[string]*ZipFile // path -> zipFile
-}
+type zipCacheShard struct { /* all structs must go */ }
 
 func (c *ZipCache) shardFor(path string) *zipCacheShard {
 	h := fnv.New32()
@@ -94,15 +81,7 @@ func (c *ZipCache) delete(path string) {
 }
 
 // ZipFile provides efficient access to a single zip file.
-type ZipFile struct {
-	// Take care with the size of this struct.
-	// There are many zipFiles present during typical usage.
-	Files  []SrcFile
-	MaxLen int
-	Data   []byte
-	f      *os.File
-	wg     sync.WaitGroup // ensures underlying file is not munmap'd or closed while in use
-}
+type ZipFile struct { /* all structs must go */ }
 
 func readZipFile(path string) (*ZipFile, error) {
 	// Open zip file at path, prepare to read it.
@@ -193,16 +172,7 @@ func MockZipFile(data []byte) (*ZipFile, error) {
 }
 
 // A SrcFile is a single file inside a ZipFile.
-type SrcFile struct {
-	// Take care with the size of this struct.
-	// There will be *lots* of these in memory.
-	// This is why Len is a 32 bit int.
-	// (Note that this means that ZipCache cannot
-	// handle files inside the zip archive bigger than 2gb.)
-	Name string
-	Off  int64
-	Len  int32
-}
+type SrcFile struct { /* all structs must go */ }
 
 // Data returns the contents of s, which is a SrcFile in f.
 // The contents MUST NOT be modified.
diff --git a/internal/symbols/client.go b/internal/symbols/client.go
index 2346c0b..8e0b42c 100644
--- a/internal/symbols/client.go
+++ b/internal/symbols/client.go
@@ -43,24 +43,9 @@ var DefaultClient = &Client{
 }
 
 // Client is a symbols service client.
-type Client struct {
-	// URL to symbols service.
-	URL string
+type Client struct { /* all structs must go */ }
 
-	// HTTP client to use
-	HTTPClient *http.Client
-
-	// Limits concurrency of outstanding HTTP posts
-	HTTPLimiter *parallel.Run
-
-	once     sync.Once
-	endpoint *endpoint.Map
-}
-
-type key struct {
-	repo     api.RepoName
-	commitID api.CommitID
-}
+type key struct { /* all structs must go */ }
 
 func (c *Client) url(key key) (string, error) {
 	c.once.Do(func() {
diff --git a/internal/symbols/protocol/symbols.go b/internal/symbols/protocol/symbols.go
index 3c4cdde..d98b469 100644
--- a/internal/symbols/protocol/symbols.go
+++ b/internal/symbols/protocol/symbols.go
@@ -3,56 +3,10 @@ package protocol
 import "github.com/sourcegraph/sourcegraph/internal/api"
 
 // SearchArgs are the arguments to perform a search on the symbols service.
-type SearchArgs struct {
-	// Repo is the name of the repository to search in.
-	Repo api.RepoName `json:"repo"`
-
-	// CommitID is the commit to search in.
-	CommitID api.CommitID `json:"commitID"`
-
-	// Query is the search query.
-	Query string
-
-	// IsRegExp if true will treat the Pattern as a regular expression.
-	IsRegExp bool
-
-	// IsCaseSensitive if false will ignore the case of query and file pattern
-	// when finding matches.
-	IsCaseSensitive bool
-
-	// IncludePatterns is a list of regexes that symbol's file paths
-	// need to match to get included in the result
-	//
-	// The patterns are ANDed together; a file's path must match all patterns
-	// for it to be kept. That is also why it is a list (unlike the singular
-	// ExcludePattern); it is not possible in general to construct a single
-	// glob or Go regexp that represents multiple such patterns ANDed together.
-	IncludePatterns []string
-
-	// ExcludePattern is an optional regex that symbol's file paths
-	// need to match to get included in the result
-	ExcludePattern string
-
-	// First indicates that only the first n symbols should be returned.
-	First int
-}
+type SearchArgs struct { /* all structs must go */ }
 
 // SearchResult is the result of a search on the symbols service.
-type SearchResult struct {
-	Symbols []Symbol // code symbols
-}
+type SearchResult struct { /* all structs must go */ }
 
 // Symbol is a code symbol.
-type Symbol struct {
-	Name       string
-	Path       string
-	Line       int
-	Kind       string
-	Language   string
-	Parent     string
-	ParentKind string
-	Signature  string
-	Pattern    string
-
-	FileLimited bool
-}
+type Symbol struct { /* all structs must go */ }
diff --git a/internal/sysreq/sysreq.go b/internal/sysreq/sysreq.go
index a4f9a27..79b200a 100644
--- a/internal/sysreq/sysreq.go
+++ b/internal/sysreq/sysreq.go
@@ -8,13 +8,7 @@ import (
 )
 
 // Status describes the status of a system requirement.
-type Status struct {
-	Name    string // the required component
-	Problem string // if non-empty, a description of the problem
-	Fix     string // if non-empty, how to fix the problem
-	Err     error  // if non-nil, the error encountered
-	Skipped bool   // if true, indicates this check was skipped
-}
+type Status struct { /* all structs must go */ }
 
 // OK is whether the component is present, has no errors, and was not
 // skipped.
@@ -58,10 +52,7 @@ func Check(ctx context.Context, skip []string) []Status {
 	return statuses
 }
 
-type check struct {
-	Name  string
-	Check CheckFunc
-}
+type check struct { /* all structs must go */ }
 
 // CheckFunc is a function that checks for a system requirement. If
 // any of problem, fix, or err are non-zero, then the system
diff --git a/internal/testutil/github_archive.go b/internal/testutil/github_archive.go
index 42547b3..e2e14a1 100644
--- a/internal/testutil/github_archive.go
+++ b/internal/testutil/github_archive.go
@@ -97,10 +97,7 @@ func fsync(path string) error {
 	return err
 }
 
-type gzipReadCloser struct {
-	f *os.File
-	r *gzip.Reader
-}
+type gzipReadCloser struct { /* all structs must go */ }
 
 func (z *gzipReadCloser) Read(p []byte) (int, error) {
 	return z.r.Read(p)
diff --git a/internal/trace/httptrace.go b/internal/trace/httptrace.go
index 5e19f96..7fddb85 100644
--- a/internal/trace/httptrace.go
+++ b/internal/trace/httptrace.go
@@ -288,11 +288,7 @@ func SetRouteName(r *http.Request, routeName string) {
 	}
 }
 
-type httpErr struct {
-	status int
-	method string
-	path   string
-}
+type httpErr struct { /* all structs must go */ }
 
 func (e *httpErr) Error() string {
 	return fmt.Sprintf("HTTP status %d, %s %s", e.status, e.method, e.path)
diff --git a/internal/trace/ot/ot.go b/internal/trace/ot/ot.go
index cbf07bb..8e777f0 100644
--- a/internal/trace/ot/ot.go
+++ b/internal/trace/ot/ot.go
@@ -93,9 +93,7 @@ func requestWantsTracing(r *http.Request) bool {
 
 // Transport wraps an underlying HTTP RoundTripper, injecting the X-Sourcegraph-Should-Trace header
 // into outgoing requests whenever the shouldTraceKey context value is true.
-type Transport struct {
-	http.RoundTripper
-}
+type Transport struct { /* all structs must go */ }
 
 func (r *Transport) RoundTrip(req *http.Request) (*http.Response, error) {
 	req.Header.Set(traceHeader, strconv.FormatBool(ShouldTrace(req.Context())))
diff --git a/internal/trace/traceutil.go b/internal/trace/traceutil.go
index 4e0d64d..a5e7e1a 100644
--- a/internal/trace/traceutil.go
+++ b/internal/trace/traceutil.go
@@ -30,9 +30,7 @@ func New(ctx context.Context, family, title string) (*Trace, context.Context) {
 // A Tracer for trace creation, parameterised over an
 // opentracing.Tracer. Use this if you don't want to use
 // the global tracer.
-type Tracer struct {
-	Tracer opentracing.Tracer
-}
+type Tracer struct { /* all structs must go */ }
 
 // New returns a new Trace with the specified family and title.
 func (t Tracer) New(ctx context.Context, family, title string) (*Trace, context.Context) {
@@ -72,11 +70,7 @@ func TraceFromContext(ctx context.Context) *Trace {
 
 // Trace is a combined version of golang.org/x/net/trace.Trace and
 // opentracing.Span. Use New to construct one.
-type Trace struct {
-	trace  nettrace.Trace
-	span   opentracing.Span
-	family string
-}
+type Trace struct { /* all structs must go */ }
 
 // LazyPrintf evaluates its arguments with fmt.Sprintf each time the
 // /debug/requests page is rendered. Any memory referenced by a will be
@@ -153,10 +147,7 @@ func (fs fieldsStringer) String() string {
 }
 
 // encoder is a log.Encoder used by fieldsStringer.
-type encoder struct {
-	strings.Builder
-	prefixNewline bool
-}
+type encoder struct { /* all structs must go */ }
 
 func (e *encoder) EmitString(key, value string) {
 	if e.prefixNewline {
diff --git a/internal/tracer/tracer.go b/internal/tracer/tracer.go
index fdf63ea..cd7aee5 100644
--- a/internal/tracer/tracer.go
+++ b/internal/tracer/tracer.go
@@ -82,10 +82,7 @@ func condensedFormat(r *log15.Record) []byte {
 }
 
 // Options control the behavior of a tracer.
-type Options struct {
-	filters     []func(*log15.Record) bool
-	serviceName string
-}
+type Options struct { /* all structs must go */ }
 
 // If this idiom seems strange:
 // https://github.com/tmrts/go-patterns/blob/master/idiom/functional-options.md
@@ -246,12 +243,7 @@ func initTracer(opts *Options) {
 
 // switchableTracer implements opentracing.Tracer. The underlying tracer used is switchable (set via
 // the `set` method).
-type switchableTracer struct {
-	mu           sync.RWMutex
-	tracer       opentracing.Tracer
-	tracerCloser io.Closer
-	log          bool
-}
+type switchableTracer struct { /* all structs must go */ }
 
 func newSwitchableTracer() *switchableTracer {
 	return &switchableTracer{tracer: opentracing.NoopTracer{}}
diff --git a/internal/txemail/template_test.go b/internal/txemail/template_test.go
index 740308d..7a2c8d5 100644
--- a/internal/txemail/template_test.go
+++ b/internal/txemail/template_test.go
@@ -23,10 +23,7 @@ func TestParseTemplate(t *testing.T) {
 	}
 
 	var m email.Email
-	if err := renderTemplate(pt, struct {
-		A string
-		B string
-	}{
+	if err := renderTemplate(pt, struct { /* all structs must go */ }{
 		A: "a",
 		B: `<b>`,
 	}, &m); err != nil {
diff --git a/internal/txemail/txemail.go b/internal/txemail/txemail.go
index ca400c9..1c31b4a 100644
--- a/internal/txemail/txemail.go
+++ b/internal/txemail/txemail.go
@@ -17,16 +17,7 @@ import (
 )
 
 // Message describes an email message to be sent.
-type Message struct {
-	FromName   string   // email "From" address proper name
-	To         []string // email "To" recipients
-	ReplyTo    *string  // optional "ReplyTo" address
-	MessageID  *string  // optional "Message-ID" header
-	References []string // optional "References" header list
-
-	Template txtypes.Templates // unparsed subject/body templates
-	Data     interface{}       // template data
-}
+type Message struct { /* all structs must go */ }
 
 // render returns the rendered message contents without sending email.
 func render(message Message) (*email.Email, error) {
diff --git a/internal/txemail/txemail_test.go b/internal/txemail/txemail_test.go
index 487f968..1f030f8 100644
--- a/internal/txemail/txemail_test.go
+++ b/internal/txemail/txemail_test.go
@@ -28,10 +28,7 @@ func TestRender(t *testing.T) {
 	{{.A}} html body <span class="{{.B}}" />
 	`,
 		},
-		Data: struct {
-			A string
-			B string
-		}{
+		Data: struct { /* all structs must go */ }{
 			A: "a",
 			B: `<b>`,
 		},
diff --git a/internal/txemail/txtypes/types.go b/internal/txemail/txtypes/types.go
index 1bc840d..5b475fd 100644
--- a/internal/txemail/txtypes/types.go
+++ b/internal/txemail/txtypes/types.go
@@ -6,27 +6,10 @@ import (
 )
 
 // Message describes an email message to be sent.
-type Message struct {
-	FromName   string   // email "From" address proper name
-	To         []string // email "To" recipients
-	ReplyTo    *string  // optional "ReplyTo" address
-	MessageID  *string  // optional "Message-ID" header
-	References []string // optional "References" header list
-
-	Template Templates   // unparsed subject/body templates
-	Data     interface{} // template data
-}
+type Message struct { /* all structs must go */ }
 
 // Templates contains the text and HTML templates for an email.
-type Templates struct {
-	Subject string // text/template subject template
-	Text    string // text/template text body template
-	HTML    string //  html/template HTML body template
-}
+type Templates struct { /* all structs must go */ }
 
 // ParsedTemplates contains parsed text and HTML email templates.
-type ParsedTemplates struct {
-	Subj *texttemplate.Template
-	Text *texttemplate.Template
-	Html *htmltemplate.Template
-}
+type ParsedTemplates struct { /* all structs must go */ }
diff --git a/internal/vcs/errors.go b/internal/vcs/errors.go
index d2c938a..d78ee5d 100644
--- a/internal/vcs/errors.go
+++ b/internal/vcs/errors.go
@@ -3,15 +3,7 @@ package vcs
 import "github.com/sourcegraph/sourcegraph/internal/api"
 
 // RepoNotExistError is an error that reports a repository doesn't exist.
-type RepoNotExistError struct {
-	Repo api.RepoName
-
-	// CloneInProgress reports whether the repository is in process of being cloned.
-	CloneInProgress bool
-
-	// CloneProgress is a progress message from the running clone command.
-	CloneProgress string
-}
+type RepoNotExistError struct { /* all structs must go */ }
 
 func (RepoNotExistError) NotFound() bool { return true }
 
diff --git a/internal/vcs/git/blame.go b/internal/vcs/git/blame.go
index c67cccb..5b4d3eb 100644
--- a/internal/vcs/git/blame.go
+++ b/internal/vcs/git/blame.go
@@ -15,24 +15,10 @@ import (
 )
 
 // BlameOptions configures a blame.
-type BlameOptions struct {
-	NewestCommit api.CommitID `json:",omitempty" url:",omitempty"`
-	OldestCommit api.CommitID `json:",omitempty" url:",omitempty"` // or "" for the root commit
-
-	StartLine int `json:",omitempty" url:",omitempty"` // 1-indexed start byte (or 0 for beginning of file)
-	EndLine   int `json:",omitempty" url:",omitempty"` // 1-indexed end byte (or 0 for end of file)
-}
+type BlameOptions struct { /* all structs must go */ }
 
 // A Hunk is a contiguous portion of a file associated with a commit.
-type Hunk struct {
-	StartLine int // 1-indexed start line number
-	EndLine   int // 1-indexed end line number
-	StartByte int // 0-indexed start byte position (inclusive)
-	EndByte   int // 0-indexed end byte position (exclusive)
-	api.CommitID
-	Author  Signature
-	Message string
-}
+type Hunk struct { /* all structs must go */ }
 
 // BlameFile returns Git blame information about a file.
 func BlameFile(ctx context.Context, repo gitserver.Repo, path string, opt *BlameOptions) ([]*Hunk, error) {
diff --git a/internal/vcs/git/blame_test.go b/internal/vcs/git/blame_test.go
index 2d13dab..6c71495 100644
--- a/internal/vcs/git/blame_test.go
+++ b/internal/vcs/git/blame_test.go
@@ -29,13 +29,7 @@ func TestRepository_BlameFile(t *testing.T) {
 			Message: "foo", Author: Signature{Name: "a", Email: "a@a.com", Date: MustParseTime(time.RFC3339, "2006-01-02T15:04:05Z")},
 		},
 	}
-	tests := map[string]struct {
-		repo gitserver.Repo
-		path string
-		opt  *BlameOptions
-
-		wantHunks []*Hunk
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"git cmd": {
 			repo: MakeGitRepository(t, gitCommands...),
 			path: "f",
diff --git a/internal/vcs/git/blob.go b/internal/vcs/git/blob.go
index 8646802..b894f09 100644
--- a/internal/vcs/git/blob.go
+++ b/internal/vcs/git/blob.go
@@ -77,14 +77,7 @@ func readFileBytes(ctx context.Context, repo gitserver.Repo, commit api.CommitID
 
 // blobReader, which should be created using newBlobReader, is a struct that allows
 // us to get a ReadCloser to a specific named file at a specific commit
-type blobReader struct {
-	ctx    context.Context
-	repo   gitserver.Repo
-	commit api.CommitID
-	name   string
-	cmd    *gitserver.Cmd
-	rc     io.ReadCloser
-}
+type blobReader struct { /* all structs must go */ }
 
 func newBlobReader(ctx context.Context, repo gitserver.Repo, commit api.CommitID, name string) (*blobReader, error) {
 	if err := ensureAbsoluteCommit(commit); err != nil {
diff --git a/internal/vcs/git/blob_test.go b/internal/vcs/git/blob_test.go
index cc38183..6933264 100644
--- a/internal/vcs/git/blob_test.go
+++ b/internal/vcs/git/blob_test.go
@@ -20,11 +20,7 @@ func TestRead(t *testing.T) {
 
 	ctx := context.Background()
 
-	tests := map[string]struct {
-		file     string
-		maxBytes int64
-		checkFn  func(*testing.T, error, []byte)
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"all": {
 			file: "file1",
 			checkFn: func(t *testing.T, err error, data []byte) {
diff --git a/internal/vcs/git/commits.go b/internal/vcs/git/commits.go
index 4f1d6f2..0770304 100644
--- a/internal/vcs/git/commits.go
+++ b/internal/vcs/git/commits.go
@@ -15,44 +15,12 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/trace/ot"
 )
 
-type Commit struct {
-	ID        api.CommitID `json:"ID,omitempty"`
-	Author    Signature    `json:"Author"`
-	Committer *Signature   `json:"Committer,omitempty"`
-	Message   string       `json:"Message,omitempty"`
-	// Parents are the commit IDs of this commit's parent commits.
-	Parents []api.CommitID `json:"Parents,omitempty"`
-}
+type Commit struct { /* all structs must go */ }
 
-type Signature struct {
-	Name  string    `json:"Name,omitempty"`
-	Email string    `json:"Email,omitempty"`
-	Date  time.Time `json:"Date"`
-}
+type Signature struct { /* all structs must go */ }
 
 // CommitsOptions specifies options for (Repository).Commits (Repository).CommitCount.
-type CommitsOptions struct {
-	Range string // commit range (revspec, "A..B", "A...B", etc.)
-
-	N    uint // limit the number of returned commits to this many (0 means no limit)
-	Skip uint // skip this many commits at the beginning
-
-	MessageQuery string // include only commits whose commit message contains this substring
-
-	Author string // include only commits whose author matches this
-	After  string // include only commits after this date
-
-	Path string // only commits modifying the given path are selected (optional)
-
-	// RemoteURLFunc is called to get the Git remote URL if it's not set in
-	// repo and if it is needed. The Git remote URL is only required if the
-	// gitserver doesn't already contain a clone of the repository or if the
-	// commit must be fetched from the remote.
-	RemoteURLFunc func() (string, error)
-
-	// When true we opt out of attempting to fetch missing revisions
-	NoEnsureRevision bool
-}
+type CommitsOptions struct { /* all structs must go */ }
 
 // logEntryPattern is the regexp pattern that matches entries in the output of the `git shortlog
 // -sne` command.
@@ -329,10 +297,7 @@ func parseCommitFromLog(data []byte) (commit *Commit, refs []string, rest []byte
 
 // onelineCommit contains (a subset of the) information about a commit returned
 // by `git log --oneline --source`.
-type onelineCommit struct {
-	sha1      string // sha1 commit ID
-	sourceRef string // `git log --source` source ref
-}
+type onelineCommit struct { /* all structs must go */ }
 
 // parseCommitsFromOnelineLog parses the commits from the output of:
 //
diff --git a/internal/vcs/git/commits_test.go b/internal/vcs/git/commits_test.go
index f3046a9..0e44cd6 100644
--- a/internal/vcs/git/commits_test.go
+++ b/internal/vcs/git/commits_test.go
@@ -24,12 +24,7 @@ func TestRepository_GetCommit(t *testing.T) {
 		Message:   "bar",
 		Parents:   []api.CommitID{"ea167fe3d76b1e5fd3ed8ca44cbd2fe3897684f8"},
 	}
-	tests := map[string]struct {
-		repo             gitserver.Repo
-		id               api.CommitID
-		wantCommit       *Commit
-		noEnsureRevision bool
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"git cmd with NoEnsureRevision false": {
 			repo:             MakeGitRepository(t, gitCommands...),
 			id:               "b266c7e3ca00b1a17ad0b1449825d0854225c007",
@@ -84,12 +79,7 @@ func TestRepository_GetCommit(t *testing.T) {
 func TestRepository_HasCommitAfter(t *testing.T) {
 	t.Parallel()
 
-	testCases := []struct {
-		commitDates []string
-		after       string
-		revspec     string
-		want        bool
-	}{
+	testCases := []struct { /* all structs must go */ }{
 		{
 			commitDates: []string{
 				"2006-01-02T15:04:05Z",
@@ -181,12 +171,7 @@ func TestRepository_Commits(t *testing.T) {
 			Parents:   nil,
 		},
 	}
-	tests := map[string]struct {
-		repo        gitserver.Repo
-		id          api.CommitID
-		wantCommits []*Commit
-		wantTotal   uint
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"git cmd": {
 			repo:        MakeGitRepository(t, gitCommands...),
 			id:          "b266c7e3ca00b1a17ad0b1449825d0854225c007",
@@ -262,12 +247,7 @@ func TestRepository_Commits_options(t *testing.T) {
 			Parents:   []api.CommitID{"b266c7e3ca00b1a17ad0b1449825d0854225c007"},
 		},
 	}
-	tests := map[string]struct {
-		repo        gitserver.Repo
-		opt         CommitsOptions
-		wantCommits []*Commit
-		wantTotal   uint
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"git cmd": {
 			repo:        MakeGitRepository(t, gitCommands...),
 			opt:         CommitsOptions{Range: "ade564eba4cf904492fb56dcd287ac633e6e082c", N: 1, Skip: 1},
@@ -340,12 +320,7 @@ func TestRepository_Commits_options_path(t *testing.T) {
 			Parents:   []api.CommitID{"a04652fa1998a0a7d2f2f77ecb7021de943d3aab"},
 		},
 	}
-	tests := map[string]struct {
-		repo        gitserver.Repo
-		opt         CommitsOptions
-		wantCommits []*Commit
-		wantTotal   uint
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"git cmd Path 0": {
 			repo: MakeGitRepository(t, gitCommands...),
 			opt: CommitsOptions{
diff --git a/internal/vcs/git/diff.go b/internal/vcs/git/diff.go
index 5813fed..c3f3f85 100644
--- a/internal/vcs/git/diff.go
+++ b/internal/vcs/git/diff.go
@@ -11,13 +11,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/gitserver"
 )
 
-type DiffOptions struct {
-	Repo gitserver.Repo
-
-	// These fields must be valid <commit> inputs as defined by gitrevisions(7).
-	Base string
-	Head string
-}
+type DiffOptions struct { /* all structs must go */ }
 
 // Diff returns an iterator that can be used to access the diff between two
 // commits on a per-file basis. The iterator must be closed with Close when no
@@ -59,10 +53,7 @@ func Diff(ctx context.Context, opts DiffOptions) (*DiffFileIterator, error) {
 	}, nil
 }
 
-type DiffFileIterator struct {
-	rdr  io.ReadCloser
-	mfdr *diff.MultiFileDiffReader
-}
+type DiffFileIterator struct { /* all structs must go */ }
 
 func (i *DiffFileIterator) Close() error {
 	return i.rdr.Close()
diff --git a/internal/vcs/git/diff_filter.go b/internal/vcs/git/diff_filter.go
index f3ab035..d42c85f 100644
--- a/internal/vcs/git/diff_filter.go
+++ b/internal/vcs/git/diff_filter.go
@@ -164,12 +164,7 @@ func diffHunkLineStatus(line []byte) (added, removed bool) {
 	return
 }
 
-type diffHunkLineInfo struct {
-	added    bool // line starts with '+'
-	removed  bool // line starts with '-'
-	matching bool // line matches query (only computed for changed lines)
-	context  bool // include because it's context for a matching changed line
-}
+type diffHunkLineInfo struct { /* all structs must go */ }
 
 func (info diffHunkLineInfo) changed() bool { return info.added || info.removed }
 
diff --git a/internal/vcs/git/diff_filter_test.go b/internal/vcs/git/diff_filter_test.go
index 19cefc3..7936d55 100644
--- a/internal/vcs/git/diff_filter_test.go
+++ b/internal/vcs/git/diff_filter_test.go
@@ -19,13 +19,7 @@ index a29bdeb434d874c9b1d8969c40c42161b03fafdc..c0d0fb45c382919737f8d0c20aaf57cf
  line1
 +line2
 `
-	tests := map[string]struct {
-		rawDiff        string
-		query          string
-		paths          PathOptions
-		want           string
-		wantHighlights []Highlight
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"no matches": {
 			rawDiff:        sampleRawDiff,
 			query:          "line3",
@@ -79,13 +73,7 @@ index a29bdeb434d874c9b1d8969c40c42161b03fafdc..c0d0fb45c382919737f8d0c20aaf57cf
 }
 
 func TestSplitHunkMatches(t *testing.T) {
-	tests := []struct {
-		hunks             string
-		query             string
-		matchContextLines int
-		maxLinesPerHunk   int
-		want              string
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			hunks: `@@ -1,2 +1,3 @@ mysection
  line1
diff --git a/internal/vcs/git/diff_search.go b/internal/vcs/git/diff_search.go
index c4ad80c..70e3cb8 100644
--- a/internal/vcs/git/diff_search.go
+++ b/internal/vcs/git/diff_search.go
@@ -17,20 +17,11 @@ import (
 )
 
 // TextSearchOptions contains common options for text search commands.
-type TextSearchOptions struct {
-	Pattern         string // the pattern to look for
-	IsRegExp        bool   // whether the pattern is a regexp (if false, treated as exact string)
-	IsCaseSensitive bool   // whether the pattern should be matched case-sensitively
-}
+type TextSearchOptions struct { /* all structs must go */ }
 
 // PathOptions contains common options for commands that can be limited
 // to only certain paths.
-type PathOptions struct {
-	IncludePatterns []string // include paths matching all of these patterns
-	ExcludePattern  string   // exclude paths matching any of these patterns
-	IsRegExp        bool     // whether the pattern is a regexp (if false, treated as exact string)
-	IsCaseSensitive bool     // whether the pattern should be matched case-sensitively
-}
+type PathOptions struct { /* all structs must go */ }
 
 // CompilePathMatcher compiles the path options into a PathMatcher.
 func CompilePathMatcher(options PathOptions) (pathmatch.PathMatcher, error) {
@@ -41,71 +32,16 @@ func CompilePathMatcher(options PathOptions) (pathmatch.PathMatcher, error) {
 }
 
 // RawLogDiffSearchOptions specifies options to (Repository).RawLogDiffSearch.
-type RawLogDiffSearchOptions struct {
-	// Query specifies the search query to find.
-	Query TextSearchOptions
-
-	// MatchChangedOccurrenceCount makes the operation run `git log -S` not `git log -G`.
-	// See `git log --help` for more information.
-	MatchChangedOccurrenceCount bool
-
-	// Diff is whether the diff should be computed and returned.
-	Diff bool
-
-	// OnlyMatchingHunks makes the diff only include hunks that match the query. If false,
-	// all hunks from files that match the query are included.
-	OnlyMatchingHunks bool
-
-	// Paths specifies the paths to include/exclude.
-	Paths PathOptions
-
-	// FormatArgs is a list of format args that are passed to the `git log` command.
-	// Because the output is parsed, it is expected to be in a known format. If the
-	// FormatArgs does not match one of the server's expected values, the operation
-	// will fail.
-	//
-	// If nil, the default format args are used.
-	FormatArgs []string
-
-	// RawArgs is a list of non-format args that are passed to the `git log` command.
-	// It should not contain any "--" elements; those should be passed using the Paths
-	// field.
-	//
-	// No arguments that affect the format of the output should be present in this
-	// slice.
-	Args []string
-}
+type RawLogDiffSearchOptions struct { /* all structs must go */ }
 
 // LogCommitSearchResult describes a matching diff from (Repository).RawLogDiffSearch.
-type LogCommitSearchResult struct {
-	Commit         Commit      // the commit whose diff was matched
-	Diff           *RawDiff    // the diff, with non-matching/irrelevant portions deleted (respecting diff syntax)
-	DiffHighlights []Highlight // highlighted query matches in the diff
-
-	// Refs is the list of ref names of this commit (from `git log --decorate`).
-	Refs []string
-
-	// SourceRefs is the list of ref names by which this commit was reached. (See
-	// `git log --help` documentation on the `--source` flag.)
-	SourceRefs []string
-
-	// Incomplete indicates that this result may represent a subset of the actual data.
-	// This can occur when the underlying command returns early due to an impending
-	// timeout.
-	Incomplete bool
-}
+type LogCommitSearchResult struct { /* all structs must go */ }
 
 // A RawDiff represents changes between two commits.
-type RawDiff struct {
-	Raw string // the raw diff output
-}
+type RawDiff struct { /* all structs must go */ }
 
 // Highlight represents a highlighted region in a string.
-type Highlight struct {
-	Line      int // the 1-indexed line number
-	Character int // the 1-indexed character on the line
-	Length    int // the length of the highlight, in characters (on the same line)
-}
+type Highlight struct { /* all structs must go */ }
 
 var validRawLogDiffSearchFormatArgs = [][]string{
 	{"--no-merges", "-z", "--decorate=full", "--patch", logFormatWithRefs},
@@ -437,13 +373,7 @@ func RawLogDiffSearch(ctx context.Context, repo gitserver.Repo, opt RawLogDiffSe
 
 // cachedRefResolver is a short-lived cache for ref resolutions. Only use it for the lifetime of a
 // single request and for a single repo.
-type refResolveCache struct {
-	mu      sync.Mutex
-	results map[string]struct {
-		target string
-		err    error
-	}
-}
+type refResolveCache struct { /* all structs must go */ }
 
 func (r *refResolveCache) resolveHEADSymbolicRef(ctx context.Context, repo gitserver.Repo) (target string, err error) {
 	resolve := func() (string, error) {
@@ -457,10 +387,7 @@ func (r *refResolveCache) resolveHEADSymbolicRef(ctx context.Context, repo gitse
 	defer r.mu.Unlock()
 
 	if r.results == nil {
-		r.results = map[string]struct {
-			target string
-			err    error
-		}{}
+		r.results = map[string]struct { /* all structs must go */ }{}
 	}
 	const name = "HEAD" // only needed for HEAD right now
 	e, ok := r.results[name]
diff --git a/internal/vcs/git/diff_search_test.go b/internal/vcs/git/diff_search_test.go
index f2f757f..c3ba557 100644
--- a/internal/vcs/git/diff_search_test.go
+++ b/internal/vcs/git/diff_search_test.go
@@ -29,11 +29,7 @@ func TestRepository_RawLogDiffSearch(t *testing.T) {
 		"git add f",
 		"GIT_COMMITTER_NAME=a GIT_COMMITTER_EMAIL=a@a.com GIT_COMMITTER_DATE=2006-01-02T15:04:07Z git commit -m branch2 --author='a <a@a.com>' --date 2006-01-02T15:04:07Z",
 	)
-	tests := []struct {
-		name string
-		opt  RawLogDiffSearchOptions
-		want []*LogCommitSearchResult
-	}{{
+	tests := []struct { /* all structs must go */ }{{
 		name: "query",
 		opt: RawLogDiffSearchOptions{
 			Query: TextSearchOptions{Pattern: "root"},
@@ -125,10 +121,7 @@ func TestRepository_RawLogDiffSearch_emptyCommit(t *testing.T) {
 		"GIT_COMMITTER_NAME=a GIT_COMMITTER_EMAIL=a@a.com GIT_COMMITTER_DATE=2006-01-02T15:04:05Z git commit -m empty --allow-empty --author='a <a@a.com>' --date 2006-01-02T15:04:05Z",
 		"GIT_COMMITTER_NAME=a GIT_COMMITTER_EMAIL=a@a.com GIT_COMMITTER_DATE=2006-01-02T15:04:05Z git commit -m empty --allow-empty --author='a <a@a.com>' --date 2006-01-02T15:04:05Z",
 	}
-	tests := map[string]struct {
-		repo gitserver.Repo
-		want map[*RawLogDiffSearchOptions][]*LogCommitSearchResult
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"git cmd": {
 			repo: MakeGitRepository(t, gitCommands...),
 			want: map[*RawLogDiffSearchOptions][]*LogCommitSearchResult{
diff --git a/internal/vcs/git/diff_search_util_test.go b/internal/vcs/git/diff_search_util_test.go
index 3f80bd1..8469a8e 100644
--- a/internal/vcs/git/diff_search_util_test.go
+++ b/internal/vcs/git/diff_search_util_test.go
@@ -6,10 +6,7 @@ import (
 )
 
 func TestRegexpToGlobBestEffort(t *testing.T) {
-	tests := map[string]struct {
-		glob  string
-		equiv bool
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"":          {"*", true},
 		"foo":       {"*foo*", true},
 		"^foo":      {"foo*", true},
diff --git a/internal/vcs/git/diff_test.go b/internal/vcs/git/diff_test.go
index bd3f01b..8f9a4fc 100644
--- a/internal/vcs/git/diff_test.go
+++ b/internal/vcs/git/diff_test.go
@@ -31,10 +31,7 @@ func TestDiff(t *testing.T) {
 	})
 
 	t.Run("rangeSpec calculation", func(t *testing.T) {
-		for _, tc := range []struct {
-			opts DiffOptions
-			want string
-		}{
+		for _, tc := range []struct { /* all structs must go */ }{
 			{opts: DiffOptions{Base: "foo", Head: "bar"}, want: "foo...bar"},
 		} {
 			t.Run("rangeSpec: "+tc.want, func(t *testing.T) {
diff --git a/internal/vcs/git/exec.go b/internal/vcs/git/exec.go
index 79b92bc..1536c1f 100644
--- a/internal/vcs/git/exec.go
+++ b/internal/vcs/git/exec.go
@@ -204,30 +204,7 @@ type cmd interface {
 // lookup the remote URL through repo-updater (an expensive process which
 // consumes 2 code host API requests), unless the revision is actually missing
 // and gitserver would want to try fetching it.
-type commandRetryer struct {
-	// cmd is the gitserver command to execute. It is never modified, except
-	// when setting cmd.Repo.URL in the case that remoteURLFunc is called.
-	cmd *gitserver.Cmd
-
-	// remoteURLFunc is called to get the Git remote URL if it's not set in
-	// repo and if it is needed. The Git remote URL is only required if the
-	// gitserver doesn't already contain a clone of the repository or if the
-	// commit must be fetched from the remote.
-	//
-	// If cmd.EnsureRevision == "", this field is ignored.
-	remoteURLFunc func() (string, error)
-
-	// exec is called when the cmd should be executed. It is expected to run
-	// the gitserver command and return errors (e.g. RevisionNotFoundError),
-	// which will be handled by the retryer by invoking exec again.
-	//
-	// For basic usage, see the implementation of DividedOutput.
-	//
-	// Any case involving the need to parse out missing revision errors from
-	// the Git command output yourself will need to use this instead of the
-	// DividedOutput helper.
-	exec func() error
-}
+type commandRetryer struct { /* all structs must go */ }
 
 // DividedOutput is a helper which sets c.exec to a function which invokes
 // c.cmd.DividedOutput and returns the result after calling c.run.
diff --git a/internal/vcs/git/exec_test.go b/internal/vcs/git/exec_test.go
index c410e3d..53d51fe 100644
--- a/internal/vcs/git/exec_test.go
+++ b/internal/vcs/git/exec_test.go
@@ -8,12 +8,7 @@ import (
 func TestExecSafe(t *testing.T) {
 	t.Parallel()
 
-	tests := []struct {
-		args                   []string
-		wantStdout, wantStderr string
-		wantExitCode           int
-		wantError              bool
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			args:       []string{"log", "--name-status", "--full-history", "-M", "--date=iso8601", "--format=%H -%nauthor %an%nauthor-date %ai%nparents %P%nsummary %B%nfilename ?"},
 			wantStdout: "ea167fe3d76b1e5fd3ed8ca44cbd2fe3897684f8 -\nauthor a\nauthor-date 2006-01-02 15:04:05 +0000\nparents \nsummary foo\n\nfilename ?\n",
diff --git a/internal/vcs/git/file_info.go b/internal/vcs/git/file_info.go
index cb50a5d..13acf37 100644
--- a/internal/vcs/git/file_info.go
+++ b/internal/vcs/git/file_info.go
@@ -15,17 +15,7 @@ const ModeSubmodule = 0160000 | os.ModeDevice
 
 // Submodule holds information about a Git submodule and is
 // returned in the FileInfo's Sys field by Stat/Lstat/ReadDir calls.
-type Submodule struct {
-	// URL is the submodule repository clone URL.
-	URL string
-
-	// Path is the path of the submodule relative to the repository root.
-	Path string
-
-	// CommitID is the pinned commit ID of the submodule (in the
-	// submodule repository's commit ID space).
-	CommitID api.CommitID
-}
+type Submodule struct { /* all structs must go */ }
 
 // ObjectInfo holds information about a Git object and is returned in (os.FileInfo).Sys for blobs
 // and trees from Stat/Lstat/ReadDir calls.
diff --git a/internal/vcs/git/merge_base_test.go b/internal/vcs/git/merge_base_test.go
index 9a17ffa..d1f6e51 100644
--- a/internal/vcs/git/merge_base_test.go
+++ b/internal/vcs/git/merge_base_test.go
@@ -26,12 +26,7 @@ func TestMerger_MergeBase(t *testing.T) {
 		"git add h",
 		"GIT_COMMITTER_NAME=a GIT_COMMITTER_EMAIL=a@a.com GIT_COMMITTER_DATE=2006-01-02T15:04:05Z git commit -m qux --author='a <a@a.com>' --date 2006-01-02T15:04:05Z",
 	}
-	tests := map[string]struct {
-		repo gitserver.Repo
-		a, b string // can be any revspec; is resolved during the test
-
-		wantMergeBase string // can be any revspec; is resolved during test
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"git cmd": {
 			repo: MakeGitRepository(t, cmds...),
 			a:    "master", b: "b2",
diff --git a/internal/vcs/git/mocks.go b/internal/vcs/git/mocks.go
index cc41dba..239b159 100644
--- a/internal/vcs/git/mocks.go
+++ b/internal/vcs/git/mocks.go
@@ -12,20 +12,7 @@ import (
 // mocks are not (inadvertently) used by subsequent tests.
 //
 // (The emptyMocks is used by ResetMocks to zero out Mocks without needing to use a named type.)
-var Mocks, emptyMocks struct {
-	GetCommit        func(api.CommitID) (*Commit, error)
-	ExecSafe         func(params []string) (stdout, stderr []byte, exitCode int, err error)
-	ExecReader       func(args []string) (reader io.ReadCloser, err error)
-	RawLogDiffSearch func(opt RawLogDiffSearchOptions) ([]*LogCommitSearchResult, bool, error)
-	NewFileReader    func(commit api.CommitID, name string) (io.ReadCloser, error)
-	ReadFile         func(commit api.CommitID, name string) ([]byte, error)
-	ReadDir          func(commit api.CommitID, name string, recurse bool) ([]os.FileInfo, error)
-	ResolveRevision  func(spec string, opt ResolveRevisionOptions) (api.CommitID, error)
-	Stat             func(commit api.CommitID, name string) (os.FileInfo, error)
-	GetObject        func(objectName string) (OID, ObjectType, error)
-	Commits          func(repo gitserver.Repo, opt CommitsOptions) ([]*Commit, error)
-	MergeBase        func(repo gitserver.Repo, a, b api.CommitID) (api.CommitID, error)
-}
+var Mocks, emptyMocks struct { /* all structs must go */ }
 
 // ResetMocks clears the mock functions set on Mocks (so that subsequent tests don't inadvertently
 // use them).
diff --git a/internal/vcs/git/object_test.go b/internal/vcs/git/object_test.go
index 3a758fc..f765d9f 100644
--- a/internal/vcs/git/object_test.go
+++ b/internal/vcs/git/object_test.go
@@ -14,12 +14,7 @@ func TestGetObject(t *testing.T) {
 		"git add f",
 		"GIT_COMMITTER_NAME=a GIT_COMMITTER_EMAIL=a@a.com GIT_COMMITTER_DATE=2006-01-02T15:04:05Z git commit -m foo --author='a <a@a.com>' --date 2006-01-02T15:04:05Z",
 	}
-	tests := map[string]struct {
-		repo           gitserver.Repo
-		objectName     string
-		wantOID        string
-		wantObjectType ObjectType
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"basic": {
 			repo:           MakeGitRepository(t, gitCommands...),
 			objectName:     "e86b31b62399cfc86199e8b6e21a35e76d0e8b5e^{tree}",
diff --git a/internal/vcs/git/ref_globs.go b/internal/vcs/git/ref_globs.go
index acbe934..7c2a947 100644
--- a/internal/vcs/git/ref_globs.go
+++ b/internal/vcs/git/ref_globs.go
@@ -9,23 +9,12 @@ import (
 
 // RefGlob describes a glob pattern that either includes or excludes refs. Exactly 1 of the fields
 // must be set.
-type RefGlob struct {
-	// Include is a glob pattern for including refs interpreted as in `git log --glob`. See the
-	// git-log(1) manual page for details.
-	Include string
-
-	// Exclude is a glob pattern for excluding refs interpreted as in `git log --exclude`. See the
-	// git-log(1) manual page for details.
-	Exclude string
-}
+type RefGlob struct { /* all structs must go */ }
 
 // RefGlobs is a compiled matcher based on RefGlob patterns. Use CompileRefGlobs to create it.
 type RefGlobs []compiledRefGlobPattern
 
-type compiledRefGlobPattern struct {
-	pattern glob.Glob
-	include bool // true for include, false for exclude
-}
+type compiledRefGlobPattern struct { /* all structs must go */ }
 
 // CompileRefGlobs compiles the ordered ref glob patterns (interpreted as in `git log --glob
 // ... --exclude ...`; see the git-log(1) manual page) into a matcher. If the input patterns are
diff --git a/internal/vcs/git/ref_globs_test.go b/internal/vcs/git/ref_globs_test.go
index ab1fff2..c7ade0a 100644
--- a/internal/vcs/git/ref_globs_test.go
+++ b/internal/vcs/git/ref_globs_test.go
@@ -5,12 +5,7 @@ import (
 )
 
 func TestRefGlobs(t *testing.T) {
-	tests := map[string]struct {
-		globs   []RefGlob
-		match   []string
-		noMatch []string
-		want    []string
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"empty": {
 			globs:   nil,
 			noMatch: []string{"a"},
diff --git a/internal/vcs/git/refs.go b/internal/vcs/git/refs.go
index cce9adc..66a830d 100644
--- a/internal/vcs/git/refs.go
+++ b/internal/vcs/git/refs.go
@@ -58,48 +58,17 @@ func AbbreviateRef(ref string) string {
 }
 
 // A Branch is a VCS branch.
-type Branch struct {
-	// Name is the name of this branch.
-	Name string `json:"Name,omitempty"`
-	// Head is the commit ID of this branch's head commit.
-	Head api.CommitID `json:"Head,omitempty"`
-	// Commit optionally contains commit information for this branch's head commit.
-	// It is populated if IncludeCommit option is set.
-	Commit *Commit `json:"Commit,omitempty"`
-	// Counts optionally contains the commit counts relative to specified branch.
-	Counts *BehindAhead `json:"Counts,omitempty"`
-}
+type Branch struct { /* all structs must go */ }
 
 // BranchesOptions specifies options for the list of branches returned by
 // (Repository).Branches.
-type BranchesOptions struct {
-	// MergedInto will cause the returned list to be restricted to only
-	// branches that were merged into this branch name.
-	MergedInto string `json:"MergedInto,omitempty" url:",omitempty"`
-	// IncludeCommit controls whether complete commit information is included.
-	IncludeCommit bool `json:"IncludeCommit,omitempty" url:",omitempty"`
-	// BehindAheadBranch specifies a branch name. If set to something other than blank
-	// string, then each returned branch will include a behind/ahead commit counts
-	// information against the specified base branch. If left blank, then branches will
-	// not include that information and their Counts will be nil.
-	BehindAheadBranch string `json:"BehindAheadBranch,omitempty" url:",omitempty"`
-	// ContainsCommit filters the list of branches to only those that
-	// contain a specific commit ID (if set).
-	ContainsCommit string `json:"ContainsCommit,omitempty" url:",omitempty"`
-}
+type BranchesOptions struct { /* all structs must go */ }
 
 // A Tag is a VCS tag.
-type Tag struct {
-	Name         string `json:"Name,omitempty"`
-	api.CommitID `json:"CommitID,omitempty"`
-	CreatorDate  time.Time
-}
+type Tag struct { /* all structs must go */ }
 
 // BehindAhead is a set of behind/ahead counts.
-type BehindAhead struct {
-	Behind uint32 `json:"Behind,omitempty"`
-	Ahead  uint32 `json:"Ahead,omitempty"`
-}
+type BehindAhead struct { /* all structs must go */ }
 
 type Branches []*Branch
 
@@ -301,10 +270,7 @@ func ListRefs(ctx context.Context, repo gitserver.Repo) ([]Ref, error) {
 }
 
 // Ref describes a Git ref.
-type Ref struct {
-	Name     string // the full name of the ref (e.g., "refs/heads/mybranch")
-	CommitID api.CommitID
-}
+type Ref struct { /* all structs must go */ }
 
 func showRef(ctx context.Context, repo gitserver.Repo, args ...string) ([]Ref, error) {
 	cmd := gitserver.DefaultClient.Command("git", "show-ref")
diff --git a/internal/vcs/git/refs_test.go b/internal/vcs/git/refs_test.go
index 3d4ff36..674471a 100644
--- a/internal/vcs/git/refs_test.go
+++ b/internal/vcs/git/refs_test.go
@@ -12,10 +12,7 @@ import (
 )
 
 func TestHumanReadableBranchName(t *testing.T) {
-	for _, tc := range []struct {
-		text string
-		want string
-	}{{
+	for _, tc := range []struct { /* all structs must go */ }{{
 		// Respect word boundaries when cutting length
 		text: "Change coördination mechanisms of fungible automation processes in place",
 		want: "change-coordination-mechanisms-of-fungible-automation",
@@ -43,10 +40,7 @@ func TestRepository_ListBranches(t *testing.T) {
 		"git checkout -b b0",
 		"git checkout -b b1",
 	}
-	tests := map[string]struct {
-		repo         gitserver.Repo
-		wantBranches []*Branch
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"git cmd": {
 			repo:         MakeGitRepository(t, gitCommands...),
 			wantBranches: []*Branch{{Name: "b0", Head: "ea167fe3d76b1e5fd3ed8ca44cbd2fe3897684f8"}, {Name: "b1", Head: "ea167fe3d76b1e5fd3ed8ca44cbd2fe3897684f8"}, {Name: "master", Head: "ea167fe3d76b1e5fd3ed8ca44cbd2fe3897684f8"}},
@@ -97,10 +91,7 @@ func TestRepository_Branches_MergedInto(t *testing.T) {
 		},
 	}
 
-	for label, test := range map[string]struct {
-		repo         gitserver.Repo
-		wantBranches map[string][]*Branch
-	}{
+	for label, test := range map[string]struct { /* all structs must go */ }{
 		"git cmd": {
 			repo:         MakeGitRepository(t, gitCommands...),
 			wantBranches: gitBranches,
@@ -136,10 +127,7 @@ func TestRepository_Branches_ContainsCommit(t *testing.T) {
 		"2816a72df28f699722156e545d038a5203b959de": {{Name: "branch2", Head: "920c0e9d7b287b030ac9770fd7ba3ee9dc1760d9"}, {Name: "master", Head: "1224d334dfe08f4693968ea618ad63ae86ec16ca"}},
 	}
 
-	tests := map[string]struct {
-		repo                 gitserver.Repo
-		commitToWantBranches map[string][]*Branch
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"git cmd": {
 			repo:                 MakeGitRepository(t, gitCommands...),
 			commitToWantBranches: gitWantBranches,
@@ -187,10 +175,7 @@ func TestRepository_Branches_BehindAheadCounts(t *testing.T) {
 	}
 	sort.Sort(Branches(gitBranches))
 
-	tests := map[string]struct {
-		repo         gitserver.Repo
-		wantBranches []*Branch
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"git cmd": {
 			repo:         MakeGitRepository(t, gitCommands...),
 			wantBranches: gitBranches,
@@ -242,10 +227,7 @@ func TestRepository_Branches_IncludeCommit(t *testing.T) {
 		},
 	}
 
-	tests := map[string]struct {
-		repo         gitserver.Repo
-		wantBranches []*Branch
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"git cmd": {
 			repo:         MakeGitRepository(t, gitCommands...),
 			wantBranches: wantBranchesGit,
@@ -276,10 +258,7 @@ func TestRepository_ListTags(t *testing.T) {
 		"git tag t1",
 		dateEnv + " git tag --annotate -m foo t2",
 	}
-	tests := map[string]struct {
-		repo     gitserver.Repo
-		wantTags []*Tag
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"git cmd": {
 			repo: MakeGitRepository(t, gitCommands...),
 			wantTags: []*Tag{
@@ -306,11 +285,7 @@ func TestRepository_ListTags(t *testing.T) {
 }
 
 func TestValidateBranchName(t *testing.T) {
-	for _, tc := range []struct {
-		name   string
-		branch string
-		valid  bool
-	}{
+	for _, tc := range []struct { /* all structs must go */ }{
 		{name: "Valid branch", branch: "valid-branch", valid: true},
 		{name: "Valid branch with slash", branch: "rgs/valid-branch", valid: true},
 		{name: "Valid branch with @", branch: "valid@branch", valid: true},
diff --git a/internal/vcs/git/revisions.go b/internal/vcs/git/revisions.go
index ec96ae9..8bf1d4e 100644
--- a/internal/vcs/git/revisions.go
+++ b/internal/vcs/git/revisions.go
@@ -42,9 +42,7 @@ func ensureAbsoluteCommit(commitID api.CommitID) error {
 
 // ResolveRevisionOptions configure how we resolve revisions.
 // The zero value should contain appropriate default values.
-type ResolveRevisionOptions struct {
-	NoEnsureRevision bool // do not try to fetch from remote if revision doesn't exist locally
-}
+type ResolveRevisionOptions struct { /* all structs must go */ }
 
 // ResolveRevision will return the absolute commit for a commit-ish spec. If spec is empty, HEAD is
 // used.
diff --git a/internal/vcs/git/revisions_test.go b/internal/vcs/git/revisions_test.go
index 2a484c6..28bc9b6 100644
--- a/internal/vcs/git/revisions_test.go
+++ b/internal/vcs/git/revisions_test.go
@@ -28,11 +28,7 @@ func TestRepository_ResolveBranch(t *testing.T) {
 	gitCommands := []string{
 		"GIT_COMMITTER_NAME=a GIT_COMMITTER_EMAIL=a@a.com GIT_COMMITTER_DATE=2006-01-02T15:04:05Z git commit --allow-empty -m foo --author='a <a@a.com>' --date 2006-01-02T15:04:05Z",
 	}
-	tests := map[string]struct {
-		repo         gitserver.Repo
-		branch       string
-		wantCommitID api.CommitID
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"git cmd": {
 			repo:         MakeGitRepository(t, gitCommands...),
 			branch:       "master",
@@ -59,11 +55,7 @@ func TestRepository_ResolveBranch_error(t *testing.T) {
 	gitCommands := []string{
 		"GIT_COMMITTER_NAME=a GIT_COMMITTER_EMAIL=a@a.com GIT_COMMITTER_DATE=2006-01-02T15:04:05Z git commit --allow-empty -m foo --author='a <a@a.com>' --date 2006-01-02T15:04:05Z",
 	}
-	tests := map[string]struct {
-		repo    gitserver.Repo
-		branch  string
-		wantErr func(error) bool
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"git cmd": {
 			repo:    MakeGitRepository(t, gitCommands...),
 			branch:  "doesntexist",
@@ -91,11 +83,7 @@ func TestRepository_ResolveTag(t *testing.T) {
 		"GIT_COMMITTER_NAME=a GIT_COMMITTER_EMAIL=a@a.com GIT_COMMITTER_DATE=2006-01-02T15:04:05Z git commit --allow-empty -m foo --author='a <a@a.com>' --date 2006-01-02T15:04:05Z",
 		"git tag t",
 	}
-	tests := map[string]struct {
-		repo         gitserver.Repo
-		tag          string
-		wantCommitID api.CommitID
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"git cmd": {
 			repo:         MakeGitRepository(t, gitCommands...),
 			tag:          "t",
@@ -122,11 +110,7 @@ func TestRepository_ResolveTag_error(t *testing.T) {
 	gitCommands := []string{
 		"GIT_COMMITTER_NAME=a GIT_COMMITTER_EMAIL=a@a.com GIT_COMMITTER_DATE=2006-01-02T15:04:05Z git commit --allow-empty -m foo --author='a <a@a.com>' --date 2006-01-02T15:04:05Z",
 	}
-	tests := map[string]struct {
-		repo    gitserver.Repo
-		tag     string
-		wantErr func(error) bool
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"git cmd": {
 			repo:    MakeGitRepository(t, gitCommands...),
 			tag:     "doesntexist",
diff --git a/internal/vcs/git/shortlog.go b/internal/vcs/git/shortlog.go
index 1089711..0e377c7 100644
--- a/internal/vcs/git/shortlog.go
+++ b/internal/vcs/git/shortlog.go
@@ -13,18 +13,10 @@ import (
 )
 
 // ShortLogOptions contains options for (Repository).ShortLog.
-type ShortLogOptions struct {
-	Range string // the range for which stats will be fetched
-	After string // the date after which to collect commits
-	Path  string // compute stats for commits that touch this path
-}
+type ShortLogOptions struct { /* all structs must go */ }
 
 // A PersonCount is a contributor to a repository.
-type PersonCount struct {
-	Name  string
-	Email string
-	Count int32
-}
+type PersonCount struct { /* all structs must go */ }
 
 func (p *PersonCount) String() string {
 	return fmt.Sprintf("%d %s <%s>", p.Count, p.Name, p.Email)
diff --git a/internal/vcs/git/shortlog_test.go b/internal/vcs/git/shortlog_test.go
index f0342f1..57ef2ea 100644
--- a/internal/vcs/git/shortlog_test.go
+++ b/internal/vcs/git/shortlog_test.go
@@ -6,12 +6,7 @@ import (
 )
 
 func TestParseShortLog(t *testing.T) {
-	tests := []struct {
-		name    string
-		input   string // in the format of `git shortlog -sne`
-		want    []*PersonCount
-		wantErr error
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			name: "basic",
 			input: `
diff --git a/internal/vcs/git/tree_test.go b/internal/vcs/git/tree_test.go
index f018dc8..f2cd653 100644
--- a/internal/vcs/git/tree_test.go
+++ b/internal/vcs/git/tree_test.go
@@ -127,10 +127,7 @@ func TestRepository_FileSystem(t *testing.T) {
 		"git rm 'dir1/file1' 'file 2'",
 		"GIT_COMMITTER_NAME=a GIT_COMMITTER_EMAIL=a@a.com GIT_COMMITTER_DATE=2018-05-06T19:20:21Z git commit -m commit3 --author='a <a@a.com>' --date 2018-05-06T19:20:21Z",
 	}
-	tests := map[string]struct {
-		repo                 gitserver.Repo
-		first, second, third api.CommitID
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"git cmd": {
 			repo:   MakeGitRepository(t, gitCommands...),
 			first:  "b6602ca96bdc0ab647278577a3c6edcb8fe18fb0",
@@ -317,9 +314,7 @@ func TestRepository_FileSystem_quoteChars(t *testing.T) {
 		`git add ⊗.txt '".txt' \\.txt`,
 		"GIT_COMMITTER_NAME=a GIT_COMMITTER_EMAIL=a@a.com GIT_COMMITTER_DATE=2006-01-02T15:04:05Z git commit -m commit1 --author='a <a@a.com>' --date 2006-01-02T15:04:05Z",
 	}
-	tests := map[string]struct {
-		repo gitserver.Repo
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"git cmd (quotepath=on)": {
 			repo: MakeGitRepository(t, append([]string{"git config core.quotepath on"}, gitCommands...)...),
 		},
@@ -378,9 +373,7 @@ func TestRepository_FileSystem_gitSubmodules(t *testing.T) {
 		"git submodule add " + filepath.ToSlash(submodDir) + " submod",
 		"GIT_COMMITTER_NAME=a GIT_COMMITTER_EMAIL=a@a.com GIT_COMMITTER_DATE=2006-01-02T15:04:05Z git commit -m 'add submodule' --author='a <a@a.com>' --date 2006-01-02T15:04:05Z",
 	}
-	tests := map[string]struct {
-		repo gitserver.Repo
-	}{
+	tests := map[string]struct { /* all structs must go */ }{
 		"git cmd": {
 			repo: MakeGitRepository(t, gitCommands...),
 		},
diff --git a/internal/vcs/util/fileinfo.go b/internal/vcs/util/fileinfo.go
index 9d90510..81132ce 100644
--- a/internal/vcs/util/fileinfo.go
+++ b/internal/vcs/util/fileinfo.go
@@ -7,13 +7,7 @@ import (
 )
 
 // FileInfo implements os.FileInfo.
-type FileInfo struct {
-	Name_    string
-	Mode_    os.FileMode
-	Size_    int64
-	ModTime_ time.Time
-	Sys_     interface{}
-}
+type FileInfo struct { /* all structs must go */ }
 
 func (fi *FileInfo) Name() string       { return fi.Name_ }
 func (fi *FileInfo) Size() int64        { return fi.Size_ }
diff --git a/internal/version/version_test.go b/internal/version/version_test.go
index c9c578a..93b8374 100644
--- a/internal/version/version_test.go
+++ b/internal/version/version_test.go
@@ -34,12 +34,7 @@ func TestIsDev(t *testing.T) {
 }
 
 func Test_monthsFromDays(t *testing.T) {
-	tests := []struct {
-		name       string
-		timeA      string
-		timeB      string
-		wantMonths int
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			"0 case",
 			"01-01-2020",
@@ -99,13 +94,7 @@ func Test_monthsFromDays(t *testing.T) {
 	}
 }
 func TestHowLongOutOfDate(t *testing.T) {
-	tests := []struct {
-		name           string
-		now            time.Time
-		buildTimestamp string
-		want           int
-		wantErr        bool
-	}{
+	tests := []struct { /* all structs must go */ }{
 		{
 			"build is in the future",
 			time.Unix(1577577600, 0), // 2019-12-29
diff --git a/internal/vfsutil/archive.go b/internal/vfsutil/archive.go
index 9e94509..dadd6bd 100644
--- a/internal/vfsutil/archive.go
+++ b/internal/vfsutil/archive.go
@@ -16,38 +16,10 @@ import (
 
 // archiveReader is like zip.ReadCloser, but it allows us to use a custom
 // closer.
-type archiveReader struct {
-	*zip.Reader
-	io.Closer
-	Evicter
-
-	// StripTopLevelDir specifies whether or not to strip the top level
-	// directory in the zip archive (e.g. GitHub archives always have 1 top
-	// level directory "{repobasename}-{sha}/").
-	StripTopLevelDir bool
-
-	// prefix is the name of the directory that was stripped from the archive
-	// (or "" if nothing was stripped).
-	prefix string
-}
+type archiveReader struct { /* all structs must go */ }
 
 // ArchiveFS is a ctxvfs.FileSystem backed by an Archiver.
-type ArchiveFS struct {
-	fetch func(context.Context) (*archiveReader, error)
-
-	// EvictOnClose when true will evict the underlying archive from the
-	// archive cache when closed.
-	EvictOnClose bool
-
-	once sync.Once
-	err  error // the error encountered during the fetch call (if any)
-	ar   *archiveReader
-	fs   vfs.FileSystem // the zipfs virtual file system
-
-	// We have a mutex for closed to prevent Close and fetch racing.
-	closedMu sync.Mutex
-	closed   bool
-}
+type ArchiveFS struct { /* all structs must go */ }
 
 // fetchOrWait initiates the fetch if it has not yet
 // started. Otherwise it waits for it to finish.
diff --git a/internal/vfsutil/cache.go b/internal/vfsutil/cache.go
index afec725..dc3df9e 100644
--- a/internal/vfsutil/cache.go
+++ b/internal/vfsutil/cache.go
@@ -24,13 +24,7 @@ type Evicter interface {
 	Evict()
 }
 
-type cachedFile struct {
-	// File is an open FD to the fetched data
-	File *os.File
-
-	// path is the disk path for File
-	path string
-}
+type cachedFile struct { /* all structs must go */ }
 
 // Evict will remove the file from the cache. It does not close File. It also
 // does not protect against other open readers or concurrent fetches.
diff --git a/internal/vfsutil/gitserver.go b/internal/vfsutil/gitserver.go
index 1badfda..b91e57e 100644
--- a/internal/vfsutil/gitserver.go
+++ b/internal/vfsutil/gitserver.go
@@ -56,19 +56,7 @@ const (
 )
 
 // ArchiveOpts describes options for fetching a repository archive.
-type ArchiveOpts struct {
-	// Repo is the repository whose contents should be fetched.
-	Repo api.RepoName
-
-	// Commit is the commit whose contents should be fetched.
-	Commit api.CommitID
-
-	// Format indicates the desired archive format.
-	Format ArchiveFormat
-
-	// RelativePath indicates the path of the repository that should be archived.
-	RelativePath string
-}
+type ArchiveOpts struct { /* all structs must go */ }
 
 func (opts *ArchiveOpts) cacheKey() string {
 	return fmt.Sprintf("%s@%s/-/%s.%s", opts.Repo, opts.Commit, opts.RelativePath, opts.Format)
diff --git a/internal/workerutil/helpers_test.go b/internal/workerutil/helpers_test.go
index 1c6d7e3..d57bb90 100644
--- a/internal/workerutil/helpers_test.go
+++ b/internal/workerutil/helpers_test.go
@@ -11,9 +11,7 @@ import (
 	"github.com/sourcegraph/sourcegraph/internal/db/dbtesting"
 )
 
-type TestWorkRecord struct {
-	ID int
-}
+type TestWorkRecord struct { /* all structs must go */ }
 
 func (r TestWorkRecord) RecordID() int {
 	return r.ID
@@ -23,10 +21,7 @@ func testStore(options StoreOptions) *store {
 	return newStore(basestore.NewHandleWithDB(dbconn.Global), options)
 }
 
-type TestRecord struct {
-	ID    int
-	State string
-}
+type TestRecord struct { /* all structs must go */ }
 
 func (v TestRecord) RecordID() int {
 	return v.ID
@@ -50,11 +45,7 @@ func testScanFirstRecord(rows *sql.Rows, queryErr error) (v Record, _ bool, err
 	return nil, false, nil
 }
 
-type TestRecordView struct {
-	ID       int
-	State    string
-	NewField int
-}
+type TestRecordView struct { /* all structs must go */ }
 
 func (v TestRecordView) RecordID() int {
 	return v.ID
diff --git a/internal/workerutil/mock_handler_test.go b/internal/workerutil/mock_handler_test.go
index 8305f1b..b5d5794 100644
--- a/internal/workerutil/mock_handler_test.go
+++ b/internal/workerutil/mock_handler_test.go
@@ -11,11 +11,7 @@ import (
 // MockHandler is a mock implementation of the Handler interface (from the
 // package github.com/sourcegraph/sourcegraph/internal/workerutil) used for
 // unit testing.
-type MockHandler struct {
-	// HandleFunc is an instance of a mock function object controlling the
-	// behavior of the method Handle.
-	HandleFunc *HandlerHandleFunc
-}
+type MockHandler struct { /* all structs must go */ }
 
 // NewMockHandler creates a new mock of the Handler interface. All methods
 // return zero values for all results, unless overwritten.
@@ -41,12 +37,7 @@ func NewMockHandlerFrom(i Handler) *MockHandler {
 
 // HandlerHandleFunc describes the behavior when the Handle method of the
 // parent MockHandler instance is invoked.
-type HandlerHandleFunc struct {
-	defaultHook func(context.Context, Store, Record) error
-	hooks       []func(context.Context, Store, Record) error
-	history     []HandlerHandleFuncCall
-	mutex       sync.Mutex
-}
+type HandlerHandleFunc struct { /* all structs must go */ }
 
 // Handle delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -120,20 +111,7 @@ func (f *HandlerHandleFunc) History() []HandlerHandleFuncCall {
 
 // HandlerHandleFuncCall is an object that describes an invocation of method
 // Handle on an instance of MockHandler.
-type HandlerHandleFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 Store
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 Record
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type HandlerHandleFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -151,17 +129,7 @@ func (c HandlerHandleFuncCall) Results() []interface{} {
 // interface (from the package
 // github.com/sourcegraph/sourcegraph/internal/workerutil) used for unit
 // testing.
-type MockHandlerWithHooks struct {
-	// HandleFunc is an instance of a mock function object controlling the
-	// behavior of the method Handle.
-	HandleFunc *HandlerWithHooksHandleFunc
-	// PostHandleFunc is an instance of a mock function object controlling
-	// the behavior of the method PostHandle.
-	PostHandleFunc *HandlerWithHooksPostHandleFunc
-	// PreHandleFunc is an instance of a mock function object controlling
-	// the behavior of the method PreHandle.
-	PreHandleFunc *HandlerWithHooksPreHandleFunc
-}
+type MockHandlerWithHooks struct { /* all structs must go */ }
 
 // NewMockHandlerWithHooks creates a new mock of the HandlerWithHooks
 // interface. All methods return zero values for all results, unless
@@ -205,12 +173,7 @@ func NewMockHandlerWithHooksFrom(i HandlerWithHooks) *MockHandlerWithHooks {
 
 // HandlerWithHooksHandleFunc describes the behavior when the Handle method
 // of the parent MockHandlerWithHooks instance is invoked.
-type HandlerWithHooksHandleFunc struct {
-	defaultHook func(context.Context, Store, Record) error
-	hooks       []func(context.Context, Store, Record) error
-	history     []HandlerWithHooksHandleFuncCall
-	mutex       sync.Mutex
-}
+type HandlerWithHooksHandleFunc struct { /* all structs must go */ }
 
 // Handle delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -285,20 +248,7 @@ func (f *HandlerWithHooksHandleFunc) History() []HandlerWithHooksHandleFuncCall
 
 // HandlerWithHooksHandleFuncCall is an object that describes an invocation
 // of method Handle on an instance of MockHandlerWithHooks.
-type HandlerWithHooksHandleFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 Store
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 Record
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type HandlerWithHooksHandleFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -314,12 +264,7 @@ func (c HandlerWithHooksHandleFuncCall) Results() []interface{} {
 
 // HandlerWithHooksPostHandleFunc describes the behavior when the PostHandle
 // method of the parent MockHandlerWithHooks instance is invoked.
-type HandlerWithHooksPostHandleFunc struct {
-	defaultHook func(context.Context, Record)
-	hooks       []func(context.Context, Record)
-	history     []HandlerWithHooksPostHandleFuncCall
-	mutex       sync.Mutex
-}
+type HandlerWithHooksPostHandleFunc struct { /* all structs must go */ }
 
 // PostHandle delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -394,14 +339,7 @@ func (f *HandlerWithHooksPostHandleFunc) History() []HandlerWithHooksPostHandleF
 
 // HandlerWithHooksPostHandleFuncCall is an object that describes an
 // invocation of method PostHandle on an instance of MockHandlerWithHooks.
-type HandlerWithHooksPostHandleFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 Record
-}
+type HandlerWithHooksPostHandleFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -417,12 +355,7 @@ func (c HandlerWithHooksPostHandleFuncCall) Results() []interface{} {
 
 // HandlerWithHooksPreHandleFunc describes the behavior when the PreHandle
 // method of the parent MockHandlerWithHooks instance is invoked.
-type HandlerWithHooksPreHandleFunc struct {
-	defaultHook func(context.Context, Record)
-	hooks       []func(context.Context, Record)
-	history     []HandlerWithHooksPreHandleFuncCall
-	mutex       sync.Mutex
-}
+type HandlerWithHooksPreHandleFunc struct { /* all structs must go */ }
 
 // PreHandle delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -497,14 +430,7 @@ func (f *HandlerWithHooksPreHandleFunc) History() []HandlerWithHooksPreHandleFun
 
 // HandlerWithHooksPreHandleFuncCall is an object that describes an
 // invocation of method PreHandle on an instance of MockHandlerWithHooks.
-type HandlerWithHooksPreHandleFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 Record
-}
+type HandlerWithHooksPreHandleFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -522,14 +448,7 @@ func (c HandlerWithHooksPreHandleFuncCall) Results() []interface{} {
 // HandlerWithPreDequeue interface (from the package
 // github.com/sourcegraph/sourcegraph/internal/workerutil) used for unit
 // testing.
-type MockHandlerWithPreDequeue struct {
-	// HandleFunc is an instance of a mock function object controlling the
-	// behavior of the method Handle.
-	HandleFunc *HandlerWithPreDequeueHandleFunc
-	// PreDequeueFunc is an instance of a mock function object controlling
-	// the behavior of the method PreDequeue.
-	PreDequeueFunc *HandlerWithPreDequeuePreDequeueFunc
-}
+type MockHandlerWithPreDequeue struct { /* all structs must go */ }
 
 // NewMockHandlerWithPreDequeue creates a new mock of the
 // HandlerWithPreDequeue interface. All methods return zero values for all
@@ -565,12 +484,7 @@ func NewMockHandlerWithPreDequeueFrom(i HandlerWithPreDequeue) *MockHandlerWithP
 
 // HandlerWithPreDequeueHandleFunc describes the behavior when the Handle
 // method of the parent MockHandlerWithPreDequeue instance is invoked.
-type HandlerWithPreDequeueHandleFunc struct {
-	defaultHook func(context.Context, Store, Record) error
-	hooks       []func(context.Context, Store, Record) error
-	history     []HandlerWithPreDequeueHandleFuncCall
-	mutex       sync.Mutex
-}
+type HandlerWithPreDequeueHandleFunc struct { /* all structs must go */ }
 
 // Handle delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -645,20 +559,7 @@ func (f *HandlerWithPreDequeueHandleFunc) History() []HandlerWithPreDequeueHandl
 
 // HandlerWithPreDequeueHandleFuncCall is an object that describes an
 // invocation of method Handle on an instance of MockHandlerWithPreDequeue.
-type HandlerWithPreDequeueHandleFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 Store
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 Record
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type HandlerWithPreDequeueHandleFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -675,12 +576,7 @@ func (c HandlerWithPreDequeueHandleFuncCall) Results() []interface{} {
 // HandlerWithPreDequeuePreDequeueFunc describes the behavior when the
 // PreDequeue method of the parent MockHandlerWithPreDequeue instance is
 // invoked.
-type HandlerWithPreDequeuePreDequeueFunc struct {
-	defaultHook func(context.Context) (bool, []*sqlf.Query, error)
-	hooks       []func(context.Context) (bool, []*sqlf.Query, error)
-	history     []HandlerWithPreDequeuePreDequeueFuncCall
-	mutex       sync.Mutex
-}
+type HandlerWithPreDequeuePreDequeueFunc struct { /* all structs must go */ }
 
 // PreDequeue delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -757,20 +653,7 @@ func (f *HandlerWithPreDequeuePreDequeueFunc) History() []HandlerWithPreDequeueP
 // HandlerWithPreDequeuePreDequeueFuncCall is an object that describes an
 // invocation of method PreDequeue on an instance of
 // MockHandlerWithPreDequeue.
-type HandlerWithPreDequeuePreDequeueFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 bool
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 []*sqlf.Query
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type HandlerWithPreDequeuePreDequeueFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
diff --git a/internal/workerutil/mock_store_test.go b/internal/workerutil/mock_store_test.go
index 997b88f..7fef2e1 100644
--- a/internal/workerutil/mock_store_test.go
+++ b/internal/workerutil/mock_store_test.go
@@ -13,29 +13,7 @@ import (
 // MockStore is a mock implementation of the Store interface (from the
 // package github.com/sourcegraph/sourcegraph/internal/workerutil) used for
 // unit testing.
-type MockStore struct {
-	// DequeueFunc is an instance of a mock function object controlling the
-	// behavior of the method Dequeue.
-	DequeueFunc *StoreDequeueFunc
-	// DoneFunc is an instance of a mock function object controlling the
-	// behavior of the method Done.
-	DoneFunc *StoreDoneFunc
-	// HandleFunc is an instance of a mock function object controlling the
-	// behavior of the method Handle.
-	HandleFunc *StoreHandleFunc
-	// MarkCompleteFunc is an instance of a mock function object controlling
-	// the behavior of the method MarkComplete.
-	MarkCompleteFunc *StoreMarkCompleteFunc
-	// MarkErroredFunc is an instance of a mock function object controlling
-	// the behavior of the method MarkErrored.
-	MarkErroredFunc *StoreMarkErroredFunc
-	// RequeueFunc is an instance of a mock function object controlling the
-	// behavior of the method Requeue.
-	RequeueFunc *StoreRequeueFunc
-	// ResetStalledFunc is an instance of a mock function object controlling
-	// the behavior of the method ResetStalled.
-	ResetStalledFunc *StoreResetStalledFunc
-}
+type MockStore struct { /* all structs must go */ }
 
 // NewMockStore creates a new mock of the Store interface. All methods
 // return zero values for all results, unless overwritten.
@@ -109,12 +87,7 @@ func NewMockStoreFrom(i Store) *MockStore {
 
 // StoreDequeueFunc describes the behavior when the Dequeue method of the
 // parent MockStore instance is invoked.
-type StoreDequeueFunc struct {
-	defaultHook func(context.Context, []*sqlf.Query) (Record, Store, bool, error)
-	hooks       []func(context.Context, []*sqlf.Query) (Record, Store, bool, error)
-	history     []StoreDequeueFuncCall
-	mutex       sync.Mutex
-}
+type StoreDequeueFunc struct { /* all structs must go */ }
 
 // Dequeue delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -188,26 +161,7 @@ func (f *StoreDequeueFunc) History() []StoreDequeueFuncCall {
 
 // StoreDequeueFuncCall is an object that describes an invocation of method
 // Dequeue on an instance of MockStore.
-type StoreDequeueFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 []*sqlf.Query
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 Record
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 Store
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 bool
-	// Result3 is the value of the 4th result returned from this method
-	// invocation.
-	Result3 error
-}
+type StoreDequeueFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -223,12 +177,7 @@ func (c StoreDequeueFuncCall) Results() []interface{} {
 
 // StoreDoneFunc describes the behavior when the Done method of the parent
 // MockStore instance is invoked.
-type StoreDoneFunc struct {
-	defaultHook func(error) error
-	hooks       []func(error) error
-	history     []StoreDoneFuncCall
-	mutex       sync.Mutex
-}
+type StoreDoneFunc struct { /* all structs must go */ }
 
 // Done delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -302,14 +251,7 @@ func (f *StoreDoneFunc) History() []StoreDoneFuncCall {
 
 // StoreDoneFuncCall is an object that describes an invocation of method
 // Done on an instance of MockStore.
-type StoreDoneFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 error
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type StoreDoneFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -325,12 +267,7 @@ func (c StoreDoneFuncCall) Results() []interface{} {
 
 // StoreHandleFunc describes the behavior when the Handle method of the
 // parent MockStore instance is invoked.
-type StoreHandleFunc struct {
-	defaultHook func() *basestore.TransactableHandle
-	hooks       []func() *basestore.TransactableHandle
-	history     []StoreHandleFuncCall
-	mutex       sync.Mutex
-}
+type StoreHandleFunc struct { /* all structs must go */ }
 
 // Handle delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -404,11 +341,7 @@ func (f *StoreHandleFunc) History() []StoreHandleFuncCall {
 
 // StoreHandleFuncCall is an object that describes an invocation of method
 // Handle on an instance of MockStore.
-type StoreHandleFuncCall struct {
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 *basestore.TransactableHandle
-}
+type StoreHandleFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -424,12 +357,7 @@ func (c StoreHandleFuncCall) Results() []interface{} {
 
 // StoreMarkCompleteFunc describes the behavior when the MarkComplete method
 // of the parent MockStore instance is invoked.
-type StoreMarkCompleteFunc struct {
-	defaultHook func(context.Context, int) (bool, error)
-	hooks       []func(context.Context, int) (bool, error)
-	history     []StoreMarkCompleteFuncCall
-	mutex       sync.Mutex
-}
+type StoreMarkCompleteFunc struct { /* all structs must go */ }
 
 // MarkComplete delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -503,20 +431,7 @@ func (f *StoreMarkCompleteFunc) History() []StoreMarkCompleteFuncCall {
 
 // StoreMarkCompleteFuncCall is an object that describes an invocation of
 // method MarkComplete on an instance of MockStore.
-type StoreMarkCompleteFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 bool
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type StoreMarkCompleteFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -532,12 +447,7 @@ func (c StoreMarkCompleteFuncCall) Results() []interface{} {
 
 // StoreMarkErroredFunc describes the behavior when the MarkErrored method
 // of the parent MockStore instance is invoked.
-type StoreMarkErroredFunc struct {
-	defaultHook func(context.Context, int, string) (bool, error)
-	hooks       []func(context.Context, int, string) (bool, error)
-	history     []StoreMarkErroredFuncCall
-	mutex       sync.Mutex
-}
+type StoreMarkErroredFunc struct { /* all structs must go */ }
 
 // MarkErrored delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -611,23 +521,7 @@ func (f *StoreMarkErroredFunc) History() []StoreMarkErroredFuncCall {
 
 // StoreMarkErroredFuncCall is an object that describes an invocation of
 // method MarkErrored on an instance of MockStore.
-type StoreMarkErroredFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 string
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 bool
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 error
-}
+type StoreMarkErroredFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -643,12 +537,7 @@ func (c StoreMarkErroredFuncCall) Results() []interface{} {
 
 // StoreRequeueFunc describes the behavior when the Requeue method of the
 // parent MockStore instance is invoked.
-type StoreRequeueFunc struct {
-	defaultHook func(context.Context, int, time.Time) error
-	hooks       []func(context.Context, int, time.Time) error
-	history     []StoreRequeueFuncCall
-	mutex       sync.Mutex
-}
+type StoreRequeueFunc struct { /* all structs must go */ }
 
 // Requeue delegates to the next hook function in the queue and stores the
 // parameter and result values of this invocation.
@@ -722,20 +611,7 @@ func (f *StoreRequeueFunc) History() []StoreRequeueFuncCall {
 
 // StoreRequeueFuncCall is an object that describes an invocation of method
 // Requeue on an instance of MockStore.
-type StoreRequeueFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Arg1 is the value of the 2nd argument passed to this method
-	// invocation.
-	Arg1 int
-	// Arg2 is the value of the 3rd argument passed to this method
-	// invocation.
-	Arg2 time.Time
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 error
-}
+type StoreRequeueFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
@@ -751,12 +627,7 @@ func (c StoreRequeueFuncCall) Results() []interface{} {
 
 // StoreResetStalledFunc describes the behavior when the ResetStalled method
 // of the parent MockStore instance is invoked.
-type StoreResetStalledFunc struct {
-	defaultHook func(context.Context) ([]int, []int, error)
-	hooks       []func(context.Context) ([]int, []int, error)
-	history     []StoreResetStalledFuncCall
-	mutex       sync.Mutex
-}
+type StoreResetStalledFunc struct { /* all structs must go */ }
 
 // ResetStalled delegates to the next hook function in the queue and stores
 // the parameter and result values of this invocation.
@@ -830,20 +701,7 @@ func (f *StoreResetStalledFunc) History() []StoreResetStalledFuncCall {
 
 // StoreResetStalledFuncCall is an object that describes an invocation of
 // method ResetStalled on an instance of MockStore.
-type StoreResetStalledFuncCall struct {
-	// Arg0 is the value of the 1st argument passed to this method
-	// invocation.
-	Arg0 context.Context
-	// Result0 is the value of the 1st result returned from this method
-	// invocation.
-	Result0 []int
-	// Result1 is the value of the 2nd result returned from this method
-	// invocation.
-	Result1 []int
-	// Result2 is the value of the 3rd result returned from this method
-	// invocation.
-	Result2 error
-}
+type StoreResetStalledFuncCall struct { /* all structs must go */ }
 
 // Args returns an interface slice containing the arguments of this
 // invocation.
diff --git a/internal/workerutil/resetter.go b/internal/workerutil/resetter.go
index c205137..f47a580 100644
--- a/internal/workerutil/resetter.go
+++ b/internal/workerutil/resetter.go
@@ -16,26 +16,11 @@ import (
 // An unlocked record signifies that it is not actively being processed and records in this
 // state for more than a few seconds are very likely to be stuck after the worker processing
 // them has crashed.
-type Resetter struct {
-	store    Store
-	options  ResetterOptions
-	clock    glock.Clock
-	ctx      context.Context // root context passed to the database
-	cancel   func()          // cancels the root context
-	finished chan struct{}   // signals that Start has finished
-}
+type Resetter struct { /* all structs must go */ }
 
-type ResetterOptions struct {
-	Name     string
-	Interval time.Duration
-	Metrics  ResetterMetrics
-}
+type ResetterOptions struct { /* all structs must go */ }
 
-type ResetterMetrics struct {
-	RecordResets        prometheus.Counter
-	RecordResetFailures prometheus.Counter
-	Errors              prometheus.Counter
-}
+type ResetterMetrics struct { /* all structs must go */ }
 
 func NewResetter(store Store, options ResetterOptions) *Resetter {
 	return newResetter(store, options, glock.NewRealClock())
diff --git a/internal/workerutil/store.go b/internal/workerutil/store.go
index 1cf4a76..d9dcb64 100644
--- a/internal/workerutil/store.go
+++ b/internal/workerutil/store.go
@@ -56,81 +56,12 @@ type Record interface {
 	RecordID() int
 }
 
-type store struct {
-	*basestore.Store
-	options        StoreOptions
-	columnReplacer *strings.Replacer
-}
+type store struct { /* all structs must go */ }
 
 var _ Store = &store{}
 
 // StoreOptions configure the behavior of Store over a particular set of tables, columns, and expressions.
-type StoreOptions struct {
-	// TableName is the name of the table containing work records.
-	//
-	// The target table (and the target view referenced by `ViewName`) must have the following columns
-	// and types:
-	//
-	//   - id: integer primary key
-	//   - state: an enum type containing at least `queued`, `processing`, and `errored`
-	//   - failure_message: text
-	//   - started_at: timestamp with time zone
-	//   - finished_at: timestamp with time zone
-	//   - process_after: timestamp with time zone
-	//   - num_resets: integer not null
-	//
-	// The names of these columns may be customized based on the table name by adding a replacement
-	// pair in the AlternateColumnNames mapping.
-	//
-	// It's recommended to put an index or (or partial index) on the state column for more efficient
-	// dequeue operations.
-	TableName string
-
-	// AlternateColumnNames is a map from expected column names to actual column names in the target
-	// table. This allows existing tables to be more easily retrofitted into the expected record
-	// shape.
-	AlternateColumnNames map[string]string
-
-	// ViewName is an optional name of a view on top of the table containing work records to query when
-	// selecting a candidate and when selecting the record after it has been locked. If this value is
-	// not supplied, `TableName` will be used. The value supplied may also indicate a table alias, which
-	// can be referenced in `OrderByExpression`, `ColumnExpressions`, and the conditions suplied to
-	// `Dequeue`.
-	//
-	// The target of this column must be a view on top of the configured table with the same column
-	// requirements as the base table descried above.
-	//
-	// Example use case:
-	// The processor for LSIF uploads supplies `lsif_uploads_with_repository_name`, a view on top of the
-	// `lsif_uploads` table that joins work records with the `repo` table and adds an additional repository
-	// name column. This allows `Dequeue` to return a record with additional data so that a second query
-	// is not necessary by the caller.
-	ViewName string
-
-	// Scan is the function used to convert a rows object into a record of the expected shape.
-	Scan RecordScanFn
-
-	// OrderByExpression is the SQL expression used to order candidate records when selecting the next
-	// batch of work to perform. This expression may use the alias provided in `ViewName`, if one was
-	// supplied.
-	OrderByExpression *sqlf.Query
-
-	// ColumnExpressions are the target columns provided to the query when selecting a locked record.
-	// These expressions may use the alias provided in `ViewName`, if one was supplied.
-	ColumnExpressions []*sqlf.Query
-
-	// StalledMaxAge is the maximum allow duration between updating the state of a record as "processing"
-	// and locking the record row during processing. An unlocked row that is marked as processing likely
-	// indicates that the worker that dequeued the record has died. There should be a nearly-zero delay
-	// between these states during normal operation.
-	StalledMaxAge time.Duration
-
-	// MaxNumResets is the maximum number of times a record can be implicitly reset back to the queued
-	// state (via `ResetStalled`). If a record's failed attempts counter reaches this threshold, it will
-	// be moved into the errored state rather than queued on its next reset to prevent an infinite retry
-	// cycle of the same input.
-	MaxNumResets int
-}
+type StoreOptions struct { /* all structs must go */ }
 
 // RecordScanFn is a function that interprets row values as a particular record. This function should
 // return a false-valued flag if the given result set was empty. This function must close the rows
diff --git a/internal/workerutil/worker.go b/internal/workerutil/worker.go
index 927e1ae..0222716 100644
--- a/internal/workerutil/worker.go
+++ b/internal/workerutil/worker.go
@@ -14,24 +14,9 @@ import (
 )
 
 // Worker is a generic consumer of records from the workerutil store.
-type Worker struct {
-	store            Store
-	options          WorkerOptions
-	clock            glock.Clock
-	handlerSemaphore chan struct{}   // tracks available handler slots
-	ctx              context.Context // root context passed to the handler
-	cancel           func()          // cancels the root context
-	wg               sync.WaitGroup  // tracks active handler routines
-	finished         chan struct{}   // signals that Start has finished
-}
+type Worker struct { /* all structs must go */ }
 
-type WorkerOptions struct {
-	Name        string
-	Handler     Handler
-	NumHandlers int
-	Interval    time.Duration
-	Metrics     WorkerMetrics
-}
+type WorkerOptions struct { /* all structs must go */ }
 
 // Handler is the configurable consumer within a worker. Types that conform to this
 // interface may also optionally conform to the PreDequeuer, PreHandler, and PostHandler
@@ -90,9 +75,7 @@ func (f HandlerFunc) Handle(ctx context.Context, store Store, record Record) err
 	return f(ctx, store, record)
 }
 
-type WorkerMetrics struct {
-	HandleOperation *observation.Operation
-}
+type WorkerMetrics struct { /* all structs must go */ }
 
 func NewWorker(ctx context.Context, store Store, options WorkerOptions) *Worker {
 	return newWorker(ctx, store, options, glock.NewRealClock())
diff --git a/migrations/bindata.go b/migrations/bindata.go
index 32f6ce3..5ff69c5 100644
--- a/migrations/bindata.go
+++ b/migrations/bindata.go
@@ -126,18 +126,9 @@ func bindataRead(data []byte, name string) ([]byte, error) {
 	return buf.Bytes(), nil
 }
 
-type asset struct {
-	bytes  []byte
-	info   os.FileInfo
-	digest [sha256.Size]byte
-}
+type asset struct { /* all structs must go */ }
 
-type bindataFileInfo struct {
-	name    string
-	size    int64
-	mode    os.FileMode
-	modTime time.Time
-}
+type bindataFileInfo struct { /* all structs must go */ }
 
 func (fi bindataFileInfo) Name() string {
 	return fi.name
@@ -2179,10 +2170,7 @@ func AssetDir(name string) ([]string, error) {
 	return rv, nil
 }
 
-type bintree struct {
-	Func     func() (*asset, error)
-	Children map[string]*bintree
-}
+type bintree struct { /* all structs must go */ }
 
 var _bintree = &bintree{nil, map[string]*bintree{
 	"1528395650_squashed_migrations.down.sql":                                 {_1528395650_squashed_migrationsDownSql, map[string]*bintree{}},
diff --git a/monitoring/generator.go b/monitoring/generator.go
index bac4235..927eda8 100644
--- a/monitoring/generator.go
+++ b/monitoring/generator.go
@@ -27,20 +27,7 @@ import (
 )
 
 // Container describes a Docker container to be observed.
-type Container struct {
-	// Name of the Docker container, e.g. "syntect-server".
-	Name string
-
-	// Title of the Docker container, e.g. "Syntect Server".
-	Title string
-
-	// Description of the Docker container. It should describe what the container
-	// is responsible for, so that the impact of issues in it is clear.
-	Description string
-
-	// Groups of observable information about the container.
-	Groups []Group
-}
+type Container struct { /* all structs must go */ }
 
 func (c *Container) validate() error {
 	if !isValidUID(c.Name) {
@@ -61,22 +48,7 @@ func (c *Container) validate() error {
 }
 
 // Group describes a group of observable information about a container.
-type Group struct {
-	// Title of the group, briefly summarizing what this group is about, or
-	// "General" if the group is just about the container in general.
-	Title string
-
-	// Hidden indicates whether or not the group should be hidden by default.
-	//
-	// This should only be used when the dashboard is already full of information
-	// and the information presented in this group is unlikely to be the cause of
-	// issues and should generally only be inspected in the event that an alert
-	// for that information is firing.
-	Hidden bool
-
-	// Rows of observable metrics.
-	Rows []Row
-}
+type Group struct { /* all structs must go */ }
 
 func (g Group) validate() error {
 	if g.Title != upperFirst(g.Title) || g.Title == withPeriod(g.Title) {
@@ -125,97 +97,7 @@ const (
 )
 
 // Observable describes a metric about a container that can be observed. For example, memory usage.
-type Observable struct {
-	// Name is a short and human-readable lower_snake_case name describing what is being observed.
-	//
-	// It must be unique relative to the service name.
-	//
-	// Good examples:
-	//
-	//  github_rate_limit_remaining
-	// 	search_error_rate
-	//
-	// Bad examples:
-	//
-	//  repo_updater_github_rate_limit
-	// 	search_error_rate_over_5m
-	//
-	Name string
-
-	// Description is a human-readable description of exactly what is being observed.
-	//
-	// Good examples:
-	//
-	// 	"remaining GitHub API rate limit quota"
-	// 	"number of search errors every 5m"
-	//  "90th percentile search request duration over 5m"
-	//
-	// Bad examples:
-	//
-	// 	"GitHub rate limit"
-	// 	"search errors[5m]"
-	// 	"P90 search latency"
-	//
-	Description string
-
-	// Owner indicates the team that owns any alerts associated with this Observable.
-	Owner ObservableOwner
-
-	// Query is the actual Prometheus query that should be observed.
-	Query string
-
-	// DataMayNotExist indicates if the query may not return data until some event occurs in the
-	// future.
-	//
-	// For example, repo_updater_memory_usage should always have data present and an alert should
-	// fire if for some reason that query is not returning any data, so this would be set to false.
-	// In contrast, search_error_rate would depend on users actually performing searches and we
-	// would not want an alert to fire if no data was present, so this would be set to true.
-	DataMayNotExist bool
-
-	// DataMayBeNaN indicates whether or not the query may return NaN regularly. Most often,
-	// this should be false as NaN often indicates a mistaken divide by zero. However, for
-	// some queries NaN values may be expected, in which case you should set this to true.
-	//
-	// When false, alerts will fire if the query returns NaN.
-	DataMayBeNaN bool
-
-	// Warning and Critical alert definitions. At least a Warning alert must be present.
-	//
-	// See README.md for why it is intentionally impossible to create a dashboard to monitor
-	// something without at least a warning alert being defined.
-	Warning, Critical Alert
-
-	// PossibleSolutions is Markdown describing possible solutions in the event that the alert is
-	// firing. If there is no clear potential resolution, "none" must be explicitly stated.
-	//
-	// Contacting support should not be mentioned as part of a possible solution, as it is
-	// communicated elsewhere.
-	//
-	// To make writing the Markdown more friendly in Go, string literals like this:
-	//
-	// 	Observable{
-	// 		PossibleSolutions: `
-	// 			- Foobar 'some code'
-	// 		`
-	// 	}
-	//
-	// Becomes:
-	//
-	// 	- Foobar `some code`
-	//
-	// In other words:
-	//
-	// 1. The preceding newline is removed.
-	// 2. The indentation in the string literal is removed (based on the last line).
-	// 3. Single quotes become backticks.
-	// 4. The last line (which is all indention) is removed.
-	//
-	PossibleSolutions string
-
-	// PanelOptions describes some options for how to render the metric in the Grafana panel.
-	PanelOptions panelOptions
-}
+type Observable struct { /* all structs must go */ }
 
 func (o Observable) validate() error {
 	if strings.Contains(o.Name, " ") || strings.ToLower(o.Name) != o.Name {
@@ -250,19 +132,7 @@ func (o Observable) validate() error {
 }
 
 // Alert defines when an alert would be considered firing.
-type Alert struct {
-	// GreaterOrEqual, when non-zero, indicates the alert should fire when
-	// greater or equal to this value.
-	GreaterOrEqual float64
-
-	// LessOrEqual, when non-zero, indicates the alert should fire when less
-	// than or equal to this value.
-	LessOrEqual float64
-
-	// For indicates how long the given thresholds must be exceeded for this
-	// alert to be considered firing. Defaults to 0s.
-	For time.Duration
-}
+type Alert struct { /* all structs must go */ }
 
 func (a Alert) isEmpty() bool {
 	return a == Alert{} || (a.GreaterOrEqual == 0 && a.LessOrEqual == 0)
@@ -320,13 +190,7 @@ const (
 	BitsPerSecond UnitType = "bps"
 )
 
-type panelOptions struct {
-	min, max     *float64
-	minAuto      bool
-	legendFormat string
-	unitType     UnitType
-	interval     string
-}
+type panelOptions struct { /* all structs must go */ }
 
 // Min sets the minimum value of the Y axis on the panel. The default is zero.
 func (p panelOptions) Min(min float64) panelOptions {
@@ -804,10 +668,7 @@ for assistance.
 					fmt.Fprintf(&b, "# %s: %s\n\n", c.Name, o.Name)
 
 					fmt.Fprintf(&b, "**Descriptions:**\n")
-					for _, alert := range []struct {
-						level     string
-						threshold Alert
-					}{
+					for _, alert := range []struct { /* all structs must go */ }{
 						{level: "warning", threshold: o.Warning},
 						{level: "critical", threshold: o.Critical},
 					} {
@@ -1023,14 +884,9 @@ func deleteRemnants(filelist []string, grafanaDir, promDir string) {
 //
 // https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/
 //
-type promRulesFile struct {
-	Groups []promGroup
-}
+type promRulesFile struct { /* all structs must go */ }
 
-type promGroup struct {
-	Name  string
-	Rules []promRule
-}
+type promGroup struct { /* all structs must go */ }
 
 func (g *promGroup) AppendRow(alertQuery string, labels map[string]string, duration time.Duration) {
 	labels["alert_type"] = "builtin" // indicate alert is generated
@@ -1060,17 +916,7 @@ func (g *promGroup) AppendRow(alertQuery string, labels map[string]string, durat
 		})
 }
 
-type promRule struct {
-	// either Record or Alert
-	Record string `yaml:",omitempty"`
-	Alert  string `yaml:",omitempty"`
-
-	Labels map[string]string
-	Expr   string
-
-	// for Alert only
-	For *time.Duration `yaml:",omitempty"`
-}
+type promRule struct { /* all structs must go */ }
 
 // setPanelSize is a helper to set a panel's size.
 func setPanelSize(p *sdk.Panel, width, height int) {
diff --git a/schema/extension_schema.go b/schema/extension_schema.go
index fdb5b29..6d4bd64 100644
--- a/schema/extension_schema.go
+++ b/schema/extension_schema.go
@@ -6,57 +6,20 @@ import "github.com/sourcegraph/go-jsonschema/jsonschema"
 // not need to contain all fields, only those used by Go code.
 
 // SourcegraphExtensionManifest description: The Sourcegraph extension manifest describes the extension and the features it provides.
-type SourcegraphExtensionManifest struct {
-	ActivationEvents []string                `json:"activationEvents"`
-	Args             *map[string]interface{} `json:"args,omitempty"`
-	Contributes      *Contributions          `json:"contributes,omitempty"`
-	Description      string                  `json:"description,omitempty"`
-	Icon             string                  `json:"icon,omitempty"`
-	Readme           string                  `json:"readme,omitempty"`
-	Repository       *ExtensionRepository    `json:"repository,omitempty"`
-	Wip              bool                    `json:"wip,omitempty"`
-	Url              string                  `json:"url"`
-}
+type SourcegraphExtensionManifest struct { /* all structs must go */ }
 
 // ExtensionRepository description: The location of the version control repository for this extension.
-type ExtensionRepository struct {
-	Type string `json:"type,omitempty"`
-	Url  string `json:"url"`
-}
-
-type Action struct {
-	ActionItem       *ActionItem   `json:"actionItem,omitempty"`
-	Category         string        `json:"category,omitempty"`
-	Command          string        `json:"command,omitempty"`
-	CommandArguments []interface{} `json:"commandArguments,omitempty"`
-	IconURL          string        `json:"iconURL,omitempty"`
-	Id               string        `json:"id,omitempty"`
-	Title            string        `json:"title,omitempty"`
-}
+type ExtensionRepository struct { /* all structs must go */ }
+
+type Action struct { /* all structs must go */ }
 
 // ActionItem description: The action item.
-type ActionItem struct {
-	Description string `json:"description,omitempty"`
-	IconURL     string `json:"iconURL,omitempty"`
-	Label       string `json:"label,omitempty"`
-}
+type ActionItem struct { /* all structs must go */ }
 
 // Contributions description: Features contributed by this extension. Extensions may also register certain types of contributions dynamically.
-type Contributions struct {
-	Actions       []*Action          `json:"actions,omitempty"`
-	Configuration *jsonschema.Schema `json:"configuration,omitempty"`
-	Menus         *Menus             `json:"menus,omitempty"`
-}
-
-type MenuItem struct {
-	Action string `json:"action,omitempty"`
-	Alt    string `json:"alt,omitempty"`
-	When   string `json:"when,omitempty"`
-}
+type Contributions struct { /* all structs must go */ }
+
+type MenuItem struct { /* all structs must go */ }
 
 // Menus description: Describes where to place actions in menus.
-type Menus struct {
-	CommandPalette []*MenuItem `json:"commandPalette,omitempty"`
-	EditorTitle    []*MenuItem `json:"editor/title,omitempty"`
-	Help           []*MenuItem `json:"help,omitempty"`
-}
+type Menus struct { /* all structs must go */ }
diff --git a/schema/schema.go b/schema/schema.go
index 848ee62..1a7eccd 100644
--- a/schema/schema.go
+++ b/schema/schema.go
@@ -9,62 +9,20 @@ import (
 )
 
 // AWSCodeCommitConnection description: Configuration for a connection to AWS CodeCommit.
-type AWSCodeCommitConnection struct {
-	// AccessKeyID description: The AWS access key ID to use when listing and updating repositories from AWS CodeCommit. Must have the AWSCodeCommitReadOnly IAM policy.
-	AccessKeyID string `json:"accessKeyID"`
-	// Exclude description: A list of repositories to never mirror from AWS CodeCommit.
-	//
-	// Supports excluding by name ({"name": "git-codecommit.us-west-1.amazonaws.com/repo-name"}) or by ARN ({"id": "arn:aws:codecommit:us-west-1:999999999999:name"}).
-	Exclude []*ExcludedAWSCodeCommitRepo `json:"exclude,omitempty"`
-	// GitCredentials description: The Git credentials used for authentication when cloning an AWS CodeCommit repository over HTTPS.
-	//
-	// See the AWS CodeCommit documentation on Git credentials for CodeCommit: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html#git-credentials-code-commit.
-	// For detailed instructions on how to create the credentials in IAM, see this page: https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html
-	GitCredentials AWSCodeCommitGitCredentials `json:"gitCredentials"`
-	// InitialRepositoryEnablement description: Deprecated and ignored field which will be removed entirely in the next release. AWS CodeCommit repositories can no longer be enabled or disabled explicitly. Configure which repositories should not be mirrored via "exclude" instead.
-	InitialRepositoryEnablement bool `json:"initialRepositoryEnablement,omitempty"`
-	// Region description: The AWS region in which to access AWS CodeCommit. See the list of supported regions at https://docs.aws.amazon.com/codecommit/latest/userguide/regions.html#regions-git.
-	Region string `json:"region"`
-	// RepositoryPathPattern description: The pattern used to generate a the corresponding Sourcegraph repository name for an AWS CodeCommit repository. In the pattern, the variable "{name}" is replaced with the repository's name.
-	//
-	// For example, if your Sourcegraph instance is at https://src.example.com, then a repositoryPathPattern of "awsrepos/{name}" would mean that a AWS CodeCommit repository named "myrepo" is available on Sourcegraph at https://src.example.com/awsrepos/myrepo.
-	//
-	// It is important that the Sourcegraph repository name generated with this pattern be unique to this code host. If different code hosts generate repository names that collide, Sourcegraph's behavior is undefined.
-	RepositoryPathPattern string `json:"repositoryPathPattern,omitempty"`
-	// SecretAccessKey description: The AWS secret access key (that corresponds to the AWS access key ID set in `accessKeyID`).
-	SecretAccessKey string `json:"secretAccessKey"`
-}
+type AWSCodeCommitConnection struct { /* all structs must go */ }
 
 // AWSCodeCommitGitCredentials description: The Git credentials used for authentication when cloning an AWS CodeCommit repository over HTTPS.
 //
 // See the AWS CodeCommit documentation on Git credentials for CodeCommit: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html#git-credentials-code-commit.
 // For detailed instructions on how to create the credentials in IAM, see this page: https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html
-type AWSCodeCommitGitCredentials struct {
-	// Password description: The Git password
-	Password string `json:"password"`
-	// Username description: The Git username
-	Username string `json:"username"`
-}
+type AWSCodeCommitGitCredentials struct { /* all structs must go */ }
 
 // AuthAccessTokens description: Settings for access tokens, which enable external tools to access the Sourcegraph API with the privileges of the user.
-type AuthAccessTokens struct {
-	// Allow description: Allow or restrict the use of access tokens. The default is "all-users-create", which enables all users to create access tokens. Use "none" to disable access tokens entirely. Use "site-admin-create" to restrict creation of new tokens to admin users (existing tokens will still work until revoked).
-	Allow string `json:"allow,omitempty"`
-}
+type AuthAccessTokens struct { /* all structs must go */ }
 
 // AuthProviderCommon description: Common properties for authentication providers.
-type AuthProviderCommon struct {
-	// DisplayName description: The name to use when displaying this authentication provider in the UI. Defaults to an auto-generated name with the type of authentication provider and other relevant identifiers (such as a hostname).
-	DisplayName string `json:"displayName,omitempty"`
-}
-type AuthProviders struct {
-	Builtin       *BuiltinAuthProvider
-	Saml          *SAMLAuthProvider
-	Openidconnect *OpenIDConnectAuthProvider
-	HttpHeader    *HTTPHeaderAuthProvider
-	Github        *GitHubAuthProvider
-	Gitlab        *GitLabAuthProvider
-}
+type AuthProviderCommon struct { /* all structs must go */ }
+type AuthProviders struct { /* all structs must go */ }
 
 func (v AuthProviders) MarshalJSON() ([]byte, error) {
 	if v.Builtin != nil {
@@ -88,9 +46,7 @@ func (v AuthProviders) MarshalJSON() ([]byte, error) {
 	return nil, errors.New("tagged union type must have exactly 1 non-nil field value")
 }
 func (v *AuthProviders) UnmarshalJSON(data []byte) error {
-	var d struct {
-		DiscriminantProperty string `json:"type"`
-	}
+	var d struct { /* all structs must go */ }
 	if err := json.Unmarshal(data, &d); err != nil {
 		return err
 	}
@@ -112,123 +68,19 @@ func (v *AuthProviders) UnmarshalJSON(data []byte) error {
 }
 
 // BitbucketCloudConnection description: Configuration for a connection to Bitbucket Cloud.
-type BitbucketCloudConnection struct {
-	// ApiURL description: The API URL of Bitbucket Cloud, such as https://api.bitbucket.org. Generally, admin should not modify the value of this option because Bitbucket Cloud is a public hosting platform.
-	ApiURL string `json:"apiURL,omitempty"`
-	// AppPassword description: The app password to use when authenticating to the Bitbucket Cloud. Also set the corresponding "username" field.
-	AppPassword string `json:"appPassword"`
-	// Exclude description: A list of repositories to never mirror from Bitbucket Cloud. Takes precedence over "teams" configuration.
-	//
-	// Supports excluding by name ({"name": "myorg/myrepo"}) or by UUID ({"uuid": "{fceb73c7-cef6-4abe-956d-e471281126bd}"}).
-	Exclude []*ExcludedBitbucketCloudRepo `json:"exclude,omitempty"`
-	// GitURLType description: The type of Git URLs to use for cloning and fetching Git repositories on this Bitbucket Cloud.
-	//
-	// If "http", Sourcegraph will access Bitbucket Cloud repositories using Git URLs of the form https://bitbucket.org/myteam/myproject.git.
-	//
-	// If "ssh", Sourcegraph will access Bitbucket Cloud repositories using Git URLs of the form git@bitbucket.org:myteam/myproject.git. See the documentation for how to provide SSH private keys and known_hosts: https://docs.sourcegraph.com/admin/repo/auth#repositories-that-need-http-s-or-ssh-authentication.
-	GitURLType string `json:"gitURLType,omitempty"`
-	// RateLimit description: Rate limit applied when making background API requests to Bitbucket Cloud.
-	RateLimit *BitbucketCloudRateLimit `json:"rateLimit,omitempty"`
-	// RepositoryPathPattern description: The pattern used to generate the corresponding Sourcegraph repository name for a Bitbucket Cloud repository.
-	//
-	//  - "{host}" is replaced with the Bitbucket Cloud URL's host (such as bitbucket.org),  and "{nameWithOwner}" is replaced with the Bitbucket Cloud repository's "owner/path" (such as "myorg/myrepo").
-	//
-	// For example, if your Bitbucket Cloud is https://bitbucket.org and your Sourcegraph is https://src.example.com, then a repositoryPathPattern of "{host}/{nameWithOwner}" would mean that a Bitbucket Cloud repository at https://bitbucket.org/alice/my-repo is available on Sourcegraph at https://src.example.com/bitbucket.org/alice/my-repo.
-	//
-	// It is important that the Sourcegraph repository name generated with this pattern be unique to this code host. If different code hosts generate repository names that collide, Sourcegraph's behavior is undefined.
-	RepositoryPathPattern string `json:"repositoryPathPattern,omitempty"`
-	// Teams description: An array of team names identifying Bitbucket Cloud teams whose repositories should be mirrored on Sourcegraph.
-	Teams []string `json:"teams,omitempty"`
-	// Url description: URL of Bitbucket Cloud, such as https://bitbucket.org. Generally, admin should not modify the value of this option because Bitbucket Cloud is a public hosting platform.
-	Url string `json:"url"`
-	// Username description: The username to use when authenticating to the Bitbucket Cloud. Also set the corresponding "appPassword" field.
-	Username string `json:"username"`
-}
+type BitbucketCloudConnection struct { /* all structs must go */ }
 
 // BitbucketCloudRateLimit description: Rate limit applied when making background API requests to Bitbucket Cloud.
-type BitbucketCloudRateLimit struct {
-	// Enabled description: true if rate limiting is enabled.
-	Enabled bool `json:"enabled"`
-	// RequestsPerHour description: Requests per hour permitted. This is an average, calculated per second.
-	RequestsPerHour float64 `json:"requestsPerHour"`
-}
+type BitbucketCloudRateLimit struct { /* all structs must go */ }
 
 // BitbucketServerAuthorization description: If non-null, enforces Bitbucket Server repository permissions.
-type BitbucketServerAuthorization struct {
-	// HardTTL description: DEPRECATED: Duration after which a user's cached permissions must be updated before authorizing any user actions. This is 3 days by default.
-	HardTTL string `json:"hardTTL,omitempty"`
-	// IdentityProvider description: The source of identity to use when computing permissions. This defines how to compute the Bitbucket Server identity to use for a given Sourcegraph user. When 'username' is used, Sourcegraph assumes usernames are identical in Sourcegraph and Bitbucket Server accounts and `auth.enableUsernameChanges` must be set to false for security reasons.
-	IdentityProvider BitbucketServerIdentityProvider `json:"identityProvider"`
-	// Oauth description: OAuth configuration specified when creating the Bitbucket Server Application Link with incoming authentication. Two Legged OAuth with 'ExecuteAs=admin' must be enabled as well as user impersonation.
-	Oauth BitbucketServerOAuth `json:"oauth"`
-	// Ttl description: DEPRECATED: Duration after which a user's cached permissions will be updated in the background (during which time the previously cached permissions will be used). This is 3 hours by default.
-	//
-	// Decreasing the TTL will increase the load on the code host API. If you have X repos on your instance, it will take ~X/1000 API requests to fetch the complete list for 1 user.  If you have Y users, you will incur X*Y/1000 API requests per cache refresh period.
-	//
-	// If set to zero, Sourcegraph will sync a user's entire accessible repository list on every request (NOT recommended).
-	Ttl string `json:"ttl,omitempty"`
-}
+type BitbucketServerAuthorization struct { /* all structs must go */ }
 
 // BitbucketServerConnection description: Configuration for a connection to Bitbucket Server.
-type BitbucketServerConnection struct {
-	// Authorization description: If non-null, enforces Bitbucket Server repository permissions.
-	Authorization *BitbucketServerAuthorization `json:"authorization,omitempty"`
-	// Certificate description: TLS certificate of the Bitbucket Server instance. This is only necessary if the certificate is self-signed or signed by an internal CA. To get the certificate run `openssl s_client -connect HOST:443 -showcerts < /dev/null 2> /dev/null | openssl x509 -outform PEM`. To escape the value into a JSON string, you may want to use a tool like https://json-escape-text.now.sh.
-	Certificate string `json:"certificate,omitempty"`
-	// Exclude description: A list of repositories to never mirror from this Bitbucket Server instance. Takes precedence over "repos" and "repositoryQuery".
-	//
-	// Supports excluding by name ({"name": "projectKey/repositorySlug"}) or by ID ({"id": 42}).
-	Exclude []*ExcludedBitbucketServerRepo `json:"exclude,omitempty"`
-	// ExcludePersonalRepositories description: Whether or not personal repositories should be excluded or not. When true, Sourcegraph will ignore personal repositories it may have access to. See https://docs.sourcegraph.com/integration/bitbucket_server#excluding-personal-repositories for more information.
-	ExcludePersonalRepositories bool `json:"excludePersonalRepositories,omitempty"`
-	// GitURLType description: The type of Git URLs to use for cloning and fetching Git repositories on this Bitbucket Server instance.
-	//
-	// If "http", Sourcegraph will access Bitbucket Server repositories using Git URLs of the form http(s)://bitbucket.example.com/scm/myproject/myrepo.git (using https: if the Bitbucket Server instance uses HTTPS).
-	//
-	// If "ssh", Sourcegraph will access Bitbucket Server repositories using Git URLs of the form ssh://git@example.bitbucket.com/myproject/myrepo.git. See the documentation for how to provide SSH private keys and known_hosts: https://docs.sourcegraph.com/admin/repo/auth#repositories-that-need-http-s-or-ssh-authentication.
-	GitURLType string `json:"gitURLType,omitempty"`
-	// InitialRepositoryEnablement description: Defines whether repositories from this Bitbucket Server instance should be enabled and cloned when they are first seen by Sourcegraph. If false, the site admin must explicitly enable Bitbucket Server repositories (in the site admin area) to clone them and make them searchable on Sourcegraph. If true, they will be enabled and cloned immediately (subject to rate limiting by Bitbucket Server); site admins can still disable them explicitly, and they'll remain disabled.
-	InitialRepositoryEnablement bool `json:"initialRepositoryEnablement,omitempty"`
-	// Password description: The password to use when authenticating to the Bitbucket Server instance. Also set the corresponding "username" field.
-	//
-	// For Bitbucket Server instances that support personal access tokens (Bitbucket Server version 5.5 and newer), it is recommended to provide a token instead (in the "token" field).
-	Password string `json:"password,omitempty"`
-	// Plugin description: Configuration for Bitbucket Server Sourcegraph plugin
-	Plugin *BitbucketServerPlugin `json:"plugin,omitempty"`
-	// RateLimit description: Rate limit applied when making background API requests to BitbucketServer.
-	RateLimit *BitbucketServerRateLimit `json:"rateLimit,omitempty"`
-	// Repos description: An array of repository "projectKey/repositorySlug" strings specifying repositories to mirror on Sourcegraph.
-	Repos []string `json:"repos,omitempty"`
-	// RepositoryPathPattern description: The pattern used to generate the corresponding Sourcegraph repository name for a Bitbucket Server repository.
-	//
-	//  - "{host}" is replaced with the Bitbucket Server URL's host (such as bitbucket.example.com)
-	//  - "{projectKey}" is replaced with the Bitbucket repository's parent project key (such as "PRJ")
-	//  - "{repositorySlug}" is replaced with the Bitbucket repository's slug key (such as "my-repo").
-	//
-	// For example, if your Bitbucket Server is https://bitbucket.example.com and your Sourcegraph is https://src.example.com, then a repositoryPathPattern of "{host}/{projectKey}/{repositorySlug}" would mean that a Bitbucket Server repository at https://bitbucket.example.com/projects/PRJ/repos/my-repo is available on Sourcegraph at https://src.example.com/bitbucket.example.com/PRJ/my-repo.
-	//
-	// It is important that the Sourcegraph repository name generated with this pattern be unique to this code host. If different code hosts generate repository names that collide, Sourcegraph's behavior is undefined.
-	RepositoryPathPattern string `json:"repositoryPathPattern,omitempty"`
-	// RepositoryQuery description: An array of strings specifying which repositories to mirror on Sourcegraph. Each string is a URL query string with parameters that filter the list of returned repos. Examples: "?name=my-repo&projectname=PROJECT&visibility=private".
-	//
-	// The special string "none" can be used as the only element to disable this feature. Repositories matched by multiple query strings are only imported once. Here's the official Bitbucket Server documentation about which query string parameters are valid: https://docs.atlassian.com/bitbucket-server/rest/6.1.2/bitbucket-rest.html#idp355
-	RepositoryQuery []string `json:"repositoryQuery,omitempty"`
-	// Token description: A Bitbucket Server personal access token with Read scope. Create one at https://[your-bitbucket-hostname]/plugins/servlet/access-tokens/add. Also set the corresponding "username" field.
-	//
-	// For Bitbucket Server instances that don't support personal access tokens (Bitbucket Server version 5.4 and older), specify user-password credentials in the "username" and "password" fields.
-	Token string `json:"token,omitempty"`
-	// Url description: URL of a Bitbucket Server instance, such as https://bitbucket.example.com.
-	Url string `json:"url"`
-	// Username description: The username to use when authenticating to the Bitbucket Server instance. Also set the corresponding "token" or "password" field.
-	Username string `json:"username"`
-	// Webhooks description: DEPRECATED: Switch to "plugin.webhooks"
-	Webhooks *Webhooks `json:"webhooks,omitempty"`
-}
+type BitbucketServerConnection struct { /* all structs must go */ }
 
 // BitbucketServerIdentityProvider description: The source of identity to use when computing permissions. This defines how to compute the Bitbucket Server identity to use for a given Sourcegraph user. When 'username' is used, Sourcegraph assumes usernames are identical in Sourcegraph and Bitbucket Server accounts and `auth.enableUsernameChanges` must be set to false for security reasons.
-type BitbucketServerIdentityProvider struct {
-	Username *BitbucketServerUsernameIdentity
-}
+type BitbucketServerIdentityProvider struct { /* all structs must go */ }
 
 func (v BitbucketServerIdentityProvider) MarshalJSON() ([]byte, error) {
 	if v.Username != nil {
@@ -237,9 +89,7 @@ func (v BitbucketServerIdentityProvider) MarshalJSON() ([]byte, error) {
 	return nil, errors.New("tagged union type must have exactly 1 non-nil field value")
 }
 func (v *BitbucketServerIdentityProvider) UnmarshalJSON(data []byte) error {
-	var d struct {
-		DiscriminantProperty string `json:"type"`
-	}
+	var d struct { /* all structs must go */ }
 	if err := json.Unmarshal(data, &d); err != nil {
 		return err
 	}
@@ -251,443 +101,97 @@ func (v *BitbucketServerIdentityProvider) UnmarshalJSON(data []byte) error {
 }
 
 // BitbucketServerOAuth description: OAuth configuration specified when creating the Bitbucket Server Application Link with incoming authentication. Two Legged OAuth with 'ExecuteAs=admin' must be enabled as well as user impersonation.
-type BitbucketServerOAuth struct {
-	// ConsumerKey description: The OAuth consumer key specified when creating the Bitbucket Server Application Link with incoming authentication.
-	ConsumerKey string `json:"consumerKey"`
-	// SigningKey description: Base64 encoding of the OAuth PEM encoded RSA private key used to generate the public key specified when creating the Bitbucket Server Application Link with incoming authentication.
-	SigningKey string `json:"signingKey"`
-}
+type BitbucketServerOAuth struct { /* all structs must go */ }
 
 // BitbucketServerPlugin description: Configuration for Bitbucket Server Sourcegraph plugin
-type BitbucketServerPlugin struct {
-	// Permissions description: Enables fetching Bitbucket Server permissions through the roaring bitmap endpoint. Warning: there may be performance degradation under significant load.
-	Permissions string                         `json:"permissions,omitempty"`
-	Webhooks    *BitbucketServerPluginWebhooks `json:"webhooks,omitempty"`
-}
-type BitbucketServerPluginWebhooks struct {
-	// DisableSync description: Disallow Sourcegraph from automatically syncing webhook config with the Bitbucket Server instance. For details of how the webhook is configured, see our docs: https://docs.sourcegraph.com/admin/external_service/bitbucket_server#webhooks
-	DisableSync bool `json:"disableSync,omitempty"`
-	// Secret description: Secret for authenticating incoming webhook payloads
-	Secret string `json:"secret"`
-}
+type BitbucketServerPlugin struct { /* all structs must go */ }
+type BitbucketServerPluginWebhooks struct { /* all structs must go */ }
 
 // BitbucketServerRateLimit description: Rate limit applied when making background API requests to BitbucketServer.
-type BitbucketServerRateLimit struct {
-	// Enabled description: true if rate limiting is enabled.
-	Enabled bool `json:"enabled"`
-	// RequestsPerHour description: Requests per hour permitted. This is an average, calculated per second.
-	RequestsPerHour float64 `json:"requestsPerHour"`
-}
-type BitbucketServerUsernameIdentity struct {
-	Type string `json:"type"`
-}
-type BrandAssets struct {
-	// Logo description: The URL to the image used on the homepage. This will replace the Sourcegraph logo on the homepage. Maximum width: 320px. We recommend using the following file formats: SVG, PNG
-	Logo string `json:"logo,omitempty"`
-	// Symbol description: The URL to the symbol used as the search icon. Recommended size: 24x24px. We recommend using the following file formats: SVG, PNG, ICO
-	Symbol string `json:"symbol,omitempty"`
-}
+type BitbucketServerRateLimit struct { /* all structs must go */ }
+type BitbucketServerUsernameIdentity struct { /* all structs must go */ }
+type BrandAssets struct { /* all structs must go */ }
 
 // Branding description: Customize Sourcegraph homepage logo and search icon.
 //
 // Only available in Sourcegraph Enterprise.
-type Branding struct {
-	// BrandName description: String to display everywhere the brand name should be displayed. Defaults to "Sourcegraph"
-	BrandName string       `json:"brandName,omitempty"`
-	Dark      *BrandAssets `json:"dark,omitempty"`
-	// DisableSymbolSpin description: Prevents the icon in the top-left corner of the screen from spinning on hover.
-	DisableSymbolSpin bool `json:"disableSymbolSpin,omitempty"`
-	// Favicon description: The URL of the favicon to be used for your instance. We recommend using the following file format: ICO
-	Favicon string       `json:"favicon,omitempty"`
-	Light   *BrandAssets `json:"light,omitempty"`
-}
+type Branding struct { /* all structs must go */ }
 
 // BuiltinAuthProvider description: Configures the builtin username-password authentication provider.
-type BuiltinAuthProvider struct {
-	// AllowSignup description: Allows new visitors to sign up for accounts. The sign-up page will be enabled and accessible to all visitors.
-	//
-	// SECURITY: If the site has no users (i.e., during initial setup), it will always allow the first user to sign up and become site admin **without any approval** (first user to sign up becomes the admin).
-	AllowSignup bool   `json:"allowSignup,omitempty"`
-	Type        string `json:"type"`
-}
+type BuiltinAuthProvider struct { /* all structs must go */ }
 
 // CampaignSpec description: A campaign specification, which describes the campaign and what kinds of changes to make (or what existing changesets to track).
-type CampaignSpec struct {
-	// ChangesetTemplate description: A template describing how to create (and update) changesets with the file changes produced by the command steps.
-	ChangesetTemplate *ChangesetTemplate `json:"changesetTemplate,omitempty"`
-	// Description description: The description of the campaign.
-	Description string `json:"description,omitempty"`
-	// Name description: The name of the campaign, which is unique among all campaigns in the namespace. A campaign's name is case-preserving.
-	Name string `json:"name"`
-	// On description: The set of repositories (and branches) to run the campaign on, specified as a list of search queries (that match repositories) and/or specific repositories.
-	On []interface{} `json:"on,omitempty"`
-	// Steps description: The sequence of commands to run (for each repository branch matched in the `on` property) to produce the campaign's changes.
-	Steps []*Step `json:"steps,omitempty"`
-}
+type CampaignSpec struct { /* all structs must go */ }
 
 // ChangesetTemplate description: A template describing how to create (and update) changesets with the file changes produced by the command steps.
-type ChangesetTemplate struct {
-	// Body description: The body (description) of the changeset.
-	Body string `json:"body,omitempty"`
-	// Branch description: The name of the Git branch to create or update on each repository with the changes.
-	Branch string `json:"branch"`
-	// Commit description: The Git commit to create with the changes.
-	Commit ExpandedGitCommitDescription `json:"commit"`
-	// Published description: Whether to publish the changeset. An unpublished changeset can be previewed on Sourcegraph by any person who can view the campaign, but its commit, branch, and pull request aren't created on the code host. A published changeset results in a commit, branch, and pull request being created on the code host.
-	Published bool `json:"published"`
-	// Title description: The title of the changeset.
-	Title string `json:"title"`
-}
+type ChangesetTemplate struct { /* all structs must go */ }
 
 // CloneURLToRepositoryName description: Describes a mapping from clone URL to repository name. The `from` field contains a regular expression with named capturing groups. The `to` field contains a template string that references capturing group names. For instance, if `from` is "^../(?P<name>\w+)$" and `to` is "github.com/user/{name}", the clone URL "../myRepository" would be mapped to the repository name "github.com/user/myRepository".
-type CloneURLToRepositoryName struct {
-	// From description: A regular expression that matches a set of clone URLs. The regular expression should use the Go regular expression syntax (https://golang.org/pkg/regexp/) and contain at least one named capturing group. The regular expression matches partially by default, so use "^...$" if whole-string matching is desired.
-	From string `json:"from"`
-	// To description: The repository name output pattern. This should use `{matchGroup}` syntax to reference the capturing groups from the `from` field.
-	To string `json:"to"`
-}
+type CloneURLToRepositoryName struct { /* all structs must go */ }
 
 // CustomGitFetchMapping description: Mapping from Git clone URl domain/path to git fetch command. The `domainPath` field contains the Git clone URL domain/path part. The `fetch` field contains the custom git fetch command.
-type CustomGitFetchMapping struct {
-	// DomainPath description: Git clone URL domain/path
-	DomainPath string `json:"domainPath"`
-	// Fetch description: Git fetch command
-	Fetch string `json:"fetch"`
-}
+type CustomGitFetchMapping struct { /* all structs must go */ }
 
 // DebugLog description: Turns on debug logging for specific debugging scenarios.
-type DebugLog struct {
-	// ExtsvcGitlab description: Log GitLab API requests.
-	ExtsvcGitlab bool `json:"extsvc.gitlab,omitempty"`
-}
+type DebugLog struct { /* all structs must go */ }
 
 // Dotcom description: Configuration options for Sourcegraph.com only.
-type Dotcom struct {
-	// SlackLicenseExpirationWebhook description: Slack webhook for upcoming license expiration notifications.
-	SlackLicenseExpirationWebhook string `json:"slackLicenseExpirationWebhook,omitempty"`
-}
-type ExcludedAWSCodeCommitRepo struct {
-	// Id description: The ID of an AWS Code Commit repository (as returned by the AWS API) to exclude from mirroring. Use this to exclude the repository, even if renamed, or to differentiate between repositories with the same name in multiple regions.
-	Id string `json:"id,omitempty"`
-	// Name description: The name of an AWS CodeCommit repository ("repo-name") to exclude from mirroring.
-	Name string `json:"name,omitempty"`
-}
-type ExcludedBitbucketCloudRepo struct {
-	// Name description: The name of a Bitbucket Cloud repo ("myorg/myrepo") to exclude from mirroring.
-	Name string `json:"name,omitempty"`
-	// Pattern description: Regular expression which matches against the name of a Bitbucket Cloud repo.
-	Pattern string `json:"pattern,omitempty"`
-	// Uuid description: The UUID of a Bitbucket Cloud repo (as returned by the Bitbucket Cloud's API) to exclude from mirroring.
-	Uuid string `json:"uuid,omitempty"`
-}
-type ExcludedBitbucketServerRepo struct {
-	// Id description: The ID of a Bitbucket Server repo (as returned by the Bitbucket Server instance's API) to exclude from mirroring.
-	Id int `json:"id,omitempty"`
-	// Name description: The name of a Bitbucket Server repo ("projectKey/repositorySlug") to exclude from mirroring.
-	Name string `json:"name,omitempty"`
-	// Pattern description: Regular expression which matches against the name of a Bitbucket Server repo.
-	Pattern string `json:"pattern,omitempty"`
-}
-type ExcludedGitHubRepo struct {
-	// Archived description: If set to true, archived repositories will be excluded.
-	Archived bool `json:"archived,omitempty"`
-	// Forks description: If set to true, forks will be excluded.
-	Forks bool `json:"forks,omitempty"`
-	// Id description: The node ID of a GitHub repository (as returned by the GitHub instance's API) to exclude from mirroring. Use this to exclude the repository, even if renamed. Note: This is the GraphQL ID, not the GitHub database ID. eg: "curl https://api.github.com/repos/vuejs/vue | jq .node_id"
-	Id string `json:"id,omitempty"`
-	// Name description: The name of a GitHub repository ("owner/name") to exclude from mirroring.
-	Name string `json:"name,omitempty"`
-	// Pattern description: Regular expression which matches against the name of a GitHub repository ("owner/name").
-	Pattern string `json:"pattern,omitempty"`
-}
-type ExcludedGitLabProject struct {
-	// Id description: The ID of a GitLab project (as returned by the GitLab instance's API) to exclude from mirroring.
-	Id int `json:"id,omitempty"`
-	// Name description: The name of a GitLab project ("group/name") to exclude from mirroring.
-	Name string `json:"name,omitempty"`
-}
-type ExcludedGitoliteRepo struct {
-	// Name description: The name of a Gitolite repo ("my-repo") to exclude from mirroring.
-	Name string `json:"name,omitempty"`
-	// Pattern description: Regular expression which matches against the name of a Gitolite repo to exclude from mirroring.
-	Pattern string `json:"pattern,omitempty"`
-}
+type Dotcom struct { /* all structs must go */ }
+type ExcludedAWSCodeCommitRepo struct { /* all structs must go */ }
+type ExcludedBitbucketCloudRepo struct { /* all structs must go */ }
+type ExcludedBitbucketServerRepo struct { /* all structs must go */ }
+type ExcludedGitHubRepo struct { /* all structs must go */ }
+type ExcludedGitLabProject struct { /* all structs must go */ }
+type ExcludedGitoliteRepo struct { /* all structs must go */ }
 
 // ExpandedGitCommitDescription description: The Git commit to create with the changes.
-type ExpandedGitCommitDescription struct {
-	// Message description: The Git commit message.
-	Message string `json:"message"`
-}
+type ExpandedGitCommitDescription struct { /* all structs must go */ }
 
 // ExperimentalFeatures description: Experimental features to enable or disable. Features that are now enabled by default are marked as deprecated.
-type ExperimentalFeatures struct {
-	// AndOrQuery description: Interpret a search input query as an and/or query.
-	AndOrQuery string `json:"andOrQuery,omitempty"`
-	// Automation description: Enables the experimental code change management campaigns feature. NOTE: The automation feature was renamed to campaigns, but this experimental feature flag name was not changed (because the feature flag will go away soon anyway).
-	Automation string `json:"automation,omitempty"`
-	// BitbucketServerFastPerm description: DEPRECATED: Configure in Bitbucket Server config.
-	BitbucketServerFastPerm string `json:"bitbucketServerFastPerm,omitempty"`
-	// CustomGitFetch description: JSON array of configuration that maps from Git clone URL domain/path to custom git fetch command.
-	CustomGitFetch []*CustomGitFetchMapping `json:"customGitFetch,omitempty"`
-	// DebugLog description: Turns on debug logging for specific debugging scenarios.
-	DebugLog *DebugLog `json:"debug.log,omitempty"`
-	// EventLogging description: Enables user event logging inside of the Sourcegraph instance. This will allow admins to have greater visibility of user activity, such as frequently viewed pages, frequent searches, and more. These event logs (and any specific user actions) are only stored locally, and never leave this Sourcegraph instance.
-	EventLogging string `json:"eventLogging,omitempty"`
-	// SearchIndexBranches description: A map from repository name to a list of extra revs (branch, ref, tag, commit sha, etc) to index for a repository. We always index the default branch ("HEAD") and revisions in version contexts. This allows specifying additional revisions. Sourcegraph can index up to 64 branches per repository.
-	SearchIndexBranches map[string][]string `json:"search.index.branches,omitempty"`
-	// SearchMultipleRevisionsPerRepository description: DEPRECATED. Always on. Will be removed in 3.19.
-	SearchMultipleRevisionsPerRepository *bool `json:"searchMultipleRevisionsPerRepository,omitempty"`
-	// StructuralSearch description: Enables structural search.
-	StructuralSearch string `json:"structuralSearch,omitempty"`
-	// TlsExternal description: Global TLS/SSL settings for Sourcegraph to use when communicating with code hosts.
-	TlsExternal *TlsExternal `json:"tls.external,omitempty"`
-	// VersionContexts description: JSON array of version context configuration
-	VersionContexts []*VersionContext `json:"versionContexts,omitempty"`
-}
+type ExperimentalFeatures struct { /* all structs must go */ }
 
 // Extensions description: Configures Sourcegraph extensions.
-type Extensions struct {
-	// AllowRemoteExtensions description: Allow only the explicitly listed remote extensions (by extension ID, such as "alice/myextension") from the remote registry. If not set, all remote extensions may be used from the remote registry. To completely disable the remote registry, set `remoteRegistry` to `false`.
-	//
-	// Only available in Sourcegraph Enterprise.
-	AllowRemoteExtensions []string `json:"allowRemoteExtensions,omitempty"`
-	// Disabled description: Disable all usage of extensions.
-	Disabled *bool `json:"disabled,omitempty"`
-	// RemoteRegistry description: The remote extension registry URL, or `false` to not use a remote extension registry. If not set, the default remote extension registry URL is used.
-	RemoteRegistry interface{} `json:"remoteRegistry,omitempty"`
-}
-type ExternalIdentity struct {
-	// AuthProviderID description: The value of the `configID` field of the targeted authentication provider.
-	AuthProviderID string `json:"authProviderID"`
-	// AuthProviderType description: The `type` field of the targeted authentication provider.
-	AuthProviderType string `json:"authProviderType"`
-	// GitlabProvider description: The name that identifies the authentication provider to GitLab. This is passed to the `?provider=` query parameter in calls to the GitLab Users API. If you're not sure what this value is, you can look at the `identities` field of the GitLab Users API result (`curl  -H 'PRIVATE-TOKEN: $YOUR_TOKEN' $GITLAB_URL/api/v4/users`).
-	GitlabProvider string `json:"gitlabProvider"`
-	Type           string `json:"type"`
-}
+type Extensions struct { /* all structs must go */ }
+type ExternalIdentity struct { /* all structs must go */ }
 
 // GitCommitDescription description: The Git commit to create with the changes.
-type GitCommitDescription struct {
-	// Diff description: The commit diff (in unified diff format).
-	Diff string `json:"diff"`
-	// Message description: The Git commit message.
-	Message string `json:"message"`
-}
+type GitCommitDescription struct { /* all structs must go */ }
 
 // GitHubAuthProvider description: Configures the GitHub (or GitHub Enterprise) OAuth authentication provider for SSO. In addition to specifying this configuration object, you must also create a OAuth App on your GitHub instance: https://developer.github.com/apps/building-oauth-apps/creating-an-oauth-app/. When a user signs into Sourcegraph or links their GitHub account to their existing Sourcegraph account, GitHub will prompt the user for the repo scope.
-type GitHubAuthProvider struct {
-	// AllowOrgs description: Restricts new logins to members of these GitHub organizations. Existing sessions won't be invalidated. Leave empty or unset for no org restrictions.
-	AllowOrgs []string `json:"allowOrgs,omitempty"`
-	// AllowSignup description: Allows new visitors to sign up for accounts via GitHub authentication. If false, users signing in via GitHub must have an existing Sourcegraph account, which will be linked to their GitHub identity after sign-in.
-	AllowSignup bool `json:"allowSignup,omitempty"`
-	// ClientID description: The Client ID of the GitHub OAuth app, accessible from https://github.com/settings/developers (or the same path on GitHub Enterprise).
-	ClientID string `json:"clientID"`
-	// ClientSecret description: The Client Secret of the GitHub OAuth app, accessible from https://github.com/settings/developers (or the same path on GitHub Enterprise).
-	ClientSecret string `json:"clientSecret"`
-	DisplayName  string `json:"displayName,omitempty"`
-	Type         string `json:"type"`
-	// Url description: URL of the GitHub instance, such as https://github.com or https://github-enterprise.example.com.
-	Url string `json:"url,omitempty"`
-}
+type GitHubAuthProvider struct { /* all structs must go */ }
 
 // GitHubAuthorization description: If non-null, enforces GitHub repository permissions. This requires that there is an item in the `auth.providers` field of type "github" with the same `url` field as specified in this `GitHubConnection`.
-type GitHubAuthorization struct {
-	// Ttl description: DEPRECATED: The TTL of how long to cache permissions data. This is 3 hours by default.
-	//
-	// Decreasing the TTL will increase the load on the code host API. If you have X private repositories on your instance, it will take ~X/100 API requests to fetch the complete list for 1 user.  If you have Y users, you will incur up to X*Y/100 API requests per cache refresh period (depending on user activity).
-	//
-	// If set to zero, Sourcegraph will sync a user's entire accessible repository list on every request (NOT recommended).
-	//
-	// Public repositories are cached once for all users per cache TTL period.
-	Ttl string `json:"ttl,omitempty"`
-}
+type GitHubAuthorization struct { /* all structs must go */ }
 
 // GitHubConnection description: Configuration for a connection to GitHub or GitHub Enterprise.
-type GitHubConnection struct {
-	// Authorization description: If non-null, enforces GitHub repository permissions. This requires that there is an item in the `auth.providers` field of type "github" with the same `url` field as specified in this `GitHubConnection`.
-	Authorization *GitHubAuthorization `json:"authorization,omitempty"`
-	// Certificate description: TLS certificate of the GitHub Enterprise instance. This is only necessary if the certificate is self-signed or signed by an internal CA. To get the certificate run `openssl s_client -connect HOST:443 -showcerts < /dev/null 2> /dev/null | openssl x509 -outform PEM`. To escape the value into a JSON string, you may want to use a tool like https://json-escape-text.now.sh.
-	Certificate string `json:"certificate,omitempty"`
-	// Exclude description: A list of repositories to never mirror from this GitHub instance. Takes precedence over "orgs", "repos", and "repositoryQuery" configuration.
-	//
-	// Supports excluding by name ({"name": "owner/name"}) or by ID ({"id": "MDEwOlJlcG9zaXRvcnkxMTczMDM0Mg=="}).
-	//
-	// Note: ID is the GitHub GraphQL ID, not the GitHub database ID. eg: "curl https://api.github.com/repos/vuejs/vue | jq .node_id"
-	Exclude []*ExcludedGitHubRepo `json:"exclude,omitempty"`
-	// GitURLType description: The type of Git URLs to use for cloning and fetching Git repositories on this GitHub instance.
-	//
-	// If "http", Sourcegraph will access GitHub repositories using Git URLs of the form http(s)://github.com/myteam/myproject.git (using https: if the GitHub instance uses HTTPS).
-	//
-	// If "ssh", Sourcegraph will access GitHub repositories using Git URLs of the form git@github.com:myteam/myproject.git. See the documentation for how to provide SSH private keys and known_hosts: https://docs.sourcegraph.com/admin/repo/auth#repositories-that-need-http-s-or-ssh-authentication.
-	GitURLType string `json:"gitURLType,omitempty"`
-	// InitialRepositoryEnablement description: Deprecated and ignored field which will be removed entirely in the next release. GitHub repositories can no longer be enabled or disabled explicitly. Configure repositories to be mirrored via "repos", "exclude" and "repositoryQuery" instead.
-	InitialRepositoryEnablement bool `json:"initialRepositoryEnablement,omitempty"`
-	// Orgs description: An array of organization names identifying GitHub organizations whose repositories should be mirrored on Sourcegraph.
-	Orgs []string `json:"orgs,omitempty"`
-	// RateLimit description: Rate limit applied when making background API requests to GitHub.
-	RateLimit *GitHubRateLimit `json:"rateLimit,omitempty"`
-	// Repos description: An array of repository "owner/name" strings specifying which GitHub or GitHub Enterprise repositories to mirror on Sourcegraph.
-	Repos []string `json:"repos,omitempty"`
-	// RepositoryPathPattern description: The pattern used to generate the corresponding Sourcegraph repository name for a GitHub or GitHub Enterprise repository. In the pattern, the variable "{host}" is replaced with the GitHub host (such as github.example.com), and "{nameWithOwner}" is replaced with the GitHub repository's "owner/path" (such as "myorg/myrepo").
-	//
-	// For example, if your GitHub Enterprise URL is https://github.example.com and your Sourcegraph URL is https://src.example.com, then a repositoryPathPattern of "{host}/{nameWithOwner}" would mean that a GitHub repository at https://github.example.com/myorg/myrepo is available on Sourcegraph at https://src.example.com/github.example.com/myorg/myrepo.
-	//
-	// It is important that the Sourcegraph repository name generated with this pattern be unique to this code host. If different code hosts generate repository names that collide, Sourcegraph's behavior is undefined.
-	RepositoryPathPattern string `json:"repositoryPathPattern,omitempty"`
-	// RepositoryQuery description: An array of strings specifying which GitHub or GitHub Enterprise repositories to mirror on Sourcegraph. The valid values are:
-	//
-	// - `public` mirrors all public repositories for GitHub Enterprise and is the equivalent of `none` for GitHub
-	//
-	// - `affiliated` mirrors all repositories affiliated with the configured token's user:
-	// 	- Private repositories with read access
-	// 	- Public repositories owned by the user or their orgs
-	// 	- Public repositories with write access
-	//
-	// - `none` mirrors no repositories (except those specified in the `repos` configuration property or added manually)
-	//
-	// - All other values are executed as a GitHub advanced repository search as described at https://github.com/search/advanced. Example: to sync all repositories from the "sourcegraph" organization including forks the query would be "org:sourcegraph fork:true".
-	//
-	// If multiple values are provided, their results are unioned.
-	//
-	// If you need to narrow the set of mirrored repositories further (and don't want to enumerate it with a list or query set as above), create a new bot/machine user on GitHub or GitHub Enterprise that is only affiliated with the desired repositories.
-	RepositoryQuery []string `json:"repositoryQuery,omitempty"`
-	// Token description: A GitHub personal access token. Create one for GitHub.com at https://github.com/settings/tokens/new?description=Sourcegraph (for GitHub Enterprise, replace github.com with your instance's hostname). See https://docs.sourcegraph.com/admin/external_service/github#github-api-token-and-access for which scopes are required for which use cases.
-	Token string `json:"token"`
-	// Url description: URL of a GitHub instance, such as https://github.com or https://github-enterprise.example.com.
-	Url string `json:"url"`
-	// Webhooks description: An array of configurations defining existing GitHub webhooks that send updates back to Sourcegraph.
-	Webhooks []*GitHubWebhook `json:"webhooks,omitempty"`
-}
+type GitHubConnection struct { /* all structs must go */ }
 
 // GitHubRateLimit description: Rate limit applied when making background API requests to GitHub.
-type GitHubRateLimit struct {
-	// Enabled description: true if rate limiting is enabled.
-	Enabled bool `json:"enabled"`
-	// RequestsPerHour description: Requests per hour permitted. This is an average, calculated per second.
-	RequestsPerHour float64 `json:"requestsPerHour"`
-}
-type GitHubWebhook struct {
-	// Org description: The name of the GitHub organization to which the webhook belongs
-	Org string `json:"org"`
-	// Secret description: The secret used when creating the webhook
-	Secret string `json:"secret"`
-}
+type GitHubRateLimit struct { /* all structs must go */ }
+type GitHubWebhook struct { /* all structs must go */ }
 
 // GitLabAuthProvider description: Configures the GitLab OAuth authentication provider for SSO. In addition to specifying this configuration object, you must also create a OAuth App on your GitLab instance: https://docs.gitlab.com/ee/integration/oauth_provider.html. The application should have `api` and `read_user` scopes and the callback URL set to the concatenation of your Sourcegraph instance URL and "/.auth/gitlab/callback".
-type GitLabAuthProvider struct {
-	// ClientID description: The Client ID of the GitLab OAuth app, accessible from https://gitlab.com/oauth/applications (or the same path on your private GitLab instance).
-	ClientID string `json:"clientID"`
-	// ClientSecret description: The Client Secret of the GitLab OAuth app, accessible from https://gitlab.com/oauth/applications (or the same path on your private GitLab instance).
-	ClientSecret string `json:"clientSecret"`
-	DisplayName  string `json:"displayName,omitempty"`
-	Type         string `json:"type"`
-	// Url description: URL of the GitLab instance, such as https://gitlab.com or https://gitlab.example.com.
-	Url string `json:"url,omitempty"`
-}
+type GitLabAuthProvider struct { /* all structs must go */ }
 
 // GitLabAuthorization description: If non-null, enforces GitLab repository permissions. This requires that there be an item in the `auth.providers` field of type "gitlab" with the same `url` field as specified in this `GitLabConnection`.
-type GitLabAuthorization struct {
-	// IdentityProvider description: The source of identity to use when computing permissions. This defines how to compute the GitLab identity to use for a given Sourcegraph user.
-	IdentityProvider IdentityProvider `json:"identityProvider"`
-	// Ttl description: DEPRECATED: The TTL of how long to cache permissions data. This is 3 hours by default.
-	//
-	// Decreasing the TTL will increase the load on the code host API. If you have X private repositories on your instance, it will take ~X/100 API requests to fetch the complete list for 1 user.  If you have Y users, you will incur up to X*Y/100 API requests per cache refresh period (depending on user activity).
-	//
-	// If set to zero, Sourcegraph will sync a user's entire accessible repository list on every request (NOT recommended).
-	//
-	// Public and internal repositories are cached once for all users per cache TTL period.
-	Ttl string `json:"ttl,omitempty"`
-}
+type GitLabAuthorization struct { /* all structs must go */ }
 
 // GitLabConnection description: Configuration for a connection to GitLab (GitLab.com or GitLab self-managed).
-type GitLabConnection struct {
-	// Authorization description: If non-null, enforces GitLab repository permissions. This requires that there be an item in the `auth.providers` field of type "gitlab" with the same `url` field as specified in this `GitLabConnection`.
-	Authorization *GitLabAuthorization `json:"authorization,omitempty"`
-	// Certificate description: TLS certificate of the GitLab instance. This is only necessary if the certificate is self-signed or signed by an internal CA. To get the certificate run `openssl s_client -connect HOST:443 -showcerts < /dev/null 2> /dev/null | openssl x509 -outform PEM`. To escape the value into a JSON string, you may want to use a tool like https://json-escape-text.now.sh.
-	Certificate string `json:"certificate,omitempty"`
-	// Exclude description: A list of projects to never mirror from this GitLab instance. Takes precedence over "projects" and "projectQuery" configuration. Supports excluding by name ({"name": "group/name"}) or by ID ({"id": 42}).
-	Exclude []*ExcludedGitLabProject `json:"exclude,omitempty"`
-	// GitURLType description: The type of Git URLs to use for cloning and fetching Git repositories on this GitLab instance.
-	//
-	// If "http", Sourcegraph will access GitLab repositories using Git URLs of the form http(s)://gitlab.example.com/myteam/myproject.git (using https: if the GitLab instance uses HTTPS).
-	//
-	// If "ssh", Sourcegraph will access GitLab repositories using Git URLs of the form git@example.gitlab.com:myteam/myproject.git. See the documentation for how to provide SSH private keys and known_hosts: https://docs.sourcegraph.com/admin/repo/auth#repositories-that-need-http-s-or-ssh-authentication.
-	GitURLType string `json:"gitURLType,omitempty"`
-	// InitialRepositoryEnablement description: Defines whether repositories from this GitLab instance should be enabled and cloned when they are first seen by Sourcegraph. If false, the site admin must explicitly enable GitLab repositories (in the site admin area) to clone them and make them searchable on Sourcegraph. If true, they will be enabled and cloned immediately (subject to rate limiting by GitLab); site admins can still disable them explicitly, and they'll remain disabled.
-	InitialRepositoryEnablement bool `json:"initialRepositoryEnablement,omitempty"`
-	// NameTransformations description: An array of transformations will apply to the repository name. Currently, only regex replacement is supported. All transformations happen after "repositoryPathPattern" is processed.
-	NameTransformations []*GitLabNameTransformation `json:"nameTransformations,omitempty"`
-	// ProjectQuery description: An array of strings specifying which GitLab projects to mirror on Sourcegraph. Each string is a URL path and query that targets a GitLab API endpoint returning a list of projects. If the string only contains a query, then "projects" is used as the path. Examples: "?membership=true&search=foo", "groups/mygroup/projects".
-	//
-	// The special string "none" can be used as the only element to disable this feature. Projects matched by multiple query strings are only imported once. Here are a few endpoints that return a list of projects: https://docs.gitlab.com/ee/api/projects.html#list-all-projects, https://docs.gitlab.com/ee/api/groups.html#list-a-groups-projects, https://docs.gitlab.com/ee/api/search.html#scope-projects.
-	ProjectQuery []string `json:"projectQuery"`
-	// Projects description: A list of projects to mirror from this GitLab instance. Supports including by name ({"name": "group/name"}) or by ID ({"id": 42}).
-	Projects []*GitLabProject `json:"projects,omitempty"`
-	// RateLimit description: Rate limit applied when making background API requests to GitLab.
-	RateLimit *GitLabRateLimit `json:"rateLimit,omitempty"`
-	// RepositoryPathPattern description: The pattern used to generate a the corresponding Sourcegraph repository name for a GitLab project. In the pattern, the variable "{host}" is replaced with the GitLab URL's host (such as gitlab.example.com), and "{pathWithNamespace}" is replaced with the GitLab project's "namespace/path" (such as "myteam/myproject").
-	//
-	// For example, if your GitLab is https://gitlab.example.com and your Sourcegraph is https://src.example.com, then a repositoryPathPattern of "{host}/{pathWithNamespace}" would mean that a GitLab project at https://gitlab.example.com/myteam/myproject is available on Sourcegraph at https://src.example.com/gitlab.example.com/myteam/myproject.
-	//
-	// It is important that the Sourcegraph repository name generated with this pattern be unique to this code host. If different code hosts generate repository names that collide, Sourcegraph's behavior is undefined.
-	RepositoryPathPattern string `json:"repositoryPathPattern,omitempty"`
-	// Token description: A GitLab access token with "api" scope. If you are enabling permissions with identity provider type "external", this token should also have "sudo" scope.
-	Token string `json:"token"`
-	// Url description: URL of a GitLab instance, such as https://gitlab.example.com or (for GitLab.com) https://gitlab.com.
-	Url string `json:"url"`
-}
-type GitLabNameTransformation struct {
-	// Regex description: The regex to match for the occurrences of its replacement.
-	Regex string `json:"regex,omitempty"`
-	// Replacement description: The replacement used to replace all matched occurrences by the regex.
-	Replacement string `json:"replacement,omitempty"`
-}
-type GitLabProject struct {
-	// Id description: The ID of a GitLab project (as returned by the GitLab instance's API) to mirror.
-	Id int `json:"id,omitempty"`
-	// Name description: The name of a GitLab project ("group/name") to mirror.
-	Name string `json:"name,omitempty"`
-}
+type GitLabConnection struct { /* all structs must go */ }
+type GitLabNameTransformation struct { /* all structs must go */ }
+type GitLabProject struct { /* all structs must go */ }
 
 // GitLabRateLimit description: Rate limit applied when making background API requests to GitLab.
-type GitLabRateLimit struct {
-	// Enabled description: true if rate limiting is enabled.
-	Enabled bool `json:"enabled"`
-	// RequestsPerHour description: Requests per hour permitted. This is an average, calculated per second.
-	RequestsPerHour float64 `json:"requestsPerHour"`
-}
+type GitLabRateLimit struct { /* all structs must go */ }
 
 // GitoliteConnection description: Configuration for a connection to Gitolite.
-type GitoliteConnection struct {
-	// Exclude description: A list of repositories to never mirror from this Gitolite instance. Supports excluding by exact name ({"name": "foo"}).
-	Exclude []*ExcludedGitoliteRepo `json:"exclude,omitempty"`
-	// Host description: Gitolite host that stores the repositories (e.g., git@gitolite.example.com, ssh://git@gitolite.example.com:2222/).
-	Host string `json:"host"`
-	// Phabricator description: Phabricator instance that integrates with this Gitolite instance
-	Phabricator *Phabricator `json:"phabricator,omitempty"`
-	// PhabricatorMetadataCommand description: This is DEPRECATED. Use the `phabricator` field instead.
-	PhabricatorMetadataCommand string `json:"phabricatorMetadataCommand,omitempty"`
-	// Prefix description: Repository name prefix that will map to this Gitolite host. This should likely end with a trailing slash. E.g., "gitolite.example.com/".
-	//
-	// It is important that the Sourcegraph repository name generated with this prefix be unique to this code host. If different code hosts generate repository names that collide, Sourcegraph's behavior is undefined.
-	Prefix string `json:"prefix"`
-}
+type GitoliteConnection struct { /* all structs must go */ }
 
 // HTTPHeaderAuthProvider description: Configures the HTTP header authentication provider (which authenticates users by consulting an HTTP request header set by an authentication proxy such as https://github.com/bitly/oauth2_proxy).
-type HTTPHeaderAuthProvider struct {
-	// StripUsernameHeaderPrefix description: The prefix that precedes the username portion of the HTTP header specified in `usernameHeader`. If specified, the prefix will be stripped from the header value and the remainder will be used as the username. For example, if using Google Identity-Aware Proxy (IAP) with Google Sign-In, set this value to `accounts.google.com:`.
-	StripUsernameHeaderPrefix string `json:"stripUsernameHeaderPrefix,omitempty"`
-	Type                      string `json:"type"`
-	// UsernameHeader description: The name (case-insensitive) of an HTTP header whose value is taken to be the username of the client requesting the page. Set this value when using an HTTP proxy that authenticates requests, and you don't want the extra configurability of the other authentication methods.
-	UsernameHeader string `json:"usernameHeader"`
-}
+type HTTPHeaderAuthProvider struct { /* all structs must go */ }
 
 // IdentityProvider description: The source of identity to use when computing permissions. This defines how to compute the GitLab identity to use for a given Sourcegraph user.
-type IdentityProvider struct {
-	Oauth    *OAuthIdentity
-	Username *UsernameIdentity
-	External *ExternalIdentity
-}
+type IdentityProvider struct { /* all structs must go */ }
 
 func (v IdentityProvider) MarshalJSON() ([]byte, error) {
 	if v.Oauth != nil {
@@ -702,9 +206,7 @@ func (v IdentityProvider) MarshalJSON() ([]byte, error) {
 	return nil, errors.New("tagged union type must have exactly 1 non-nil field value")
 }
 func (v *IdentityProvider) UnmarshalJSON(data []byte) error {
-	var d struct {
-		DiscriminantProperty string `json:"type"`
-	}
+	var d struct { /* all structs must go */ }
 	if err := json.Unmarshal(data, &d); err != nil {
 		return err
 	}
@@ -720,25 +222,9 @@ func (v *IdentityProvider) UnmarshalJSON(data []byte) error {
 }
 
 // Log description: Configuration for logging and alerting, including to external services.
-type Log struct {
-	// Sentry description: Configuration for Sentry
-	Sentry *Sentry `json:"sentry,omitempty"`
-}
-type Notice struct {
-	// Dismissible description: Whether this notice can be dismissed (closed) by the user.
-	Dismissible bool `json:"dismissible,omitempty"`
-	// Location description: The location where this notice is shown: "top" for the top of every page, "home" for the homepage.
-	Location string `json:"location"`
-	// Message description: The message to display. Markdown formatting is supported.
-	Message string `json:"message"`
-}
-type Notifier struct {
-	Slack     *NotifierSlack
-	Pagerduty *NotifierPagerduty
-	Webhook   *NotifierWebhook
-	Email     *NotifierEmail
-	Opsgenie  *NotifierOpsGenie
-}
+type Log struct { /* all structs must go */ }
+type Notice struct { /* all structs must go */ }
+type Notifier struct { /* all structs must go */ }
 
 func (v Notifier) MarshalJSON() ([]byte, error) {
 	if v.Slack != nil {
@@ -759,9 +245,7 @@ func (v Notifier) MarshalJSON() ([]byte, error) {
 	return nil, errors.New("tagged union type must have exactly 1 non-nil field value")
 }
 func (v *Notifier) UnmarshalJSON(data []byte) error {
-	var d struct {
-		DiscriminantProperty string `json:"type"`
-	}
+	var d struct { /* all structs must go */ }
 	if err := json.Unmarshal(data, &d); err != nil {
 		return err
 	}
@@ -781,489 +265,89 @@ func (v *Notifier) UnmarshalJSON(data []byte) error {
 }
 
 // NotifierEmail description: Email notifier
-type NotifierEmail struct {
-	// Address description: Address to send email to
-	Address string `json:"address"`
-	Type    string `json:"type"`
-}
+type NotifierEmail struct { /* all structs must go */ }
 
 // NotifierOpsGenie description: OpsGenie notifier
-type NotifierOpsGenie struct {
-	ApiKey   string `json:"apiKey"`
-	ApiUrl   string `json:"apiUrl"`
-	Priority string `json:"priority,omitempty"`
-	// Responders description: List of responders responsible for notifications.
-	Responders []*Responders `json:"responders,omitempty"`
-	Type       string        `json:"type"`
-}
+type NotifierOpsGenie struct { /* all structs must go */ }
 
 // NotifierPagerduty description: PagerDuty notifier
-type NotifierPagerduty struct {
-	ApiUrl string `json:"apiUrl,omitempty"`
-	// IntegrationKey description: Integration key for the PagerDuty Events API v2 - see https://developer.pagerduty.com/docs/events-api-v2/overview
-	IntegrationKey string `json:"integrationKey,omitempty"`
-	// Severity description: Severity level for PagerDuty alert
-	Severity string `json:"severity,omitempty"`
-	Type     string `json:"type"`
-}
+type NotifierPagerduty struct { /* all structs must go */ }
 
 // NotifierSlack description: Slack notifier
-type NotifierSlack struct {
-	// Icon_emoji description: Provide an emoji to use as the icon for the bot’s message. Ex :smile:
-	Icon_emoji string `json:"icon_emoji,omitempty"`
-	// Icon_url description: Provide a URL to an image to use as the icon for the bot’s message.
-	Icon_url string `json:"icon_url,omitempty"`
-	// Recipient description: Allows you to override the Slack recipient. You must either provide a channel Slack ID, a user Slack ID, a username reference (@<user>, all lowercase, no whitespace), or a channel reference (#<channel>, all lowercase, no whitespace).
-	Recipient string `json:"recipient,omitempty"`
-	Type      string `json:"type"`
-	// Url description: Slack incoming webhook URL.
-	Url string `json:"url,omitempty"`
-	// Username description: Set the username for the bot’s message.
-	Username string `json:"username,omitempty"`
-}
+type NotifierSlack struct { /* all structs must go */ }
 
 // NotifierWebhook description: Webhook notifier
-type NotifierWebhook struct {
-	BearerToken string `json:"bearerToken,omitempty"`
-	Password    string `json:"password,omitempty"`
-	Type        string `json:"type"`
-	Url         string `json:"url"`
-	Username    string `json:"username,omitempty"`
-}
-type OAuthIdentity struct {
-	// MaxBatchRequests description: DEPRECATED: The maximum number of batch API requests to make for GitLab Project visibility. Please consult with the Sourcegraph support team before modifying this.
-	MaxBatchRequests int `json:"maxBatchRequests,omitempty"`
-	// MinBatchingThreshold description: DEPRECATED: The minimum number of GitLab projects to fetch at which to start batching requests to fetch project visibility. Please consult with the Sourcegraph support team before modifying this.
-	MinBatchingThreshold int    `json:"minBatchingThreshold,omitempty"`
-	Type                 string `json:"type"`
-}
-type ObservabilityAlerts struct {
-	// DisableSendResolved description: Disable notifications when alerts resolve themselves.
-	DisableSendResolved bool `json:"disableSendResolved,omitempty"`
-	// Level description: Sourcegraph alert level to subscribe to notifications for.
-	Level    string   `json:"level"`
-	Notifier Notifier `json:"notifier"`
-}
+type NotifierWebhook struct { /* all structs must go */ }
+type OAuthIdentity struct { /* all structs must go */ }
+type ObservabilityAlerts struct { /* all structs must go */ }
 
 // ObservabilityTracing description: Controls the settings for distributed tracing.
-type ObservabilityTracing struct {
-	// Debug description: Turns on debug logging of opentracing client requests. This can be useful for debugging connectivity issues between the tracing client and the Jaeger agent, the performance overhead of tracing, and other issues related to the use of distributed tracing.
-	Debug bool `json:"debug,omitempty"`
-	// Sampling description: Determines the requests for which distributed traces are recorded. "none" (default) turns off tracing entirely. "selective" sends traces whenever `?trace=1` is present in the URL. "all" sends traces on every request. Note that this only affects the behavior of the distributed tracing client. The Jaeger instance must be running for traces to be collected (as described in the Sourcegraph installation instructions). Additional downsampling can be configured in Jaeger, itself (https://www.jaegertracing.io/docs/1.17/sampling)
-	Sampling string `json:"sampling,omitempty"`
-}
+type ObservabilityTracing struct { /* all structs must go */ }
 
 // OnQuery description: A Sourcegraph search query that matches a set of repositories (and branches). Each matched repository branch is added to the list of repositories that the campaign will be run on.
-type OnQuery struct {
-	// RepositoriesMatchingQuery description: A Sourcegraph search query that matches a set of repositories (and branches). If the query matches files, symbols, or some other object inside a repository, the object's repository is included.
-	RepositoriesMatchingQuery string `json:"repositoriesMatchingQuery"`
-}
+type OnQuery struct { /* all structs must go */ }
 
 // OnRepository description: A specific repository (and branch) that is added to the list of repositories that the campaign will be run on.
-type OnRepository struct {
-	// Branch description: The branch on the repository to propose changes to. If unset, the repository's default branch is used.
-	Branch string `json:"branch,omitempty"`
-	// Repository description: The name of the repository (as it is known to Sourcegraph).
-	Repository string `json:"repository"`
-}
+type OnRepository struct { /* all structs must go */ }
 
 // OpenIDConnectAuthProvider description: Configures the OpenID Connect authentication provider for SSO.
-type OpenIDConnectAuthProvider struct {
-	// ClientID description: The client ID for the OpenID Connect client for this site.
-	//
-	// For Google Apps: obtain this value from the API console (https://console.developers.google.com), as described at https://developers.google.com/identity/protocols/OpenIDConnect#getcredentials
-	ClientID string `json:"clientID"`
-	// ClientSecret description: The client secret for the OpenID Connect client for this site.
-	//
-	// For Google Apps: obtain this value from the API console (https://console.developers.google.com), as described at https://developers.google.com/identity/protocols/OpenIDConnect#getcredentials
-	ClientSecret string `json:"clientSecret"`
-	// ConfigID description: An identifier that can be used to reference this authentication provider in other parts of the config. For example, in configuration for a code host, you may want to designate this authentication provider as the identity provider for the code host.
-	ConfigID    string `json:"configID,omitempty"`
-	DisplayName string `json:"displayName,omitempty"`
-	// Issuer description: The URL of the OpenID Connect issuer.
-	//
-	// For Google Apps: https://accounts.google.com
-	Issuer string `json:"issuer"`
-	// RequireEmailDomain description: Only allow users to authenticate if their email domain is equal to this value (example: mycompany.com). Do not include a leading "@". If not set, all users on this OpenID Connect provider can authenticate to Sourcegraph.
-	RequireEmailDomain string `json:"requireEmailDomain,omitempty"`
-	Type               string `json:"type"`
-}
+type OpenIDConnectAuthProvider struct { /* all structs must go */ }
 
 // OtherExternalServiceConnection description: Configuration for a Connection to Git repositories for which an external service integration isn't yet available.
-type OtherExternalServiceConnection struct {
-	Repos []string `json:"repos"`
-	// RepositoryPathPattern description: The pattern used to generate the corresponding Sourcegraph repository name for the repositories. In the pattern, the variable "{base}" is replaced with the Git clone base URL host and path, and "{repo}" is replaced with the repository path taken from the `repos` field.
-	//
-	// For example, if your Git clone base URL is https://git.example.com/repos and `repos` contains the value "my/repo", then a repositoryPathPattern of "{base}/{repo}" would mean that a repository at https://git.example.com/repos/my/repo is available on Sourcegraph at https://sourcegraph.example.com/git.example.com/repos/my/repo.
-	//
-	// It is important that the Sourcegraph repository name generated with this pattern be unique to this code host. If different code hosts generate repository names that collide, Sourcegraph's behavior is undefined.
-	RepositoryPathPattern string `json:"repositoryPathPattern,omitempty"`
-	Url                   string `json:"url,omitempty"`
-}
+type OtherExternalServiceConnection struct { /* all structs must go */ }
 
 // ParentSourcegraph description: URL to fetch unreachable repository details from. Defaults to "https://sourcegraph.com"
-type ParentSourcegraph struct {
-	Url string `json:"url,omitempty"`
-}
+type ParentSourcegraph struct { /* all structs must go */ }
 
 // PermissionsBackgroundSync description: DEPRECATED: Sync code host repository and user permissions in the background.
-type PermissionsBackgroundSync struct {
-	// Enabled description: Whether syncing permissions in the background is enabled.
-	Enabled bool `json:"enabled,omitempty"`
-}
+type PermissionsBackgroundSync struct { /* all structs must go */ }
 
 // PermissionsUserMapping description: Settings for Sourcegraph permissions, which allow the site admin to explicitly manage repository permissions via the GraphQL API. This setting cannot be enabled if repository permissions for any specific external service are enabled (i.e., when the external service's `authorization` field is set).
-type PermissionsUserMapping struct {
-	// BindID description: The type of identifier to identify a user. The default is "email", which uses the email address to identify a user. Use "username" to identify a user by their username. Changing this setting will erase any permissions created for users that do not yet exist.
-	BindID string `json:"bindID,omitempty"`
-	// Enabled description: Whether permissions user mapping is enabled. There must be no `authorization` field in any external service configuration before enabling this.
-	Enabled bool `json:"enabled,omitempty"`
-}
+type PermissionsUserMapping struct { /* all structs must go */ }
 
 // Phabricator description: Phabricator instance that integrates with this Gitolite instance
-type Phabricator struct {
-	// CallsignCommand description:  Bash command that prints out the Phabricator callsign for a Gitolite repository. This will be run with environment variable $REPO set to the name of the repository and used to obtain the Phabricator metadata for a Gitolite repository. (Note: this requires `bash` to be installed.)
-	CallsignCommand string `json:"callsignCommand"`
-	// Url description: URL of the Phabricator instance that integrates with this Gitolite instance. This should be set
-	Url string `json:"url"`
-}
+type Phabricator struct { /* all structs must go */ }
 
 // PhabricatorConnection description: Configuration for a connection to Phabricator.
-type PhabricatorConnection struct {
-	// Repos description: The list of repositories available on Phabricator.
-	Repos []*Repos `json:"repos,omitempty"`
-	// Token description: API token for the Phabricator instance.
-	Token string `json:"token,omitempty"`
-	// Url description: URL of a Phabricator instance, such as https://phabricator.example.com
-	Url string `json:"url,omitempty"`
-}
-type QuickLink struct {
-	// Description description: A description for this quick link
-	Description string `json:"description,omitempty"`
-	// Name description: The human-readable name for this quick link
-	Name string `json:"name"`
-	// Url description: The URL of this quick link (absolute or relative)
-	Url string `json:"url"`
-}
-type Repos struct {
-	// Callsign description: The unique Phabricator identifier for the repository, like 'MUX'.
-	Callsign string `json:"callsign"`
-	// Path description: Display path for the url e.g. gitolite/my/repo
-	Path string `json:"path"`
-}
-type Responders struct {
-	Id       string `json:"id,omitempty"`
-	Name     string `json:"name,omitempty"`
-	Type     string `json:"type,omitempty"`
-	Username string `json:"username,omitempty"`
-}
+type PhabricatorConnection struct { /* all structs must go */ }
+type QuickLink struct { /* all structs must go */ }
+type Repos struct { /* all structs must go */ }
+type Responders struct { /* all structs must go */ }
 
 // SAMLAuthProvider description: Configures the SAML authentication provider for SSO.
 //
 // Note: if you are using IdP-initiated login, you must have *at most one* SAMLAuthProvider in the `auth.providers` array.
-type SAMLAuthProvider struct {
-	// ConfigID description: An identifier that can be used to reference this authentication provider in other parts of the config. For example, in configuration for a code host, you may want to designate this authentication provider as the identity provider for the code host.
-	ConfigID    string `json:"configID,omitempty"`
-	DisplayName string `json:"displayName,omitempty"`
-	// IdentityProviderMetadata description: The SAML Identity Provider metadata XML contents (for static configuration of the SAML Service Provider). The value of this field should be an XML document whose root element is `<EntityDescriptor>` or `<EntityDescriptors>`. To escape the value into a JSON string, you may want to use a tool like https://json-escape-text.now.sh.
-	IdentityProviderMetadata string `json:"identityProviderMetadata,omitempty"`
-	// IdentityProviderMetadataURL description: The SAML Identity Provider metadata URL (for dynamic configuration of the SAML Service Provider).
-	IdentityProviderMetadataURL string `json:"identityProviderMetadataURL,omitempty"`
-	// InsecureSkipAssertionSignatureValidation description: Whether the Service Provider should (insecurely) accept assertions from the Identity Provider without a valid signature.
-	InsecureSkipAssertionSignatureValidation bool `json:"insecureSkipAssertionSignatureValidation,omitempty"`
-	// NameIDFormat description: The SAML NameID format to use when performing user authentication.
-	NameIDFormat string `json:"nameIDFormat,omitempty"`
-	// ServiceProviderCertificate description: The SAML Service Provider certificate in X.509 encoding (begins with "-----BEGIN CERTIFICATE-----"). This certificate is used by the Identity Provider to validate the Service Provider's AuthnRequests and LogoutRequests. It corresponds to the Service Provider's private key (`serviceProviderPrivateKey`). To escape the value into a JSON string, you may want to use a tool like https://json-escape-text.now.sh.
-	ServiceProviderCertificate string `json:"serviceProviderCertificate,omitempty"`
-	// ServiceProviderIssuer description: The SAML Service Provider name, used to identify this Service Provider. This is required if the "externalURL" field is not set (as the SAML metadata endpoint is computed as "<externalURL>.auth/saml/metadata"), or when using multiple SAML authentication providers.
-	ServiceProviderIssuer string `json:"serviceProviderIssuer,omitempty"`
-	// ServiceProviderPrivateKey description: The SAML Service Provider private key in PKCS#8 encoding (begins with "-----BEGIN PRIVATE KEY-----"). This private key is used to sign AuthnRequests and LogoutRequests. It corresponds to the Service Provider's certificate (`serviceProviderCertificate`). To escape the value into a JSON string, you may want to use a tool like https://json-escape-text.now.sh.
-	ServiceProviderPrivateKey string `json:"serviceProviderPrivateKey,omitempty"`
-	// SignRequests description: Sign AuthnRequests and LogoutRequests sent to the Identity Provider using the Service Provider's private key (`serviceProviderPrivateKey`). It defaults to true if the `serviceProviderPrivateKey` and `serviceProviderCertificate` are set, and false otherwise.
-	SignRequests *bool  `json:"signRequests,omitempty"`
-	Type         string `json:"type"`
-}
+type SAMLAuthProvider struct { /* all structs must go */ }
 
 // SMTPServerConfig description: The SMTP server used to send transactional emails (such as email verifications, reset-password emails, and notifications).
-type SMTPServerConfig struct {
-	// Authentication description: The type of authentication to use for the SMTP server.
-	Authentication string `json:"authentication"`
-	// DisableTLS description: Disable TLS verification
-	DisableTLS bool `json:"disableTLS,omitempty"`
-	// Domain description: The HELO domain to provide to the SMTP server (if needed).
-	Domain string `json:"domain,omitempty"`
-	// Host description: The SMTP server host.
-	Host string `json:"host"`
-	// Password description: The password to use when communicating with the SMTP server.
-	Password string `json:"password,omitempty"`
-	// Port description: The SMTP server port.
-	Port int `json:"port"`
-	// Username description: The username to use when communicating with the SMTP server.
-	Username string `json:"username,omitempty"`
-}
-type SearchSavedQueries struct {
-	// Description description: Description of this saved query
-	Description string `json:"description"`
-	// Key description: Unique key for this query in this file
-	Key string `json:"key"`
-	// Notify description: Notify the owner of this configuration file when new results are available
-	Notify bool `json:"notify,omitempty"`
-	// NotifySlack description: Notify Slack via the organization's Slack webhook URL when new results are available
-	NotifySlack bool `json:"notifySlack,omitempty"`
-	// Query description: Query string
-	Query string `json:"query"`
-	// ShowOnHomepage description: DEPRECATED: saved searches are no longer shown on the homepage. This will be removed in a future release.
-	ShowOnHomepage bool `json:"showOnHomepage,omitempty"`
-}
-type SearchScope struct {
-	// Description description: A description for this search scope
-	Description string `json:"description,omitempty"`
-	// Id description: A unique identifier for the search scope.
-	//
-	// If set, a scoped search page is available at https://[sourcegraph-hostname]/search/scope/ID, where ID is this value.
-	Id string `json:"id,omitempty"`
-	// Name description: The human-readable name for this search scope
-	Name string `json:"name"`
-	// Value description: The query string of this search scope
-	Value string `json:"value"`
-}
+type SMTPServerConfig struct { /* all structs must go */ }
+type SearchSavedQueries struct { /* all structs must go */ }
+type SearchScope struct { /* all structs must go */ }
 
 // Sentry description: Configuration for Sentry
-type Sentry struct {
-	// Dsn description: Sentry Data Source Name (DSN). Per the Sentry docs (https://docs.sentry.io/quickstart/#about-the-dsn), it should match the following pattern: '{PROTOCOL}://{PUBLIC_KEY}@{HOST}/{PATH}{PROJECT_ID}'.
-	Dsn string `json:"dsn,omitempty"`
-}
+type Sentry struct { /* all structs must go */ }
 
 // Settings description: Configuration settings for users and organizations on Sourcegraph.
-type Settings struct {
-	// AlertsHideObservabilitySiteAlerts description: Disables observability-related site alert banners.
-	AlertsHideObservabilitySiteAlerts *bool `json:"alerts.hideObservabilitySiteAlerts,omitempty"`
-	// AlertsShowPatchUpdates description: Whether to show alerts for patch version updates. Alerts for major and minor version updates will always be shown.
-	AlertsShowPatchUpdates bool `json:"alerts.showPatchUpdates,omitempty"`
-	// CodeHostUseNativeTooltips description: Whether to use the code host's native hover tooltips when they exist (GitHub's jump-to-definition tooltips, for example).
-	CodeHostUseNativeTooltips bool `json:"codeHost.useNativeTooltips,omitempty"`
-	// ExperimentalFeatures description: Experimental features to enable or disable. Features that are now enabled by default are marked as deprecated.
-	ExperimentalFeatures *SettingsExperimentalFeatures `json:"experimentalFeatures,omitempty"`
-	// Extensions description: The Sourcegraph extensions to use. Enable an extension by adding a property `"my/extension": true` (where `my/extension` is the extension ID). Override a previously enabled extension and disable it by setting its value to `false`.
-	Extensions map[string]bool `json:"extensions,omitempty"`
-	// Motd description: DEPRECATED: Use `notices` instead.
-	//
-	// An array (often with just one element) of messages to display at the top of all pages, including for unauthenticated users. Users may dismiss a message (and any message with the same string value will remain dismissed for the user).
-	//
-	// Markdown formatting is supported.
-	//
-	// Usually this setting is used in global and organization settings. If set in user settings, the message will only be displayed to that user. (This is useful for testing the correctness of the message's Markdown formatting.)
-	//
-	// MOTD stands for "message of the day" (which is the conventional Unix name for this type of message).
-	Motd []string `json:"motd,omitempty"`
-	// Notices description: Custom informational messages to display to users at specific locations in the Sourcegraph user interface.
-	//
-	// Usually this setting is used in global and organization settings. If set in user settings, the message will only be displayed to that single user.
-	Notices []*Notice `json:"notices,omitempty"`
-	// Quicklinks description: Links that should be accessible quickly from the home and search pages.
-	Quicklinks []*QuickLink `json:"quicklinks,omitempty"`
-	// SearchContextLines description: The default number of lines to show as context below and above search results. Default is 1.
-	SearchContextLines int `json:"search.contextLines,omitempty"`
-	// SearchDefaultPatternType description: The default pattern type (literal or regexp) that search queries will be intepreted as.
-	SearchDefaultPatternType string `json:"search.defaultPatternType,omitempty"`
-	// SearchGlobbing description: Enables globbing for supported field values
-	SearchGlobbing *bool `json:"search.globbing,omitempty"`
-	// SearchIncludeArchived description: Whether searches should include searching archived repositories.
-	SearchIncludeArchived *bool `json:"search.includeArchived,omitempty"`
-	// SearchIncludeForks description: Whether searches should include searching forked repositories.
-	SearchIncludeForks *bool `json:"search.includeForks,omitempty"`
-	// SearchMigrateParser description: If true, uses the new and/or-compatible parser for all search queries. It is a flag to aid transition to the new parser.
-	SearchMigrateParser *bool `json:"search.migrateParser,omitempty"`
-	// SearchRepositoryGroups description: Named groups of repositories that can be referenced in a search query using the repogroup: operator.
-	SearchRepositoryGroups map[string][]string `json:"search.repositoryGroups,omitempty"`
-	// SearchSavedQueries description: DEPRECATED: Saved search queries
-	SearchSavedQueries []*SearchSavedQueries `json:"search.savedQueries,omitempty"`
-	// SearchScopes description: Predefined search scopes
-	SearchScopes []*SearchScope `json:"search.scopes,omitempty"`
-	// SearchUppercase description: When active, any uppercase characters in the pattern will make the entire query case-sensitive.
-	SearchUppercase *bool `json:"search.uppercase,omitempty"`
-}
+type Settings struct { /* all structs must go */ }
 
 // SettingsExperimentalFeatures description: Experimental features to enable or disable. Features that are now enabled by default are marked as deprecated.
-type SettingsExperimentalFeatures struct {
-	// CodeInsights description: Enables code insights on directory pages.
-	CodeInsights *bool `json:"codeInsights,omitempty"`
-	// CopyQueryButton description: Enables displaying the copy query button in the search bar when hovering over the global navigation bar.
-	CopyQueryButton *bool `json:"copyQueryButton,omitempty"`
-	// SearchStats description: Enables a new page that shows language statistics about the results for a search query.
-	SearchStats *bool `json:"searchStats,omitempty"`
-	// ShowBadgeAttachments description: Enables the UI indicators for code intelligence precision.
-	ShowBadgeAttachments *bool `json:"showBadgeAttachments,omitempty"`
-	// ShowRepogroupHomepage description: Enables the repository group homepage
-	ShowRepogroupHomepage *bool `json:"showRepogroupHomepage,omitempty"`
-	// SmartSearchField description: Enables displaying a search field that provides syntax highlighting, hover tooltips and diagnostics for search queries.
-	SmartSearchField *bool `json:"smartSearchField,omitempty"`
-	// SplitSearchModes description: Enables toggling between the current omni search mode, and experimental interactive search mode.
-	SplitSearchModes *bool `json:"splitSearchModes,omitempty"`
-}
+type SettingsExperimentalFeatures struct { /* all structs must go */ }
 
 // SiteConfiguration description: Configuration for a Sourcegraph site.
-type SiteConfiguration struct {
-	// AuthAccessTokens description: Settings for access tokens, which enable external tools to access the Sourcegraph API with the privileges of the user.
-	AuthAccessTokens *AuthAccessTokens `json:"auth.accessTokens,omitempty"`
-	// AuthEnableUsernameChanges description: Enables users to change their username after account creation. Warning: setting this to be true has security implications if you have enabled (or will at any point in the future enable) repository permissions with an option that relies on username equivalency between Sourcegraph and an external service or authentication provider. Do NOT set this to true if you are using non-built-in authentication OR rely on username equivalency for repository permissions.
-	AuthEnableUsernameChanges bool `json:"auth.enableUsernameChanges,omitempty"`
-	// AuthMinPasswordLength description: The minimum number of Unicode code points that a password must contain.
-	AuthMinPasswordLength int `json:"auth.minPasswordLength,omitempty"`
-	// AuthProviders description: The authentication providers to use for identifying and signing in users. See instructions below for configuring SAML, OpenID Connect (including G Suite), and HTTP authentication proxies. Multiple authentication providers are supported (by specifying multiple elements in this array).
-	AuthProviders []AuthProviders `json:"auth.providers,omitempty"`
-	// AuthPublic description: WARNING: This option has been removed as of 3.8.
-	AuthPublic bool `json:"auth.public,omitempty"`
-	// AuthSessionExpiry description: The duration of a user session, after which it expires and the user is required to re-authenticate. The default is 90 days. There is typically no need to set this, but some users may have specific internal security requirements.
-	//
-	// The string format is that of the Duration type in the Go time package (https://golang.org/pkg/time/#ParseDuration). E.g., "720h", "43200m", "2592000s" all indicate a timespan of 30 days.
-	//
-	// Note: changing this field does not affect the expiration of existing sessions. If you would like to enforce this limit for existing sessions, you must log out currently signed-in users. You can force this by removing all keys beginning with "session_" from the Redis store:
-	//
-	// * For deployments using `sourcegraph/server`: `docker exec $CONTAINER_ID redis-cli --raw keys 'session_*' | xargs docker exec $CONTAINER_ID redis-cli del`
-	// * For cluster deployments:
-	//   ```
-	//   REDIS_POD="$(kubectl get pods -l app=redis-store -o jsonpath={.items[0].metadata.name})";
-	//   kubectl exec "$REDIS_POD" -- redis-cli --raw keys 'session_*' | xargs kubectl exec "$REDIS_POD" -- redis-cli --raw del;
-	//   ```
-	//
-	AuthSessionExpiry string `json:"auth.sessionExpiry,omitempty"`
-	// AuthUserOrgMap description: Ensure that matching users are members of the specified orgs (auto-joining users to the orgs if they are not already a member). Provide a JSON object of the form `{"*": ["org1", "org2"]}`, where org1 and org2 are orgs that all users are automatically joined to. Currently the only supported key is `"*"`.
-	AuthUserOrgMap map[string][]string `json:"auth.userOrgMap,omitempty"`
-	// AutomationReadAccessEnabled description: DEPRECATED: The automation feature was renamed to campaigns. Use `campaigns.readAccess.enabled` instead.
-	AutomationReadAccessEnabled *bool `json:"automation.readAccess.enabled,omitempty"`
-	// Branding description: Customize Sourcegraph homepage logo and search icon.
-	//
-	// Only available in Sourcegraph Enterprise.
-	Branding *Branding `json:"branding,omitempty"`
-	// CampaignsReadAccessEnabled description: Enables read-only access to campaigns for non-site-admin users. This is a setting for the experimental campaigns feature. These will only have an effect when campaigns is enabled with `{"experimentalFeatures": {"automation": "enabled"}}`.
-	CampaignsReadAccessEnabled *bool `json:"campaigns.readAccess.enabled,omitempty"`
-	// CorsOrigin description: Required when using any of the native code host integrations for Phabricator, GitLab, or Bitbucket Server. It is a space-separated list of allowed origins for cross-origin HTTP requests which should be the base URL for your Phabricator, GitLab, or Bitbucket Server instance.
-	CorsOrigin string `json:"corsOrigin,omitempty"`
-	// DebugSearchSymbolsParallelism description: (debug) controls the amount of symbol search parallelism. Defaults to 20. It is not recommended to change this outside of debugging scenarios. This option will be removed in a future version.
-	DebugSearchSymbolsParallelism int `json:"debug.search.symbolsParallelism,omitempty"`
-	// DisableAutoGitUpdates description: Disable periodically fetching git contents for existing repositories.
-	DisableAutoGitUpdates bool `json:"disableAutoGitUpdates,omitempty"`
-	// DisableBuiltInSearches description: Whether built-in searches should be hidden on the Searches page.
-	DisableBuiltInSearches bool `json:"disableBuiltInSearches,omitempty"`
-	// DisableNonCriticalTelemetry description: Disable aggregated event counts from being sent to Sourcegraph.com via pings.
-	DisableNonCriticalTelemetry bool `json:"disableNonCriticalTelemetry,omitempty"`
-	// DisablePublicRepoRedirects description: Disable redirects to sourcegraph.com when visiting public repositories that can't exist on this server.
-	DisablePublicRepoRedirects bool `json:"disablePublicRepoRedirects,omitempty"`
-	// DontIncludeSymbolResultsByDefault description: Set to `true` to not include symbol results if no `type:` filter was given
-	DontIncludeSymbolResultsByDefault bool `json:"dontIncludeSymbolResultsByDefault,omitempty"`
-	// Dotcom description: Configuration options for Sourcegraph.com only.
-	Dotcom *Dotcom `json:"dotcom,omitempty"`
-	// EmailAddress description: The "from" address for emails sent by this server.
-	EmailAddress string `json:"email.address,omitempty"`
-	// EmailSmtp description: The SMTP server used to send transactional emails (such as email verifications, reset-password emails, and notifications).
-	EmailSmtp *SMTPServerConfig `json:"email.smtp,omitempty"`
-	// ExperimentalFeatures description: Experimental features to enable or disable. Features that are now enabled by default are marked as deprecated.
-	ExperimentalFeatures *ExperimentalFeatures `json:"experimentalFeatures,omitempty"`
-	// Extensions description: Configures Sourcegraph extensions.
-	Extensions *Extensions `json:"extensions,omitempty"`
-	// ExternalURL description: The externally accessible URL for Sourcegraph (i.e., what you type into your browser). Previously called `appURL`. Only root URLs are allowed.
-	ExternalURL string `json:"externalURL,omitempty"`
-	// GitCloneURLToRepositoryName description: JSON array of configuration that maps from Git clone URL to repository name. Sourcegraph automatically resolves remote clone URLs to their proper code host. However, there may be non-remote clone URLs (e.g., in submodule declarations) that Sourcegraph cannot automatically map to a code host. In this case, use this field to specify the mapping. The mappings are tried in the order they are specified and take precedence over automatic mappings.
-	GitCloneURLToRepositoryName []*CloneURLToRepositoryName `json:"git.cloneURLToRepositoryName,omitempty"`
-	// GitMaxConcurrentClones description: Maximum number of git clone processes that will be run concurrently per gitserver to update repositories. Note: the global git update scheduler respects gitMaxConcurrentClones. However, we allow each gitserver to run upto gitMaxConcurrentClones to allow for urgent fetches. Urgent fetches are used when a user is browsing a PR and we do not have the commit yet.
-	GitMaxConcurrentClones int `json:"gitMaxConcurrentClones,omitempty"`
-	// GithubClientID description: Client ID for GitHub. (DEPRECATED)
-	GithubClientID string `json:"githubClientID,omitempty"`
-	// GithubClientSecret description: Client secret for GitHub. (DEPRECATED)
-	GithubClientSecret string `json:"githubClientSecret,omitempty"`
-	// HtmlBodyBottom description: HTML to inject at the bottom of the `<body>` element on each page, for analytics scripts
-	HtmlBodyBottom string `json:"htmlBodyBottom,omitempty"`
-	// HtmlBodyTop description: HTML to inject at the top of the `<body>` element on each page, for analytics scripts
-	HtmlBodyTop string `json:"htmlBodyTop,omitempty"`
-	// HtmlHeadBottom description: HTML to inject at the bottom of the `<head>` element on each page, for analytics scripts
-	HtmlHeadBottom string `json:"htmlHeadBottom,omitempty"`
-	// HtmlHeadTop description: HTML to inject at the top of the `<head>` element on each page, for analytics scripts
-	HtmlHeadTop string `json:"htmlHeadTop,omitempty"`
-	// LicenseKey description: The license key associated with a Sourcegraph product subscription, which is necessary to activate Sourcegraph Enterprise functionality. To obtain this value, contact Sourcegraph to purchase a subscription. To escape the value into a JSON string, you may want to use a tool like https://json-escape-text.now.sh.
-	LicenseKey string `json:"licenseKey,omitempty"`
-	// LightstepAccessToken description: DEPRECATED. Use Jaeger (`"observability.tracing": { "sampling": "selective" }`), instead.
-	LightstepAccessToken string `json:"lightstepAccessToken,omitempty"`
-	// LightstepProject description: DEPRECATED. Use Jaeger (`"observability.tracing": { "sampling": "selective" }`), instead.
-	LightstepProject string `json:"lightstepProject,omitempty"`
-	// Log description: Configuration for logging and alerting, including to external services.
-	Log *Log `json:"log,omitempty"`
-	// LsifEnforceAuth description: Whether or not LSIF uploads will be blocked unless a valid LSIF upload token is provided.
-	LsifEnforceAuth bool `json:"lsifEnforceAuth,omitempty"`
-	// MaxReposToSearch description: The maximum number of repositories to search across. The user is prompted to narrow their query if exceeded. Any value less than or equal to zero means unlimited.
-	MaxReposToSearch int `json:"maxReposToSearch,omitempty"`
-	// ObservabilityAlerts description: Configure notifications for Sourcegraph's built-in alerts.
-	ObservabilityAlerts []*ObservabilityAlerts `json:"observability.alerts,omitempty"`
-	// ObservabilityLogSlowGraphQLRequests description: (debug) logs all GraphQL requests slower than the specified number of milliseconds.
-	ObservabilityLogSlowGraphQLRequests int `json:"observability.logSlowGraphQLRequests,omitempty"`
-	// ObservabilityLogSlowSearches description: (debug) logs all search queries (issued by users, code intelligence, or API requests) slower than the specified number of milliseconds.
-	ObservabilityLogSlowSearches int `json:"observability.logSlowSearches,omitempty"`
-	// ObservabilitySilenceAlerts description: Silence individual Sourcegraph alerts by identifier.
-	ObservabilitySilenceAlerts []string `json:"observability.silenceAlerts,omitempty"`
-	// ObservabilityTracing description: Controls the settings for distributed tracing.
-	ObservabilityTracing *ObservabilityTracing `json:"observability.tracing,omitempty"`
-	// ParentSourcegraph description: URL to fetch unreachable repository details from. Defaults to "https://sourcegraph.com"
-	ParentSourcegraph *ParentSourcegraph `json:"parentSourcegraph,omitempty"`
-	// PermissionsBackgroundSync description: DEPRECATED: Sync code host repository and user permissions in the background.
-	PermissionsBackgroundSync *PermissionsBackgroundSync `json:"permissions.backgroundSync,omitempty"`
-	// PermissionsUserMapping description: Settings for Sourcegraph permissions, which allow the site admin to explicitly manage repository permissions via the GraphQL API. This setting cannot be enabled if repository permissions for any specific external service are enabled (i.e., when the external service's `authorization` field is set).
-	PermissionsUserMapping *PermissionsUserMapping `json:"permissions.userMapping,omitempty"`
-	// RepoListUpdateInterval description: Interval (in minutes) for checking code hosts (such as GitHub, Gitolite, etc.) for new repositories.
-	RepoListUpdateInterval int `json:"repoListUpdateInterval,omitempty"`
-	// SearchIndexEnabled description: Whether indexed search is enabled. If unset Sourcegraph detects the environment to decide if indexed search is enabled. Indexed search is RAM heavy, and is disabled by default in the single docker image. All other environments will have it enabled by default. The size of all your repository working copies is the amount of additional RAM required.
-	SearchIndexEnabled *bool `json:"search.index.enabled,omitempty"`
-	// SearchIndexSymbolsEnabled description: Whether indexed symbol search is enabled. This is contingent on the indexed search configuration, and is true by default for instances with indexed search enabled. Enabling this will cause every repository to re-index, which is a time consuming (several hours) operation. Additionally, it requires more storage and ram to accommodate the added symbols information in the search index.
-	SearchIndexSymbolsEnabled *bool `json:"search.index.symbols.enabled,omitempty"`
-	// SearchLargeFiles description: A list of file glob patterns where matching files will be indexed and searched regardless of their size. The glob pattern syntax can be found here: https://golang.org/pkg/path/filepath/#Match.
-	SearchLargeFiles []string `json:"search.largeFiles,omitempty"`
-	// UpdateChannel description: The channel on which to automatically check for Sourcegraph updates.
-	UpdateChannel string `json:"update.channel,omitempty"`
-	// UseJaeger description: DEPRECATED. Use `"observability.tracing": { "sampling": "all" }`, instead. Enables Jaeger tracing.
-	UseJaeger bool `json:"useJaeger,omitempty"`
-}
+type SiteConfiguration struct { /* all structs must go */ }
 
 // Step description: A command to run (as part of a sequence) in a repository branch to produce the campaign's changes.
-type Step struct {
-	// Container description: The Docker image used to launch the Docker container in which the shell command is run.
-	Container string `json:"container"`
-	// Env description: Environment variables to set in the environment when running this command.
-	Env map[string]string `json:"env,omitempty"`
-	// Run description: The shell command to run in the container. It can also be a multi-line shell script. The working directory is the root directory of the repository checkout.
-	Run string `json:"run"`
-}
+type Step struct { /* all structs must go */ }
 
 // TlsExternal description: Global TLS/SSL settings for Sourcegraph to use when communicating with code hosts.
-type TlsExternal struct {
-	// Certificates description: TLS certificates to accept. This is only necessary if you are using self-signed certificates or an internal CA. Can be an internal CA certificate or a self-signed certificate. To get the certificate of a webserver run `openssl s_client -connect HOST:443 -showcerts < /dev/null 2> /dev/null | openssl x509 -outform PEM`. To escape the value into a JSON string, you may want to use a tool like https://json-escape-text.now.sh.
-	Certificates []string `json:"certificates,omitempty"`
-	// InsecureSkipVerify description: insecureSkipVerify controls whether a client verifies the server's certificate chain and host name.
-	// If InsecureSkipVerify is true, TLS accepts any certificate presented by the server and any host name in that certificate. In this mode, TLS is susceptible to man-in-the-middle attacks.
-	InsecureSkipVerify bool `json:"insecureSkipVerify,omitempty"`
-}
-type UsernameIdentity struct {
-	Type string `json:"type"`
-}
+type TlsExternal struct { /* all structs must go */ }
+type UsernameIdentity struct { /* all structs must go */ }
 
 // VersionContext description: Configuration of the version context
-type VersionContext struct {
-	// Description description: Description of the version context
-	Description string `json:"description,omitempty"`
-	// Name description: Name of the version context, it must be unique.
-	Name string `json:"name"`
-	// Revisions description: List of repositories of the version context
-	Revisions []*VersionContextRevision `json:"revisions"`
-}
+type VersionContext struct { /* all structs must go */ }
 
 // VersionContextRevision description: Description of the chosen repository and revision
-type VersionContextRevision struct {
-	// Repo description: Repository name
-	Repo string `json:"repo"`
-	// Rev description: Branch, tag, or commit hash. "HEAD" or "" can be used for the default branch.
-	Rev string `json:"rev"`
-}
+type VersionContextRevision struct { /* all structs must go */ }
 
 // Webhooks description: DEPRECATED: Switch to "plugin.webhooks"
-type Webhooks struct {
-	// Secret description: Secret for authenticating incoming webhook payloads
-	Secret string `json:"secret,omitempty"`
-}
+type Webhooks struct { /* all structs must go */ }
