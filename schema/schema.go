// Code generated by go-jsonschema-compiler. DO NOT EDIT.

package schema

import (
	"encoding/json"
	"errors"
	"fmt"
)

// AWSCodeCommitConnection description: Configuration for a connection to AWS CodeCommit.
type AWSCodeCommitConnection struct { /* all structs must go */ }

// AWSCodeCommitGitCredentials description: The Git credentials used for authentication when cloning an AWS CodeCommit repository over HTTPS.
//
// See the AWS CodeCommit documentation on Git credentials for CodeCommit: https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html#git-credentials-code-commit.
// For detailed instructions on how to create the credentials in IAM, see this page: https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html
type AWSCodeCommitGitCredentials struct { /* all structs must go */ }

// AuthAccessTokens description: Settings for access tokens, which enable external tools to access the Sourcegraph API with the privileges of the user.
type AuthAccessTokens struct { /* all structs must go */ }

// AuthProviderCommon description: Common properties for authentication providers.
type AuthProviderCommon struct { /* all structs must go */ }
type AuthProviders struct { /* all structs must go */ }

func (v AuthProviders) MarshalJSON() ([]byte, error) {
	if v.Builtin != nil {
		return json.Marshal(v.Builtin)
	}
	if v.Saml != nil {
		return json.Marshal(v.Saml)
	}
	if v.Openidconnect != nil {
		return json.Marshal(v.Openidconnect)
	}
	if v.HttpHeader != nil {
		return json.Marshal(v.HttpHeader)
	}
	if v.Github != nil {
		return json.Marshal(v.Github)
	}
	if v.Gitlab != nil {
		return json.Marshal(v.Gitlab)
	}
	return nil, errors.New("tagged union type must have exactly 1 non-nil field value")
}
func (v *AuthProviders) UnmarshalJSON(data []byte) error {
	var d struct { /* all structs must go */ }
	if err := json.Unmarshal(data, &d); err != nil {
		return err
	}
	switch d.DiscriminantProperty {
	case "builtin":
		return json.Unmarshal(data, &v.Builtin)
	case "github":
		return json.Unmarshal(data, &v.Github)
	case "gitlab":
		return json.Unmarshal(data, &v.Gitlab)
	case "http-header":
		return json.Unmarshal(data, &v.HttpHeader)
	case "openidconnect":
		return json.Unmarshal(data, &v.Openidconnect)
	case "saml":
		return json.Unmarshal(data, &v.Saml)
	}
	return fmt.Errorf("tagged union type must have a %q property whose value is one of %s", "type", []string{"builtin", "saml", "openidconnect", "http-header", "github", "gitlab"})
}

// BitbucketCloudConnection description: Configuration for a connection to Bitbucket Cloud.
type BitbucketCloudConnection struct { /* all structs must go */ }

// BitbucketCloudRateLimit description: Rate limit applied when making background API requests to Bitbucket Cloud.
type BitbucketCloudRateLimit struct { /* all structs must go */ }

// BitbucketServerAuthorization description: If non-null, enforces Bitbucket Server repository permissions.
type BitbucketServerAuthorization struct { /* all structs must go */ }

// BitbucketServerConnection description: Configuration for a connection to Bitbucket Server.
type BitbucketServerConnection struct { /* all structs must go */ }

// BitbucketServerIdentityProvider description: The source of identity to use when computing permissions. This defines how to compute the Bitbucket Server identity to use for a given Sourcegraph user. When 'username' is used, Sourcegraph assumes usernames are identical in Sourcegraph and Bitbucket Server accounts and `auth.enableUsernameChanges` must be set to false for security reasons.
type BitbucketServerIdentityProvider struct { /* all structs must go */ }

func (v BitbucketServerIdentityProvider) MarshalJSON() ([]byte, error) {
	if v.Username != nil {
		return json.Marshal(v.Username)
	}
	return nil, errors.New("tagged union type must have exactly 1 non-nil field value")
}
func (v *BitbucketServerIdentityProvider) UnmarshalJSON(data []byte) error {
	var d struct { /* all structs must go */ }
	if err := json.Unmarshal(data, &d); err != nil {
		return err
	}
	switch d.DiscriminantProperty {
	case "username":
		return json.Unmarshal(data, &v.Username)
	}
	return fmt.Errorf("tagged union type must have a %q property whose value is one of %s", "type", []string{"username"})
}

// BitbucketServerOAuth description: OAuth configuration specified when creating the Bitbucket Server Application Link with incoming authentication. Two Legged OAuth with 'ExecuteAs=admin' must be enabled as well as user impersonation.
type BitbucketServerOAuth struct { /* all structs must go */ }

// BitbucketServerPlugin description: Configuration for Bitbucket Server Sourcegraph plugin
type BitbucketServerPlugin struct { /* all structs must go */ }
type BitbucketServerPluginWebhooks struct { /* all structs must go */ }

// BitbucketServerRateLimit description: Rate limit applied when making background API requests to BitbucketServer.
type BitbucketServerRateLimit struct { /* all structs must go */ }
type BitbucketServerUsernameIdentity struct { /* all structs must go */ }
type BrandAssets struct { /* all structs must go */ }

// Branding description: Customize Sourcegraph homepage logo and search icon.
//
// Only available in Sourcegraph Enterprise.
type Branding struct { /* all structs must go */ }

// BuiltinAuthProvider description: Configures the builtin username-password authentication provider.
type BuiltinAuthProvider struct { /* all structs must go */ }

// CampaignSpec description: A campaign specification, which describes the campaign and what kinds of changes to make (or what existing changesets to track).
type CampaignSpec struct { /* all structs must go */ }

// ChangesetTemplate description: A template describing how to create (and update) changesets with the file changes produced by the command steps.
type ChangesetTemplate struct { /* all structs must go */ }

// CloneURLToRepositoryName description: Describes a mapping from clone URL to repository name. The `from` field contains a regular expression with named capturing groups. The `to` field contains a template string that references capturing group names. For instance, if `from` is "^../(?P<name>\w+)$" and `to` is "github.com/user/{name}", the clone URL "../myRepository" would be mapped to the repository name "github.com/user/myRepository".
type CloneURLToRepositoryName struct { /* all structs must go */ }

// CustomGitFetchMapping description: Mapping from Git clone URl domain/path to git fetch command. The `domainPath` field contains the Git clone URL domain/path part. The `fetch` field contains the custom git fetch command.
type CustomGitFetchMapping struct { /* all structs must go */ }

// DebugLog description: Turns on debug logging for specific debugging scenarios.
type DebugLog struct { /* all structs must go */ }

// Dotcom description: Configuration options for Sourcegraph.com only.
type Dotcom struct { /* all structs must go */ }
type ExcludedAWSCodeCommitRepo struct { /* all structs must go */ }
type ExcludedBitbucketCloudRepo struct { /* all structs must go */ }
type ExcludedBitbucketServerRepo struct { /* all structs must go */ }
type ExcludedGitHubRepo struct { /* all structs must go */ }
type ExcludedGitLabProject struct { /* all structs must go */ }
type ExcludedGitoliteRepo struct { /* all structs must go */ }

// ExpandedGitCommitDescription description: The Git commit to create with the changes.
type ExpandedGitCommitDescription struct { /* all structs must go */ }

// ExperimentalFeatures description: Experimental features to enable or disable. Features that are now enabled by default are marked as deprecated.
type ExperimentalFeatures struct { /* all structs must go */ }

// Extensions description: Configures Sourcegraph extensions.
type Extensions struct { /* all structs must go */ }
type ExternalIdentity struct { /* all structs must go */ }

// GitCommitDescription description: The Git commit to create with the changes.
type GitCommitDescription struct { /* all structs must go */ }

// GitHubAuthProvider description: Configures the GitHub (or GitHub Enterprise) OAuth authentication provider for SSO. In addition to specifying this configuration object, you must also create a OAuth App on your GitHub instance: https://developer.github.com/apps/building-oauth-apps/creating-an-oauth-app/. When a user signs into Sourcegraph or links their GitHub account to their existing Sourcegraph account, GitHub will prompt the user for the repo scope.
type GitHubAuthProvider struct { /* all structs must go */ }

// GitHubAuthorization description: If non-null, enforces GitHub repository permissions. This requires that there is an item in the `auth.providers` field of type "github" with the same `url` field as specified in this `GitHubConnection`.
type GitHubAuthorization struct { /* all structs must go */ }

// GitHubConnection description: Configuration for a connection to GitHub or GitHub Enterprise.
type GitHubConnection struct { /* all structs must go */ }

// GitHubRateLimit description: Rate limit applied when making background API requests to GitHub.
type GitHubRateLimit struct { /* all structs must go */ }
type GitHubWebhook struct { /* all structs must go */ }

// GitLabAuthProvider description: Configures the GitLab OAuth authentication provider for SSO. In addition to specifying this configuration object, you must also create a OAuth App on your GitLab instance: https://docs.gitlab.com/ee/integration/oauth_provider.html. The application should have `api` and `read_user` scopes and the callback URL set to the concatenation of your Sourcegraph instance URL and "/.auth/gitlab/callback".
type GitLabAuthProvider struct { /* all structs must go */ }

// GitLabAuthorization description: If non-null, enforces GitLab repository permissions. This requires that there be an item in the `auth.providers` field of type "gitlab" with the same `url` field as specified in this `GitLabConnection`.
type GitLabAuthorization struct { /* all structs must go */ }

// GitLabConnection description: Configuration for a connection to GitLab (GitLab.com or GitLab self-managed).
type GitLabConnection struct { /* all structs must go */ }
type GitLabNameTransformation struct { /* all structs must go */ }
type GitLabProject struct { /* all structs must go */ }

// GitLabRateLimit description: Rate limit applied when making background API requests to GitLab.
type GitLabRateLimit struct { /* all structs must go */ }

// GitoliteConnection description: Configuration for a connection to Gitolite.
type GitoliteConnection struct { /* all structs must go */ }

// HTTPHeaderAuthProvider description: Configures the HTTP header authentication provider (which authenticates users by consulting an HTTP request header set by an authentication proxy such as https://github.com/bitly/oauth2_proxy).
type HTTPHeaderAuthProvider struct { /* all structs must go */ }

// IdentityProvider description: The source of identity to use when computing permissions. This defines how to compute the GitLab identity to use for a given Sourcegraph user.
type IdentityProvider struct { /* all structs must go */ }

func (v IdentityProvider) MarshalJSON() ([]byte, error) {
	if v.Oauth != nil {
		return json.Marshal(v.Oauth)
	}
	if v.Username != nil {
		return json.Marshal(v.Username)
	}
	if v.External != nil {
		return json.Marshal(v.External)
	}
	return nil, errors.New("tagged union type must have exactly 1 non-nil field value")
}
func (v *IdentityProvider) UnmarshalJSON(data []byte) error {
	var d struct { /* all structs must go */ }
	if err := json.Unmarshal(data, &d); err != nil {
		return err
	}
	switch d.DiscriminantProperty {
	case "external":
		return json.Unmarshal(data, &v.External)
	case "oauth":
		return json.Unmarshal(data, &v.Oauth)
	case "username":
		return json.Unmarshal(data, &v.Username)
	}
	return fmt.Errorf("tagged union type must have a %q property whose value is one of %s", "type", []string{"oauth", "username", "external"})
}

// Log description: Configuration for logging and alerting, including to external services.
type Log struct { /* all structs must go */ }
type Notice struct { /* all structs must go */ }
type Notifier struct { /* all structs must go */ }

func (v Notifier) MarshalJSON() ([]byte, error) {
	if v.Slack != nil {
		return json.Marshal(v.Slack)
	}
	if v.Pagerduty != nil {
		return json.Marshal(v.Pagerduty)
	}
	if v.Webhook != nil {
		return json.Marshal(v.Webhook)
	}
	if v.Email != nil {
		return json.Marshal(v.Email)
	}
	if v.Opsgenie != nil {
		return json.Marshal(v.Opsgenie)
	}
	return nil, errors.New("tagged union type must have exactly 1 non-nil field value")
}
func (v *Notifier) UnmarshalJSON(data []byte) error {
	var d struct { /* all structs must go */ }
	if err := json.Unmarshal(data, &d); err != nil {
		return err
	}
	switch d.DiscriminantProperty {
	case "email":
		return json.Unmarshal(data, &v.Email)
	case "opsgenie":
		return json.Unmarshal(data, &v.Opsgenie)
	case "pagerduty":
		return json.Unmarshal(data, &v.Pagerduty)
	case "slack":
		return json.Unmarshal(data, &v.Slack)
	case "webhook":
		return json.Unmarshal(data, &v.Webhook)
	}
	return fmt.Errorf("tagged union type must have a %q property whose value is one of %s", "type", []string{"slack", "pagerduty", "webhook", "email", "opsgenie"})
}

// NotifierEmail description: Email notifier
type NotifierEmail struct { /* all structs must go */ }

// NotifierOpsGenie description: OpsGenie notifier
type NotifierOpsGenie struct { /* all structs must go */ }

// NotifierPagerduty description: PagerDuty notifier
type NotifierPagerduty struct { /* all structs must go */ }

// NotifierSlack description: Slack notifier
type NotifierSlack struct { /* all structs must go */ }

// NotifierWebhook description: Webhook notifier
type NotifierWebhook struct { /* all structs must go */ }
type OAuthIdentity struct { /* all structs must go */ }
type ObservabilityAlerts struct { /* all structs must go */ }

// ObservabilityTracing description: Controls the settings for distributed tracing.
type ObservabilityTracing struct { /* all structs must go */ }

// OnQuery description: A Sourcegraph search query that matches a set of repositories (and branches). Each matched repository branch is added to the list of repositories that the campaign will be run on.
type OnQuery struct { /* all structs must go */ }

// OnRepository description: A specific repository (and branch) that is added to the list of repositories that the campaign will be run on.
type OnRepository struct { /* all structs must go */ }

// OpenIDConnectAuthProvider description: Configures the OpenID Connect authentication provider for SSO.
type OpenIDConnectAuthProvider struct { /* all structs must go */ }

// OtherExternalServiceConnection description: Configuration for a Connection to Git repositories for which an external service integration isn't yet available.
type OtherExternalServiceConnection struct { /* all structs must go */ }

// ParentSourcegraph description: URL to fetch unreachable repository details from. Defaults to "https://sourcegraph.com"
type ParentSourcegraph struct { /* all structs must go */ }

// PermissionsBackgroundSync description: DEPRECATED: Sync code host repository and user permissions in the background.
type PermissionsBackgroundSync struct { /* all structs must go */ }

// PermissionsUserMapping description: Settings for Sourcegraph permissions, which allow the site admin to explicitly manage repository permissions via the GraphQL API. This setting cannot be enabled if repository permissions for any specific external service are enabled (i.e., when the external service's `authorization` field is set).
type PermissionsUserMapping struct { /* all structs must go */ }

// Phabricator description: Phabricator instance that integrates with this Gitolite instance
type Phabricator struct { /* all structs must go */ }

// PhabricatorConnection description: Configuration for a connection to Phabricator.
type PhabricatorConnection struct { /* all structs must go */ }
type QuickLink struct { /* all structs must go */ }
type Repos struct { /* all structs must go */ }
type Responders struct { /* all structs must go */ }

// SAMLAuthProvider description: Configures the SAML authentication provider for SSO.
//
// Note: if you are using IdP-initiated login, you must have *at most one* SAMLAuthProvider in the `auth.providers` array.
type SAMLAuthProvider struct { /* all structs must go */ }

// SMTPServerConfig description: The SMTP server used to send transactional emails (such as email verifications, reset-password emails, and notifications).
type SMTPServerConfig struct { /* all structs must go */ }
type SearchSavedQueries struct { /* all structs must go */ }
type SearchScope struct { /* all structs must go */ }

// Sentry description: Configuration for Sentry
type Sentry struct { /* all structs must go */ }

// Settings description: Configuration settings for users and organizations on Sourcegraph.
type Settings struct { /* all structs must go */ }

// SettingsExperimentalFeatures description: Experimental features to enable or disable. Features that are now enabled by default are marked as deprecated.
type SettingsExperimentalFeatures struct { /* all structs must go */ }

// SiteConfiguration description: Configuration for a Sourcegraph site.
type SiteConfiguration struct { /* all structs must go */ }

// Step description: A command to run (as part of a sequence) in a repository branch to produce the campaign's changes.
type Step struct { /* all structs must go */ }

// TlsExternal description: Global TLS/SSL settings for Sourcegraph to use when communicating with code hosts.
type TlsExternal struct { /* all structs must go */ }
type UsernameIdentity struct { /* all structs must go */ }

// VersionContext description: Configuration of the version context
type VersionContext struct { /* all structs must go */ }

// VersionContextRevision description: Description of the chosen repository and revision
type VersionContextRevision struct { /* all structs must go */ }

// Webhooks description: DEPRECATED: Switch to "plugin.webhooks"
type Webhooks struct { /* all structs must go */ }
